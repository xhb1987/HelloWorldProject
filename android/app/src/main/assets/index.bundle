var __DEV__=true,__BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),process=this.process||{};process.env=process.env||{};process.env.NODE_ENV='development';
(function (global) {
  'use strict';

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  global.require = _require;
  global.__d = define;
  var modules = Object.create(null);

  if (__DEV__) {
    var verboseNamesToModuleIds = Object.create(null);
  }

  function define(factory, moduleId, dependencyMap) {
    if (moduleId in modules) {
      if (__DEV__) {
        var inverseDependencies = arguments[4];

        if (inverseDependencies) {
          global.__accept(moduleId, factory, dependencyMap, inverseDependencies);
        } else {
          console.warn("Trying to define twice module ID " + moduleId + " in the same bundle");
        }
      }

      return;
    }

    modules[moduleId] = {
      dependencyMap: dependencyMap,
      exports: undefined,
      factory: factory,
      hasError: false,
      isInitialized: false
    };

    if (__DEV__) {
      modules[moduleId].hot = createHotReloadingObject();
      var verboseName = arguments[3];

      if (verboseName) {
        modules[moduleId].verboseName = verboseName;
        verboseNamesToModuleIds[verboseName] = moduleId;
      }
    }
  }

  function _require(moduleId) {
    if (__DEV__ && typeof moduleId === 'string') {
      var verboseName = moduleId;
      moduleId = verboseNamesToModuleIds[verboseName];

      if (moduleId == null) {
        throw new Error("Unknown named module: '" + verboseName + "'");
      } else {
        console.warn("Requiring module '" + verboseName + "' by name is only supported for " + 'debugging purposes and will BREAK IN PRODUCTION!');
      }
    }

    var moduleIdReallyIsNumber = moduleId;
    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue = void 0;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = ~0 >>> ID_MASK_SHIFT;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }

  _require.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return value.segmentId << ID_MASK_SHIFT + value.localId;
  }

  _require.packModuleId = packModuleId;

  function loadModuleImplementation(moduleId, module) {
    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId);

      var segmentId = _unpackModuleId.segmentId,
          localId = _unpackModuleId.localId;
      nativeRequire(localId, segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    if (__DEV__) {
      var Systrace = _require.Systrace;
    }

    module.isInitialized = true;
    var exports = module.exports = {};
    var _module = module;
    var factory = _module.factory,
        dependencyMap = _module.dependencyMap;

    try {
      if (__DEV__) {
        Systrace.beginEvent('JS_require_' + (module.verboseName || moduleId));
      }

      var moduleObject = {
        exports: exports
      };

      if (__DEV__ && module.hot) {
        moduleObject.hot = module.hot;
      }

      factory(global, _require, moduleObject, exports, dependencyMap);

      if (!__DEV__) {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }

      if (__DEV__) {
        Systrace.endEvent();
      }

      return module.exports = moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.exports = undefined;
      throw e;
    }
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';

    if (__DEV__) {
      message += 'If you are sure the module is there, try restarting Metro Bundler. ' + 'You may also want to run `yarn`, or `npm install` (depending on your environment).';
    }

    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = __DEV__ && modules[id] && modules[id].verboseName || id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }

  if (__DEV__) {
    _require.Systrace = {
      beginEvent: function beginEvent() {},
      endEvent: function endEvent() {}
    };

    _require.getModules = function () {
      return modules;
    };

    var createHotReloadingObject = function createHotReloadingObject() {
      var hot = {
        acceptCallback: null,
        accept: function accept(callback) {
          hot.acceptCallback = callback;
        },
        disposeCallback: null,
        dispose: function dispose(callback) {
          hot.disposeCallback = callback;
        }
      };
      return hot;
    };

    var acceptAll = function acceptAll(dependentModules, inverseDependencies, patchedModules) {
      if (!dependentModules || dependentModules.length === 0) {
        return true;
      }

      var notAccepted = dependentModules.filter(function (module) {
        return !accept(module, undefined, undefined, inverseDependencies, patchedModules);
      });
      var parents = [];

      for (var i = 0; i < notAccepted.length; i++) {
        if (inverseDependencies[notAccepted[i]].length === 0) {
          return false;
        }

        parents.push.apply(parents, _toConsumableArray(inverseDependencies[notAccepted[i]]));
      }

      return parents.length == 0;
    };

    var accept = function accept(id, factory, dependencyMap, inverseDependencies) {
      var patchedModules = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

      if (id in patchedModules) {
        return true;
      }

      patchedModules[id] = true;
      var mod = modules[id];

      if (!mod && factory) {
        return true;
      }

      var hot = mod.hot;

      if (!hot) {
        console.warn('Cannot accept module because Hot Module Replacement ' + 'API was not installed.');
        return false;
      }

      if (hot.disposeCallback) {
        try {
          hot.disposeCallback();
        } catch (error) {
          console.error("Error while calling dispose handler for module " + id + ": ", error);
        }
      }

      if (factory) {
        mod.factory = factory;
      }

      if (dependencyMap) {
        mod.dependencyMap = dependencyMap;
      }

      mod.hasError = false;
      mod.isInitialized = false;

      _require(id);

      if (hot.acceptCallback) {
        try {
          hot.acceptCallback();
          return true;
        } catch (error) {
          console.error("Error while calling accept handler for module " + id + ": ", error);
        }
      }

      if (!inverseDependencies) {
        throw new Error('Undefined `inverseDependencies`');
      }

      return acceptAll(inverseDependencies[id], inverseDependencies, patchedModules);
    };

    global.__accept = accept;
  }
})(this);
(function (global) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  Object.assign = function (target, sources) {
    if (__DEV__) {
      if (target == null) {
        throw new TypeError('Object.assign target cannot be null or undefined');
      }

      if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== 'object' && typeof target !== 'function') {
        throw new TypeError('In this environment the target of assign MUST be an object. ' + 'This error is a performance optimization and not spec compliant.');
      }
    }

    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];

      if (nextSource == null) {
        continue;
      }

      if (__DEV__) {
        if ((typeof nextSource === "undefined" ? "undefined" : _typeof(nextSource)) !== 'object' && typeof nextSource !== 'function') {
          throw new TypeError('In this environment the sources for assign MUST be an object. ' + 'This error is a performance optimization and not spec compliant.');
        }
      }

      for (var key in nextSource) {
        if (__DEV__) {
          var hasOwnProperty = Object.prototype.hasOwnProperty;

          if (!hasOwnProperty.call(nextSource, key)) {
            throw new TypeError('One of the sources for assign has an enumerable key on the ' + 'prototype chain. Are you trying to assign a prototype property? ' + 'We don\'t allow it, as this is an edge case that we do not support. ' + 'This error is a performance optimization and not spec compliant.');
          }
        }

        target[key] = nextSource[key];
      }
    }

    return target;
  };
})(this);
(function (global) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var inspect = function () {
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }

    function stylizeNoColor(str, styleType) {
      return str;
    }

    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }

    function formatValue(ctx, value, recurseTimes) {
      var primitive = formatPrimitive(ctx, value);

      if (primitive) {
        return primitive;
      }

      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }

        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }

        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }

        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '',
          array = false,
          braces = ['{', '}'];

      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);
      var output;

      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }

    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }

      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      if (isNull(value)) return ctx.stylize('null', 'null');
    }

    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }

    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];

      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }

      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }

    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };

      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }

      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }

      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }

          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }

      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }

        name = JSON.stringify('' + key);

        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }

    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isSymbol(arg) {
      return (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'symbol';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'symbol' || typeof arg === 'undefined';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    return inspect;
  }();

  var OBJECT_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';
  var INSPECTOR_FRAMES_TO_SKIP = __DEV__ ? 2 : 1;

  if (global.nativeLoggingHook) {
    var getNativeLogFunction = function getNativeLogFunction(level) {
      return function () {
        var str = void 0;

        if (arguments.length === 1 && typeof arguments[0] === 'string') {
          str = arguments[0];
        } else {
          str = Array.prototype.map.call(arguments, function (arg) {
            return inspect(arg, {
              depth: 10
            });
          }).join(', ');
        }

        var logLevel = level;

        if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
          logLevel = LOG_LEVELS.warn;
        }

        if (global.__inspectorLog) {
          global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
        }

        global.nativeLoggingHook(str, logLevel);
      };
    };

    var repeat = function repeat(element, n) {
      return Array.apply(null, Array(n)).map(function () {
        return element;
      });
    };

    var consoleTablePolyfill = function consoleTablePolyfill(rows) {
      if (!Array.isArray(rows)) {
        var data = rows;
        rows = [];

        for (var key in data) {
          if (data.hasOwnProperty(key)) {
            var row = data[key];
            row[OBJECT_COLUMN_NAME] = key;
            rows.push(row);
          }
        }
      }

      if (rows.length === 0) {
        global.nativeLoggingHook('', LOG_LEVELS.info);
        return;
      }

      var columns = Object.keys(rows[0]).sort();
      var stringRows = [];
      var columnWidths = [];
      columns.forEach(function (k, i) {
        columnWidths[i] = k.length;

        for (var j = 0; j < rows.length; j++) {
          var cellStr = (rows[j][k] || '?').toString();
          stringRows[j] = stringRows[j] || [];
          stringRows[j][i] = cellStr;
          columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
        }
      });

      function joinRow(row, space) {
        var cells = row.map(function (cell, i) {
          var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
          return cell + extraSpaces;
        });
        space = space || ' ';
        return cells.join(space + '|' + space);
      }

      var separators = columnWidths.map(function (columnWidth) {
        return repeat('-', columnWidth).join('');
      });
      var separatorRow = joinRow(separators, '-');
      var header = joinRow(columns);
      var table = [header, separatorRow];

      for (var i = 0; i < rows.length; i++) {
        table.push(joinRow(stringRows[i]));
      }

      global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
    };

    var originalConsole = global.console;
    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill
    };

    if (__DEV__ && originalConsole) {
      var descriptor = Object.getOwnPropertyDescriptor(global, 'console');

      if (descriptor) {
        Object.defineProperty(global, 'originalConsole', descriptor);
      }

      Object.keys(console).forEach(function (methodName) {
        var reactNativeMethod = console[methodName];

        if (originalConsole[methodName]) {
          console[methodName] = function () {
            originalConsole[methodName].apply(originalConsole, arguments);
            reactNativeMethod.apply(console, arguments);
          };
        }
      });
    }
  } else if (!global.console) {
    var log = global.print || function consoleLoggingStub() {};

    global.console = {
      error: log,
      info: log,
      log: log,
      warn: log,
      trace: log,
      debug: log,
      table: log
    };
  }
})(this);
(function (global) {
  "use strict";

  var _inGuard = 0;

  var _globalHandler = function onError(e) {
    throw e;
  };

  var ErrorUtils = {
    setGlobalHandler: function setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler: function getGlobalHandler() {
      return _globalHandler;
    },
    reportError: function reportError(error) {
      _globalHandler && _globalHandler(error);
    },
    reportFatalError: function reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard: function applyWithGuard(fun, context, args) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }

      return null;
    },
    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }

      return null;
    },
    inGuard: function inGuard() {
      return _inGuard;
    },
    guard: function guard(fun, name, context) {
      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }

      name = name || fun.name || '<generated guard>';

      function guarded() {
        return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
      }

      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(this);
(function (global) {
  "use strict";

  if (Number.EPSILON === undefined) {
    Object.defineProperty(Number, 'EPSILON', {
      value: Math.pow(2, -52)
    });
  }

  if (Number.MAX_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
      value: Math.pow(2, 53) - 1
    });
  }

  if (Number.MIN_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
      value: -(Math.pow(2, 53) - 1)
    });
  }

  if (!Number.isNaN) {
    var globalIsNaN = global.isNaN;
    Object.defineProperty(Number, 'isNaN', {
      configurable: true,
      enumerable: false,
      value: function isNaN(value) {
        return typeof value === 'number' && globalIsNaN(value);
      },
      writable: true
    });
  }
})(this);
(function (global) {
  "use strict";

  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
      var start = Math.min(Math.max(pos, 0), string.length);
      return string.indexOf(String(search), pos) === start;
    };
  }

  if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var stringLength = string.length;
      var searchString = String(search);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
      var end = Math.min(Math.max(pos, 0), stringLength);
      var start = end - searchString.length;

      if (start < 0) {
        return false;
      }

      return string.lastIndexOf(searchString, start) === start;
    };
  }

  if (!String.prototype.repeat) {
    String.prototype.repeat = function (count) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      count = Number(count) || 0;

      if (count < 0 || count === Infinity) {
        throw RangeError();
      }

      if (count === 1) {
        return string;
      }

      var result = '';

      while (count) {
        if (count & 1) {
          result += string;
        }

        if (count >>= 1) {
          string += string;
        }
      }

      return result;
    };
  }

  if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
      'use strict';

      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > this.length) {
        return false;
      } else {
        return this.indexOf(search, start) !== -1;
      }
    };
  }

  if (!String.prototype.codePointAt) {
    String.prototype.codePointAt = function (position) {
      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var size = string.length;
      var index = position ? Number(position) : 0;

      if (Number.isNaN(index)) {
        index = 0;
      }

      if (index < 0 || index >= size) {
        return undefined;
      }

      var first = string.charCodeAt(index);
      var second;

      if (first >= 0xd800 && first <= 0xdbff && size > index + 1) {
          second = string.charCodeAt(index + 1);

          if (second >= 0xdc00 && second <= 0xdfff) {
            return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
          }
        }

      return first;
    };
  }
})(this);
(function (global) {
  "use strict";

  function findIndex(predicate, context) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }

    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }

    var list = Object(this);
    var length = list.length >>> 0;

    for (var i = 0; i < length; i++) {
      if (predicate.call(context, list[i], i, list)) {
        return i;
      }
    }

    return -1;
  }

  if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: findIndex
    });
  }

  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(predicate, context) {
        if (this == null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }

        var index = findIndex.call(this, predicate, context);
        return index === -1 ? undefined : this[index];
      }
    });
  }

  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(searchElement) {
        var O = Object(this);
        var len = parseInt(O.length) || 0;

        if (len === 0) {
          return false;
        }

        var n = parseInt(arguments[1]) || 0;
        var k;

        if (n >= 0) {
          k = n;
        } else {
          k = len + n;

          if (k < 0) {
            k = 0;
          }
        }

        var currentElement;

        while (k < len) {
          currentElement = O[k];

          if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
            return true;
          }

          k++;
        }

        return false;
      }
    });
  }
})(this);
(function (global) {
  "use strict";

  if (!Array.from) {
    Array.from = function (arrayLike) {
      if (arrayLike == null) {
        throw new TypeError('Object is null or undefined');
      }

      var mapFn = arguments[1];
      var thisArg = arguments[2];
      var C = this;
      var items = Object(arrayLike);
      var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';
      var mapping = typeof mapFn === 'function';
      var usingIterator = typeof items[symbolIterator] === 'function';
      var key = 0;
      var ret;
      var value;

      if (usingIterator) {
        ret = typeof C === 'function' ? new C() : [];
        var it = items[symbolIterator]();
        var next;

        while (!(next = it.next()).done) {
          value = next.value;

          if (mapping) {
            value = mapFn.call(thisArg, value, key);
          }

          ret[key] = value;
          key += 1;
        }

        ret.length = key;
        return ret;
      }

      var len = items.length;

      if (isNaN(len) || len < 0) {
        len = 0;
      }

      ret = typeof C === 'function' ? new C(len) : new Array(len);

      while (key < len) {
        value = items[key];

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    };
  }
})(this);
(function (global) {
  "use strict";

  (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    if (typeof Object.entries !== 'function') {
      Object.entries = function (object) {
        if (object == null) {
          throw new TypeError('Object.entries called on non-object');
        }

        var entries = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }

        return entries;
      };
    }

    if (typeof Object.values !== 'function') {
      Object.values = function (object) {
        if (object == null) {
          throw new TypeError('Object.values called on non-object');
        }

        var values = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }

        return values;
      };
    }
  })();
})(this);
(function (global) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var babelHelpers = global.babelHelpers = {};
  babelHelpers.typeof = typeof Symbol === "function" && _typeof(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
  };

  babelHelpers.createRawReactElement = function () {
    var REACT_ELEMENT_TYPE = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 0xeac7;
    return function createRawReactElement(type, key, props) {
      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key,
        ref: null,
        props: props,
        _owner: null
      };
    };
  }();

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineEnumerableProperties = function (obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ('value' in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    return obj;
  };

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers._extends = babelHelpers.extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  babelHelpers.get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers.interopRequireDefault = function (obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  };

  babelHelpers.interopRequireWildcard = function (obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  };

  babelHelpers.objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers.slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  babelHelpers.taggedTemplateLiteral = function (strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  };

  babelHelpers.toArray = function (arr) {
    return Array.isArray(arr) ? arr : Array.from(arr);
  };

  babelHelpers.toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  };
})(this);
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _root = _require(_dependencyMap[0], "./src/root");

  var app = new _root.App();
  exports.default = app;
},11,[12],"index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.WebRoot = exports.Root = exports.App = undefined;
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/root.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactRedux = _require(_dependencyMap[1], "react-redux");

    var _reactNativeNavigation = _require(_dependencyMap[2], "react-native-navigation");

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _store = _require(_dependencyMap[4], "./store");

    var _store2 = _interopRequireDefault(_store);

    var _index = _require(_dependencyMap[5], "./screen/index");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Icon = _require(_dependencyMap[6], 'react-native-vector-icons/Ionicons');

    var store = (0, _store2.default)();
    (0, _index.registerScreens)(store, _reactRedux.Provider);
    var settingsIcon;
    var settingsOutlineIcon;
    var peopleIcon;
    var iosNavigateOutline;
    var iosNavigate;

    var App = exports.App = function () {
        function App() {
            var _this = this;

            _classCallCheck(this, App);

            this.populateIcons = function () {
                return new Promise(function (resolve, reject) {
                    Promise.all([Icon.getImageSource('ios-settings', 35), Icon.getImageSource('ios-settings-outline', 35), Icon.getImageSource('ios-people', 35), Icon.getImageSource('ios-navigate-outline', 35), Icon.getImageSource('ios-navigate', 35)]).then(function (values) {
                        settingsIcon = values[0];
                        settingsOutlineIcon = values[1];
                        peopleIcon = values[2];
                        iosNavigateOutline = values[3];
                        iosNavigate = values[4];
                        resolve(true);
                    });
                });
            };

            this.populateIcons().then(function () {
                _this.startApp();
            });
        }

        _createClass(App, [{
            key: "startApp",
            value: function startApp() {
                var tabs = [{
                    label: '首页',
                    screen: 'screen.Home',
                    icon: settingsIcon,
                    title: '首页',
                    iconInsets: {
                        top: 6,
                        left: 0,
                        bottom: 10,
                        right: 0
                    }
                }, {
                    label: '广场',
                    screen: 'screen.Square',
                    icon: settingsIcon,
                    title: '广场',
                    iconInsets: {
                        top: 6,
                        left: 0,
                        bottom: 10,
                        right: 0
                    }
                }, {
                    label: '我的',
                    screen: 'screen.Profile',
                    icon: peopleIcon,
                    title: '我的',
                    iconInsets: {
                        top: 6,
                        left: 0,
                        bottom: 10,
                        right: 0
                    }
                }];

                _reactNativeNavigation.Navigation.startTabBasedApp({
                    tabs: tabs,
                    tabsStyle: {
                        tabFontFamilay: 'BioRhyme-Bold',
                        tabBarTextFontSize: 12,
                        tabBarSelectedButtonColor: '#ff7878',
                        tabBarLabelColor: 'black',
                        tabBarSelectedLabelColor: '#ff7878'
                    },
                    animationType: 'slide-down'
                });
            }
        }]);

        return App;
    }();

    var Root = exports.Root = function Root() {
        if (_reactNative.Platform.OS === 'ios') {}
    };

    var WebRoot = exports.WebRoot = function WebRoot() {
        return _react2.default.createElement(
            _reactRedux.Provider,
            {
                store: store,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 106
                }
            },
            _react2.default.createElement(App, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 107
                }
            })
        );
    };
},12,[13,23,62,65,531,583,733],"src/root.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _require(_dependencyMap[0], './cjs/react.production.min.js');
  } else {
    module.exports = _require(_dependencyMap[1], './cjs/react.development.js');
  }
},13,[14,18],"node_modules/react/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  /** @license React v16.3.1
   * react.production.min.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var m = _require(_dependencyMap[0], "object-assign"),
      n = _require(_dependencyMap[1], "fbjs/lib/emptyObject"),
      p = _require(_dependencyMap[2], "fbjs/lib/emptyFunction"),
      q = "function" === typeof Symbol && Symbol["for"],
      r = q ? Symbol["for"]("react.element") : 60103,
      t = q ? Symbol["for"]("react.portal") : 60106,
      u = q ? Symbol["for"]("react.fragment") : 60107,
      v = q ? Symbol["for"]("react.strict_mode") : 60108,
      w = q ? Symbol["for"]("react.provider") : 60109,
      x = q ? Symbol["for"]("react.context") : 60110,
      y = q ? Symbol["for"]("react.async_mode") : 60111,
      z = q ? Symbol["for"]("react.forward_ref") : 60112,
      A = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function B(a) {
    for (var b = arguments.length - 1, e = "Minified React error #" + a + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d" + a, c = 0; c < b; c++) {
      e += "\x26args[]\x3d" + encodeURIComponent(arguments[c + 1]);
    }

    b = Error(e + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");
    b.name = "Invariant Violation";
    b.framesToPop = 1;
    throw b;
  }

  var C = {
    isMounted: function isMounted() {
      return !1;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
  };

  function D(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || C;
  }

  D.prototype.isReactComponent = {};

  D.prototype.setState = function (a, b) {
    "object" !== (typeof a === "undefined" ? "undefined" : _typeof(a)) && "function" !== typeof a && null != a ? B("85") : void 0;
    this.updater.enqueueSetState(this, a, b, "setState");
  };

  D.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };

  function E() {}

  E.prototype = D.prototype;

  function F(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = n;
    this.updater = e || C;
  }

  var G = F.prototype = new E();
  G.constructor = F;
  m(G, D.prototype);
  G.isPureReactComponent = !0;
  var H = {
    current: null
  },
      I = Object.prototype.hasOwnProperty,
      J = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
  };

  function K(a, b, e) {
    var c = void 0,
        d = {},
        g = null,
        h = null;
    if (null != b) for (c in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (g = "" + b.key), b) {
      I.call(b, c) && !J.hasOwnProperty(c) && (d[c] = b[c]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;else if (1 < f) {
      for (var k = Array(f), l = 0; l < f; l++) {
        k[l] = arguments[l + 2];
      }

      d.children = k;
    }
    if (a && a.defaultProps) for (c in f = a.defaultProps, f) {
      void 0 === d[c] && (d[c] = f[c]);
    }
    return {
      $$typeof: r,
      type: a,
      key: g,
      ref: h,
      props: d,
      _owner: H.current
    };
  }

  function L(a) {
    return "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && a.$$typeof === r;
  }

  function escape(a) {
    var b = {
      "\x3d": "\x3d0",
      ":": "\x3d2"
    };
    return "$" + ("" + a).replace(/[=:]/g, function (a) {
      return b[a];
    });
  }

  var M = /\/+/g,
      N = [];

  function O(a, b, e, c) {
    if (N.length) {
      var d = N.pop();
      d.result = a;
      d.keyPrefix = b;
      d.func = e;
      d.context = c;
      d.count = 0;
      return d;
    }

    return {
      result: a,
      keyPrefix: b,
      func: e,
      context: c,
      count: 0
    };
  }

  function P(a) {
    a.result = null;
    a.keyPrefix = null;
    a.func = null;
    a.context = null;
    a.count = 0;
    10 > N.length && N.push(a);
  }

  function Q(a, b, e, c) {
    var d = typeof a === "undefined" ? "undefined" : _typeof(a);
    if ("undefined" === d || "boolean" === d) a = null;
    var g = !1;
    if (null === a) g = !0;else switch (d) {
      case "string":
      case "number":
        g = !0;
        break;

      case "object":
        switch (a.$$typeof) {
          case r:
          case t:
            g = !0;
        }

    }
    if (g) return e(c, a, "" === b ? "." + R(a, 0) : b), 1;
    g = 0;
    b = "" === b ? "." : b + ":";
    if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
      d = a[h];
      var f = b + R(d, h);
      g += Q(d, f, e, c);
    } else if (null === a || "undefined" === typeof a ? f = null : (f = A && a[A] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), h = 0; !(d = a.next()).done;) {
      d = d.value, f = b + R(d, h++), g += Q(d, f, e, c);
    } else "object" === d && (e = "" + a, B("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));
    return g;
  }

  function R(a, b) {
    return "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && null != a.key ? escape(a.key) : b.toString(36);
  }

  function S(a, b) {
    a.func.call(a.context, b, a.count++);
  }

  function T(a, b, e) {
    var c = a.result,
        d = a.keyPrefix;
    a = a.func.call(a.context, b, a.count++);
    Array.isArray(a) ? U(a, c, e, p.thatReturnsArgument) : null != a && (L(a) && (b = d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(M, "$\x26/") + "/") + e, a = {
      $$typeof: r,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    }), c.push(a));
  }

  function U(a, b, e, c, d) {
    var g = "";
    null != e && (g = ("" + e).replace(M, "$\x26/") + "/");
    b = O(b, g, c, d);
    null == a || Q(a, "", T, b);
    P(b);
  }

  var V = {
    Children: {
      map: function map(a, b, e) {
        if (null == a) return a;
        var c = [];
        U(a, c, null, b, e);
        return c;
      },
      forEach: function forEach(a, b, e) {
        if (null == a) return a;
        b = O(null, null, b, e);
        null == a || Q(a, "", S, b);
        P(b);
      },
      count: function count(a) {
        return null == a ? 0 : Q(a, "", p.thatReturnsNull, null);
      },
      toArray: function toArray(a) {
        var b = [];
        U(a, b, null, p.thatReturnsArgument);
        return b;
      },
      only: function only(a) {
        L(a) ? void 0 : B("143");
        return a;
      }
    },
    createRef: function createRef() {
      return {
        current: null
      };
    },
    Component: D,
    PureComponent: F,
    createContext: function createContext(a, b) {
      void 0 === b && (b = null);
      a = {
        $$typeof: x,
        _calculateChangedBits: b,
        _defaultValue: a,
        _currentValue: a,
        _changedBits: 0,
        Provider: null,
        Consumer: null
      };
      a.Provider = {
        $$typeof: w,
        _context: a
      };
      return a.Consumer = a;
    },
    forwardRef: function forwardRef(a) {
      return {
        $$typeof: z,
        render: a
      };
    },
    Fragment: u,
    StrictMode: v,
    unstable_AsyncMode: y,
    createElement: K,
    cloneElement: function cloneElement(a, b, e) {
      var c = void 0,
          d = m({}, a.props),
          g = a.key,
          h = a.ref,
          f = a._owner;

      if (null != b) {
        void 0 !== b.ref && (h = b.ref, f = H.current);
        void 0 !== b.key && (g = "" + b.key);
        var k = void 0;
        a.type && a.type.defaultProps && (k = a.type.defaultProps);

        for (c in b) {
          I.call(b, c) && !J.hasOwnProperty(c) && (d[c] = void 0 === b[c] && void 0 !== k ? k[c] : b[c]);
        }
      }

      c = arguments.length - 2;
      if (1 === c) d.children = e;else if (1 < c) {
        k = Array(c);

        for (var l = 0; l < c; l++) {
          k[l] = arguments[l + 2];
        }

        d.children = k;
      }
      return {
        $$typeof: r,
        type: a.type,
        key: g,
        ref: h,
        props: d,
        _owner: f
      };
    },
    createFactory: function createFactory(a) {
      var b = K.bind(null, a);
      b.type = a;
      return b;
    },
    isValidElement: L,
    version: "16.3.1",
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      ReactCurrentOwner: H,
      assign: m
    }
  },
      W = Object.freeze({
    default: V
  }),
      X = W && V || W;
  module.exports = X["default"] ? X["default"] : X;
},14,[15,16,17],"node_modules/react/cjs/react.production.min.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	/*
 object-assign
 (c) Sindre Sorhus
 @license MIT
 */'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			var test1 = new String('abc');
			test1[5] = 'de';

			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			var test2 = {};

			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}

			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});

			if (order2.join('') !== '0123456789') {
				return false;
			}

			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});

			if (Object.keys(_extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);

				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
},15,[],"node_modules/object-assign/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var emptyObject = {};

  if (process.env.NODE_ENV !== 'production') {
    Object.freeze(emptyObject);
  }

  module.exports = emptyObject;
},16,[],"node_modules/fbjs/lib/emptyObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},17,[],"node_modules/fbjs/lib/emptyFunction.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  /** @license React v16.3.1
   * react.development.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var _assign = _require(_dependencyMap[0], 'object-assign');

      var emptyObject = _require(_dependencyMap[1], 'fbjs/lib/emptyObject');

      var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

      var warning = _require(_dependencyMap[3], 'fbjs/lib/warning');

      var emptyFunction = _require(_dependencyMap[4], 'fbjs/lib/emptyFunction');

      var checkPropTypes = _require(_dependencyMap[5], 'prop-types/checkPropTypes');

      var ReactVersion = '16.3.1';
      var hasSymbol = typeof Symbol === 'function' && Symbol['for'];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
      var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
      var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol['for']('react.strict_mode') : 0xeacc;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol['for']('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol['for']('react.context') : 0xeace;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol['for']('react.async_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol['for']('react.forward_ref') : 0xead0;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
      var FAUX_ITERATOR_SYMBOL = '@@iterator';

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable === 'undefined') {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }

        return null;
      }

      var lowPriorityWarning = function lowPriorityWarning() {};

      {
        var printWarning = function printWarning(format) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });

          if (typeof console !== 'undefined') {
            console.warn(message);
          }

          try {
            throw new Error(message);
          } catch (x) {}
        };

        lowPriorityWarning = function lowPriorityWarning(condition, format) {
          if (format === undefined) {
            throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
          }

          if (!condition) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }

            printWarning.apply(undefined, [format].concat(args));
          }
        };
      }
      var lowPriorityWarning$1 = lowPriorityWarning;
      var didWarnStateUpdateForUnmountedComponent = {};

      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
          var warningKey = componentName + '.' + callerName;

          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }

          warning(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }

      var ReactNoopUpdateQueue = {
        isMounted: function isMounted(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
          warnNoop(publicInstance, 'forceUpdate');
        },
        enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, 'replaceState');
        },
        enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, 'setState');
        }
      };

      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      Component.prototype.isReactComponent = {};

      Component.prototype.setState = function (partialState, callback) {
        !((typeof partialState === "undefined" ? "undefined" : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
      };

      Component.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
      };

      {
        var deprecatedAPIs = {
          isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
          replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
        };

        var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function get() {
              lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
              return undefined;
            }
          });
        };

        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }

      function ComponentDummy() {}

      ComponentDummy.prototype = Component.prototype;

      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;

      _assign(pureComponentPrototype, Component.prototype);

      pureComponentPrototype.isPureReactComponent = true;

      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }

      var ReactCurrentOwner = {
        current: null
      };
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown = void 0;
      var specialPropRefWarningShown = void 0;

      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }

      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }

      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function warnAboutAccessingKey() {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };

        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }

      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function warnAboutAccessingRef() {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        };

        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }

      var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type: type,
          key: key,
          ref: ref,
          props: props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });

          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };

      function createElement(type, config, children) {
        var propName = void 0;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }

        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;

          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }

        {
          if (key || ref) {
            if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
              var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }

              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }

      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }

      function cloneElement(element, config, children) {
        var propName = void 0;

        var props = _assign({}, element.props);

        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          var defaultProps = void 0;

          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          props.children = childArray;
        }

        return ReactElement(element.type, key, ref, self, source, owner, props);
      }

      function isValidElement(object) {
        return (typeof object === "undefined" ? "undefined" : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      var ReactDebugCurrentFrame = {};
      {
        ReactDebugCurrentFrame.getCurrentStack = null;

        ReactDebugCurrentFrame.getStackAddendum = function () {
          var impl = ReactDebugCurrentFrame.getCurrentStack;

          if (impl) {
            return impl();
          }

          return null;
        };
      }
      var SEPARATOR = '.';
      var SUBSEPARATOR = ':';

      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          '=': '=0',
          ':': '=2'
        };
        var escapedString = ('' + key).replace(escapeRegex, function (match) {
          return escaperLookup[match];
        });
        return '$' + escapedString;
      }

      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;

      function escapeUserProvidedKey(text) {
        return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
      }

      var POOL_SIZE = 10;
      var traverseContextPool = [];

      function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
        if (traverseContextPool.length) {
          var traverseContext = traverseContextPool.pop();
          traverseContext.result = mapResult;
          traverseContext.keyPrefix = keyPrefix;
          traverseContext.func = mapFunction;
          traverseContext.context = mapContext;
          traverseContext.count = 0;
          return traverseContext;
        } else {
          return {
            result: mapResult,
            keyPrefix: keyPrefix,
            func: mapFunction,
            context: mapContext,
            count: 0
          };
        }
      }

      function releaseTraverseContext(traverseContext) {
        traverseContext.result = null;
        traverseContext.keyPrefix = null;
        traverseContext.func = null;
        traverseContext.context = null;
        traverseContext.count = 0;

        if (traverseContextPool.length < POOL_SIZE) {
          traverseContextPool.push(traverseContext);
        }
      }

      function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
        var type = typeof children === "undefined" ? "undefined" : _typeof(children);

        if (type === 'undefined' || type === 'boolean') {
          children = null;
        }

        var invokeCallback = false;

        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case 'string':
            case 'number':
              invokeCallback = true;
              break;

            case 'object':
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }

          }
        }

        if (invokeCallback) {
          callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
          return 1;
        }

        var child = void 0;
        var nextName = void 0;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getComponentKey(child, i);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          var iteratorFn = getIteratorFn(children);

          if (typeof iteratorFn === 'function') {
            {
              if (iteratorFn === children.entries) {
                warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(children);
            var step = void 0;
            var ii = 0;

            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getComponentKey(child, ii++);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else if (type === 'object') {
            var addendum = '';
            {
              addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
            }
            var childrenString = '' + children;
            invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
          }
        }

        return subtreeCount;
      }

      function traverseAllChildren(children, callback, traverseContext) {
        if (children == null) {
          return 0;
        }

        return traverseAllChildrenImpl(children, '', callback, traverseContext);
      }

      function getComponentKey(component, index) {
        if ((typeof component === "undefined" ? "undefined" : _typeof(component)) === 'object' && component !== null && component.key != null) {
          return escape(component.key);
        }

        return index.toString(36);
      }

      function forEachSingleChild(bookKeeping, child, name) {
        var func = bookKeeping.func,
            context = bookKeeping.context;
        func.call(context, child, bookKeeping.count++);
      }

      function forEachChildren(children, forEachFunc, forEachContext) {
        if (children == null) {
          return children;
        }

        var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
        traverseAllChildren(children, forEachSingleChild, traverseContext);
        releaseTraverseContext(traverseContext);
      }

      function mapSingleChildIntoContext(bookKeeping, child, childKey) {
        var result = bookKeeping.result,
            keyPrefix = bookKeeping.keyPrefix,
            func = bookKeeping.func,
            context = bookKeeping.context;
        var mappedChild = func.call(context, child, bookKeeping.count++);

        if (Array.isArray(mappedChild)) {
          mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
          }

          result.push(mappedChild);
        }
      }

      function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
        var escapedPrefix = '';

        if (prefix != null) {
          escapedPrefix = escapeUserProvidedKey(prefix) + '/';
        }

        var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
        traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
        releaseTraverseContext(traverseContext);
      }

      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }

        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, func, context);
        return result;
      }

      function countChildren(children, context) {
        return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
      }

      function toArray(children) {
        var result = [];
        mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
        return result;
      }

      function onlyChild(children) {
        !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
        return children;
      }

      function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) {
          calculateChangedBits = null;
        } else {
          {
            warning(calculateChangedBits === null || typeof calculateChangedBits === 'function', 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
          }
        }

        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _calculateChangedBits: calculateChangedBits,
          _defaultValue: defaultValue,
          _currentValue: defaultValue,
          _changedBits: 0,
          Provider: null,
          Consumer: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        context.Consumer = context;
        {
          context._currentRenderer = null;
        }
        return context;
      }

      function forwardRef(render) {
        {
          warning(typeof render === 'function', 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render === "undefined" ? "undefined" : _typeof(render));
        }
        return {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render: render
        };
      }

      var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
        return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
      };

      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_ASYNC_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || (typeof type === "undefined" ? "undefined" : _typeof(type)) === 'object' && type !== null && (type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
      }

      function getComponentName(fiber) {
        var type = fiber.type;

        if (typeof type === 'function') {
          return type.displayName || type.name;
        }

        if (typeof type === 'string') {
          return type;
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return 'ReactFragment';

          case REACT_PORTAL_TYPE:
            return 'ReactPortal';

          case REACT_CALL_TYPE:
            return 'ReactCall';

          case REACT_RETURN_TYPE:
            return 'ReactReturn';
        }

        return null;
      }

      var currentlyValidatingElement = void 0;
      var propTypesMisspellWarningShown = void 0;

      var getDisplayName = function getDisplayName() {};

      var getStackAddendum = function getStackAddendum() {};

      {
        currentlyValidatingElement = null;
        propTypesMisspellWarningShown = false;

        getDisplayName = function getDisplayName(element) {
          if (element == null) {
            return '#empty';
          } else if (typeof element === 'string' || typeof element === 'number') {
            return '#text';
          } else if (typeof element.type === 'string') {
            return element.type;
          } else if (element.type === REACT_FRAGMENT_TYPE) {
            return 'React.Fragment';
          } else {
            return element.type.displayName || element.type.name || 'Unknown';
          }
        };

        getStackAddendum = function getStackAddendum() {
          var stack = '';

          if (currentlyValidatingElement) {
            var name = getDisplayName(currentlyValidatingElement);
            var owner = currentlyValidatingElement._owner;
            stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
          }

          stack += ReactDebugCurrentFrame.getStackAddendum() || '';
          return stack;
        };
      }

      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentName(ReactCurrentOwner.current);

          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }

        return '';
      }

      function getSourceInfoErrorAddendum(elementProps) {
        if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
          var source = elementProps.__source;
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }

        return '';
      }

      var ownerHasKeyUseWarning = {};

      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();

        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

          if (parentName) {
            info = '\n\nCheck the top-level render call using <' + parentName + '>.';
          }
        }

        return info;
      }

      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }

        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';

        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
        }

        currentlyValidatingElement = element;
        {
          warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
        }
        currentlyValidatingElement = null;
      }

      function validateChildKeys(node, parentType) {
        if ((typeof node === "undefined" ? "undefined" : _typeof(node)) !== 'object') {
          return;
        }

        if (Array.isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];

            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);

          if (typeof iteratorFn === 'function') {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step = void 0;

              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }

      function validatePropTypes(element) {
        var componentClass = element.type;

        if (typeof componentClass !== 'function') {
          return;
        }

        var name = componentClass.displayName || componentClass.name;
        var propTypes = componentClass.propTypes;

        if (propTypes) {
          currentlyValidatingElement = element;
          checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
          currentlyValidatingElement = null;
        } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
        }

        if (typeof componentClass.getDefaultProps === 'function') {
          warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }

      function validateFragmentProps(fragment) {
        currentlyValidatingElement = fragment;
        var keys = Object.keys(fragment.props);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];

          if (key !== 'children' && key !== 'key') {
            warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
            break;
          }
        }

        if (fragment.ref !== null) {
          warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
        }

        currentlyValidatingElement = null;
      }

      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);

        if (!validType) {
          var info = '';

          if (type === undefined || (typeof type === "undefined" ? "undefined" : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }

          var sourceInfo = getSourceInfoErrorAddendum(props);

          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }

          info += getStackAddendum() || '';
          var typeString = void 0;

          if (type === null) {
            typeString = 'null';
          } else if (Array.isArray(type)) {
            typeString = 'array';
          } else {
            typeString = typeof type === "undefined" ? "undefined" : _typeof(type);
          }

          warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }

        var element = createElement.apply(this, arguments);

        if (element == null) {
          return element;
        }

        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }

        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }

        return element;
      }

      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function get() {
              lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }

      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);

        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }

        validatePropTypes(newElement);
        return newElement;
      }

      var React = {
        Children: {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray,
          only: onlyChild
        },
        createRef: createRef,
        Component: Component,
        PureComponent: PureComponent,
        createContext: createContext,
        forwardRef: forwardRef,
        Fragment: REACT_FRAGMENT_TYPE,
        StrictMode: REACT_STRICT_MODE_TYPE,
        unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,
        createElement: createElementWithValidation,
        cloneElement: cloneElementWithValidation,
        createFactory: createFactoryWithValidation,
        isValidElement: isValidElement,
        version: ReactVersion,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          ReactCurrentOwner: ReactCurrentOwner,
          assign: _assign
        }
      };
      {
        _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
          ReactDebugCurrentFrame: ReactDebugCurrentFrame,
          ReactComponentTreeHook: {}
        });
      }
      var React$2 = Object.freeze({
        default: React
      });
      var React$3 = React$2 && React || React$2;
      var react = React$3['default'] ? React$3['default'] : React$3;
      module.exports = react;
    })();
  }
},18,[15,16,19,20,17,21],"node_modules/react/cjs/react.development.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  if (process.env.NODE_ENV !== 'production') {
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
  }

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},19,[],"node_modules/fbjs/lib/invariant.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _require(_dependencyMap[0], './emptyFunction');

  var warning = emptyFunction;

  if (process.env.NODE_ENV !== 'production') {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return;
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  }

  module.exports = warning;
},20,[17],"node_modules/fbjs/lib/warning.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  if (process.env.NODE_ENV !== 'production') {
    var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

    var warning = _require(_dependencyMap[1], 'fbjs/lib/warning');

    var ReactPropTypesSecret = _require(_dependencyMap[2], './lib/ReactPropTypesSecret');

    var loggedTypeFailures = {};
  }

  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (process.env.NODE_ENV !== 'production') {
      for (var typeSpecName in typeSpecs) {
        if (typeSpecs.hasOwnProperty(typeSpecName)) {
          var error;

          try {
            invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, _typeof(typeSpecs[typeSpecName]));
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }

          warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error === "undefined" ? "undefined" : _typeof(error));

          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
          }
        }
      }
    }
  }

  module.exports = checkPropTypes;
},21,[19,20,22],"node_modules/prop-types/checkPropTypes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},22,[],"node_modules/prop-types/lib/ReactPropTypesSecret.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.connect = exports.connectAdvanced = exports.createProvider = exports.Provider = undefined;

  var _Provider = _require(_dependencyMap[0], './components/Provider');

  var _Provider2 = _interopRequireDefault(_Provider);

  var _connectAdvanced = _require(_dependencyMap[1], './components/connectAdvanced');

  var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);

  var _connect = _require(_dependencyMap[2], './connect/connect');

  var _connect2 = _interopRequireDefault(_connect);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.Provider = _Provider2.default;
  exports.createProvider = _Provider.createProvider;
  exports.connectAdvanced = _connectAdvanced2.default;
  exports.connect = _connect2.default;
},23,[24,30,34],"node_modules/react-redux/lib/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  exports.__esModule = true;
  exports.createProvider = createProvider;

  var _react = _require(_dependencyMap[0], 'react');

  var _propTypes = _require(_dependencyMap[1], 'prop-types');

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _PropTypes = _require(_dependencyMap[2], '../utils/PropTypes');

  var _warning = _require(_dependencyMap[3], '../utils/warning');

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var didWarnAboutReceivingStore = false;

  function warnAboutReceivingStore() {
    if (didWarnAboutReceivingStore) {
      return;
    }

    didWarnAboutReceivingStore = true;
    (0, _warning2.default)('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
  }

  function createProvider() {
    var _Provider$childContex;

    var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
    var subKey = arguments[1];
    var subscriptionKey = subKey || storeKey + 'Subscription';

    var Provider = function (_Component) {
      _inherits(Provider, _Component);

      Provider.prototype.getChildContext = function getChildContext() {
        var _ref;

        return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;
      };

      function Provider(props, context) {
        _classCallCheck(this, Provider);

        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

        _this[storeKey] = props.store;
        return _this;
      }

      Provider.prototype.render = function render() {
        return _react.Children.only(this.props.children);
      };

      return Provider;
    }(_react.Component);

    if (process.env.NODE_ENV !== 'production') {
      Provider.prototype.componentWillReceiveProps = function (nextProps) {
        if (this[storeKey] !== nextProps.store) {
          warnAboutReceivingStore();
        }
      };
    }

    Provider.propTypes = {
      store: _PropTypes.storeShape.isRequired,
      children: _propTypes2.default.element.isRequired
    };
    Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = _PropTypes.storeShape.isRequired, _Provider$childContex[subscriptionKey] = _PropTypes.subscriptionShape, _Provider$childContex);
    return Provider;
  }

  exports.default = createProvider();
},24,[13,25,28,29],"node_modules/react-redux/lib/components/Provider.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  if (process.env.NODE_ENV !== 'production') {
    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")('react.element') || 0xeac7;

    var isValidElement = function isValidElement(object) {
      return (typeof object === "undefined" ? "undefined" : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    };

    var throwOnDirectAccess = true;
    module.exports = _require(_dependencyMap[0], './factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
  } else {
    module.exports = _require(_dependencyMap[1], './factoryWithThrowingShims')();
  }
},25,[26,27],"node_modules/prop-types/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var emptyFunction = _require(_dependencyMap[0], 'fbjs/lib/emptyFunction');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var warning = _require(_dependencyMap[2], 'fbjs/lib/warning');

  var assign = _require(_dependencyMap[3], 'object-assign');

  var ReactPropTypesSecret = _require(_dependencyMap[4], './lib/ReactPropTypesSecret');

  var checkPropTypes = _require(_dependencyMap[5], './checkPropTypes');

  module.exports = function (isValidElement, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    var ANONYMOUS = '<<anonymous>>';
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };

    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }

    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }

    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      if (process.env.NODE_ENV !== 'production') {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }

      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
            var cacheKey = componentName + ':' + propName;

            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
              warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }

        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }

            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }

          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunction.thatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }

        var propValue = props[propName];

        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }

        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
        return emptyFunction.thatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }

        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }

        for (var key in propValue) {
          if (propValue.hasOwnProperty(key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

            if (error instanceof Error) {
              return error;
            }
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
        return emptyFunction.thatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (typeof checker !== 'function') {
          warning(false, 'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
          return emptyFunction.thatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];

          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
            return null;
          }
        }

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        for (var key in shapeTypes) {
          var checker = shapeTypes[key];

          if (!checker) {
            continue;
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        var allKeys = assign({}, props[propName], shapeTypes);

        for (var key in allKeys) {
          var checker = shapeTypes[key];

          if (!checker) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue === "undefined" ? "undefined" : _typeof(propValue)) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;

        case 'boolean':
          return !propValue;

        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }

          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);

          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;

            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;

                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;

        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      if (propType === 'symbol') {
        return true;
      }

      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    function getPropType(propValue) {
      var propType = typeof propValue === "undefined" ? "undefined" : _typeof(propValue);

      if (Array.isArray(propValue)) {
        return 'array';
      }

      if (propValue instanceof RegExp) {
        return 'object';
      }

      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }

      return propType;
    }

    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }

      var propType = getPropType(propValue);

      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }

      return propType;
    }

    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);

      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;

        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;

        default:
          return type;
      }
    }

    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }

      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},26,[17,19,20,15,22,21],"node_modules/prop-types/factoryWithTypeCheckers.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _require(_dependencyMap[0], 'fbjs/lib/emptyFunction');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var ReactPropTypesSecret = _require(_dependencyMap[2], './lib/ReactPropTypesSecret');

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim
    };
    ReactPropTypes.checkPropTypes = emptyFunction;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},27,[17,19,22],"node_modules/prop-types/factoryWithThrowingShims.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.storeShape = exports.subscriptionShape = undefined;

  var _propTypes = _require(_dependencyMap[0], 'prop-types');

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var subscriptionShape = exports.subscriptionShape = _propTypes2.default.shape({
    trySubscribe: _propTypes2.default.func.isRequired,
    tryUnsubscribe: _propTypes2.default.func.isRequired,
    notifyNestedSubs: _propTypes2.default.func.isRequired,
    isSubscribed: _propTypes2.default.func.isRequired
  });

  var storeShape = exports.storeShape = _propTypes2.default.shape({
    subscribe: _propTypes2.default.func.isRequired,
    dispatch: _propTypes2.default.func.isRequired,
    getState: _propTypes2.default.func.isRequired
  });
},28,[25],"node_modules/react-redux/lib/utils/PropTypes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.default = warning;

  function warning(message) {
    if (typeof console !== 'undefined' && typeof console.error === 'function') {
      console.error(message);
    }

    try {
      throw new Error(message);
    } catch (e) {}
  }
},29,[],"node_modules/react-redux/lib/utils/warning.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  exports.__esModule = true;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports.default = connectAdvanced;

  var _hoistNonReactStatics = _require(_dependencyMap[0], 'hoist-non-react-statics');

  var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

  var _invariant = _require(_dependencyMap[1], 'invariant');

  var _invariant2 = _interopRequireDefault(_invariant);

  var _react = _require(_dependencyMap[2], 'react');

  var _Subscription = _require(_dependencyMap[3], '../utils/Subscription');

  var _Subscription2 = _interopRequireDefault(_Subscription);

  var _PropTypes = _require(_dependencyMap[4], '../utils/PropTypes');

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  var hotReloadingVersion = 0;
  var dummyState = {};

  function noop() {}

  function makeSelectorStateful(sourceSelector, store) {
    var selector = {
      run: function runComponentSelector(props) {
        try {
          var nextProps = sourceSelector(store.getState(), props);

          if (nextProps !== selector.props || selector.error) {
            selector.shouldComponentUpdate = true;
            selector.props = nextProps;
            selector.error = null;
          }
        } catch (error) {
          selector.shouldComponentUpdate = true;
          selector.error = error;
        }
      }
    };
    return selector;
  }

  function connectAdvanced(selectorFactory) {
    var _contextTypes, _childContextTypes;

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$getDisplayName = _ref.getDisplayName,
        getDisplayName = _ref$getDisplayName === undefined ? function (name) {
      return 'ConnectAdvanced(' + name + ')';
    } : _ref$getDisplayName,
        _ref$methodName = _ref.methodName,
        methodName = _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,
        _ref$renderCountProp = _ref.renderCountProp,
        renderCountProp = _ref$renderCountProp === undefined ? undefined : _ref$renderCountProp,
        _ref$shouldHandleStat = _ref.shouldHandleStateChanges,
        shouldHandleStateChanges = _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,
        _ref$storeKey = _ref.storeKey,
        storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,
        _ref$withRef = _ref.withRef,
        withRef = _ref$withRef === undefined ? false : _ref$withRef,
        connectOptions = _objectWithoutProperties(_ref, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);

    var subscriptionKey = storeKey + 'Subscription';
    var version = hotReloadingVersion++;
    var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = _PropTypes.storeShape, _contextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _contextTypes);
    var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _childContextTypes);
    return function wrapWithConnect(WrappedComponent) {
      (0, _invariant2.default)(typeof WrappedComponent == 'function', 'You must pass a component to the function returned by ' + (methodName + '. Instead received ' + JSON.stringify(WrappedComponent)));
      var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
      var displayName = getDisplayName(wrappedComponentName);

      var selectorFactoryOptions = _extends({}, connectOptions, {
        getDisplayName: getDisplayName,
        methodName: methodName,
        renderCountProp: renderCountProp,
        shouldHandleStateChanges: shouldHandleStateChanges,
        storeKey: storeKey,
        withRef: withRef,
        displayName: displayName,
        wrappedComponentName: wrappedComponentName,
        WrappedComponent: WrappedComponent
      });

      var Connect = function (_Component) {
        _inherits(Connect, _Component);

        function Connect(props, context) {
          _classCallCheck(this, Connect);

          var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

          _this.version = version;
          _this.state = {};
          _this.renderCount = 0;
          _this.store = props[storeKey] || context[storeKey];
          _this.propsMode = Boolean(props[storeKey]);
          _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);
          (0, _invariant2.default)(_this.store, 'Could not find "' + storeKey + '" in either the context or props of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + ('or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".'));

          _this.initSelector();

          _this.initSubscription();

          return _this;
        }

        Connect.prototype.getChildContext = function getChildContext() {
          var _ref2;

          var subscription = this.propsMode ? null : this.subscription;
          return _ref2 = {}, _ref2[subscriptionKey] = subscription || this.context[subscriptionKey], _ref2;
        };

        Connect.prototype.componentDidMount = function componentDidMount() {
          if (!shouldHandleStateChanges) return;
          this.subscription.trySubscribe();
          this.selector.run(this.props);
          if (this.selector.shouldComponentUpdate) this.forceUpdate();
        };

        Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
          this.selector.run(nextProps);
        };

        Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
          return this.selector.shouldComponentUpdate;
        };

        Connect.prototype.componentWillUnmount = function componentWillUnmount() {
          if (this.subscription) this.subscription.tryUnsubscribe();
          this.subscription = null;
          this.notifyNestedSubs = noop;
          this.store = null;
          this.selector.run = noop;
          this.selector.shouldComponentUpdate = false;
        };

        Connect.prototype.getWrappedInstance = function getWrappedInstance() {
          (0, _invariant2.default)(withRef, 'To access the wrapped instance, you need to specify ' + ('{ withRef: true } in the options argument of the ' + methodName + '() call.'));
          return this.wrappedInstance;
        };

        Connect.prototype.setWrappedInstance = function setWrappedInstance(ref) {
          this.wrappedInstance = ref;
        };

        Connect.prototype.initSelector = function initSelector() {
          var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
          this.selector = makeSelectorStateful(sourceSelector, this.store);
          this.selector.run(this.props);
        };

        Connect.prototype.initSubscription = function initSubscription() {
          if (!shouldHandleStateChanges) return;
          var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
          this.subscription = new _Subscription2.default(this.store, parentSub, this.onStateChange.bind(this));
          this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
        };

        Connect.prototype.onStateChange = function onStateChange() {
          this.selector.run(this.props);

          if (!this.selector.shouldComponentUpdate) {
            this.notifyNestedSubs();
          } else {
            this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
            this.setState(dummyState);
          }
        };

        Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
          this.componentDidUpdate = undefined;
          this.notifyNestedSubs();
        };

        Connect.prototype.isSubscribed = function isSubscribed() {
          return Boolean(this.subscription) && this.subscription.isSubscribed();
        };

        Connect.prototype.addExtraProps = function addExtraProps(props) {
          if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props;

          var withExtras = _extends({}, props);

          if (withRef) withExtras.ref = this.setWrappedInstance;
          if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
          if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
          return withExtras;
        };

        Connect.prototype.render = function render() {
          var selector = this.selector;
          selector.shouldComponentUpdate = false;

          if (selector.error) {
            throw selector.error;
          } else {
            return (0, _react.createElement)(WrappedComponent, this.addExtraProps(selector.props));
          }
        };

        return Connect;
      }(_react.Component);

      Connect.WrappedComponent = WrappedComponent;
      Connect.displayName = displayName;
      Connect.childContextTypes = childContextTypes;
      Connect.contextTypes = contextTypes;
      Connect.propTypes = contextTypes;

      if (process.env.NODE_ENV !== 'production') {
        Connect.prototype.componentWillUpdate = function componentWillUpdate() {
          var _this2 = this;

          if (this.version !== version) {
            this.version = version;
            this.initSelector();
            var oldListeners = [];

            if (this.subscription) {
              oldListeners = this.subscription.listeners.get();
              this.subscription.tryUnsubscribe();
            }

            this.initSubscription();

            if (shouldHandleStateChanges) {
              this.subscription.trySubscribe();
              oldListeners.forEach(function (listener) {
                return _this2.subscription.listeners.subscribe(listener);
              });
            }
          }
        };
      }

      return (0, _hoistNonReactStatics2.default)(Connect, WrappedComponent);
    };
  }
},30,[31,32,13,33,28],"node_modules/react-redux/lib/components/connectAdvanced.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

    (function (global, factory) {
        (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.hoistNonReactStatics = factory();
    })(undefined, function () {
        'use strict';

        var REACT_STATICS = {
            childContextTypes: true,
            contextTypes: true,
            defaultProps: true,
            displayName: true,
            getDefaultProps: true,
            getDerivedStateFromProps: true,
            mixins: true,
            propTypes: true,
            type: true
        };
        var KNOWN_STATICS = {
            name: true,
            length: true,
            prototype: true,
            caller: true,
            callee: true,
            arguments: true,
            arity: true
        };
        var defineProperty = Object.defineProperty;
        var getOwnPropertyNames = Object.getOwnPropertyNames;
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var getPrototypeOf = Object.getPrototypeOf;
        var objectPrototype = getPrototypeOf && getPrototypeOf(Object);
        return function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
            if (typeof sourceComponent !== 'string') {
                if (objectPrototype) {
                    var inheritedComponent = getPrototypeOf(sourceComponent);

                    if (inheritedComponent && inheritedComponent !== objectPrototype) {
                        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                    }
                }

                var keys = getOwnPropertyNames(sourceComponent);

                if (getOwnPropertySymbols) {
                    keys = keys.concat(getOwnPropertySymbols(sourceComponent));
                }

                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];

                    if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

                        try {
                            defineProperty(targetComponent, key, descriptor);
                        } catch (e) {}
                    }
                }

                return targetComponent;
            }

            return targetComponent;
        };
    });
},31,[],"node_modules/hoist-non-react-statics/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (process.env.NODE_ENV !== 'production') {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    }

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  };

  module.exports = invariant;
},32,[],"node_modules/invariant/browser.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var CLEARED = null;
  var nullListeners = {
    notify: function notify() {}
  };

  function createListenerCollection() {
    var current = [];
    var next = [];
    return {
      clear: function clear() {
        next = CLEARED;
        current = CLEARED;
      },
      notify: function notify() {
        var listeners = current = next;

        for (var i = 0; i < listeners.length; i++) {
          listeners[i]();
        }
      },
      get: function get() {
        return next;
      },
      subscribe: function subscribe(listener) {
        var isSubscribed = true;
        if (next === current) next = current.slice();
        next.push(listener);
        return function unsubscribe() {
          if (!isSubscribed || current === CLEARED) return;
          isSubscribed = false;
          if (next === current) next = current.slice();
          next.splice(next.indexOf(listener), 1);
        };
      }
    };
  }

  var Subscription = function () {
    function Subscription(store, parentSub, onStateChange) {
      _classCallCheck(this, Subscription);

      this.store = store;
      this.parentSub = parentSub;
      this.onStateChange = onStateChange;
      this.unsubscribe = null;
      this.listeners = nullListeners;
    }

    Subscription.prototype.addNestedSub = function addNestedSub(listener) {
      this.trySubscribe();
      return this.listeners.subscribe(listener);
    };

    Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {
      this.listeners.notify();
    };

    Subscription.prototype.isSubscribed = function isSubscribed() {
      return Boolean(this.unsubscribe);
    };

    Subscription.prototype.trySubscribe = function trySubscribe() {
      if (!this.unsubscribe) {
        this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);
        this.listeners = createListenerCollection();
      }
    };

    Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {
      if (this.unsubscribe) {
        this.unsubscribe();
        this.unsubscribe = null;
        this.listeners.clear();
        this.listeners = nullListeners;
      }
    };

    return Subscription;
  }();

  exports.default = Subscription;
},33,[],"node_modules/react-redux/lib/utils/Subscription.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  exports.__esModule = true;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports.createConnect = createConnect;

  var _connectAdvanced = _require(_dependencyMap[0], '../components/connectAdvanced');

  var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);

  var _shallowEqual = _require(_dependencyMap[1], '../utils/shallowEqual');

  var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

  var _mapDispatchToProps = _require(_dependencyMap[2], './mapDispatchToProps');

  var _mapDispatchToProps2 = _interopRequireDefault(_mapDispatchToProps);

  var _mapStateToProps = _require(_dependencyMap[3], './mapStateToProps');

  var _mapStateToProps2 = _interopRequireDefault(_mapStateToProps);

  var _mergeProps = _require(_dependencyMap[4], './mergeProps');

  var _mergeProps2 = _interopRequireDefault(_mergeProps);

  var _selectorFactory = _require(_dependencyMap[5], './selectorFactory');

  var _selectorFactory2 = _interopRequireDefault(_selectorFactory);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function match(arg, factories, name) {
    for (var i = factories.length - 1; i >= 0; i--) {
      var result = factories[i](arg);
      if (result) return result;
    }

    return function (dispatch, options) {
      throw new Error('Invalid value of type ' + (typeof arg === "undefined" ? "undefined" : _typeof(arg)) + ' for ' + name + ' argument when connecting component ' + options.wrappedComponentName + '.');
    };
  }

  function strictEqual(a, b) {
    return a === b;
  }

  function createConnect() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$connectHOC = _ref.connectHOC,
        connectHOC = _ref$connectHOC === undefined ? _connectAdvanced2.default : _ref$connectHOC,
        _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
        mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? _mapStateToProps2.default : _ref$mapStateToPropsF,
        _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
        mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? _mapDispatchToProps2.default : _ref$mapDispatchToPro,
        _ref$mergePropsFactor = _ref.mergePropsFactories,
        mergePropsFactories = _ref$mergePropsFactor === undefined ? _mergeProps2.default : _ref$mergePropsFactor,
        _ref$selectorFactory = _ref.selectorFactory,
        selectorFactory = _ref$selectorFactory === undefined ? _selectorFactory2.default : _ref$selectorFactory;

    return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
      var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
          _ref2$pure = _ref2.pure,
          pure = _ref2$pure === undefined ? true : _ref2$pure,
          _ref2$areStatesEqual = _ref2.areStatesEqual,
          areStatesEqual = _ref2$areStatesEqual === undefined ? strictEqual : _ref2$areStatesEqual,
          _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,
          areOwnPropsEqual = _ref2$areOwnPropsEqua === undefined ? _shallowEqual2.default : _ref2$areOwnPropsEqua,
          _ref2$areStatePropsEq = _ref2.areStatePropsEqual,
          areStatePropsEqual = _ref2$areStatePropsEq === undefined ? _shallowEqual2.default : _ref2$areStatePropsEq,
          _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,
          areMergedPropsEqual = _ref2$areMergedPropsE === undefined ? _shallowEqual2.default : _ref2$areMergedPropsE,
          extraOptions = _objectWithoutProperties(_ref2, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);

      var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
      var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
      var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
      return connectHOC(selectorFactory, _extends({
        methodName: 'connect',
        getDisplayName: function getDisplayName(name) {
          return 'Connect(' + name + ')';
        },
        shouldHandleStateChanges: Boolean(mapStateToProps),
        initMapStateToProps: initMapStateToProps,
        initMapDispatchToProps: initMapDispatchToProps,
        initMergeProps: initMergeProps,
        pure: pure,
        areStatesEqual: areStatesEqual,
        areOwnPropsEqual: areOwnPropsEqual,
        areStatePropsEqual: areStatePropsEqual,
        areMergedPropsEqual: areMergedPropsEqual
      }, extraOptions));
    };
  }

  exports.default = createConnect();
},34,[30,35,36,58,59,60],"node_modules/react-redux/lib/connect/connect.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  exports.__esModule = true;
  exports.default = shallowEqual;
  var hasOwn = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;

    if ((typeof objA === "undefined" ? "undefined" : _typeof(objA)) !== 'object' || objA === null || (typeof objB === "undefined" ? "undefined" : _typeof(objB)) !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }
},35,[],"node_modules/react-redux/lib/utils/shallowEqual.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  exports.__esModule = true;
  exports.whenMapDispatchToPropsIsFunction = whenMapDispatchToPropsIsFunction;
  exports.whenMapDispatchToPropsIsMissing = whenMapDispatchToPropsIsMissing;
  exports.whenMapDispatchToPropsIsObject = whenMapDispatchToPropsIsObject;

  var _redux = _require(_dependencyMap[0], 'redux');

  var _wrapMapToProps = _require(_dependencyMap[1], './wrapMapToProps');

  function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
    return typeof mapDispatchToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
  }

  function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
    return !mapDispatchToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
      return {
        dispatch: dispatch
      };
    }) : undefined;
  }

  function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
    return mapDispatchToProps && (typeof mapDispatchToProps === "undefined" ? "undefined" : _typeof(mapDispatchToProps)) === 'object' ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
      return (0, _redux.bindActionCreators)(mapDispatchToProps, dispatch);
    }) : undefined;
  }

  exports.default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
},36,[37,56],"node_modules/react-redux/lib/connect/mapDispatchToProps.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

  var _createStore = _require(_dependencyMap[0], './createStore');

  var _createStore2 = _interopRequireDefault(_createStore);

  var _combineReducers = _require(_dependencyMap[1], './combineReducers');

  var _combineReducers2 = _interopRequireDefault(_combineReducers);

  var _bindActionCreators = _require(_dependencyMap[2], './bindActionCreators');

  var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

  var _applyMiddleware = _require(_dependencyMap[3], './applyMiddleware');

  var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

  var _compose = _require(_dependencyMap[4], './compose');

  var _compose2 = _interopRequireDefault(_compose);

  var _warning = _require(_dependencyMap[5], './utils/warning');

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  function isCrushed() {}

  if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
    (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
  }

  exports.createStore = _createStore2['default'];
  exports.combineReducers = _combineReducers2['default'];
  exports.bindActionCreators = _bindActionCreators2['default'];
  exports.applyMiddleware = _applyMiddleware2['default'];
  exports.compose = _compose2['default'];
},37,[38,51,53,54,55,52],"node_modules/redux/lib/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  exports.__esModule = true;
  exports.ActionTypes = undefined;
  exports['default'] = createStore;

  var _isPlainObject = _require(_dependencyMap[0], 'lodash/isPlainObject');

  var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

  var _symbolObservable = _require(_dependencyMap[1], 'symbol-observable');

  var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  var ActionTypes = exports.ActionTypes = {
    INIT: '@@redux/INIT'
  };

  function createStore(reducer, preloadedState, enhancer) {
    var _ref2;

    if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
      enhancer = preloadedState;
      preloadedState = undefined;
    }

    if (typeof enhancer !== 'undefined') {
      if (typeof enhancer !== 'function') {
        throw new Error('Expected the enhancer to be a function.');
      }

      return enhancer(createStore)(reducer, preloadedState);
    }

    if (typeof reducer !== 'function') {
      throw new Error('Expected the reducer to be a function.');
    }

    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;

    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }

    function getState() {
      return currentState;
    }

    function subscribe(listener) {
      if (typeof listener !== 'function') {
        throw new Error('Expected listener to be a function.');
      }

      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }

        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index = nextListeners.indexOf(listener);
        nextListeners.splice(index, 1);
      };
    }

    function dispatch(action) {
      if (!(0, _isPlainObject2['default'])(action)) {
        throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
      }

      if (typeof action.type === 'undefined') {
        throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
      }

      if (isDispatching) {
        throw new Error('Reducers may not dispatch actions.');
      }

      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }

      var listeners = currentListeners = nextListeners;

      for (var i = 0; i < listeners.length; i++) {
        var listener = listeners[i];
        listener();
      }

      return action;
    }

    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== 'function') {
        throw new Error('Expected the nextReducer to be a function.');
      }

      currentReducer = nextReducer;
      dispatch({
        type: ActionTypes.INIT
      });
    }

    function observable() {
      var _ref;

      var outerSubscribe = subscribe;
      return _ref = {
        subscribe: function subscribe(observer) {
          if ((typeof observer === "undefined" ? "undefined" : _typeof(observer)) !== 'object') {
            throw new TypeError('Expected the observer to be an object.');
          }

          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }

          observeState();
          var unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe: unsubscribe
          };
        }
      }, _ref[_symbolObservable2['default']] = function () {
        return this;
      }, _ref;
    }

    dispatch({
      type: ActionTypes.INIT
    });
    return _ref2 = {
      dispatch: dispatch,
      subscribe: subscribe,
      getState: getState,
      replaceReducer: replaceReducer
    }, _ref2[_symbolObservable2['default']] = observable, _ref2;
  }
},38,[39,49],"node_modules/redux/lib/createStore.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseGetTag = _require(_dependencyMap[0], './_baseGetTag'),
      getPrototype = _require(_dependencyMap[1], './_getPrototype'),
      isObjectLike = _require(_dependencyMap[2], './isObjectLike');

  var objectTag = '[object Object]';
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);

  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }

    var proto = getPrototype(value);

    if (proto === null) {
      return true;
    }

    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  module.exports = isPlainObject;
},39,[40,46,48],"node_modules/lodash/isPlainObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var _Symbol = _require(_dependencyMap[0], './_Symbol'),
        getRawTag = _require(_dependencyMap[1], './_getRawTag'),
        objectToString = _require(_dependencyMap[2], './_objectToString');

    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';
    var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

    function baseGetTag(value) {
        if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }

    module.exports = baseGetTag;
},40,[41,44,45],"node_modules/lodash/_baseGetTag.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var root = _require(_dependencyMap[0], './_root');

  var _Symbol = root.Symbol;
  module.exports = _Symbol;
},41,[42],"node_modules/lodash/_Symbol.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var freeGlobal = _require(_dependencyMap[0], './_freeGlobal');

  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  module.exports = root;
},42,[43],"node_modules/lodash/_root.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;
  module.exports = freeGlobal;
},43,[],"node_modules/lodash/_freeGlobal.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _Symbol = _require(_dependencyMap[0], './_Symbol');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }

    return result;
  }

  module.exports = getRawTag;
},44,[41],"node_modules/lodash/_getRawTag.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;

  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  module.exports = objectToString;
},45,[],"node_modules/lodash/_objectToString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var overArg = _require(_dependencyMap[0], './_overArg');

  var getPrototype = overArg(Object.getPrototypeOf, Object);
  module.exports = getPrototype;
},46,[47],"node_modules/lodash/_getPrototype.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  module.exports = overArg;
},47,[],"node_modules/lodash/_overArg.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  function isObjectLike(value) {
    return value != null && (typeof value === "undefined" ? "undefined" : _typeof(value)) == 'object';
  }

  module.exports = isObjectLike;
},48,[],"node_modules/lodash/isObjectLike.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _ponyfill = _require(_dependencyMap[0], './ponyfill.js');

  var _ponyfill2 = _interopRequireDefault(_ponyfill);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  var root;

  if (typeof self !== 'undefined') {
    root = self;
  } else if (typeof window !== 'undefined') {
    root = window;
  } else if (typeof global !== 'undefined') {
    root = global;
  } else if (typeof module !== 'undefined') {
    root = module;
  } else {
    root = Function('return this')();
  }

  var result = (0, _ponyfill2['default'])(root);
  exports['default'] = result;
},49,[50],"node_modules/redux/node_modules/symbol-observable/lib/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;

	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;

		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	}

	;
},50,[],"node_modules/redux/node_modules/symbol-observable/lib/ponyfill.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports['default'] = combineReducers;

  var _createStore = _require(_dependencyMap[0], './createStore');

  var _isPlainObject = _require(_dependencyMap[1], 'lodash/isPlainObject');

  var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

  var _warning = _require(_dependencyMap[2], './utils/warning');

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  function getUndefinedStateErrorMessage(key, action) {
    var actionType = action && action.type;
    var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';
    return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
  }

  function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers);
    var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

    if (reducerKeys.length === 0) {
      return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
    }

    if (!(0, _isPlainObject2['default'])(inputState)) {
      return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
    }

    var unexpectedKeys = Object.keys(inputState).filter(function (key) {
      return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
    });
    unexpectedKeys.forEach(function (key) {
      unexpectedKeyCache[key] = true;
    });

    if (unexpectedKeys.length > 0) {
      return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
    }
  }

  function assertReducerShape(reducers) {
    Object.keys(reducers).forEach(function (key) {
      var reducer = reducers[key];
      var initialState = reducer(undefined, {
        type: _createStore.ActionTypes.INIT
      });

      if (typeof initialState === 'undefined') {
        throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
      }

      var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');

      if (typeof reducer(undefined, {
        type: type
      }) === 'undefined') {
        throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
      }
    });
  }

  function combineReducers(reducers) {
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {};

    for (var i = 0; i < reducerKeys.length; i++) {
      var key = reducerKeys[i];

      if (process.env.NODE_ENV !== 'production') {
        if (typeof reducers[key] === 'undefined') {
          (0, _warning2['default'])('No reducer provided for key "' + key + '"');
        }
      }

      if (typeof reducers[key] === 'function') {
        finalReducers[key] = reducers[key];
      }
    }

    var finalReducerKeys = Object.keys(finalReducers);
    var unexpectedKeyCache = void 0;

    if (process.env.NODE_ENV !== 'production') {
      unexpectedKeyCache = {};
    }

    var shapeAssertionError = void 0;

    try {
      assertReducerShape(finalReducers);
    } catch (e) {
      shapeAssertionError = e;
    }

    return function combination() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var action = arguments[1];

      if (shapeAssertionError) {
        throw shapeAssertionError;
      }

      if (process.env.NODE_ENV !== 'production') {
        var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

        if (warningMessage) {
          (0, _warning2['default'])(warningMessage);
        }
      }

      var hasChanged = false;
      var nextState = {};

      for (var _i = 0; _i < finalReducerKeys.length; _i++) {
        var _key = finalReducerKeys[_i];
        var reducer = finalReducers[_key];
        var previousStateForKey = state[_key];
        var nextStateForKey = reducer(previousStateForKey, action);

        if (typeof nextStateForKey === 'undefined') {
          var errorMessage = getUndefinedStateErrorMessage(_key, action);
          throw new Error(errorMessage);
        }

        nextState[_key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }

      return hasChanged ? nextState : state;
    };
  }
},51,[38,39,52],"node_modules/redux/lib/combineReducers.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports['default'] = warning;

  function warning(message) {
    if (typeof console !== 'undefined' && typeof console.error === 'function') {
      console.error(message);
    }

    try {
      throw new Error(message);
    } catch (e) {}
  }
},52,[],"node_modules/redux/lib/utils/warning.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  exports.__esModule = true;
  exports['default'] = bindActionCreators;

  function bindActionCreator(actionCreator, dispatch) {
    return function () {
      return dispatch(actionCreator.apply(undefined, arguments));
    };
  }

  function bindActionCreators(actionCreators, dispatch) {
    if (typeof actionCreators === 'function') {
      return bindActionCreator(actionCreators, dispatch);
    }

    if ((typeof actionCreators === "undefined" ? "undefined" : _typeof(actionCreators)) !== 'object' || actionCreators === null) {
      throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators === "undefined" ? "undefined" : _typeof(actionCreators)) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
    }

    var keys = Object.keys(actionCreators);
    var boundActionCreators = {};

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var actionCreator = actionCreators[key];

      if (typeof actionCreator === 'function') {
        boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
      }
    }

    return boundActionCreators;
  }
},53,[],"node_modules/redux/lib/bindActionCreators.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports['default'] = applyMiddleware;

  var _compose = _require(_dependencyMap[0], './compose');

  var _compose2 = _interopRequireDefault(_compose);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
      middlewares[_key] = arguments[_key];
    }

    return function (createStore) {
      return function (reducer, preloadedState, enhancer) {
        var store = createStore(reducer, preloadedState, enhancer);
        var _dispatch = store.dispatch;
        var chain = [];
        var middlewareAPI = {
          getState: store.getState,
          dispatch: function dispatch(action) {
            return _dispatch(action);
          }
        };
        chain = middlewares.map(function (middleware) {
          return middleware(middlewareAPI);
        });
        _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);
        return _extends({}, store, {
          dispatch: _dispatch
        });
      };
    };
  }
},54,[55],"node_modules/redux/lib/applyMiddleware.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  exports.__esModule = true;
  exports["default"] = compose;

  function compose() {
    for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    if (funcs.length === 0) {
      return function (arg) {
        return arg;
      };
    }

    if (funcs.length === 1) {
      return funcs[0];
    }

    return funcs.reduce(function (a, b) {
      return function () {
        return a(b.apply(undefined, arguments));
      };
    });
  }
},55,[],"node_modules/redux/lib/compose.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.wrapMapToPropsConstant = wrapMapToPropsConstant;
  exports.getDependsOnOwnProps = getDependsOnOwnProps;
  exports.wrapMapToPropsFunc = wrapMapToPropsFunc;

  var _verifyPlainObject = _require(_dependencyMap[0], '../utils/verifyPlainObject');

  var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function wrapMapToPropsConstant(getConstant) {
    return function initConstantSelector(dispatch, options) {
      var constant = getConstant(dispatch, options);

      function constantSelector() {
        return constant;
      }

      constantSelector.dependsOnOwnProps = false;
      return constantSelector;
    };
  }

  function getDependsOnOwnProps(mapToProps) {
    return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
  }

  function wrapMapToPropsFunc(mapToProps, methodName) {
    return function initProxySelector(dispatch, _ref) {
      var displayName = _ref.displayName;

      var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
        return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
      };

      proxy.dependsOnOwnProps = true;

      proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
        proxy.mapToProps = mapToProps;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
        var props = proxy(stateOrDispatch, ownProps);

        if (typeof props === 'function') {
          proxy.mapToProps = props;
          proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
          props = proxy(stateOrDispatch, ownProps);
        }

        if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject2.default)(props, displayName, methodName);
        return props;
      };

      return proxy;
    };
  }
},56,[57],"node_modules/react-redux/lib/connect/wrapMapToProps.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.default = verifyPlainObject;

  var _isPlainObject = _require(_dependencyMap[0], 'lodash/isPlainObject');

  var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

  var _warning = _require(_dependencyMap[1], './warning');

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function verifyPlainObject(value, displayName, methodName) {
    if (!(0, _isPlainObject2.default)(value)) {
      (0, _warning2.default)(methodName + '() in ' + displayName + ' must return a plain object. Instead received ' + value + '.');
    }
  }
},57,[39,29],"node_modules/react-redux/lib/utils/verifyPlainObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.whenMapStateToPropsIsFunction = whenMapStateToPropsIsFunction;
  exports.whenMapStateToPropsIsMissing = whenMapStateToPropsIsMissing;

  var _wrapMapToProps = _require(_dependencyMap[0], './wrapMapToProps');

  function whenMapStateToPropsIsFunction(mapStateToProps) {
    return typeof mapStateToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
  }

  function whenMapStateToPropsIsMissing(mapStateToProps) {
    return !mapStateToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function () {
      return {};
    }) : undefined;
  }

  exports.default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
},58,[56],"node_modules/react-redux/lib/connect/mapStateToProps.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  exports.defaultMergeProps = defaultMergeProps;
  exports.wrapMergePropsFunc = wrapMergePropsFunc;
  exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
  exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;

  var _verifyPlainObject = _require(_dependencyMap[0], '../utils/verifyPlainObject');

  var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function defaultMergeProps(stateProps, dispatchProps, ownProps) {
    return _extends({}, ownProps, stateProps, dispatchProps);
  }

  function wrapMergePropsFunc(mergeProps) {
    return function initMergePropsProxy(dispatch, _ref) {
      var displayName = _ref.displayName,
          pure = _ref.pure,
          areMergedPropsEqual = _ref.areMergedPropsEqual;
      var hasRunOnce = false;
      var mergedProps = void 0;
      return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
        var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

        if (hasRunOnce) {
          if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
        } else {
          hasRunOnce = true;
          mergedProps = nextMergedProps;
          if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject2.default)(mergedProps, displayName, 'mergeProps');
        }

        return mergedProps;
      };
    };
  }

  function whenMergePropsIsFunction(mergeProps) {
    return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
  }

  function whenMergePropsIsOmitted(mergeProps) {
    return !mergeProps ? function () {
      return defaultMergeProps;
    } : undefined;
  }

  exports.default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
},59,[57],"node_modules/react-redux/lib/connect/mergeProps.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.impureFinalPropsSelectorFactory = impureFinalPropsSelectorFactory;
  exports.pureFinalPropsSelectorFactory = pureFinalPropsSelectorFactory;
  exports.default = finalPropsSelectorFactory;

  var _verifySubselectors = _require(_dependencyMap[0], './verifySubselectors');

  var _verifySubselectors2 = _interopRequireDefault(_verifySubselectors);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
    return function impureFinalPropsSelector(state, ownProps) {
      return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
    };
  }

  function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
    var areStatesEqual = _ref.areStatesEqual,
        areOwnPropsEqual = _ref.areOwnPropsEqual,
        areStatePropsEqual = _ref.areStatePropsEqual;
    var hasRunAtLeastOnce = false;
    var state = void 0;
    var ownProps = void 0;
    var stateProps = void 0;
    var dispatchProps = void 0;
    var mergedProps = void 0;

    function handleFirstCall(firstState, firstOwnProps) {
      state = firstState;
      ownProps = firstOwnProps;
      stateProps = mapStateToProps(state, ownProps);
      dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      hasRunAtLeastOnce = true;
      return mergedProps;
    }

    function handleNewPropsAndNewState() {
      stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }

    function handleNewProps() {
      if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
      if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }

    function handleNewState() {
      var nextStateProps = mapStateToProps(state, ownProps);
      var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
      stateProps = nextStateProps;
      if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      return mergedProps;
    }

    function handleSubsequentCalls(nextState, nextOwnProps) {
      var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
      var stateChanged = !areStatesEqual(nextState, state);
      state = nextState;
      ownProps = nextOwnProps;
      if (propsChanged && stateChanged) return handleNewPropsAndNewState();
      if (propsChanged) return handleNewProps();
      if (stateChanged) return handleNewState();
      return mergedProps;
    }

    return function pureFinalPropsSelector(nextState, nextOwnProps) {
      return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
    };
  }

  function finalPropsSelectorFactory(dispatch, _ref2) {
    var initMapStateToProps = _ref2.initMapStateToProps,
        initMapDispatchToProps = _ref2.initMapDispatchToProps,
        initMergeProps = _ref2.initMergeProps,
        options = _objectWithoutProperties(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);

    var mapStateToProps = initMapStateToProps(dispatch, options);
    var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
    var mergeProps = initMergeProps(dispatch, options);

    if (process.env.NODE_ENV !== 'production') {
      (0, _verifySubselectors2.default)(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
    }

    var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
    return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
  }
},60,[61],"node_modules/react-redux/lib/connect/selectorFactory.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports.default = verifySubselectors;

  var _warning = _require(_dependencyMap[0], '../utils/warning');

  var _warning2 = _interopRequireDefault(_warning);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function verify(selector, methodName, displayName) {
    if (!selector) {
      throw new Error('Unexpected value for ' + methodName + ' in ' + displayName + '.');
    } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
      if (!selector.hasOwnProperty('dependsOnOwnProps')) {
        (0, _warning2.default)('The selector for ' + methodName + ' of ' + displayName + ' did not specify a value for dependsOnOwnProps.');
      }
    }
  }

  function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
    verify(mapStateToProps, 'mapStateToProps', displayName);
    verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
    verify(mergeProps, 'mergeProps', displayName);
  }
},61,[29],"node_modules/react-redux/lib/connect/verifySubselectors.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = _require(_dependencyMap[0], './deprecated/indexDeprecated');
},62,[63],"node_modules/react-native-navigation/src/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _Navigation = _require(_dependencyMap[0], "./../Navigation");

  var _Navigation2 = _interopRequireDefault(_Navigation);

  var _sharedElementTransition = _require(_dependencyMap[1], "./../views/sharedElementTransition");

  var _sharedElementTransition2 = _interopRequireDefault(_sharedElementTransition);

  var _NativeEventsReceiver = _require(_dependencyMap[2], "./../NativeEventsReceiver");

  var _NativeEventsReceiver2 = _interopRequireDefault(_NativeEventsReceiver);

  var _ScreenVisibilityListener = _require(_dependencyMap[3], "./../ScreenVisibilityListener");

  var _ScreenVisibilityListener2 = _interopRequireDefault(_ScreenVisibilityListener);

  var _Screen = _require(_dependencyMap[4], "./../Screen");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  module.exports = {
    Navigation: _Navigation2.default,
    SharedElementTransition: _sharedElementTransition2.default,
    NativeEventsReceiver: _NativeEventsReceiver2.default,
    ScreenVisibilityListener: _ScreenVisibilityListener2.default,
    Navigator: _Screen.Navigator
  };
},63,[64,528,529,530,527],"node_modules/react-native-navigation/src/deprecated/indexDeprecated.android.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-navigation/src/Navigation.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var startTabBasedApp = function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(params) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return _platformSpecificDeprecated2.default.startTabBasedApp(params);

            case 3:
              return _context.abrupt("return", _context.sent);

            case 6:
              _context.prev = 6;
              _context.t0 = _context["catch"](0);
              console.error("Error while starting app: " + _context.t0);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 6]]);
    }));

    return function startTabBasedApp(_x11) {
      return _ref.apply(this, arguments);
    };
  }();

  var startSingleScreenApp = function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(params) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return _platformSpecificDeprecated2.default.startSingleScreenApp(params);

            case 3:
              return _context2.abrupt("return", _context2.sent);

            case 6:
              _context2.prev = 6;
              _context2.t0 = _context2["catch"](0);
              console.error("Error while starting app: " + _context2.t0);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 6]]);
    }));

    return function startSingleScreenApp(_x12) {
      return _ref2.apply(this, arguments);
    };
  }();

  var isAppLaunched = function () {
    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _platformSpecificDeprecated2.default.isAppLaunched();

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function isAppLaunched() {
      return _ref3.apply(this, arguments);
    };
  }();

  var isRootLaunched = function () {
    var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return _platformSpecificDeprecated2.default.isRootLaunched();

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    return function isRootLaunched() {
      return _ref4.apply(this, arguments);
    };
  }();

  var getLaunchArgs = function () {
    var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _platformSpecificDeprecated2.default.getLaunchArgs();

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    return function getLaunchArgs() {
      return _ref5.apply(this, arguments);
    };
  }();

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _platformSpecificDeprecated = _require(_dependencyMap[2], "./deprecated/platformSpecificDeprecated");

  var _platformSpecificDeprecated2 = _interopRequireDefault(_platformSpecificDeprecated);

  var _Screen3 = _require(_dependencyMap[3], "./Screen");

  var _PropRegistry = _require(_dependencyMap[4], "./PropRegistry");

  var _PropRegistry2 = _interopRequireDefault(_PropRegistry);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var registeredScreens = {};
  var _allNavigatorEventHandlers = {};

  function registerScreen(screenID, generator) {
    registeredScreens[screenID] = generator;

    _reactNative.AppRegistry.registerComponent(screenID, generator);
  }

  function registerComponent(screenID, generator) {
    var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
    var Provider = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

    if (store && Provider) {
      return _registerComponentRedux(screenID, generator, store, Provider, options);
    } else {
      return _registerComponentNoRedux(screenID, generator);
    }
  }

  function _registerComponentNoRedux(screenID, generator) {
    var generatorWrapper = function generatorWrapper() {
      var _class, _temp;

      var InternalComponent = generator();

      if (!InternalComponent) {
        console.error("Navigation: " + screenID + " registration result is 'undefined'");
      }

      return _temp = _class = function (_Screen) {
        _inherits(_class, _Screen);

        function _class(props) {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

          _this.state = {
            internalProps: _extends({}, props, _PropRegistry2.default.load(props.screenInstanceID || props.passPropsKey))
          };
          return _this;
        }

        _createClass(_class, [{
          key: "componentWillReceiveProps",
          value: function componentWillReceiveProps(nextProps) {
            this.setState({
              internalProps: _extends({}, _PropRegistry2.default.load(this.props.screenInstanceID || this.props.passPropsKey), nextProps)
            });
          }
        }, {
          key: "render",
          value: function render() {
            return _react2.default.createElement(InternalComponent, _extends({
              testID: screenID,
              navigator: this.navigator
            }, this.state.internalProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 51
              }
            }));
          }
        }]);

        return _class;
      }(_Screen3.Screen), _class.navigatorStyle = InternalComponent.navigatorStyle || {}, _class.navigatorButtons = InternalComponent.navigatorButtons || {}, _temp;
    };

    registerScreen(screenID, generatorWrapper);
    return generatorWrapper;
  }

  function _registerComponentRedux(screenID, generator, store, Provider, options) {
    var generatorWrapper = function generatorWrapper() {
      var _class2, _temp2;

      var InternalComponent = generator();
      return _temp2 = _class2 = function (_Screen2) {
        _inherits(_class2, _Screen2);

        function _class2(props) {
          _classCallCheck(this, _class2);

          var _this2 = _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this, props));

          _this2.state = {
            internalProps: _extends({}, props, _PropRegistry2.default.load(props.screenInstanceID || props.passPropsKey))
          };
          return _this2;
        }

        _createClass(_class2, [{
          key: "componentWillReceiveProps",
          value: function componentWillReceiveProps(nextProps) {
            this.setState({
              internalProps: _extends({}, _PropRegistry2.default.load(this.props.screenInstanceID || this.props.passPropsKey), nextProps)
            });
          }
        }, {
          key: "render",
          value: function render() {
            return _react2.default.createElement(
              Provider,
              _extends({
                store: store
              }, options, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 82
                }
              }),
              _react2.default.createElement(InternalComponent, _extends({
                testID: screenID,
                navigator: this.navigator
              }, this.state.internalProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 83
                }
              }))
            );
          }
        }]);

        return _class2;
      }(_Screen3.Screen), _class2.navigatorStyle = InternalComponent.navigatorStyle || {}, _class2.navigatorButtons = InternalComponent.navigatorButtons || {}, _temp2;
    };

    registerScreen(screenID, generatorWrapper);
    return generatorWrapper;
  }

  function getRegisteredScreen(screenID) {
    var generator = registeredScreens[screenID];

    if (!generator) {
      console.error("Navigation.getRegisteredScreen: " + screenID + " used but not yet registered");
      return undefined;
    }

    return generator();
  }

  function showModal() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _platformSpecificDeprecated2.default.showModal(params);
  }

  function dismissModal() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _platformSpecificDeprecated2.default.dismissModal(params);
  }

  function dismissAllModals() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _platformSpecificDeprecated2.default.dismissAllModals(params);
  }

  function showSnackbar() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _platformSpecificDeprecated2.default.showSnackbar(params);
  }

  function showLightBox() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _platformSpecificDeprecated2.default.showLightBox(params);
  }

  function dismissLightBox() {
    return _platformSpecificDeprecated2.default.dismissLightBox();
  }

  function showInAppNotification() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _platformSpecificDeprecated2.default.showInAppNotification(params);
  }

  function dismissInAppNotification() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _platformSpecificDeprecated2.default.dismissInAppNotification(params);
  }

  function setEventHandler(navigatorEventID, eventHandler) {
    _allNavigatorEventHandlers[navigatorEventID] = eventHandler;
  }

  function clearEventHandler(navigatorEventID) {
    delete _allNavigatorEventHandlers[navigatorEventID];
  }

  function handleDeepLink() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var link = params.link,
        payload = params.payload;
    if (!link) return;

    var event = _extends({
      type: 'DeepLink',
      link: link
    }, payload ? {
      payload: payload
    } : {});

    for (var i in _allNavigatorEventHandlers) {
      _allNavigatorEventHandlers[i](event);
    }
  }

  function getCurrentlyVisibleScreenId() {
    return _platformSpecificDeprecated2.default.getCurrentlyVisibleScreenId();
  }

  exports.default = {
    getRegisteredScreen: getRegisteredScreen,
    getCurrentlyVisibleScreenId: getCurrentlyVisibleScreenId,
    registerComponent: registerComponent,
    showModal: showModal,
    dismissModal: dismissModal,
    dismissAllModals: dismissAllModals,
    showSnackbar: showSnackbar,
    showLightBox: showLightBox,
    dismissLightBox: dismissLightBox,
    showInAppNotification: showInAppNotification,
    dismissInAppNotification: dismissInAppNotification,
    startTabBasedApp: startTabBasedApp,
    startSingleScreenApp: startSingleScreenApp,
    setEventHandler: setEventHandler,
    clearEventHandler: clearEventHandler,
    handleDeepLink: handleDeepLink,
    isAppLaunched: isAppLaunched,
    isRootLaunched: isRootLaunched,
    getLaunchArgs: getLaunchArgs
  };
},64,[13,65,523,527,525],"node_modules/react-native-navigation/src/Navigation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ReactNative = {
    get AccessibilityInfo() {
      return _require(_dependencyMap[1], 'AccessibilityInfo');
    },

    get ActivityIndicator() {
      return _require(_dependencyMap[2], 'ActivityIndicator');
    },

    get ART() {
      return _require(_dependencyMap[3], 'ReactNativeART');
    },

    get Button() {
      return _require(_dependencyMap[4], 'Button');
    },

    get CheckBox() {
      return _require(_dependencyMap[5], 'CheckBox');
    },

    get DatePickerIOS() {
      return _require(_dependencyMap[6], 'DatePickerIOS');
    },

    get DrawerLayoutAndroid() {
      return _require(_dependencyMap[7], 'DrawerLayoutAndroid');
    },

    get FlatList() {
      return _require(_dependencyMap[8], 'FlatList');
    },

    get Image() {
      return _require(_dependencyMap[9], 'Image');
    },

    get ImageBackground() {
      return _require(_dependencyMap[10], 'ImageBackground');
    },

    get ImageEditor() {
      return _require(_dependencyMap[11], 'ImageEditor');
    },

    get ImageStore() {
      return _require(_dependencyMap[12], 'ImageStore');
    },

    get KeyboardAvoidingView() {
      return _require(_dependencyMap[13], 'KeyboardAvoidingView');
    },

    get ListView() {
      return _require(_dependencyMap[14], 'ListView');
    },

    get MaskedViewIOS() {
      return _require(_dependencyMap[15], 'MaskedViewIOS');
    },

    get Modal() {
      return _require(_dependencyMap[16], 'Modal');
    },

    get NavigatorIOS() {
      return _require(_dependencyMap[17], 'NavigatorIOS');
    },

    get Picker() {
      return _require(_dependencyMap[18], 'Picker');
    },

    get PickerIOS() {
      return _require(_dependencyMap[19], 'PickerIOS');
    },

    get ProgressBarAndroid() {
      return _require(_dependencyMap[20], 'ProgressBarAndroid');
    },

    get ProgressViewIOS() {
      return _require(_dependencyMap[21], 'ProgressViewIOS');
    },

    get SafeAreaView() {
      return _require(_dependencyMap[22], 'SafeAreaView');
    },

    get ScrollView() {
      return _require(_dependencyMap[23], 'ScrollView');
    },

    get SectionList() {
      return _require(_dependencyMap[24], 'SectionList');
    },

    get SegmentedControlIOS() {
      return _require(_dependencyMap[25], 'SegmentedControlIOS');
    },

    get Slider() {
      return _require(_dependencyMap[26], 'Slider');
    },

    get SnapshotViewIOS() {
      return _require(_dependencyMap[27], 'SnapshotViewIOS');
    },

    get Switch() {
      return _require(_dependencyMap[28], 'Switch');
    },

    get RefreshControl() {
      return _require(_dependencyMap[29], 'RefreshControl');
    },

    get StatusBar() {
      return _require(_dependencyMap[30], 'StatusBar');
    },

    get SwipeableFlatList() {
      return _require(_dependencyMap[31], 'SwipeableFlatList');
    },

    get SwipeableListView() {
      return _require(_dependencyMap[32], 'SwipeableListView');
    },

    get TabBarIOS() {
      return _require(_dependencyMap[33], 'TabBarIOS');
    },

    get Text() {
      return _require(_dependencyMap[34], 'Text');
    },

    get TextInput() {
      return _require(_dependencyMap[35], 'TextInput');
    },

    get ToastAndroid() {
      return _require(_dependencyMap[36], 'ToastAndroid');
    },

    get ToolbarAndroid() {
      return _require(_dependencyMap[37], 'ToolbarAndroid');
    },

    get Touchable() {
      return _require(_dependencyMap[38], 'Touchable');
    },

    get TouchableHighlight() {
      return _require(_dependencyMap[39], 'TouchableHighlight');
    },

    get TouchableNativeFeedback() {
      return _require(_dependencyMap[40], 'TouchableNativeFeedback');
    },

    get TouchableOpacity() {
      return _require(_dependencyMap[41], 'TouchableOpacity');
    },

    get TouchableWithoutFeedback() {
      return _require(_dependencyMap[42], 'TouchableWithoutFeedback');
    },

    get View() {
      return _require(_dependencyMap[43], 'View');
    },

    get ViewPagerAndroid() {
      return _require(_dependencyMap[44], 'ViewPagerAndroid');
    },

    get VirtualizedList() {
      return _require(_dependencyMap[45], 'VirtualizedList');
    },

    get WebView() {
      return _require(_dependencyMap[46], 'WebView');
    },

    get ActionSheetIOS() {
      return _require(_dependencyMap[47], 'ActionSheetIOS');
    },

    get Alert() {
      return _require(_dependencyMap[48], 'Alert');
    },

    get AlertIOS() {
      return _require(_dependencyMap[49], 'AlertIOS');
    },

    get Animated() {
      return _require(_dependencyMap[50], 'Animated');
    },

    get AppRegistry() {
      return _require(_dependencyMap[51], 'AppRegistry');
    },

    get AppState() {
      return _require(_dependencyMap[52], 'AppState');
    },

    get AsyncStorage() {
      return _require(_dependencyMap[53], 'AsyncStorage');
    },

    get BackAndroid() {
      return _require(_dependencyMap[54], 'BackAndroid');
    },

    get BackHandler() {
      return _require(_dependencyMap[55], 'BackHandler');
    },

    get CameraRoll() {
      return _require(_dependencyMap[56], 'CameraRoll');
    },

    get Clipboard() {
      return _require(_dependencyMap[57], 'Clipboard');
    },

    get DatePickerAndroid() {
      return _require(_dependencyMap[58], 'DatePickerAndroid');
    },

    get DeviceInfo() {
      return _require(_dependencyMap[59], 'DeviceInfo');
    },

    get Dimensions() {
      return _require(_dependencyMap[60], 'Dimensions');
    },

    get Easing() {
      return _require(_dependencyMap[61], 'Easing');
    },

    get findNodeHandle() {
      return _require(_dependencyMap[62], 'ReactNative').findNodeHandle;
    },

    get I18nManager() {
      return _require(_dependencyMap[63], 'I18nManager');
    },

    get ImagePickerIOS() {
      return _require(_dependencyMap[64], 'ImagePickerIOS');
    },

    get InteractionManager() {
      return _require(_dependencyMap[65], 'InteractionManager');
    },

    get Keyboard() {
      return _require(_dependencyMap[66], 'Keyboard');
    },

    get LayoutAnimation() {
      return _require(_dependencyMap[67], 'LayoutAnimation');
    },

    get Linking() {
      return _require(_dependencyMap[68], 'Linking');
    },

    get NativeEventEmitter() {
      return _require(_dependencyMap[69], 'NativeEventEmitter');
    },

    get NetInfo() {
      return _require(_dependencyMap[70], 'NetInfo');
    },

    get PanResponder() {
      return _require(_dependencyMap[71], 'PanResponder');
    },

    get PermissionsAndroid() {
      return _require(_dependencyMap[72], 'PermissionsAndroid');
    },

    get PixelRatio() {
      return _require(_dependencyMap[73], 'PixelRatio');
    },

    get PushNotificationIOS() {
      return _require(_dependencyMap[74], 'PushNotificationIOS');
    },

    get Settings() {
      return _require(_dependencyMap[75], 'Settings');
    },

    get Share() {
      return _require(_dependencyMap[76], 'Share');
    },

    get StatusBarIOS() {
      return _require(_dependencyMap[77], 'StatusBarIOS');
    },

    get StyleSheet() {
      return _require(_dependencyMap[78], 'StyleSheet');
    },

    get Systrace() {
      return _require(_dependencyMap[79], 'Systrace');
    },

    get TimePickerAndroid() {
      return _require(_dependencyMap[80], 'TimePickerAndroid');
    },

    get TVEventHandler() {
      return _require(_dependencyMap[81], 'TVEventHandler');
    },

    get UIManager() {
      return _require(_dependencyMap[82], 'UIManager');
    },

    get unstable_batchedUpdates() {
      return _require(_dependencyMap[62], 'ReactNative').unstable_batchedUpdates;
    },

    get Vibration() {
      return _require(_dependencyMap[83], 'Vibration');
    },

    get VibrationIOS() {
      return _require(_dependencyMap[84], 'VibrationIOS');
    },

    get YellowBox() {
      return _require(_dependencyMap[85], 'YellowBox');
    },

    get DeviceEventEmitter() {
      return _require(_dependencyMap[86], 'RCTDeviceEventEmitter');
    },

    get NativeAppEventEmitter() {
      return _require(_dependencyMap[87], 'RCTNativeAppEventEmitter');
    },

    get NativeModules() {
      return _require(_dependencyMap[88], 'NativeModules');
    },

    get Platform() {
      return _require(_dependencyMap[89], 'Platform');
    },

    get processColor() {
      return _require(_dependencyMap[90], 'processColor');
    },

    get requireNativeComponent() {
      return _require(_dependencyMap[91], 'requireNativeComponent');
    },

    get takeSnapshot() {
      return _require(_dependencyMap[92], 'takeSnapshot');
    },

    get ColorPropType() {
      return _require(_dependencyMap[93], 'ColorPropType');
    },

    get EdgeInsetsPropType() {
      return _require(_dependencyMap[94], 'EdgeInsetsPropType');
    },

    get PointPropType() {
      return _require(_dependencyMap[95], 'PointPropType');
    },

    get ViewPropTypes() {
      return _require(_dependencyMap[96], 'ViewPropTypes');
    },

    get Navigator() {
      invariant(false, 'Navigator is deprecated and has been removed from this package. It can now be installed ' + 'and imported from `react-native-deprecated-custom-components` instead of `react-native`. ' + 'Learn about alternative navigation solutions at http://facebook.github.io/react-native/docs/navigation.html');
    }

  };
  module.exports = ReactNative;
},65,[19,66,88,218,370,426,427,428,430,413,443,445,446,447,432,448,450,471,472,473,171,475,469,414,476,478,479,480,481,437,429,482,486,488,371,490,155,497,373,461,380,384,381,213,498,438,499,500,138,139,385,501,157,507,508,506,509,510,511,208,207,410,92,470,512,393,418,419,513,125,514,484,142,206,515,516,517,518,211,71,519,377,164,520,521,468,83,146,67,75,195,188,522,89,174,415,173],"react-native-implementation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var RCTDeviceEventEmitter = _require(_dependencyMap[1], 'RCTDeviceEventEmitter');

  var RCTAccessibilityInfo = NativeModules.AccessibilityInfo;
  var TOUCH_EXPLORATION_EVENT = 'touchExplorationDidChange';

  var _subscriptions = new Map();

  var AccessibilityInfo = {
    fetch: function fetch() {
      return new Promise(function (resolve, reject) {
        RCTAccessibilityInfo.isTouchExplorationEnabled(function (resp) {
          resolve(resp);
        });
      });
    },
    addEventListener: function addEventListener(eventName, handler) {
      var listener = RCTDeviceEventEmitter.addListener(TOUCH_EXPLORATION_EVENT, function (enabled) {
        handler(enabled);
      });

      _subscriptions.set(handler, listener);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    }
  };
  module.exports = AccessibilityInfo;
},66,[67,83],"AccessibilityInfo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }

    var _config = _slicedToArray(config, 5),
        moduleName = _config[0],
        constants = _config[1],
        methods = _config[2],
        promiseMethods = _config[3],
        syncMethods = _config[4];

    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), 'Module name prefixes should\'ve been stripped by the native side ' + 'but wasn\'t for ' + moduleName);

    if (!constants && !methods) {
      return {
        name: moduleName
      };
    }

    var module = {};
    methods && methods.forEach(function (methodName, methodID) {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
      var isSync = syncMethods && arrayContains(syncMethods, methodID);
      invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });

    _extends(module, constants);

    if (__DEV__) {
      BatchedBridge.createDebugLookup(moduleID, moduleName, methods);
    }

    return {
      name: moduleName,
      module: module
    };
  }

  global.__fbGenNativeModule = genModule;

  function loadModule(name, moduleID) {
    invariant(global.nativeRequireModuleConfig, 'Can\'t lazily create module without nativeRequireModuleConfig');
    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }

  function genMethod(moduleID, methodID, type) {
    var fn = null;

    if (type === 'promise') {
      fn = function fn() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return new Promise(function (resolve, reject) {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
            return resolve(data);
          }, function (errorData) {
            return reject(createErrorFromErrorData(errorData));
          });
        });
      };
    } else if (type === 'sync') {
      fn = function fn() {
        if (__DEV__) {
          invariant(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\n\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');
        }

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return global.nativeCallSyncHook(moduleID, methodID, args);
      };
    } else {
      fn = function fn() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        var onSuccess = hasSuccessCallback ? lastArg : null;
        var onFail = hasErrorCallback ? secondLastArg : null;
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        args = args.slice(0, args.length - callbackCount);
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
      };
    }

    fn.type = type;
    return fn;
  }

  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }

  function createErrorFromErrorData(errorData) {
    var _ref = errorData || {},
        message = _ref.message,
        extraErrorInfo = _objectWithoutProperties(_ref, ["message"]);

    var error = new Error(message);
    error.framesToPop = 1;
    return _extends(error, extraErrorInfo);
  }

  var NativeModules = {};

  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else {
    var bridgeConfig = global.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

    var defineLazyObjectProperty = _require(_dependencyMap[2], 'defineLazyObjectProperty');

    (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
      var info = genModule(config, moduleID);

      if (!info) {
        return;
      }

      if (info.module) {
        NativeModules[info.name] = info.module;
      } else {
          defineLazyObjectProperty(NativeModules, info.name, {
            get: function get() {
              return loadModule(info.name, moduleID);
            }
          });
        }
    });
  }

  module.exports = NativeModules;
},67,[68,19,82],"NativeModules");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MessageQueue = _require(_dependencyMap[0], 'MessageQueue');

  var BatchedBridge = new MessageQueue(typeof __fbUninstallRNGlobalErrorHandler !== 'undefined' && __fbUninstallRNGlobalErrorHandler === true);
  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  module.exports = BatchedBridge;
},68,[69],"BatchedBridge");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ErrorUtils = _require(_dependencyMap[0], 'ErrorUtils');

  var Systrace = _require(_dependencyMap[1], 'Systrace');

  var deepFreezeAndThrowOnMutationInDev = _require(_dependencyMap[2], 'deepFreezeAndThrowOnMutationInDev');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var stringifySafe = _require(_dependencyMap[4], 'stringifySafe');

  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
  var TRACE_TAG_REACT_APPS = 1 << 17;
  var DEBUG_INFO_LIMIT = 32;
  var JSTimers = null;

  var MessageQueue = function () {
    function MessageQueue() {
      var shouldUninstallGlobalErrorHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      _classCallCheck(this, MessageQueue);

      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = [];
      this._failureCallbacks = [];
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = new Date().getTime();

      if (shouldUninstallGlobalErrorHandler) {
        this.uninstallGlobalErrorHandler();
      } else {
        this.installGlobalErrorHandler();
      }

      if (__DEV__) {
        this._debugInfo = {};
        this._remoteModuleTable = {};
        this._remoteMethodTable = {};
      }

      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
      this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);
      this.flushedQueue = this.flushedQueue.bind(this);
      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }

    _createClass(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        var _this = this;

        this.__guard(function () {
          _this.__callFunction(module, method, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "callFunctionReturnResultAndFlushedQueue",
      value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {
        var _this2 = this;

        var result = void 0;

        this.__guard(function () {
          result = _this2.__callFunction(module, method, args);
        });

        return [result, this.flushedQueue()];
      }
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        var _this3 = this;

        this.__guard(function () {
          _this3.__invokeCallback(cbID, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        var _this4 = this;

        this.__guard(function () {
          _this4.__callImmediates();
        });

        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return new Date().getTime() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = function () {
          return module;
        };
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module = void 0;
        var getValue = factory;

        this._lazyCallableModules[name] = function () {
          if (getValue) {
            module = getValue();
            getValue = null;
          }

          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        if (onFail || onSucc) {
          if (__DEV__) {
            this._debugInfo[this._callID] = [moduleID, methodID];

            if (this._callID > DEBUG_INFO_LIMIT) {
              delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];
            }
          }

          onFail && params.push(this._callID << 1);
          onSucc && params.push(this._callID << 1 | 1);
          this._successCallbacks[this._callID] = onSucc;
          this._failureCallbacks[this._callID] = onFail;
        }

        if (__DEV__) {
          global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);
        }

        this._callID++;

        this._queue[MODULE_IDS].push(moduleID);

        this._queue[METHOD_IDS].push(methodID);

        if (__DEV__) {
          var isValidArgument = function isValidArgument(val) {
            var t = typeof val === "undefined" ? "undefined" : _typeof(val);

            if (t === 'undefined' || t === 'null' || t === 'boolean' || t === 'number' || t === 'string') {
              return true;
            }

            if (t === 'function' || t !== 'object') {
              return false;
            }

            if (Array.isArray(val)) {
              return val.every(isValidArgument);
            }

            for (var k in val) {
              if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {
                return false;
              }
            }

            return true;
          };

          invariant(isValidArgument(params), '%s is not usable as a native method argument', params);
          deepFreezeAndThrowOnMutationInDev(params);
        }

        this._queue[PARAMS].push(params);

        var now = new Date().getTime();

        if (global.nativeFlushQueueImmediate && (now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS || this._inCall === 0)) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }

        Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);

        if (__DEV__ && this.__spy && isFinite(moduleID)) {
          this.__spy({
            type: TO_NATIVE,
            module: this._remoteModuleTable[moduleID],
            method: this._remoteMethodTable[moduleID][methodID],
            args: params
          });
        } else if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {
        if (__DEV__) {
          this._remoteModuleTable[moduleID] = name;
          this._remoteMethodTable[moduleID] = methods;
        }
      }
    }, {
      key: "uninstallGlobalErrorHandler",
      value: function uninstallGlobalErrorHandler() {
        this.__guard = this.__guardUnsafe;
      }
    }, {
      key: "installGlobalErrorHandler",
      value: function installGlobalErrorHandler() {
        this.__guard = this.__guardSafe;
      }
    }, {
      key: "__guardUnsafe",
      value: function __guardUnsafe(fn) {
        this._inCall++;
        fn();
        this._inCall--;
      }
    }, {
      key: "__guardSafe",
      value: function __guardSafe(fn) {
        this._inCall++;

        try {
          fn();
        } catch (error) {
          ErrorUtils.reportFatalError(error);
        } finally {
          this._inCall--;
        }
      }
    }, {
      key: "__callImmediates",
      value: function __callImmediates() {
        Systrace.beginEvent('JSTimers.callImmediates()');

        if (!JSTimers) {
          JSTimers = _require(_dependencyMap[5], 'JSTimers');
        }

        JSTimers.callImmediates();
        Systrace.endEvent();
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        Systrace.beginEvent(module + "." + method + "()");

        if (this.__spy) {
          this.__spy({
            type: TO_JS,
            module: module,
            method: method,
            args: args
          });
        }

        var moduleMethods = this.getCallableModule(module);
        invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
        invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
        var result = moduleMethods[method].apply(moduleMethods, args);
        Systrace.endEvent();
        return result;
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        var callID = cbID >>> 1;
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];

        if (__DEV__) {
          var debug = this._debugInfo[callID];

          var _module = debug && this._remoteModuleTable[debug[0]];

          var _method = debug && this._remoteMethodTable[debug[0]][debug[1]];

          if (!callback) {
            var errorMessage = "Callback with id " + cbID + ": " + _module + "." + _method + "() not found";

            if (_method) {
              errorMessage = "The callback " + _method + "() exists in module " + _module + ", " + 'but only one callback may be registered to a function in a native module.';
            }

            invariant(callback, errorMessage);
          }

          var profileName = debug ? '<callback for ' + _module + '.' + _method + '>' : cbID;

          if (callback && this.__spy) {
            this.__spy({
              type: TO_JS,
              module: null,
              method: profileName,
              args: args
            });
          }

          Systrace.beginEvent("MessageQueue.invokeCallback(" + profileName + ", " + stringifySafe(args) + ")");
        }

        if (!callback) {
          return;
        }

        this._successCallbacks[callID] = this._failureCallbacks[callID] = null;
        callback.apply(undefined, _toConsumableArray(args));

        if (__DEV__) {
          Systrace.endEvent();
        }
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = function (info) {
            console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + " : " + ("" + (info.module ? info.module + '.' : '') + info.method) + ("(" + JSON.stringify(info.args) + ")"));
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);

    return MessageQueue;
  }();

  module.exports = MessageQueue;
},69,[70,71,72,19,73,74],"MessageQueue");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = global.ErrorUtils;
},70,[],"ErrorUtils");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var TRACE_TAG_REACT_APPS = 1 << 17;
  var TRACE_TAG_JS_VM_CALLS = 1 << 27;
  var _enabled = false;
  var _asyncCookie = 0;
  var _markStack = [];

  var _markStackIndex = -1;

  var _canInstallReactHook = false;
  var REACT_MARKER = "\u269B";
  var userTimingPolyfill = __DEV__ ? {
    mark: function mark(markName) {
      if (_enabled) {
        _markStackIndex++;
        _markStack[_markStackIndex] = markName;
        var systraceLabel = markName;

        if (markName[0] === REACT_MARKER) {
          var indexOfId = markName.lastIndexOf(' (#');
          var cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;
          systraceLabel = markName.slice(2, cutoffIndex);
        }

        Systrace.beginEvent(systraceLabel);
      }
    },
    measure: function measure(measureName, startMark, endMark) {
      if (_enabled) {
        invariant(typeof measureName === 'string' && typeof startMark === 'string' && typeof endMark === 'undefined', 'Only performance.measure(string, string) overload is supported.');
        var topMark = _markStack[_markStackIndex];
        invariant(startMark === topMark, 'There was a mismatching performance.measure() call. ' + 'Expected "%s" but got "%s."', topMark, startMark);
        _markStackIndex--;
        Systrace.endEvent();
      }
    },
    clearMarks: function clearMarks(markName) {
      if (_enabled) {
        if (_markStackIndex === -1) {
          return;
        }

        if (markName === _markStack[_markStackIndex]) {
          if (userTimingPolyfill != null) {
            userTimingPolyfill.measure(markName, markName);
          }
        }
      }
    },
    clearMeasures: function clearMeasures() {}
  } : null;
  var Systrace = {
    installReactHook: function installReactHook() {
      if (_enabled) {
        if (__DEV__) {
          global.performance = userTimingPolyfill;
        }
      }

      _canInstallReactHook = true;
    },
    setEnabled: function setEnabled(enabled) {
      if (_enabled !== enabled) {
        if (__DEV__) {
          if (enabled) {
            global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);
          } else {
            global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);
          }

          if (_canInstallReactHook) {
            if (enabled && global.performance === undefined) {
              global.performance = userTimingPolyfill;
            }
          }
        }

        _enabled = enabled;
      }
    },
    isEnabled: function isEnabled() {
      return _enabled;
    },
    beginEvent: function beginEvent(profileName, args) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
      }
    },
    endEvent: function endEvent() {
      if (_enabled) {
        global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
      }
    },
    beginAsyncEvent: function beginAsyncEvent(profileName) {
      var cookie = _asyncCookie;

      if (_enabled) {
        _asyncCookie++;
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }

      return cookie;
    },
    endAsyncEvent: function endAsyncEvent(profileName, cookie) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }
    },
    counterEvent: function counterEvent(profileName, value) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
      }
    }
  };

  if (__DEV__) {
    _require.Systrace = Systrace;
  }

  module.exports = Systrace;
},71,[19],"Systrace");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  function deepFreezeAndThrowOnMutationInDev(object) {
    if (__DEV__) {
      if ((typeof object === "undefined" ? "undefined" : _typeof(object)) !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
        return object;
      }

      var keys = Object.keys(object);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (object.hasOwnProperty(key)) {
          object.__defineGetter__(key, identity.bind(null, object[key]));

          object.__defineSetter__(key, throwOnImmutableMutation.bind(null, key));
        }
      }

      Object.freeze(object);
      Object.seal(object);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (object.hasOwnProperty(key)) {
          deepFreezeAndThrowOnMutationInDev(object[key]);
        }
      }
    }

    return object;
  }

  function throwOnImmutableMutation(key, value) {
    throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
  }

  function identity(value) {
    return value;
  }

  module.exports = deepFreezeAndThrowOnMutationInDev;
},72,[],"deepFreezeAndThrowOnMutationInDev");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  function stringifySafe(arg) {
    var ret;
    var type = typeof arg === "undefined" ? "undefined" : _typeof(arg);

    if (arg === undefined) {
      ret = 'undefined';
    } else if (arg === null) {
      ret = 'null';
    } else if (type === 'string') {
      ret = '"' + arg + '"';
    } else if (type === 'function') {
      try {
        ret = arg.toString();
      } catch (e) {
        ret = '[function unknown]';
      }
    } else {
      try {
        ret = JSON.stringify(arg);
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            ret = arg.toString();
          } catch (E) {}
        }
      }
    }

    return ret || '["' + type + '" failed to stringify]';
  }

  module.exports = stringifySafe;
},73,[],"stringifySafe");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require2(_dependencyMap[0], 'Platform');

  var Systrace = _require2(_dependencyMap[1], 'Systrace');

  var invariant = _require2(_dependencyMap[2], 'fbjs/lib/invariant');

  var _require = _require2(_dependencyMap[3], 'NativeModules'),
      Timing = _require.Timing;

  var _performanceNow = null;

  function performanceNow() {
    if (!_performanceNow) {
      _performanceNow = _require2(_dependencyMap[4], 'fbjs/lib/performanceNow');
    }

    return _performanceNow();
  }

  var FRAME_DURATION = 1000 / 60;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;
  var MAX_TIMER_DURATION_MS = 60 * 1000;
  var IS_ANDROID = Platform.OS === 'android';
  var ANDROID_LONG_TIMER_MESSAGE = 'Setting a timer for a long period of time, i.e. multiple minutes, is a ' + 'performance and correctness issue on Android as it keeps the timer ' + 'module awake, and timers can only be called when the app is in the foreground. ' + 'See https://github.com/facebook/react-native/issues/12981 for more info.';
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var immediates = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var identifiers = [];
  var GUID = 1;
  var errors = null;
  var hasEmittedTimeDriftWarning = false;

  function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);

    if (freeIndex === -1) {
      freeIndex = timerIDs.length;
    }

    return freeIndex;
  }

  function _allocateCallback(func, type) {
    var id = GUID++;

    var freeIndex = _getFreeIndex();

    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;

    if (__DEV__) {
      var parseErrorStack = _require2(_dependencyMap[5], 'parseErrorStack');

      var error = new Error();
      error.framesToPop = 1;
      var stack = parseErrorStack(error);

      if (stack) {
        identifiers[freeIndex] = stack.shift();
      }
    }

    return id;
  }

  function _callTimer(timerID, frameTime, didTimeout) {
    _require2(_dependencyMap[6], 'fbjs/lib/warning')(timerID <= GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID);

    var timerIndex = timerIDs.indexOf(timerID);

    if (timerIndex === -1) {
      return;
    }

    var type = types[timerIndex];
    var callback = callbacks[timerIndex];

    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }

    if (__DEV__) {
      var identifier = identifiers[timerIndex] || {};
      Systrace.beginEvent('Systrace.callTimer: ' + identifier.methodName);
    }

    if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
      _clearIndex(timerIndex);
    }

    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(performanceNow());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      if (!errors) {
        errors = [e];
      } else {
        errors.push(e);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }
  }

  function _callImmediatesPass() {
    if (__DEV__) {
      Systrace.beginEvent('callImmediatesPass()');
    }

    if (immediates.length > 0) {
      var passImmediates = immediates.slice();
      immediates = [];

      for (var i = 0; i < passImmediates.length; ++i) {
        _callTimer(passImmediates[i], 0);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }

    return immediates.length > 0;
  }

  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
    identifiers[i] = null;
  }

  function _freeCallback(timerID) {
    if (timerID == null) {
      return;
    }

    var index = timerIDs.indexOf(timerID);

    if (index !== -1) {
      _clearIndex(index);

      var type = types[index];

      if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
        Timing.deleteTimer(timerID);
      }
    }
  }

  var JSTimers = {
    setTimeout: function setTimeout(func, duration) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setTimeout with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setTimeout');

      Timing.createTimer(id, duration || 0, Date.now(), false);
      return id;
    },
    setInterval: function setInterval(func, duration) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
        console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setInterval with duration ' + duration + 'ms)');
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setInterval');

      Timing.createTimer(id, duration || 0, Date.now(), true);
      return id;
    },
    setImmediate: function setImmediate(func) {
      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setImmediate');

      immediates.push(id);
      return id;
    },
    requestAnimationFrame: function requestAnimationFrame(func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');

      Timing.createTimer(id, 1, Date.now(), false);
      return id;
    },
    requestIdleCallback: function requestIdleCallback(func, options) {
      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(true);
      }

      var timeout = options && options.timeout;

      var id = _allocateCallback(timeout != null ? function (deadline) {
        var timeoutId = requestIdleCallbackTimeouts[id];

        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }

        return func(deadline);
      } : func, 'requestIdleCallback');

      requestIdleCallbacks.push(id);

      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(function () {
          var index = requestIdleCallbacks.indexOf(id);

          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);

            _callTimer(id, performanceNow(), true);
          }

          delete requestIdleCallbackTimeouts[id];

          if (requestIdleCallbacks.length === 0) {
            Timing.setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }

      return id;
    },
    cancelIdleCallback: function cancelIdleCallback(timerID) {
      _freeCallback(timerID);

      var index = requestIdleCallbacks.indexOf(timerID);

      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }

      var timeoutId = requestIdleCallbackTimeouts[timerID];

      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }
    },
    clearTimeout: function clearTimeout(timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function clearInterval(timerID) {
      _freeCallback(timerID);
    },
    clearImmediate: function clearImmediate(timerID) {
      _freeCallback(timerID);

      var index = immediates.indexOf(timerID);

      if (index !== -1) {
        immediates.splice(index, 1);
      }
    },
    cancelAnimationFrame: function cancelAnimationFrame(timerID) {
      _freeCallback(timerID);
    },
    callTimers: function callTimers(timersToCall) {
      invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
      errors = null;

      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }

      if (errors) {
        var errorCount = errors.length;

        if (errorCount > 1) {
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout(function (error) {
              throw error;
            }.bind(null, errors[ii]), 0);
          }
        }

        throw errors[0];
      }
    },
    callIdleCallbacks: function callIdleCallbacks(frameTime) {
      if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }

      errors = null;

      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks.slice();
        requestIdleCallbacks = [];

        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    callImmediates: function callImmediates() {
      errors = null;

      while (_callImmediatesPass()) {}

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }

      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };

  if (!Timing) {
    console.warn("Timing native module is not available, can't set timers.");
    module.exports = {
      callImmediates: JSTimers.callImmediates,
      setImmediate: JSTimers.setImmediate
    };
  } else {
    module.exports = JSTimers;
  }
},74,[75,71,19,67,76,79,20],"JSTimers");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var Platform = {
    OS: 'android',

    get Version() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.Version;
    },

    get isTesting() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.isTesting;
    },

    get isTV() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.uiMode === 'tv';
    },

    select: function select(obj) {
      return 'android' in obj ? obj.android : obj.default;
    }
  };
  module.exports = Platform;
},75,[67],"Platform");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var performance = _require(_dependencyMap[0], './performance');

  var performanceNow;

  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},76,[77],"node_modules/fbjs/lib/performanceNow.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ExecutionEnvironment = _require(_dependencyMap[0], './ExecutionEnvironment');

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},77,[78],"node_modules/fbjs/lib/performance.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},78,[],"node_modules/fbjs/lib/ExecutionEnvironment.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function parseErrorStack(e) {
    if (!e || !e.stack) {
      return [];
    }

    var stacktraceParser = _require(_dependencyMap[0], 'stacktrace-parser');

    var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);
    var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;

    while (framesToPop--) {
      stack.shift();
    }

    return stack;
  }

  module.exports = parseErrorStack;
},79,[80],"parseErrorStack");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = _require(_dependencyMap[0], './lib/stacktrace-parser.js');
},80,[81],"node_modules/stacktrace-parser/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var UNKNOWN_FUNCTION = '<unknown>';
    var StackTraceParser = {
        parse: function parse(stackString) {
            var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
                node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
                lines = stackString.split('\n'),
                stack = [],
                parts,
                element;

            for (var i = 0, j = lines.length; i < j; ++i) {
                if (parts = gecko.exec(lines[i])) {
                    element = {
                        'file': parts[3],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[4],
                        'column': parts[5] ? +parts[5] : null
                    };
                } else if (parts = chrome.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else if (parts = node.exec(lines[i])) {
                    element = {
                        'file': parts[2],
                        'methodName': parts[1] || UNKNOWN_FUNCTION,
                        'lineNumber': +parts[3],
                        'column': parts[4] ? +parts[4] : null
                    };
                } else {
                    continue;
                }

                stack.push(element);
            }

            return stack;
        }
    };
    module.exports = StackTraceParser;
},81,[],"node_modules/stacktrace-parser/lib/stacktrace-parser.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value = void 0;
    var valueSet = false;

    function getValue() {
      if (!valueSet) {
        valueSet = true;
        setValue(get());
      }

      return value;
    }

    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable: enumerable,
        writable: writable
      });
    }

    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable: enumerable
    });
  }

  module.exports = defineLazyObjectProperty;
},82,[],"defineLazyObjectProperty");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var EventSubscriptionVendor = _require(_dependencyMap[1], 'EventSubscriptionVendor');

  function checkNativeEventModule(eventType) {
    if (eventType) {
      if (eventType.lastIndexOf('statusBar', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
      }

      if (eventType.lastIndexOf('keyboard', 0) === 0) {
        throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
      }

      if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
        throw new Error('`' + eventType + '` event should be registered via the AppState module');
      }
    }
  }

  var RCTDeviceEventEmitter = function (_EventEmitter) {
    _inherits(RCTDeviceEventEmitter, _EventEmitter);

    function RCTDeviceEventEmitter() {
      _classCallCheck(this, RCTDeviceEventEmitter);

      var sharedSubscriber = new EventSubscriptionVendor();

      var _this = _possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this, sharedSubscriber));

      _this.sharedSubscriber = sharedSubscriber;
      return _this;
    }

    _createClass(RCTDeviceEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        return _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        if (__DEV__) {
          checkNativeEventModule(eventType);
        }

        _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (subscription.emitter !== this) {
          subscription.emitter.removeSubscription(subscription);
        } else {
          _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
        }
      }
    }]);

    return RCTDeviceEventEmitter;
  }(EventEmitter);

  module.exports = new RCTDeviceEventEmitter();
},83,[84,87],"RCTDeviceEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var EmitterSubscription = _require(_dependencyMap[0], 'EmitterSubscription');

  var EventSubscriptionVendor = _require(_dependencyMap[1], 'EventSubscriptionVendor');

  var emptyFunction = _require(_dependencyMap[2], 'fbjs/lib/emptyFunction');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var EventEmitter = function () {
    function EventEmitter(subscriber) {
      _classCallCheck(this, EventEmitter);

      this._subscriber = subscriber || new EventSubscriptionVendor();
    }

    _createClass(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        var _this = this;

        return this.addListener(eventType, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this.removeCurrentListener();

          listener.apply(context, args);
        });
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._subscriber.removeAllSubscriptions(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
        this.removeSubscription(this._currentSubscription);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');

        this._subscriber.removeSubscription(subscription);
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
          return subscription.listener;
        }) : [];
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription) {
              this._currentSubscription = subscription;
              subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
            }
          }

          this._currentSubscription = null;
        }
      }
    }, {
      key: "removeListener",
      value: function removeListener(eventType, listener) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription && subscription.listener === listener) {
              subscription.remove();
            }
          }
        }
      }
    }]);

    return EventEmitter;
  }();

  module.exports = EventEmitter;
},84,[85,87,17,19],"EventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventSubscription = _require(_dependencyMap[0], 'EventSubscription');

  var EmitterSubscription = function (_EventSubscription) {
    _inherits(EmitterSubscription, _EventSubscription);

    function EmitterSubscription(emitter, subscriber, listener, context) {
      _classCallCheck(this, EmitterSubscription);

      var _this = _possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this, subscriber));

      _this.emitter = emitter;
      _this.listener = listener;
      _this.context = context;
      return _this;
    }

    _createClass(EmitterSubscription, [{
      key: "remove",
      value: function remove() {
        this.emitter.removeSubscription(this);
      }
    }]);

    return EmitterSubscription;
  }(EventSubscription);

  module.exports = EmitterSubscription;
},85,[86],"EmitterSubscription");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      _classCallCheck(this, EventSubscription);

      this.subscriber = subscriber;
    }

    _createClass(EventSubscription, [{
      key: "remove",
      value: function remove() {
        this.subscriber.removeSubscription(this);
      }
    }]);

    return EventSubscription;
  }();

  module.exports = EventSubscription;
},86,[],"EventSubscription");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      _classCallCheck(this, EventSubscriptionVendor);

      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    _createClass(EventSubscriptionVendor, [{
      key: "addSubscription",
      value: function addSubscription(eventType, subscription) {
        invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

        if (!this._subscriptionsForType[eventType]) {
          this._subscriptionsForType[eventType] = [];
        }

        var key = this._subscriptionsForType[eventType].length;

        this._subscriptionsForType[eventType].push(subscription);

        subscription.eventType = eventType;
        subscription.key = key;
        return subscription;
      }
    }, {
      key: "removeAllSubscriptions",
      value: function removeAllSubscriptions(eventType) {
        if (eventType === undefined) {
          this._subscriptionsForType = {};
        } else {
          delete this._subscriptionsForType[eventType];
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var eventType = subscription.eventType;
        var key = subscription.key;
        var subscriptionsForType = this._subscriptionsForType[eventType];

        if (subscriptionsForType) {
          delete subscriptionsForType[key];
        }
      }
    }, {
      key: "getSubscriptionsForType",
      value: function getSubscriptionsForType(eventType) {
        return this._subscriptionsForType[eventType];
      }
    }]);

    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},87,[19],"EventSubscriptionVendor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var ProgressBarAndroid = _require(_dependencyMap[3], 'ProgressBarAndroid');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var React = _require(_dependencyMap[5], 'React');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var View = _require(_dependencyMap[7], 'View');

  var ViewPropTypes = _require(_dependencyMap[8], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[9], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[10], 'requireNativeComponent');

  var RCTActivityIndicator = void 0;
  var GRAY = '#999999';
  var ActivityIndicator = createReactClass({
    displayName: 'ActivityIndicator',
    mixins: [NativeMethodsMixin],
    propTypes: _extends({}, ViewPropTypes, {
      animating: PropTypes.bool,
      color: ColorPropType,
      size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'large']), PropTypes.number]),
      hidesWhenStopped: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        animating: true,
        color: Platform.OS === 'ios' ? GRAY : undefined,
        hidesWhenStopped: true,
        size: 'small'
      };
    },
    render: function render() {
      var _props = this.props,
          onLayout = _props.onLayout,
          style = _props.style,
          props = _objectWithoutProperties(_props, ["onLayout", "style"]);

      var sizeStyle = void 0;

      switch (props.size) {
        case 'small':
          sizeStyle = styles.sizeSmall;
          break;

        case 'large':
          sizeStyle = styles.sizeLarge;
          break;

        default:
          sizeStyle = {
            height: props.size,
            width: props.size
          };
          break;
      }

      var nativeProps = _extends({}, props, {
        style: sizeStyle,
        styleAttr: 'Normal',
        indeterminate: true
      });

      return React.createElement(
        View,
        {
          onLayout: onLayout,
          style: [styles.container, style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 113
          }
        },
        Platform.OS === 'ios' ? React.createElement(RCTActivityIndicator, _extends({}, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 115
          }
        })) : React.createElement(ProgressBarAndroid, _extends({}, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 117
          }
        }))
      );
    }
  });

  if (Platform.OS === 'ios') {
    RCTActivityIndicator = requireNativeComponent('RCTActivityIndicatorView', ActivityIndicator, {
      nativeOnly: {
        activityIndicatorViewStyle: true
      }
    });
  }

  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });
  module.exports = ActivityIndicator;
},88,[89,91,75,171,25,172,211,213,173,216,188],"ActivityIndicator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = _require(_dependencyMap[0], 'normalizeColor');

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},89,[90],"ColorPropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function normalizeColor(color) {
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }

      return null;
    }

    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }

    if (names.hasOwnProperty(color)) {
      return names[color];
    }

    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
    }

    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }

    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
    }

    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }

    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }

    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
    }

    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 1 / 6) {
      return p + (q - p) * 6 * t;
    }

    if (t < 1 / 2) {
      return q;
    }

    if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 1 / 3);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 1 / 3);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = NUMBER + '%';

  function call() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }

  var matchers = {
    rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
    rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
    hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
    hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
    hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#([0-9a-fA-F]{6})$/,
    hex8: /^#([0-9a-fA-F]{8})$/
  };

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},90,[],"normalizeColor");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  var NativeMethodsMixin = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;
  module.exports = NativeMethodsMixin;
},91,[92],"NativeMethodsMixin");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative = void 0;

  if (__DEV__) {
    ReactNative = _require(_dependencyMap[0], 'ReactNativeRenderer-dev');
  } else {
    ReactNative = _require(_dependencyMap[1], 'ReactNativeRenderer-prod');
  }

  module.exports = ReactNative;
},92,[93,170],"ReactNative");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  if (__DEV__) {
    (function () {
      "use strict";

      _require2(_dependencyMap[0], "InitializeCore");

      var invariant = _require2(_dependencyMap[1], "fbjs/lib/invariant");

      var warning = _require2(_dependencyMap[2], "fbjs/lib/warning");

      var emptyFunction = _require2(_dependencyMap[3], "fbjs/lib/emptyFunction");

      var UIManager = _require2(_dependencyMap[4], "UIManager");

      var RCTEventEmitter = _require2(_dependencyMap[5], "RCTEventEmitter");

      var TextInputState = _require2(_dependencyMap[6], "TextInputState");

      var deepDiffer = _require2(_dependencyMap[7], "deepDiffer");

      var flattenStyle = _require2(_dependencyMap[8], "flattenStyle");

      var React = _require2(_dependencyMap[9], "react");

      var emptyObject = _require2(_dependencyMap[10], "fbjs/lib/emptyObject");

      var shallowEqual = _require2(_dependencyMap[11], "fbjs/lib/shallowEqual");

      var ExceptionsManager = _require2(_dependencyMap[12], "ExceptionsManager");

      var checkPropTypes = _require2(_dependencyMap[13], "prop-types/checkPropTypes");

      var deepFreezeAndThrowOnMutationInDev = _require2(_dependencyMap[14], "deepFreezeAndThrowOnMutationInDev");

      var invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        this._hasCaughtError = false;
        this._caughtError = null;
        var funcArgs = Array.prototype.slice.call(arguments, 3);

        try {
          func.apply(context, funcArgs);
        } catch (error) {
          this._caughtError = error;
          this._hasCaughtError = true;
        }
      };

      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");

          var invokeGuardedCallbackDev = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            invariant(typeof document !== "undefined", "The `document` global was defined when React was initialized, but is not " + "defined anymore. This can happen in a test environment if a component " + "schedules an update from an asynchronous callback, but the test has already " + "finished running. To solve this, you can either unmount the component at " + "the end of your test (and ensure that any asynchronous operations get " + "canceled in `componentWillUnmount`), or you can change the test itself " + "to be asynchronous.");
            var evt = document.createEvent("Event");
            var didError = true;
            var funcArgs = Array.prototype.slice.call(arguments, 3);

            function callCallback() {
              fakeNode.removeEventListener(evtType, callCallback, false);
              func.apply(context, funcArgs);
              didError = false;
            }

            var error = void 0;
            var didSetError = false;
            var isCrossOriginError = false;

            function onError(event) {
              error = event.error;
              didSetError = true;

              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
            }

            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", onError);
            fakeNode.addEventListener(evtType, callCallback, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);

            if (didError) {
              if (!didSetError) {
                error = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
              } else if (isCrossOriginError) {
                error = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://fb.me/react-crossorigin-error for more information.");
              }

              this._hasCaughtError = true;
              this._caughtError = error;
            } else {
              this._hasCaughtError = false;
              this._caughtError = null;
            }

            window.removeEventListener("error", onError);
          };

          invokeGuardedCallback = invokeGuardedCallbackDev;
        }
      }
      var invokeGuardedCallback$1 = invokeGuardedCallback;
      var ReactErrorUtils = {
        _caughtError: null,
        _hasCaughtError: false,
        _rethrowError: null,
        _hasRethrowError: false,
        invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback$1.apply(ReactErrorUtils, arguments);
        },
        invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

          if (ReactErrorUtils.hasCaughtError()) {
            var error = ReactErrorUtils.clearCaughtError();

            if (!ReactErrorUtils._hasRethrowError) {
              ReactErrorUtils._hasRethrowError = true;
              ReactErrorUtils._rethrowError = error;
            }
          }
        },
        rethrowCaughtError: function rethrowCaughtError() {
          return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
        },
        hasCaughtError: function hasCaughtError() {
          return ReactErrorUtils._hasCaughtError;
        },
        clearCaughtError: function clearCaughtError() {
          if (ReactErrorUtils._hasCaughtError) {
            var error = ReactErrorUtils._caughtError;
            ReactErrorUtils._caughtError = null;
            ReactErrorUtils._hasCaughtError = false;
            return error;
          } else {
            invariant(false, "clearCaughtError was called but no error was captured. This error " + "is likely caused by a bug in React. Please file an issue.");
          }
        }
      };

      var _rethrowCaughtError = function _rethrowCaughtError() {
        if (ReactErrorUtils._hasRethrowError) {
          var error = ReactErrorUtils._rethrowError;
          ReactErrorUtils._rethrowError = null;
          ReactErrorUtils._hasRethrowError = false;
          throw error;
        }
      };

      var eventPluginOrder = null;
      var namesToPlugins = {};

      function recomputePluginOrdering() {
        if (!eventPluginOrder) {
          return;
        }

        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName];
          var pluginIndex = eventPluginOrder.indexOf(pluginName);
          invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName);

          if (plugins[pluginIndex]) {
            continue;
          }

          invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName);
          plugins[pluginIndex] = pluginModule;
          var publishedEvents = pluginModule.eventTypes;

          for (var eventName in publishedEvents) {
            invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
          }
        }
      }

      function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName);
        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

        if (phasedRegistrationNames) {
          for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
              var phasedRegistrationName = phasedRegistrationNames[phaseName];
              publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
          }

          return true;
        } else if (dispatchConfig.registrationName) {
          publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
          return true;
        }

        return false;
      }

      function publishRegistrationName(registrationName, pluginModule, eventName) {
        invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName);
        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
        }
      }

      var plugins = [];
      var eventNameDispatchConfigs = {};
      var registrationNameModules = {};
      var registrationNameDependencies = {};

      function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React.");
        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
      }

      function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;

        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }

          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName);
            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }

        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      }

      var getFiberCurrentPropsFromNode = null;
      var getInstanceFromNode = null;
      var getNodeFromInstance = null;
      var injection$1 = {
        injectComponentTree: function injectComponentTree(Injected) {
          getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
          getInstanceFromNode = Injected.getInstanceFromNode;
          getNodeFromInstance = Injected.getNodeFromInstance;
          {
            !(getNodeFromInstance && getInstanceFromNode) ? warning(false, "EventPluginUtils.injection.injectComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.") : void 0;
          }
        }
      };

      function isEndish(topLevelType) {
        return topLevelType === "topMouseUp" || topLevelType === "topTouchEnd" || topLevelType === "topTouchCancel";
      }

      function isMoveish(topLevelType) {
        return topLevelType === "topMouseMove" || topLevelType === "topTouchMove";
      }

      function isStartish(topLevelType) {
        return topLevelType === "topMouseDown" || topLevelType === "topTouchStart";
      }

      var validateEventDispatches = void 0;
      {
        validateEventDispatches = function validateEventDispatches(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          var listenersIsArr = Array.isArray(dispatchListeners);
          var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
          var instancesIsArr = Array.isArray(dispatchInstances);
          var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
          !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warning(false, "EventPluginUtils: Invalid `event`.") : void 0;
        };
      }

      function executeDispatch(event, simulated, listener, inst) {
        var type = event.type || "unknown-event";
        event.currentTarget = getNodeFromInstance(inst);
        ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }

      function executeDispatchesInOrder(event, simulated) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
          }
        } else if (dispatchListeners) {
          executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
        }

        event._dispatchListeners = null;
        event._dispatchInstances = null;
      }

      function executeDispatchesInOrderStopAtTrueImpl(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            if (dispatchListeners[i](event, dispatchInstances[i])) {
              return dispatchInstances[i];
            }
          }
        } else if (dispatchListeners) {
          if (dispatchListeners(event, dispatchInstances)) {
            return dispatchInstances;
          }
        }

        return null;
      }

      function executeDispatchesInOrderStopAtTrue(event) {
        var ret = executeDispatchesInOrderStopAtTrueImpl(event);
        event._dispatchInstances = null;
        event._dispatchListeners = null;
        return ret;
      }

      function executeDirectDispatch(event) {
        {
          validateEventDispatches(event);
        }
        var dispatchListener = event._dispatchListeners;
        var dispatchInstance = event._dispatchInstances;
        invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
        event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
        var res = dispatchListener ? dispatchListener(event) : null;
        event.currentTarget = null;
        event._dispatchListeners = null;
        event._dispatchInstances = null;
        return res;
      }

      function hasDispatches(event) {
        return !!event._dispatchListeners;
      }

      function accumulateInto(current, next) {
        invariant(next != null, "accumulateInto(...): Accumulated items must not be null or undefined.");

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          if (Array.isArray(next)) {
            current.push.apply(current, next);
            return current;
          }

          current.push(next);
          return current;
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) {
          arr.forEach(cb, scope);
        } else if (arr) {
          cb.call(scope, arr);
        }
      }

      var eventQueue = null;

      var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
        if (event) {
          executeDispatchesInOrder(event, simulated);

          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };

      var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
        return executeDispatchesAndRelease(e, true);
      };

      var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
        return executeDispatchesAndRelease(e, false);
      };

      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }

      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
            return !!(props.disabled && isInteractive(type));

          default:
            return false;
        }
      }

      var injection = {
        injectEventPluginOrder: injectEventPluginOrder,
        injectEventPluginsByName: injectEventPluginsByName
      };

      function getListener(inst, registrationName) {
        var listener = void 0;
        var stateNode = inst.stateNode;

        if (!stateNode) {
          return null;
        }

        var props = getFiberCurrentPropsFromNode(stateNode);

        if (!props) {
          return null;
        }

        listener = props[registrationName];

        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }

        invariant(!listener || typeof listener === "function", "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener === "undefined" ? "undefined" : _typeof(listener));
        return listener;
      }

      function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = null;

        for (var i = 0; i < plugins.length; i++) {
          var possiblePlugin = plugins[i];

          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

            if (extractedEvents) {
              events = accumulateInto(events, extractedEvents);
            }
          }
        }

        return events;
      }

      function runEventsInBatch(events, simulated) {
        if (events !== null) {
          eventQueue = accumulateInto(eventQueue, events);
        }

        var processingEventQueue = eventQueue;
        eventQueue = null;

        if (!processingEventQueue) {
          return;
        }

        if (simulated) {
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
        } else {
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
        }

        invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented.");
        ReactErrorUtils.rethrowCaughtError();
      }

      function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        runEventsInBatch(events, false);
      }

      var IndeterminateComponent = 0;
      var FunctionalComponent = 1;
      var ClassComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var CallComponent = 7;
      var CallHandlerPhase = 8;
      var ReturnComponent = 9;
      var Fragment = 10;
      var Mode = 11;
      var ContextConsumer = 12;
      var ContextProvider = 13;
      var ForwardRef = 14;

      function getParent(inst) {
        do {
          inst = inst["return"];
        } while (inst && inst.tag !== HostComponent);

        if (inst) {
          return inst;
        }

        return null;
      }

      function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;

        for (var tempA = instA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }

        var depthB = 0;

        for (var tempB = instB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }

        while (depthA - depthB > 0) {
          instA = getParent(instA);
          depthA--;
        }

        while (depthB - depthA > 0) {
          instB = getParent(instB);
          depthB--;
        }

        var depth = depthA;

        while (depth--) {
          if (instA === instB || instA === instB.alternate) {
            return instA;
          }

          instA = getParent(instA);
          instB = getParent(instB);
        }

        return null;
      }

      function isAncestor(instA, instB) {
        while (instB) {
          if (instA === instB || instA === instB.alternate) {
            return true;
          }

          instB = getParent(instB);
        }

        return false;
      }

      function getParentInstance(inst) {
        return getParent(inst);
      }

      function traverseTwoPhase(inst, fn, arg) {
        var path = [];

        while (inst) {
          path.push(inst);
          inst = getParent(inst);
        }

        var i = void 0;

        for (i = path.length; i-- > 0;) {
          fn(path[i], "captured", arg);
        }

        for (i = 0; i < path.length; i++) {
          fn(path[i], "bubbled", arg);
        }
      }

      function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
      }

      function accumulateDirectionalDispatches(inst, phase, event) {
        {
          !inst ? warning(false, "Dispatching inst must not be null") : void 0;
        }
        var listener = listenerAtPhase(inst, event, phase);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }

      function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          var targetInst = event._targetInst;
          var parentInst = targetInst ? getParentInstance(targetInst) : null;
          traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener(inst, registrationName);

          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }

      function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches(event._targetInst, null, event);
        }
      }

      function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
      }

      function accumulateTwoPhaseDispatchesSkipTarget(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
      }

      function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
      }

      var didWarnForAddedNewProperty = false;
      var EVENT_POOL_SIZE = 10;
      var shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"];
      var EventInterface = {
        type: null,
        target: null,
        currentTarget: emptyFunction.thatReturnsNull,
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function timeStamp(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
      };

      function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        {
          delete this.nativeEvent;
          delete this.preventDefault;
          delete this.stopPropagation;
        }
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          if (!Interface.hasOwnProperty(propName)) {
            continue;
          }

          {
            delete this[propName];
          }
          var normalize = Interface[propName];

          if (normalize) {
            this[propName] = normalize(nativeEvent);
          } else {
            if (propName === "target") {
              this.target = nativeEventTarget;
            } else {
              this[propName] = nativeEvent[propName];
            }
          }
        }

        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

        if (defaultPrevented) {
          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        } else {
          this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
        }

        this.isPropagationStopped = emptyFunction.thatReturnsFalse;
        return this;
      }

      _extends(SyntheticEvent.prototype, {
        preventDefault: function preventDefault() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }

          this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
        },
        stopPropagation: function stopPropagation() {
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }

          this.isPropagationStopped = emptyFunction.thatReturnsTrue;
        },
        persist: function persist() {
          this.isPersistent = emptyFunction.thatReturnsTrue;
        },
        isPersistent: emptyFunction.thatReturnsFalse,
        destructor: function destructor() {
          var Interface = this.constructor.Interface;

          for (var propName in Interface) {
            {
              Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            }
          }

          for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
          }

          {
            Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
            Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", emptyFunction));
            Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", emptyFunction));
          }
        }
      });

      SyntheticEvent.Interface = EventInterface;

      SyntheticEvent.extend = function (Interface) {
        var Super = this;

        var E = function E() {};

        E.prototype = Super.prototype;
        var prototype = new E();

        function Class() {
          return Super.apply(this, arguments);
        }

        _extends(prototype, Class.prototype);

        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = _extends({}, Super.Interface, Interface);
        Class.extend = Super.extend;
        addEventPoolingTo(Class);
        return Class;
      };

      {
        var isProxySupported = typeof Proxy === "function" && !Object.isSealed(new Proxy({}, {}));

        if (isProxySupported) {
          SyntheticEvent = new Proxy(SyntheticEvent, {
            construct: function construct(target, args) {
              return this.apply(target, Object.create(target.prototype), args);
            },
            apply: function apply(constructor, that, args) {
              return new Proxy(constructor.apply(that, args), {
                set: function set(target, prop, value) {
                  if (prop !== "isPersistent" && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                    !(didWarnForAddedNewProperty || target.isPersistent()) ? warning(false, "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + "The property is never released. See " + "https://fb.me/react-event-pooling for more information.") : void 0;
                    didWarnForAddedNewProperty = true;
                  }

                  target[prop] = value;
                  return true;
                }
              });
            }
          });
        }
      }
      addEventPoolingTo(SyntheticEvent);

      function getPooledWarningPropertyDefinition(propName, getVal) {
        var isFunction = typeof getVal === "function";
        return {
          configurable: true,
          set: set,
          get: get
        };

        function set(val) {
          var action = isFunction ? "setting the method" : "setting the property";
          warn(action, "This is effectively a no-op");
          return val;
        }

        function get() {
          var action = isFunction ? "accessing the method" : "accessing the property";
          var result = isFunction ? "This is a no-op function" : "This is set to null";
          warn(action, result);
          return getVal;
        }

        function warn(action, result) {
          var warningCondition = false;
          !warningCondition ? warning(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result) : void 0;
        }
      }

      function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;

        if (EventConstructor.eventPool.length) {
          var instance = EventConstructor.eventPool.pop();
          EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
          return instance;
        }

        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
      }

      function releasePooledEvent(event) {
        var EventConstructor = this;
        invariant(event instanceof EventConstructor, "Trying to release an event instance  into a pool of a different type.");
        event.destructor();

        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
          EventConstructor.eventPool.push(event);
        }
      }

      function addEventPoolingTo(EventConstructor) {
        EventConstructor.eventPool = [];
        EventConstructor.getPooled = getPooledEvent;
        EventConstructor.release = releasePooledEvent;
      }

      var SyntheticEvent$1 = SyntheticEvent;
      var ResponderSyntheticEvent = SyntheticEvent$1.extend({
        touchHistory: function touchHistory(nativeEvent) {
          return null;
        }
      });
      var MAX_TOUCH_BANK = 20;
      var touchBank = [];
      var touchHistory = {
        touchBank: touchBank,
        numberActiveTouches: 0,
        indexOfSingleActiveTouch: -1,
        mostRecentTimeStamp: 0
      };

      function timestampForTouch(touch) {
        return touch.timeStamp || touch.timestamp;
      }

      function createTouchRecord(touch) {
        return {
          touchActive: true,
          startPageX: touch.pageX,
          startPageY: touch.pageY,
          startTimeStamp: timestampForTouch(touch),
          currentPageX: touch.pageX,
          currentPageY: touch.pageY,
          currentTimeStamp: timestampForTouch(touch),
          previousPageX: touch.pageX,
          previousPageY: touch.pageY,
          previousTimeStamp: timestampForTouch(touch)
        };
      }

      function resetTouchRecord(touchRecord, touch) {
        touchRecord.touchActive = true;
        touchRecord.startPageX = touch.pageX;
        touchRecord.startPageY = touch.pageY;
        touchRecord.startTimeStamp = timestampForTouch(touch);
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchRecord.previousPageX = touch.pageX;
        touchRecord.previousPageY = touch.pageY;
        touchRecord.previousTimeStamp = timestampForTouch(touch);
      }

      function getTouchIdentifier(_ref) {
        var identifier = _ref.identifier;
        invariant(identifier != null, "Touch object is missing identifier.");
        {
          !(identifier <= MAX_TOUCH_BANK) ? warning(false, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK) : void 0;
        }
        return identifier;
      }

      function recordTouchStart(touch) {
        var identifier = getTouchIdentifier(touch);
        var touchRecord = touchBank[identifier];

        if (touchRecord) {
          resetTouchRecord(touchRecord, touch);
        } else {
          touchBank[identifier] = createTouchRecord(touch);
        }

        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      }

      function recordTouchMove(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = true;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
        }
      }

      function recordTouchEnd(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = false;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
        }
      }

      function printTouch(touch) {
        return JSON.stringify({
          identifier: touch.identifier,
          pageX: touch.pageX,
          pageY: touch.pageY,
          timestamp: timestampForTouch(touch)
        });
      }

      function printTouchBank() {
        var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));

        if (touchBank.length > MAX_TOUCH_BANK) {
          printed += " (original size: " + touchBank.length + ")";
        }

        return printed;
      }

      var ResponderTouchHistoryStore = {
        recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
          if (isMoveish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchMove);
          } else if (isStartish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchStart);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
            }
          } else if (isEndish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchEnd);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];

                if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
                  touchHistory.indexOfSingleActiveTouch = i;
                  break;
                }
              }

              {
                var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
                !(activeRecord != null && activeRecord.touchActive) ? warning(false, "Cannot find single active touch.") : void 0;
              }
            }
          }
        },
        touchHistory: touchHistory
      };

      function accumulate(current, next) {
        invariant(next != null, "accumulate(...): Accumulated items must be not be null or undefined.");

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          return current.concat(next);
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      var responderInst = null;
      var trackedTouchCount = 0;
      var previousActiveTouches = 0;

      var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
        var oldResponderInst = responderInst;
        responderInst = nextResponderInst;

        if (ResponderEventPlugin.GlobalResponderHandler !== null) {
          ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
        }
      };

      var eventTypes = {
        startShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
          }
        },
        scrollShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
          }
        },
        selectionChangeShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
          }
        },
        moveShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
          }
        },
        responderStart: {
          registrationName: "onResponderStart"
        },
        responderMove: {
          registrationName: "onResponderMove"
        },
        responderEnd: {
          registrationName: "onResponderEnd"
        },
        responderRelease: {
          registrationName: "onResponderRelease"
        },
        responderTerminationRequest: {
          registrationName: "onResponderTerminationRequest"
        },
        responderGrant: {
          registrationName: "onResponderGrant"
        },
        responderReject: {
          registrationName: "onResponderReject"
        },
        responderTerminate: {
          registrationName: "onResponderTerminate"
        }
      };

      function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === "topSelectionChange" ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);
        var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
        var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
        shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

        if (skipOverBubbleShouldSetFrom) {
          accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
        } else {
          accumulateTwoPhaseDispatches(shouldSetEvent);
        }

        var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);

        if (!shouldSetEvent.isPersistent()) {
          shouldSetEvent.constructor.release(shouldSetEvent);
        }

        if (!wantsResponderInst || wantsResponderInst === responderInst) {
          return null;
        }

        var extracted = void 0;
        var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
        grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
        accumulateDirectDispatches(grantEvent);
        var blockHostResponder = executeDirectDispatch(grantEvent) === true;

        if (responderInst) {
          var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
          terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(terminationRequestEvent);
          var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);

          if (!terminationRequestEvent.isPersistent()) {
            terminationRequestEvent.constructor.release(terminationRequestEvent);
          }

          if (shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(terminateEvent);
            extracted = accumulate(extracted, [grantEvent, terminateEvent]);
            changeResponder(wantsResponderInst, blockHostResponder);
          } else {
            var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(rejectEvent);
            extracted = accumulate(extracted, rejectEvent);
          }
        } else {
          extracted = accumulate(extracted, grantEvent);
          changeResponder(wantsResponderInst, blockHostResponder);
        }

        return extracted;
      }

      function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
        return topLevelInst && (topLevelType === "topScroll" && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === "topSelectionChange" || isStartish(topLevelType) || isMoveish(topLevelType));
      }

      function noResponderTouches(nativeEvent) {
        var touches = nativeEvent.touches;

        if (!touches || touches.length === 0) {
          return true;
        }

        for (var i = 0; i < touches.length; i++) {
          var activeTouch = touches[i];
          var target = activeTouch.target;

          if (target !== null && target !== undefined && target !== 0) {
            var targetInst = getInstanceFromNode(target);

            if (isAncestor(responderInst, targetInst)) {
              return false;
            }
          }
        }

        return true;
      }

      var ResponderEventPlugin = {
        _getResponder: function _getResponder() {
          return responderInst;
        },
        eventTypes: eventTypes,
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (isStartish(topLevelType)) {
            trackedTouchCount += 1;
          } else if (isEndish(topLevelType)) {
            if (trackedTouchCount >= 0) {
              trackedTouchCount -= 1;
            } else {
              console.error("Ended a touch event which was not counted in `trackedTouchCount`.");
              return null;
            }
          }

          ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
          var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;
          var isResponderTouchStart = responderInst && isStartish(topLevelType);
          var isResponderTouchMove = responderInst && isMoveish(topLevelType);
          var isResponderTouchEnd = responderInst && isEndish(topLevelType);
          var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

          if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(gesture);
            extracted = accumulate(extracted, gesture);
          }

          var isResponderTerminate = responderInst && topLevelType === "topTouchCancel";
          var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
          var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;

          if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(finalEvent);
            extracted = accumulate(extracted, finalEvent);
            changeResponder(null);
          }

          var numberActiveTouches = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;

          if (ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches) {
            ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches);
          }

          previousActiveTouches = numberActiveTouches;
          return extracted;
        },
        GlobalResponderHandler: null,
        GlobalInteractionHandler: null,
        injection: {
          injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
          },
          injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
          }
        }
      };
      var customBubblingEventTypes = {};
      var customDirectEventTypes = {};
      var ReactNativeBridgeEventPlugin = {
        eventTypes: {},
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (targetInst == null) {
            return null;
          }

          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
          var directDispatchConfig = customDirectEventTypes[topLevelType];
          invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
          var event = SyntheticEvent$1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);

          if (bubbleDispatchConfig) {
            accumulateTwoPhaseDispatches(event);
          } else if (directDispatchConfig) {
            accumulateDirectDispatches(event);
          } else {
            return null;
          }

          return event;
        },
        processEventTypes: function processEventTypes(viewConfig) {
          var bubblingEventTypes = viewConfig.bubblingEventTypes,
              directEventTypes = viewConfig.directEventTypes;
          {
            if (bubblingEventTypes != null && directEventTypes != null) {
              for (var topLevelType in directEventTypes) {
                invariant(bubblingEventTypes[topLevelType] == null, "Event cannot be both direct and bubbling: %s", topLevelType);
              }
            }
          }

          if (bubblingEventTypes != null) {
            for (var _topLevelType in bubblingEventTypes) {
              if (customBubblingEventTypes[_topLevelType] == null) {
                ReactNativeBridgeEventPlugin.eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
              }
            }
          }

          if (directEventTypes != null) {
            for (var _topLevelType2 in directEventTypes) {
              if (customDirectEventTypes[_topLevelType2] == null) {
                ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
              }
            }
          }
        }
      };
      var instanceCache = {};
      var instanceProps = {};

      function precacheFiberNode(hostInst, tag) {
        instanceCache[tag] = hostInst;
      }

      function uncacheFiberNode(tag) {
        delete instanceCache[tag];
        delete instanceProps[tag];
      }

      function getInstanceFromTag(tag) {
        if (typeof tag === "number") {
          return instanceCache[tag] || null;
        } else {
          return tag;
        }
      }

      function getTagFromInstance(inst) {
        var tag = inst.stateNode._nativeTag;

        if (tag === undefined) {
          tag = inst.stateNode.canonical._nativeTag;
        }

        invariant(tag, "All native instances should have a tag.");
        return tag;
      }

      function getFiberCurrentPropsFromNode$1(stateNode) {
        return instanceProps[stateNode._nativeTag] || null;
      }

      function updateFiberProps(tag, props) {
        instanceProps[tag] = props;
      }

      var ReactNativeComponentTree = Object.freeze({
        precacheFiberNode: precacheFiberNode,
        uncacheFiberNode: uncacheFiberNode,
        getClosestInstanceFromNode: getInstanceFromTag,
        getInstanceFromNode: getInstanceFromTag,
        getNodeFromInstance: getTagFromInstance,
        getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
        updateFiberProps: updateFiberProps
      });
      var ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"];
      var ReactNativeGlobalResponderHandler = {
        onChange: function onChange(from, to, blockNativeResponder) {
          if (to !== null) {
            var tag = to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
          } else {
            UIManager.clearJSResponder();
          }
        }
      };
      injection.injectEventPluginOrder(ReactNativeEventPluginOrder);
      injection$1.injectComponentTree(ReactNativeComponentTree);
      ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler);
      injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
      });
      var fiberHostComponent = null;
      var restoreTarget = null;
      var restoreQueue = null;

      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);

        if (!internalInstance) {
          return;
        }

        invariant(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === "function", "Fiber needs to be injected to handle a fiber target for controlled " + "events. This error is likely caused by a bug in React. Please file an issue.");
        var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
        fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
      }

      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }

      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }

        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);

        if (queuedTargets) {
          for (var i = 0; i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }

      var _batchedUpdates = function _batchedUpdates(fn, bookkeeping) {
        return fn(bookkeeping);
      };

      var _interactiveUpdates = function _interactiveUpdates(fn, a, b) {
        return fn(a, b);
      };

      var _flushInteractiveUpdates = function _flushInteractiveUpdates() {};

      var isBatching = false;

      function batchedUpdates(fn, bookkeeping) {
        if (isBatching) {
          return fn(bookkeeping);
        }

        isBatching = true;

        try {
          return _batchedUpdates(fn, bookkeeping);
        } finally {
          isBatching = false;
          var controlledComponentsHavePendingUpdates = needsStateRestore();

          if (controlledComponentsHavePendingUpdates) {
            _flushInteractiveUpdates();

            restoreStateIfNeeded();
          }
        }
      }

      var injection$2 = {
        injectRenderer: function injectRenderer(renderer) {
          _batchedUpdates = renderer.batchedUpdates;
          _interactiveUpdates = renderer.interactiveUpdates;
          _flushInteractiveUpdates = renderer.flushInteractiveUpdates;
        }
      };
      var INITIAL_TAG_COUNT = 1;
      var ReactNativeTagHandles = {
        tagsStartAt: INITIAL_TAG_COUNT,
        tagCount: INITIAL_TAG_COUNT,
        allocateTag: function allocateTag() {
          while (this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount)) {
            ReactNativeTagHandles.tagCount++;
          }

          var tag = ReactNativeTagHandles.tagCount;
          ReactNativeTagHandles.tagCount++;
          return tag;
        },
        assertRootTag: function assertRootTag(tag) {
          invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
        },
        reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
          return reactTag % 10 === 1;
        }
      };
      var EMPTY_NATIVE_EVENT = {};

      var touchSubsequence = function touchSubsequence(touches, indices) {
        var ret = [];

        for (var i = 0; i < indices.length; i++) {
          ret.push(touches[indices[i]]);
        }

        return ret;
      };

      var removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
        var rippedOut = [];
        var temp = touches;

        for (var i = 0; i < indices.length; i++) {
          var index = indices[i];
          rippedOut.push(touches[index]);
          temp[index] = null;
        }

        var fillAt = 0;

        for (var j = 0; j < temp.length; j++) {
          var cur = temp[j];

          if (cur !== null) {
            temp[fillAt++] = cur;
          }
        }

        temp.length = fillAt;
        return rippedOut;
      };

      function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
        var inst = getInstanceFromTag(rootNodeID);
        batchedUpdates(function () {
          runExtractedEventsInBatch(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
      }

      function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
        _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
      }

      function receiveTouches(eventTopLevelType, touches, changedIndices) {
        var changedTouches = eventTopLevelType === "topTouchEnd" || eventTopLevelType === "topTouchCancel" ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices);

        for (var jj = 0; jj < changedTouches.length; jj++) {
          var touch = changedTouches[jj];
          touch.changedTouches = changedTouches;
          touch.touches = touches;
          var nativeEvent = touch;
          var rootNodeID = null;
          var target = nativeEvent.target;

          if (target !== null && target !== undefined) {
            if (target < ReactNativeTagHandles.tagsStartAt) {
              {
                warning(false, "A view is reporting that a touch occurred on tag zero.");
              }
            } else {
              rootNodeID = target;
            }
          }

          _receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
      }

      var ReactNativeEventEmitter = Object.freeze({
        getListener: getListener,
        registrationNames: registrationNameModules,
        _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
        receiveEvent: receiveEvent,
        receiveTouches: receiveTouches
      });
      RCTEventEmitter.register(ReactNativeEventEmitter);
      var hasSymbol = typeof Symbol === "function" && Symbol["for"];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 0xeac7;
      var REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 0xeac8;
      var REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 0xeac9;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]("react.strict_mode") : 0xeacc;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]("react.provider") : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]("react.context") : 0xeace;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]("react.async_mode") : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol["for"]("react.forward_ref") : 0xead0;
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
      var FAUX_ITERATOR_SYMBOL = "@@iterator";

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable === "undefined") {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }

        return null;
      }

      function _createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children: children,
          containerInfo: containerInfo,
          implementation: implementation
        };
      }

      var TouchHistoryMath = {
        centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
          var touchBank = touchHistory.touchBank;
          var total = 0;
          var count = 0;
          var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

          if (oneTouchData !== null) {
            if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
              total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
              count = 1;
            }
          } else {
            for (var i = 0; i < touchBank.length; i++) {
              var touchTrack = touchBank[i];

              if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd = void 0;

                if (ofCurrent && isXAxis) {
                  toAdd = touchTrack.currentPageX;
                } else if (ofCurrent && !isXAxis) {
                  toAdd = touchTrack.currentPageY;
                } else if (!ofCurrent && isXAxis) {
                  toAdd = touchTrack.previousPageX;
                } else {
                  toAdd = touchTrack.previousPageY;
                }

                total += toAdd;
                count++;
              }
            }
          }

          return count > 0 ? total / count : TouchHistoryMath.noCentroid;
        },
        currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
        },
        currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
        },
        previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
        },
        previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
          return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
        },
        currentCentroidX: function currentCentroidX(touchHistory) {
          return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
        },
        currentCentroidY: function currentCentroidY(touchHistory) {
          return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
        },
        noCentroid: -1
      };
      var ReactVersion = "16.3.1";

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var objects = {};
      var uniqueID = 1;
      var emptyObject$2 = {};

      var ReactNativePropRegistry = function () {
        function ReactNativePropRegistry() {
          _classCallCheck(this, ReactNativePropRegistry);
        }

        ReactNativePropRegistry.register = function register(object) {
          var id = ++uniqueID;
          {
            Object.freeze(object);
          }
          objects[id] = object;
          return id;
        };

        ReactNativePropRegistry.getByID = function getByID(id) {
          if (!id) {
            return emptyObject$2;
          }

          var object = objects[id];

          if (!object) {
            console.warn("Invalid style with id `" + id + "`. Skipping ...");
            return emptyObject$2;
          }

          return object;
        };

        return ReactNativePropRegistry;
      }();

      var emptyObject$1 = {};
      var removedKeys = null;
      var removedKeyCount = 0;

      function defaultDiffer(prevProp, nextProp) {
        if ((typeof nextProp === "undefined" ? "undefined" : _typeof(nextProp)) !== "object" || nextProp === null) {
          return true;
        } else {
          return deepDiffer(prevProp, nextProp);
        }
      }

      function resolveObject(idOrObject) {
        if (typeof idOrObject === "number") {
          return ReactNativePropRegistry.getByID(idOrObject);
        }

        return idOrObject;
      }

      function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
        if (Array.isArray(node)) {
          var i = node.length;

          while (i-- && removedKeyCount > 0) {
            restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
          }
        } else if (node && removedKeyCount > 0) {
          var obj = resolveObject(node);

          for (var propKey in removedKeys) {
            if (!removedKeys[propKey]) {
              continue;
            }

            var _nextProp = obj[propKey];

            if (_nextProp === undefined) {
              continue;
            }

            var attributeConfig = validAttributes[propKey];

            if (!attributeConfig) {
              continue;
            }

            if (typeof _nextProp === "function") {
              _nextProp = true;
            }

            if (typeof _nextProp === "undefined") {
              _nextProp = null;
            }

            if ((typeof attributeConfig === "undefined" ? "undefined" : _typeof(attributeConfig)) !== "object") {
              updatePayload[propKey] = _nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(_nextProp) : _nextProp;
              updatePayload[propKey] = nextValue;
            }

            removedKeys[propKey] = false;
            removedKeyCount--;
          }
        }
      }

      function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
        var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
        var i = void 0;

        for (i = 0; i < minLength; i++) {
          updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
        }

        for (; i < prevArray.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
        }

        for (; i < nextArray.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
        }

        return updatePayload;
      }

      function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
        if (!updatePayload && prevProp === nextProp) {
          return updatePayload;
        }

        if (!prevProp || !nextProp) {
          if (nextProp) {
            return addNestedProperty(updatePayload, nextProp, validAttributes);
          }

          if (prevProp) {
            return clearNestedProperty(updatePayload, prevProp, validAttributes);
          }

          return updatePayload;
        }

        if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
          return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);
        }

        if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
          return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp)) {
          return diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes);
        }

        return diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
      }

      function addNestedProperty(updatePayload, nextProp, validAttributes) {
        if (!nextProp) {
          return updatePayload;
        }

        if (!Array.isArray(nextProp)) {
          return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
        }

        for (var i = 0; i < nextProp.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        }

        return updatePayload;
      }

      function clearNestedProperty(updatePayload, prevProp, validAttributes) {
        if (!prevProp) {
          return updatePayload;
        }

        if (!Array.isArray(prevProp)) {
          return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
        }

        for (var i = 0; i < prevProp.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        }

        return updatePayload;
      }

      function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
        var attributeConfig = void 0;
        var nextProp = void 0;
        var prevProp = void 0;

        for (var propKey in nextProps) {
          attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          prevProp = prevProps[propKey];
          nextProp = nextProps[propKey];

          if (typeof nextProp === "function") {
            nextProp = true;

            if (typeof prevProp === "function") {
              prevProp = true;
            }
          }

          if (typeof nextProp === "undefined") {
            nextProp = null;

            if (typeof prevProp === "undefined") {
              prevProp = null;
            }
          }

          if (removedKeys) {
            removedKeys[propKey] = false;
          }

          if (updatePayload && updatePayload[propKey] !== undefined) {
            if ((typeof attributeConfig === "undefined" ? "undefined" : _typeof(attributeConfig)) !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            continue;
          }

          if (prevProp === nextProp) {
            continue;
          }

          if ((typeof attributeConfig === "undefined" ? "undefined" : _typeof(attributeConfig)) !== "object") {
            if (defaultDiffer(prevProp, nextProp)) {
              (updatePayload || (updatePayload = {}))[propKey] = nextProp;
            }
          } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === "function" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));

            if (shouldUpdate) {
              var _nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;

              (updatePayload || (updatePayload = {}))[propKey] = _nextValue;
            }
          } else {
            removedKeys = null;
            removedKeyCount = 0;
            updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);

            if (removedKeyCount > 0 && updatePayload) {
              restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
              removedKeys = null;
            }
          }
        }

        for (var _propKey in prevProps) {
          if (nextProps[_propKey] !== undefined) {
            continue;
          }

          attributeConfig = validAttributes[_propKey];

          if (!attributeConfig) {
            continue;
          }

          if (updatePayload && updatePayload[_propKey] !== undefined) {
            continue;
          }

          prevProp = prevProps[_propKey];

          if (prevProp === undefined) {
            continue;
          }

          if ((typeof attributeConfig === "undefined" ? "undefined" : _typeof(attributeConfig)) !== "object" || typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            (updatePayload || (updatePayload = {}))[_propKey] = null;

            if (!removedKeys) {
              removedKeys = {};
            }

            if (!removedKeys[_propKey]) {
              removedKeys[_propKey] = true;
              removedKeyCount++;
            }
          } else {
            updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
          }
        }

        return updatePayload;
      }

      function addProperties(updatePayload, props, validAttributes) {
        return diffProperties(updatePayload, emptyObject$1, props, validAttributes);
      }

      function clearProperties(updatePayload, prevProps, validAttributes) {
        return diffProperties(updatePayload, prevProps, emptyObject$1, validAttributes);
      }

      function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
      }

      function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
      }

      function mountSafeCallback(context, callback) {
        return function () {
          if (!callback) {
            return undefined;
          }

          if (typeof context.__isMounted === "boolean") {
            if (!context.__isMounted) {
              return undefined;
            }
          } else if (typeof context.isMounted === "function") {
            if (!context.isMounted()) {
              return undefined;
            }
          }

          return callback.apply(context, arguments);
        };
      }

      function throwOnStylesProp(component, props) {
        if (props.styles !== undefined) {
          var owner = component._owner || null;
          var name = component.constructor.displayName;
          var msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";

          if (owner && owner.constructor && owner.constructor.displayName) {
            msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component.";
          }

          throw new Error(msg);
        }
      }

      function warnForStyleProps(props, validAttributes) {
        for (var key in validAttributes.style) {
          if (!(validAttributes[key] || props[key] === undefined)) {
            console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
          }
        }
      }

      function get(key) {
        return key._reactInternalFiber;
      }

      function set(key, value) {
        key._reactInternalFiber = value;
      }

      var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;

      function getComponentName(fiber) {
        var type = fiber.type;

        if (typeof type === "function") {
          return type.displayName || type.name;
        }

        if (typeof type === "string") {
          return type;
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "ReactFragment";

          case REACT_PORTAL_TYPE:
            return "ReactPortal";

          case REACT_CALL_TYPE:
            return "ReactCall";

          case REACT_RETURN_TYPE:
            return "ReactReturn";
        }

        return null;
      }

      var findHostInstance = function findHostInstance(fiber) {
        return null;
      };

      var findHostInstanceFabric = function findHostInstanceFabric(fiber) {
        return null;
      };

      function injectFindHostInstance(impl) {
        findHostInstance = impl;
      }

      function findNodeHandle(componentOrHandle) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.stateNode !== null) {
            !owner.stateNode._warnedAboutRefsInRender ? warning(false, "%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner) || "A component") : void 0;
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (typeof componentOrHandle === "number") {
          return componentOrHandle;
        }

        var component = componentOrHandle;
        var internalInstance = get(component);

        if (internalInstance) {
          return findHostInstance(internalInstance) || findHostInstanceFabric(internalInstance);
        } else {
          if (component) {
            return component;
          } else {
            invariant((typeof component === "undefined" ? "undefined" : _typeof(component)) === "object" && "_nativeTag" in component || component.render != null && typeof component.render === "function", "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component === "undefined" ? "undefined" : _typeof(component), Object.keys(component));
            invariant(false, "findNodeHandle(...): Unable to find node handle for unmounted " + "component.");
          }
        }
      }

      function findNumericNodeHandleFiber(componentOrHandle) {
        var instance = findNodeHandle(componentOrHandle);

        if (instance == null || typeof instance === "number") {
          return instance;
        }

        return instance._nativeTag;
      }

      var NativeMethodsMixin = {
        measure: function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureInWindow: function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          var viewConfig = maybeInstance.viewConfig;
          {
            warnForStyleProps(nativeProps, viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        },
        focus: function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        },
        blur: function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        }
      };
      {
        var NativeMethodsMixin_DEV = NativeMethodsMixin;
        invariant(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps && !NativeMethodsMixin_DEV.UNSAFE_componentWillMount && !NativeMethodsMixin_DEV.UNSAFE_componentWillReceiveProps, "Do not override existing functions.");

        NativeMethodsMixin_DEV.componentWillMount = function () {
          throwOnStylesProp(this, this.props);
        };

        NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
          throwOnStylesProp(this, newProps);
        };

        NativeMethodsMixin_DEV.UNSAFE_componentWillMount = function () {
          throwOnStylesProp(this, this.props);
        };

        NativeMethodsMixin_DEV.UNSAFE_componentWillReceiveProps = function (newProps) {
          throwOnStylesProp(this, newProps);
        };

        NativeMethodsMixin_DEV.componentWillMount.__suppressDeprecationWarning = true;
        NativeMethodsMixin_DEV.componentWillReceiveProps.__suppressDeprecationWarning = true;
      }

      function _classCallCheck$1(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }

      var ReactNativeComponent = function (_React$Component) {
        _inherits(ReactNativeComponent, _React$Component);

        function ReactNativeComponent() {
          _classCallCheck$1(this, ReactNativeComponent);

          return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
        }

        ReactNativeComponent.prototype.blur = function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        };

        ReactNativeComponent.prototype.focus = function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        };

        ReactNativeComponent.prototype.measure = function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        };

        ReactNativeComponent.prototype.measureInWindow = function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        };

        ReactNativeComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        };

        ReactNativeComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeComponent;
      }(React.Component);

      var NoEffect = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var DidCapture = 64;
      var Ref = 128;
      var ErrLog = 256;
      var Snapshot = 2048;
      var HostEffectMask = 2559;
      var Incomplete = 512;
      var ShouldCapture = 1024;
      var MOUNTING = 1;
      var MOUNTED = 2;
      var UNMOUNTED = 3;

      function isFiberMountedImpl(fiber) {
        var node = fiber;

        if (!fiber.alternate) {
          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }

          while (node["return"]) {
            node = node["return"];

            if ((node.effectTag & Placement) !== NoEffect) {
              return MOUNTING;
            }
          }
        } else {
          while (node["return"]) {
            node = node["return"];
          }
        }

        if (node.tag === HostRoot) {
          return MOUNTED;
        }

        return UNMOUNTED;
      }

      function isFiberMounted(fiber) {
        return isFiberMountedImpl(fiber) === MOUNTED;
      }

      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            !instance._warnedAboutRefsInRender ? warning(false, "%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(ownerFiber) || "A component") : void 0;
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);

        if (!fiber) {
          return false;
        }

        return isFiberMountedImpl(fiber) === MOUNTED;
      }

      function assertIsMounted(fiber) {
        invariant(isFiberMountedImpl(fiber) === MOUNTED, "Unable to find node on an unmounted component.");
      }

      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;

        if (!alternate) {
          var state = isFiberMountedImpl(fiber);
          invariant(state !== UNMOUNTED, "Unable to find node on an unmounted component.");

          if (state === MOUNTING) {
            return null;
          }

          return fiber;
        }

        var a = fiber;
        var b = alternate;

        while (true) {
          var parentA = a["return"];
          var parentB = parentA ? parentA.alternate : null;

          if (!parentA || !parentB) {
            break;
          }

          if (parentA.child === parentB.child) {
            var child = parentA.child;

            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }

              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }

              child = child.sibling;
            }

            invariant(false, "Unable to find node on an unmounted component.");
          }

          if (a["return"] !== b["return"]) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }

              _child = _child.sibling;
            }

            if (!didFindChild) {
              _child = parentB.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }

                _child = _child.sibling;
              }

              invariant(didFindChild, "Child was not found in either parent set. This indicates a bug " + "in React related to the return pointer. Please file an issue.");
            }
          }

          invariant(a.alternate === b, "Return fibers should always be each others' alternates. " + "This error is likely caused by a bug in React. Please file an issue.");
        }

        invariant(a.tag === HostRoot, "Unable to find node on an unmounted component.");

        if (a.stateNode.current === a) {
          return fiber;
        }

        return alternate;
      }

      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node["return"] || node["return"] === currentParent) {
              return null;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }

        return null;
      }

      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child && node.tag !== HostPortal) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node["return"] || node["return"] === currentParent) {
              return null;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }

        return null;
      }

      var MAX_SIGNED_31_BIT_INT = 1073741823;
      var NoWork = 0;
      var Sync = 1;
      var Never = MAX_SIGNED_31_BIT_INT;
      var UNIT_SIZE = 10;
      var MAGIC_NUMBER_OFFSET = 2;

      function msToExpirationTime(ms) {
        return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
      }

      function expirationTimeToMs(expirationTime) {
        return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
      }

      function ceiling(num, precision) {
        return ((num / precision | 0) + 1) * precision;
      }

      function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
        return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
      }

      var NoContext = 0;
      var AsyncMode = 1;
      var StrictMode = 2;
      var hasBadMapPolyfill = void 0;
      {
        hasBadMapPolyfill = false;

        try {
          var nonExtensibleObject = Object.preventExtensions({});
          var testMap = new Map([[nonExtensibleObject, null]]);
          var testSet = new Set([nonExtensibleObject]);
          testMap.set(0, 0);
          testSet.add(0);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      var debugCounter = void 0;
      {
        debugCounter = 1;
      }

      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.type = null;
        this.stateNode = null;
        this["return"] = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.mode = mode;
        this.effectTag = NoEffect;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.expirationTime = NoWork;
        this.alternate = null;
        {
          this._debugID = debugCounter++;
          this._debugSource = null;
          this._debugOwner = null;
          this._debugIsCurrentlyTiming = false;

          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }

      var createFiber = function createFiber(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };

      function shouldConstruct(Component) {
        return !!(Component.prototype && Component.prototype.isReactComponent);
      }

      function createWorkInProgress(current, pendingProps, expirationTime) {
        var workInProgress = current.alternate;

        if (workInProgress === null) {
          workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
          workInProgress.type = current.type;
          workInProgress.stateNode = current.stateNode;
          {
            workInProgress._debugID = current._debugID;
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
          }
          workInProgress.alternate = current;
          current.alternate = workInProgress;
        } else {
          workInProgress.pendingProps = pendingProps;
          workInProgress.effectTag = NoEffect;
          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
        }

        workInProgress.expirationTime = expirationTime;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        return workInProgress;
      }

      function createHostRootFiber(isAsync) {
        var mode = isAsync ? AsyncMode | StrictMode : NoContext;
        return createFiber(HostRoot, null, null, mode);
      }

      function createFiberFromElement(element, mode, expirationTime) {
        var owner = null;
        {
          owner = element._owner;
        }
        var fiber = void 0;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiberTag = void 0;

        if (typeof type === "function") {
          fiberTag = shouldConstruct(type) ? ClassComponent : IndeterminateComponent;
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

            case REACT_ASYNC_MODE_TYPE:
              fiberTag = Mode;
              mode |= AsyncMode | StrictMode;
              break;

            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictMode;
              break;

            case REACT_CALL_TYPE:
              fiberTag = CallComponent;
              break;

            case REACT_RETURN_TYPE:
              fiberTag = ReturnComponent;
              break;

            default:
              {
                if ((typeof type === "undefined" ? "undefined" : _typeof(type)) === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break;

                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break;

                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      break;

                    default:
                      if (typeof type.tag === "number") {
                        fiber = type;
                        fiber.pendingProps = pendingProps;
                        fiber.expirationTime = expirationTime;
                        return fiber;
                      } else {
                        throwOnInvalidElementType(type, owner);
                      }

                      break;
                  }
                } else {
                  throwOnInvalidElementType(type, owner);
                }
              }
          }
        }

        fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.type = type;
        fiber.expirationTime = expirationTime;
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }

      function throwOnInvalidElementType(type, owner) {
        var info = "";
        {
          if (type === undefined || (typeof type === "undefined" ? "undefined" : _typeof(type)) === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and " + "named imports.";
          }

          var ownerName = owner ? getComponentName(owner) : null;

          if (ownerName) {
            info += "\n\nCheck the render method of `" + ownerName + "`.";
          }
        }
        invariant(false, "Element type is invalid: expected a string (for built-in " + "components) or a class/function (for composite components) " + "but got: %s.%s", type == null ? type : typeof type === "undefined" ? "undefined" : _typeof(type), info);
      }

      function createFiberFromFragment(elements, mode, expirationTime, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromText(content, mode, expirationTime) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.expirationTime = expirationTime;
        return fiber;
      }

      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoContext);
        fiber.type = "DELETED";
        return fiber;
      }

      function createFiberFromPortal(portal, mode, expirationTime) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.expirationTime = expirationTime;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }

      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoContext);
        }

        target.tag = source.tag;
        target.key = source.key;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target["return"] = source["return"];
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.mode = source.mode;
        target.effectTag = source.effectTag;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.expirationTime = source.expirationTime;
        target.alternate = source.alternate;
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
        return target;
      }

      function createFiberRoot(containerInfo, isAsync, hydrate) {
        var uninitializedFiber = createHostRootFiber(isAsync);
        var root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          remainingExpirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null
        };
        uninitializedFiber.stateNode = root;
        return root;
      }

      var onCommitFiberRoot = null;
      var onCommitFiberUnmount = null;
      var hasLoggedError = false;

      function catchErrors(fn) {
        return function (arg) {
          try {
            return fn(arg);
          } catch (err) {
            if (true && !hasLoggedError) {
              hasLoggedError = true;
              warning(false, "React DevTools encountered an error: %s", err);
            }
          }
        };
      }

      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }

        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

        if (hook.isDisabled) {
          return true;
        }

        if (!hook.supportsFiber) {
          {
            warning(false, "The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://fb.me/react-devtools");
          }
          return true;
        }

        try {
          var rendererID = hook.inject(internals);
          onCommitFiberRoot = catchErrors(function (root) {
            return hook.onCommitFiberRoot(rendererID, root);
          });
          onCommitFiberUnmount = catchErrors(function (fiber) {
            return hook.onCommitFiberUnmount(rendererID, fiber);
          });
        } catch (err) {
          {
            warning(false, "React DevTools encountered an error: %s.", err);
          }
        }

        return true;
      }

      function onCommitRoot(root) {
        if (typeof onCommitFiberRoot === "function") {
          onCommitFiberRoot(root);
        }
      }

      function onCommitUnmount(fiber) {
        if (typeof onCommitFiberUnmount === "function") {
          onCommitFiberUnmount(fiber);
        }
      }

      var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
        return "\n    in " + (name || "Unknown") + (source ? " (at " + source.fileName.replace(/^.*[\\\/]/, "") + ":" + source.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
      };

      function describeFiber(fiber) {
        switch (fiber.tag) {
          case IndeterminateComponent:
          case FunctionalComponent:
          case ClassComponent:
          case HostComponent:
            var owner = fiber._debugOwner;
            var source = fiber._debugSource;
            var name = getComponentName(fiber);
            var ownerName = null;

            if (owner) {
              ownerName = getComponentName(owner);
            }

            return describeComponentFrame(name, source, ownerName);

          default:
            return "";
        }
      }

      function getStackAddendumByWorkInProgressFiber(workInProgress) {
        var info = "";
        var node = workInProgress;

        do {
          info += describeFiber(node);
          node = node["return"];
        } while (node);

        return info;
      }

      var lowPriorityWarning = function lowPriorityWarning() {};

      {
        var printWarning = function printWarning(format) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          var argIndex = 0;
          var message = "Warning: " + format.replace(/%s/g, function () {
            return args[argIndex++];
          });

          if (typeof console !== "undefined") {
            console.warn(message);
          }

          try {
            throw new Error(message);
          } catch (x) {}
        };

        lowPriorityWarning = function lowPriorityWarning(condition, format) {
          if (format === undefined) {
            throw new Error("`warning(condition, format, ...args)` requires a warning " + "message argument");
          }

          if (!condition) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }

            printWarning.apply(undefined, [format].concat(args));
          }
        };
      }
      var lowPriorityWarning$1 = lowPriorityWarning;
      var ReactStrictModeWarnings = {
        discardPendingWarnings: function discardPendingWarnings() {},
        flushPendingDeprecationWarnings: function flushPendingDeprecationWarnings() {},
        flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {},
        recordDeprecationWarnings: function recordDeprecationWarnings(fiber, instance) {},
        recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {}
      };
      {
        var LIFECYCLE_SUGGESTIONS = {
          UNSAFE_componentWillMount: "componentDidMount",
          UNSAFE_componentWillReceiveProps: "static getDerivedStateFromProps",
          UNSAFE_componentWillUpdate: "componentDidUpdate"
        };
        var pendingComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUnsafeLifecycleWarnings = new Map();
        var didWarnAboutDeprecatedLifecycles = new Set();
        var didWarnAboutUnsafeLifecycles = new Set();

        ReactStrictModeWarnings.discardPendingWarnings = function () {
          pendingComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUnsafeLifecycleWarnings = new Map();
        };

        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
          pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
            var lifecyclesWarningMesages = [];
            Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
              var lifecycleWarnings = lifecycleWarningsMap[lifecycle];

              if (lifecycleWarnings.length > 0) {
                var componentNames = new Set();
                lifecycleWarnings.forEach(function (fiber) {
                  componentNames.add(getComponentName(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                var formatted = lifecycle.replace("UNSAFE_", "");
                var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
                var sortedComponentNames = Array.from(componentNames).sort().join(", ");
                lifecyclesWarningMesages.push(formatted + ": Please update the following components to use " + (suggestion + " instead: " + sortedComponentNames));
              }
            });

            if (lifecyclesWarningMesages.length > 0) {
              var strictRootComponentStack = getStackAddendumByWorkInProgressFiber(strictRoot);
              warning(false, "Unsafe lifecycle methods were found within a strict-mode tree:%s" + "\n\n%s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-strict-mode-warnings", strictRootComponentStack, lifecyclesWarningMesages.join("\n\n"));
            }
          });
          pendingUnsafeLifecycleWarnings = new Map();
        };

        var getStrictRoot = function getStrictRoot(fiber) {
          var maybeStrictRoot = null;

          while (fiber !== null) {
            if (fiber.mode & StrictMode) {
              maybeStrictRoot = fiber;
            }

            fiber = fiber["return"];
          }

          return maybeStrictRoot;
        };

        ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
          if (pendingComponentWillMountWarnings.length > 0) {
            var uniqueNames = new Set();
            pendingComponentWillMountWarnings.forEach(function (fiber) {
              uniqueNames.add(getComponentName(fiber) || "Component");
              didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });
            var sortedNames = Array.from(uniqueNames).sort().join(", ");
            lowPriorityWarning$1(false, "componentWillMount is deprecated and will be removed in the next major version. " + "Use componentDidMount instead. As a temporary workaround, " + "you can rename to UNSAFE_componentWillMount." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-async-component-lifecycle-hooks", sortedNames);
            pendingComponentWillMountWarnings = [];
          }

          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            var _uniqueNames = new Set();

            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
              _uniqueNames.add(getComponentName(fiber) || "Component");

              didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });

            var _sortedNames = Array.from(_uniqueNames).sort().join(", ");

            lowPriorityWarning$1(false, "componentWillReceiveProps is deprecated and will be removed in the next major version. " + "Use static getDerivedStateFromProps instead." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-async-component-lifecycle-hooks", _sortedNames);
            pendingComponentWillReceivePropsWarnings = [];
          }

          if (pendingComponentWillUpdateWarnings.length > 0) {
            var _uniqueNames2 = new Set();

            pendingComponentWillUpdateWarnings.forEach(function (fiber) {
              _uniqueNames2.add(getComponentName(fiber) || "Component");

              didWarnAboutDeprecatedLifecycles.add(fiber.type);
            });

            var _sortedNames2 = Array.from(_uniqueNames2).sort().join(", ");

            lowPriorityWarning$1(false, "componentWillUpdate is deprecated and will be removed in the next major version. " + "Use componentDidUpdate instead. As a temporary workaround, " + "you can rename to UNSAFE_componentWillUpdate." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-async-component-lifecycle-hooks", _sortedNames2);
            pendingComponentWillUpdateWarnings = [];
          }
        };

        ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
          if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
            return;
          }

          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }

          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }

          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
        };

        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
          var strictRoot = getStrictRoot(fiber);

          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }

          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning === true) {
            return;
          }

          var warningsForRoot = void 0;

          if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
            warningsForRoot = {
              UNSAFE_componentWillMount: [],
              UNSAFE_componentWillReceiveProps: [],
              UNSAFE_componentWillUpdate: []
            };
            pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
          } else {
            warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
          }

          var unsafeLifecycles = [];

          if (typeof instance.componentWillMount === "function" || typeof instance.UNSAFE_componentWillMount === "function") {
            unsafeLifecycles.push("UNSAFE_componentWillMount");
          }

          if (typeof instance.componentWillReceiveProps === "function" || typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            unsafeLifecycles.push("UNSAFE_componentWillReceiveProps");
          }

          if (typeof instance.componentWillUpdate === "function" || typeof instance.UNSAFE_componentWillUpdate === "function") {
            unsafeLifecycles.push("UNSAFE_componentWillUpdate");
          }

          if (unsafeLifecycles.length > 0) {
            unsafeLifecycles.forEach(function (lifecycle) {
              warningsForRoot[lifecycle].push(fiber);
            });
          }
        };
      }

      var _require = _require2(_dependencyMap[15], "ReactFeatureFlags");

      var enableGetDerivedStateFromCatch = _require.enableGetDerivedStateFromCatch;
      var debugRenderPhaseSideEffects = _require.debugRenderPhaseSideEffects;
      var debugRenderPhaseSideEffectsForStrictMode = _require.debugRenderPhaseSideEffectsForStrictMode;
      var warnAboutDeprecatedLifecycles = _require.warnAboutDeprecatedLifecycles;
      var replayFailedUnitOfWorkWithInvokeGuardedCallback = _require.replayFailedUnitOfWorkWithInvokeGuardedCallback;
      var enableUserTimingAPI = true;
      var enableMutatingReconciler = true;
      var enableNoopReconciler = false;
      var enablePersistentReconciler = false;

      function getCurrentFiberOwnerName() {
        {
          var fiber = ReactDebugCurrentFiber.current;

          if (fiber === null) {
            return null;
          }

          var owner = fiber._debugOwner;

          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner);
          }
        }
        return null;
      }

      function getCurrentFiberStackAddendum() {
        {
          var fiber = ReactDebugCurrentFiber.current;

          if (fiber === null) {
            return null;
          }

          return getStackAddendumByWorkInProgressFiber(fiber);
        }
        return null;
      }

      function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFiber.current = null;
        ReactDebugCurrentFiber.phase = null;
      }

      function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;
        ReactDebugCurrentFiber.current = fiber;
        ReactDebugCurrentFiber.phase = null;
      }

      function setCurrentPhase(phase) {
        ReactDebugCurrentFiber.phase = phase;
      }

      var ReactDebugCurrentFiber = {
        current: null,
        phase: null,
        resetCurrentFiber: resetCurrentFiber,
        setCurrentFiber: setCurrentFiber,
        setCurrentPhase: setCurrentPhase,
        getCurrentFiberOwnerName: getCurrentFiberOwnerName,
        getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
      };
      var reactEmoji = "\u269B";
      var warningEmoji = "\u26D4";
      var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
      var currentFiber = null;
      var currentPhase = null;
      var currentPhaseFiber = null;
      var isCommitting = false;
      var hasScheduledUpdateInCurrentCommit = false;
      var hasScheduledUpdateInCurrentPhase = false;
      var commitCountInCurrentWorkLoop = 0;
      var effectCountInCurrentCommit = 0;
      var isWaitingForCallback = false;
      var labelsInCurrentCommit = new Set();

      var formatMarkName = function formatMarkName(markName) {
        return reactEmoji + " " + markName;
      };

      var formatLabel = function formatLabel(label, warning$$1) {
        var prefix = warning$$1 ? warningEmoji + " " : reactEmoji + " ";
        var suffix = warning$$1 ? " Warning: " + warning$$1 : "";
        return "" + prefix + label + suffix;
      };

      var beginMark = function beginMark(markName) {
        performance.mark(formatMarkName(markName));
      };

      var clearMark = function clearMark(markName) {
        performance.clearMarks(formatMarkName(markName));
      };

      var endMark = function endMark(label, markName, warning$$1) {
        var formattedMarkName = formatMarkName(markName);
        var formattedLabel = formatLabel(label, warning$$1);

        try {
          performance.measure(formattedLabel, formattedMarkName);
        } catch (err) {}

        performance.clearMarks(formattedMarkName);
        performance.clearMeasures(formattedLabel);
      };

      var getFiberMarkName = function getFiberMarkName(label, debugID) {
        return label + " (#" + debugID + ")";
      };

      var getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
        if (phase === null) {
          return componentName + " [" + (isMounted ? "update" : "mount") + "]";
        } else {
          return componentName + "." + phase;
        }
      };

      var beginFiberMark = function beginFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);

        if (isCommitting && labelsInCurrentCommit.has(label)) {
          return false;
        }

        labelsInCurrentCommit.add(label);
        var markName = getFiberMarkName(label, debugID);
        beginMark(markName);
        return true;
      };

      var clearFiberMark = function clearFiberMark(fiber, phase) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        clearMark(markName);
      };

      var endFiberMark = function endFiberMark(fiber, phase, warning$$1) {
        var componentName = getComponentName(fiber) || "Unknown";
        var debugID = fiber._debugID;
        var isMounted = fiber.alternate !== null;
        var label = getFiberLabel(componentName, isMounted, phase);
        var markName = getFiberMarkName(label, debugID);
        endMark(label, markName, warning$$1);
      };

      var shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case HostComponent:
          case HostText:
          case HostPortal:
          case CallComponent:
          case ReturnComponent:
          case Fragment:
          case ContextProvider:
          case ContextConsumer:
            return true;

          default:
            return false;
        }
      };

      var clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {
        if (currentPhase !== null && currentPhaseFiber !== null) {
          clearFiberMark(currentPhaseFiber, currentPhase);
        }

        currentPhaseFiber = null;
        currentPhase = null;
        hasScheduledUpdateInCurrentPhase = false;
      };

      var pauseTimers = function pauseTimers() {
        var fiber = currentFiber;

        while (fiber) {
          if (fiber._debugIsCurrentlyTiming) {
            endFiberMark(fiber, null, null);
          }

          fiber = fiber["return"];
        }
      };

      var resumeTimersRecursively = function resumeTimersRecursively(fiber) {
        if (fiber["return"] !== null) {
          resumeTimersRecursively(fiber["return"]);
        }

        if (fiber._debugIsCurrentlyTiming) {
          beginFiberMark(fiber, null);
        }
      };

      var resumeTimers = function resumeTimers() {
        if (currentFiber !== null) {
          resumeTimersRecursively(currentFiber);
        }
      };

      function recordEffect() {
        if (enableUserTimingAPI) {
          effectCountInCurrentCommit++;
        }
      }

      function recordScheduleUpdate() {
        if (enableUserTimingAPI) {
          if (isCommitting) {
            hasScheduledUpdateInCurrentCommit = true;
          }

          if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
            hasScheduledUpdateInCurrentPhase = true;
          }
        }
      }

      function startRequestCallbackTimer() {
        if (enableUserTimingAPI) {
          if (supportsUserTiming && !isWaitingForCallback) {
            isWaitingForCallback = true;
            beginMark("(Waiting for async callback...)");
          }
        }
      }

      function stopRequestCallbackTimer(didExpire, expirationTime) {
        if (enableUserTimingAPI) {
          if (supportsUserTiming) {
            isWaitingForCallback = false;
            var warning$$1 = didExpire ? "React was blocked by main thread" : null;
            endMark("(Waiting for async callback... will force flush in " + expirationTime + " ms)", "(Waiting for async callback...)", warning$$1);
          }
        }
      }

      function startWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber;

          if (!beginFiberMark(fiber, null)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = true;
        }
      }

      function cancelWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          clearFiberMark(fiber, null);
        }
      }

      function stopWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber["return"];

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          endFiberMark(fiber, null, null);
        }
      }

      function stopFailedWorkTimer(fiber) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
            return;
          }

          currentFiber = fiber["return"];

          if (!fiber._debugIsCurrentlyTiming) {
            return;
          }

          fiber._debugIsCurrentlyTiming = false;
          var warning$$1 = "An error was thrown inside this error boundary";
          endFiberMark(fiber, null, warning$$1);
        }
      }

      function startPhaseTimer(fiber, phase) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          clearPendingPhaseMeasurement();

          if (!beginFiberMark(fiber, phase)) {
            return;
          }

          currentPhaseFiber = fiber;
          currentPhase = phase;
        }
      }

      function stopPhaseTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          if (currentPhase !== null && currentPhaseFiber !== null) {
            var warning$$1 = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
            endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
          }

          currentPhase = null;
          currentPhaseFiber = null;
        }
      }

      function startWorkLoopTimer(nextUnitOfWork) {
        if (enableUserTimingAPI) {
          currentFiber = nextUnitOfWork;

          if (!supportsUserTiming) {
            return;
          }

          commitCountInCurrentWorkLoop = 0;
          beginMark("(React Tree Reconciliation)");
          resumeTimers();
        }
      }

      function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var warning$$1 = null;

          if (interruptedBy !== null) {
            if (interruptedBy.tag === HostRoot) {
              warning$$1 = "A top-level update interrupted the previous render";
            } else {
              var componentName = getComponentName(interruptedBy) || "Unknown";
              warning$$1 = "An update to " + componentName + " interrupted the previous render";
            }
          } else if (commitCountInCurrentWorkLoop > 1) {
            warning$$1 = "There were cascading updates";
          }

          commitCountInCurrentWorkLoop = 0;
          var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
          pauseTimers();
          endMark(label, "(React Tree Reconciliation)", warning$$1);
        }
      }

      function startCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          isCommitting = true;
          hasScheduledUpdateInCurrentCommit = false;
          labelsInCurrentCommit.clear();
          beginMark("(Committing Changes)");
        }
      }

      function stopCommitTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var warning$$1 = null;

          if (hasScheduledUpdateInCurrentCommit) {
            warning$$1 = "Lifecycle hook scheduled a cascading update";
          } else if (commitCountInCurrentWorkLoop > 0) {
            warning$$1 = "Caused by a cascading update in earlier commit";
          }

          hasScheduledUpdateInCurrentCommit = false;
          commitCountInCurrentWorkLoop++;
          isCommitting = false;
          labelsInCurrentCommit.clear();
          endMark("(Committing Changes)", "(Committing Changes)", warning$$1);
        }
      }

      function startCommitSnapshotEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Committing Snapshot Effects)");
        }
      }

      function stopCommitSnapshotEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
        }
      }

      function startCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Committing Host Effects)");
        }
      }

      function stopCommitHostEffectsTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
        }
      }

      function startCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          effectCountInCurrentCommit = 0;
          beginMark("(Calling Lifecycle Methods)");
        }
      }

      function stopCommitLifeCyclesTimer() {
        if (enableUserTimingAPI) {
          if (!supportsUserTiming) {
            return;
          }

          var count = effectCountInCurrentCommit;
          effectCountInCurrentCommit = 0;
          endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
        }
      }

      var didWarnUpdateInsideUpdate = void 0;
      {
        didWarnUpdateInsideUpdate = false;
      }

      function createUpdateQueue(baseState) {
        var queue = {
          baseState: baseState,
          expirationTime: NoWork,
          first: null,
          last: null,
          callbackList: null,
          hasForceUpdate: false,
          isInitialized: false,
          capturedValues: null
        };
        {
          queue.isProcessing = false;
        }
        return queue;
      }

      function insertUpdateIntoQueue(queue, update) {
        if (queue.last === null) {
          queue.first = queue.last = update;
        } else {
          queue.last.next = update;
          queue.last = update;
        }

        if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {
          queue.expirationTime = update.expirationTime;
        }
      }

      var q1 = void 0;
      var q2 = void 0;

      function ensureUpdateQueues(fiber) {
        q1 = q2 = null;
        var alternateFiber = fiber.alternate;
        var queue1 = fiber.updateQueue;

        if (queue1 === null) {
          queue1 = fiber.updateQueue = createUpdateQueue(null);
        }

        var queue2 = void 0;

        if (alternateFiber !== null) {
          queue2 = alternateFiber.updateQueue;

          if (queue2 === null) {
            queue2 = alternateFiber.updateQueue = createUpdateQueue(null);
          }
        } else {
          queue2 = null;
        }

        queue2 = queue2 !== queue1 ? queue2 : null;
        q1 = queue1;
        q2 = queue2;
      }

      function insertUpdateIntoFiber(fiber, update) {
        ensureUpdateQueues(fiber);
        var queue1 = q1;
        var queue2 = q2;
        {
          if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {
            warning(false, "An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }

        if (queue2 === null) {
          insertUpdateIntoQueue(queue1, update);
          return;
        }

        if (queue1.last === null || queue2.last === null) {
          insertUpdateIntoQueue(queue1, update);
          insertUpdateIntoQueue(queue2, update);
          return;
        }

        insertUpdateIntoQueue(queue1, update);
        queue2.last = update;
      }

      function getUpdateExpirationTime(fiber) {
        switch (fiber.tag) {
          case HostRoot:
          case ClassComponent:
            var updateQueue = fiber.updateQueue;

            if (updateQueue === null) {
              return NoWork;
            }

            return updateQueue.expirationTime;

          default:
            return NoWork;
        }
      }

      function getStateFromUpdate(update, instance, prevState, props) {
        var partialState = update.partialState;

        if (typeof partialState === "function") {
          return partialState.call(instance, prevState, props);
        } else {
          return partialState;
        }
      }

      function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
        if (current !== null && current.updateQueue === queue) {
          var currentQueue = queue;
          queue = workInProgress.updateQueue = {
            baseState: currentQueue.baseState,
            expirationTime: currentQueue.expirationTime,
            first: currentQueue.first,
            last: currentQueue.last,
            isInitialized: currentQueue.isInitialized,
            capturedValues: currentQueue.capturedValues,
            callbackList: null,
            hasForceUpdate: false
          };
        }

        {
          queue.isProcessing = true;
        }
        queue.expirationTime = NoWork;
        var state = void 0;

        if (queue.isInitialized) {
          state = queue.baseState;
        } else {
          state = queue.baseState = workInProgress.memoizedState;
          queue.isInitialized = true;
        }

        var dontMutatePrevState = true;
        var update = queue.first;
        var didSkip = false;

        while (update !== null) {
          var updateExpirationTime = update.expirationTime;

          if (updateExpirationTime > renderExpirationTime) {
            var remainingExpirationTime = queue.expirationTime;

            if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {
              queue.expirationTime = updateExpirationTime;
            }

            if (!didSkip) {
              didSkip = true;
              queue.baseState = state;
            }

            update = update.next;
            continue;
          }

          if (!didSkip) {
            queue.first = update.next;

            if (queue.first === null) {
              queue.last = null;
            }
          }

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            getStateFromUpdate(update, instance, state, props);
          }

          var _partialState = void 0;

          if (update.isReplace) {
            state = getStateFromUpdate(update, instance, state, props);
            dontMutatePrevState = true;
          } else {
            _partialState = getStateFromUpdate(update, instance, state, props);

            if (_partialState) {
              if (dontMutatePrevState) {
                state = _extends({}, state, _partialState);
              } else {
                state = _extends(state, _partialState);
              }

              dontMutatePrevState = false;
            }
          }

          if (update.isForced) {
            queue.hasForceUpdate = true;
          }

          if (update.callback !== null) {
            var _callbackList = queue.callbackList;

            if (_callbackList === null) {
              _callbackList = queue.callbackList = [];
            }

            _callbackList.push(update);
          }

          if (update.capturedValue !== null) {
            var _capturedValues = queue.capturedValues;

            if (_capturedValues === null) {
              queue.capturedValues = [update.capturedValue];
            } else {
              _capturedValues.push(update.capturedValue);
            }
          }

          update = update.next;
        }

        if (queue.callbackList !== null) {
          workInProgress.effectTag |= Callback;
        } else if (queue.first === null && !queue.hasForceUpdate && queue.capturedValues === null) {
          workInProgress.updateQueue = null;
        }

        if (!didSkip) {
          didSkip = true;
          queue.baseState = state;
        }

        {
          queue.isProcessing = false;
        }
        return state;
      }

      function commitCallbacks(queue, context) {
        var callbackList = queue.callbackList;

        if (callbackList === null) {
          return;
        }

        queue.callbackList = null;

        for (var i = 0; i < callbackList.length; i++) {
          var update = callbackList[i];
          var _callback = update.callback;
          update.callback = null;
          invariant(typeof _callback === "function", "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", _callback);

          _callback.call(context);
        }
      }

      var fakeInternalInstance = {};
      var isArray = Array.isArray;
      var didWarnAboutStateAssignmentForComponent = void 0;
      var didWarnAboutUndefinedDerivedState = void 0;
      var didWarnAboutUninitializedState = void 0;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
      var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
      var warnOnInvalidCallback = void 0;
      {
        didWarnAboutStateAssignmentForComponent = new Set();
        didWarnAboutUndefinedDerivedState = new Set();
        didWarnAboutUninitializedState = new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
        var didWarnOnInvalidCallback = new Set();

        warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }

          var key = callerName + "_" + callback;

          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            warning(false, "%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
          }
        };

        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function value() {
            invariant(false, "_processChildContext is not available in React 16+. This likely " + "means you have multiple copies of React and are attempting to nest " + "a React 15 tree inside a React 16 tree using " + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + "to make sure you have only one copy of React (and ideally, switch " + "to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }

      function callGetDerivedStateFromCatch(ctor, capturedValues) {
        var resultState = {};

        for (var i = 0; i < capturedValues.length; i++) {
          var capturedValue = capturedValues[i];
          var error = capturedValue.value;
          var partialState = ctor.getDerivedStateFromCatch.call(null, error);

          if (partialState !== null && partialState !== undefined) {
            _extends(resultState, partialState);
          }
        }

        return resultState;
      }

      var ReactFiberClassComponent = function ReactFiberClassComponent(legacyContext, scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
        var cacheContext = legacyContext.cacheContext,
            getMaskedContext = legacyContext.getMaskedContext,
            getUnmaskedContext = legacyContext.getUnmaskedContext,
            isContextConsumer = legacyContext.isContextConsumer,
            hasContextChanged = legacyContext.hasContextChanged;
        var updater = {
          isMounted: isMounted,
          enqueueSetState: function enqueueSetState(instance, partialState, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "setState");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: partialState,
              callback: callback,
              isReplace: false,
              isForced: false,
              capturedValue: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: state,
              callback: callback,
              isReplace: true,
              isForced: false,
              capturedValue: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
            var fiber = get(instance);
            callback = callback === undefined ? null : callback;
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            var expirationTime = computeExpirationForFiber(fiber);
            var update = {
              expirationTime: expirationTime,
              partialState: null,
              callback: callback,
              isReplace: false,
              isForced: true,
              capturedValue: null,
              next: null
            };
            insertUpdateIntoFiber(fiber, update);
            scheduleWork(fiber, expirationTime);
          }
        };

        function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
          if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
            return true;
          }

          var instance = workInProgress.stateNode;
          var ctor = workInProgress.type;

          if (typeof instance.shouldComponentUpdate === "function") {
            startPhaseTimer(workInProgress, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
            stopPhaseTimer();
            {
              !(shouldUpdate !== undefined) ? warning(false, "%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName(workInProgress) || "Component") : void 0;
            }
            return shouldUpdate;
          }

          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }

          return true;
        }

        function checkClassInstance(workInProgress) {
          var instance = workInProgress.stateNode;
          var type = workInProgress.type;
          {
            var name = getComponentName(workInProgress) || "Component";
            var renderPresent = instance.render;

            if (!renderPresent) {
              if (type.prototype && typeof type.prototype.render === "function") {
                warning(false, "%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
              } else {
                warning(false, "%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
              }
            }

            var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
            !noGetInitialStateOnES6 ? warning(false, "getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name) : void 0;
            var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
            !noGetDefaultPropsOnES6 ? warning(false, "getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name) : void 0;
            var noInstancePropTypes = !instance.propTypes;
            !noInstancePropTypes ? warning(false, "propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name) : void 0;
            var noInstanceContextTypes = !instance.contextTypes;
            !noInstanceContextTypes ? warning(false, "contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name) : void 0;
            var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== "function";
            !noComponentShouldUpdate ? warning(false, "%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name) : void 0;

            if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              warning(false, "%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName(workInProgress) || "A pure component");
            }

            var noComponentDidUnmount = typeof instance.componentDidUnmount !== "function";
            !noComponentDidUnmount ? warning(false, "%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name) : void 0;
            var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== "function";
            !noComponentDidReceiveProps ? warning(false, "%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name) : void 0;
            var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== "function";
            !noComponentWillRecieveProps ? warning(false, "%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name) : void 0;
            var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== "function";
            !noUnsafeComponentWillRecieveProps ? warning(false, "%s has a method called " + "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name) : void 0;
            var hasMutatedProps = instance.props !== workInProgress.pendingProps;
            !(instance.props === undefined || !hasMutatedProps) ? warning(false, "%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name) : void 0;
            var noInstanceDefaultProps = !instance.defaultProps;
            !noInstanceDefaultProps ? warning(false, "Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name) : void 0;

            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(type)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(type);
              warning(false, "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). " + "This component defines getSnapshotBeforeUpdate() only.", getComponentName(workInProgress));
            }

            var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== "function";
            !noInstanceGetDerivedStateFromProps ? warning(false, "%s: getDerivedStateFromProps() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name) : void 0;
            var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromCatch !== "function";
            !noInstanceGetDerivedStateFromCatch ? warning(false, "%s: getDerivedStateFromCatch() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name) : void 0;
            var noStaticGetSnapshotBeforeUpdate = typeof type.getSnapshotBeforeUpdate !== "function";
            !noStaticGetSnapshotBeforeUpdate ? warning(false, "%s: getSnapshotBeforeUpdate() is defined as a static method " + "and will be ignored. Instead, declare it as an instance method.", name) : void 0;
            var _state = instance.state;

            if (_state && ((typeof _state === "undefined" ? "undefined" : _typeof(_state)) !== "object" || isArray(_state))) {
              warning(false, "%s.state: must be set to an object or null", name);
            }

            if (typeof instance.getChildContext === "function") {
              !(_typeof(type.childContextTypes) === "object") ? warning(false, "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", name) : void 0;
            }
          }
        }

        function resetInputPointers(workInProgress, instance) {
          instance.props = workInProgress.memoizedProps;
          instance.state = workInProgress.memoizedState;
        }

        function adoptClassInstance(workInProgress, instance) {
          instance.updater = updater;
          workInProgress.stateNode = instance;
          set(instance, workInProgress);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }

        function constructClassInstance(workInProgress, props) {
          var ctor = workInProgress.type;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          var needsContext = isContextConsumer(workInProgress);
          var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            new ctor(props, context);
          }

          var instance = new ctor(props, context);
          var state = instance.state !== null && instance.state !== undefined ? instance.state : null;
          adoptClassInstance(workInProgress, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(workInProgress) || "Component";

              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                warning(false, "%s: Did not properly initialize state during construction. " + "Expected state to be an object, but it was %s.", componentName, instance.state === null ? "null" : "undefined");
              }
            }

            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;

              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }

              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }

              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }

              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(workInProgress) || "Component";

                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";

                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  warning(false, "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + "%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n" + "The above lifecycles should be removed. Learn more about this warning here:\n" + "https://fb.me/react-async-component-lifecycle-hooks", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          workInProgress.memoizedState = state;
          var partialState = callGetDerivedStateFromProps(workInProgress, instance, props, state);

          if (partialState !== null && partialState !== undefined) {
            workInProgress.memoizedState = _extends({}, workInProgress.memoizedState, partialState);
          }

          if (needsContext) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return instance;
        }

        function callComponentWillMount(workInProgress, instance) {
          startPhaseTimer(workInProgress, "componentWillMount");
          var oldState = instance.state;

          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }

          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }

          stopPhaseTimer();

          if (oldState !== instance.state) {
            {
              warning(false, "%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName(workInProgress) || "Component");
            }
            updater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
          var oldState = instance.state;
          startPhaseTimer(workInProgress, "componentWillReceiveProps");

          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, newContext);
          }

          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, newContext);
          }

          stopPhaseTimer();

          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress) || "Component";

              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                warning(false, "%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
              }
            }
            updater.enqueueReplaceState(instance, instance.state, null);
          }
        }

        function callGetDerivedStateFromProps(workInProgress, instance, nextProps, prevState) {
          var type = workInProgress.type;

          if (typeof type.getDerivedStateFromProps === "function") {
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              type.getDerivedStateFromProps.call(null, nextProps, prevState);
            }

            var partialState = type.getDerivedStateFromProps.call(null, nextProps, prevState);
            {
              if (partialState === undefined) {
                var componentName = getComponentName(workInProgress) || "Component";

                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  warning(false, "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " + "You have returned undefined.", componentName);
                }
              }
            }
            return partialState;
          }
        }

        function mountClassInstance(workInProgress, renderExpirationTime) {
          var ctor = workInProgress.type;
          var current = workInProgress.alternate;
          {
            checkClassInstance(workInProgress);
          }
          var instance = workInProgress.stateNode;
          var props = workInProgress.pendingProps;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          instance.props = props;
          instance.state = workInProgress.memoizedState;
          instance.refs = emptyObject;
          instance.context = getMaskedContext(workInProgress, unmaskedContext);
          {
            if (workInProgress.mode & StrictMode) {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
            }

            if (warnAboutDeprecatedLifecycles) {
              ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
            }
          }

          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress, instance);
            var updateQueue = workInProgress.updateQueue;

            if (updateQueue !== null) {
              instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);
            }
          }

          if (typeof instance.componentDidMount === "function") {
            workInProgress.effectTag |= Update;
          }
        }

        function resumeMountClassInstance(workInProgress, renderExpirationTime) {
          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;
          resetInputPointers(workInProgress, instance);
          var oldProps = workInProgress.memoizedProps;
          var newProps = workInProgress.pendingProps;
          var oldContext = instance.context;
          var newUnmaskedContext = getUnmaskedContext(workInProgress);
          var newContext = getMaskedContext(workInProgress, newUnmaskedContext);
          var hasNewLifecycles = typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== newContext) {
              callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
            }
          }

          var oldState = workInProgress.memoizedState;
          var newState = void 0;
          var derivedStateFromCatch = void 0;

          if (workInProgress.updateQueue !== null) {
            newState = processUpdateQueue(null, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
            var updateQueue = workInProgress.updateQueue;

            if (updateQueue !== null && updateQueue.capturedValues !== null && enableGetDerivedStateFromCatch && typeof ctor.getDerivedStateFromCatch === "function") {
              var capturedValues = updateQueue.capturedValues;
              derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, capturedValues);
            }
          } else {
            newState = oldState;
          }

          var derivedStateFromProps = void 0;

          if (oldProps !== newProps) {
            derivedStateFromProps = callGetDerivedStateFromProps(workInProgress, instance, newProps, newState);
          }

          if (derivedStateFromProps !== null && derivedStateFromProps !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromProps : _extends({}, newState, derivedStateFromProps);
            var _updateQueue = workInProgress.updateQueue;

            if (_updateQueue !== null) {
              _updateQueue.baseState = _extends({}, _updateQueue.baseState, derivedStateFromProps);
            }
          }

          if (derivedStateFromCatch !== null && derivedStateFromCatch !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromCatch : _extends({}, newState, derivedStateFromCatch);
            var _updateQueue2 = workInProgress.updateQueue;

            if (_updateQueue2 !== null) {
              _updateQueue2.baseState = _extends({}, _updateQueue2.baseState, derivedStateFromCatch);
            }
          }

          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress.effectTag |= Update;
            }

            return false;
          }

          var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              startPhaseTimer(workInProgress, "componentWillMount");

              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }

              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }

              stopPhaseTimer();
            }

            if (typeof instance.componentDidMount === "function") {
              workInProgress.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress.effectTag |= Update;
            }

            memoizeProps(workInProgress, newProps);
            memoizeState(workInProgress, newState);
          }

          instance.props = newProps;
          instance.state = newState;
          instance.context = newContext;
          return shouldUpdate;
        }

        function updateClassInstance(current, workInProgress, renderExpirationTime) {
          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;
          resetInputPointers(workInProgress, instance);
          var oldProps = workInProgress.memoizedProps;
          var newProps = workInProgress.pendingProps;
          var oldContext = instance.context;
          var newUnmaskedContext = getUnmaskedContext(workInProgress);
          var newContext = getMaskedContext(workInProgress, newUnmaskedContext);
          var hasNewLifecycles = typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== newContext) {
              callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
            }
          }

          var oldState = workInProgress.memoizedState;
          var newState = void 0;
          var derivedStateFromCatch = void 0;

          if (workInProgress.updateQueue !== null) {
            newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
            var updateQueue = workInProgress.updateQueue;

            if (updateQueue !== null && updateQueue.capturedValues !== null && enableGetDerivedStateFromCatch && typeof ctor.getDerivedStateFromCatch === "function") {
              var capturedValues = updateQueue.capturedValues;
              derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, capturedValues);
            }
          } else {
            newState = oldState;
          }

          var derivedStateFromProps = void 0;

          if (oldProps !== newProps) {
            derivedStateFromProps = callGetDerivedStateFromProps(workInProgress, instance, newProps, newState);
          }

          if (derivedStateFromProps !== null && derivedStateFromProps !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromProps : _extends({}, newState, derivedStateFromProps);
            var _updateQueue3 = workInProgress.updateQueue;

            if (_updateQueue3 !== null) {
              _updateQueue3.baseState = _extends({}, _updateQueue3.baseState, derivedStateFromProps);
            }
          }

          if (derivedStateFromCatch !== null && derivedStateFromCatch !== undefined) {
            newState = newState === null || newState === undefined ? derivedStateFromCatch : _extends({}, newState, derivedStateFromCatch);
            var _updateQueue4 = workInProgress.updateQueue;

            if (_updateQueue4 !== null) {
              _updateQueue4.baseState = _extends({}, _updateQueue4.baseState, derivedStateFromCatch);
            }
          }

          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Update;
              }
            }

            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Snapshot;
              }
            }

            return false;
          }

          var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              startPhaseTimer(workInProgress, "componentWillUpdate");

              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, newContext);
              }

              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, newContext);
              }

              stopPhaseTimer();
            }

            if (typeof instance.componentDidUpdate === "function") {
              workInProgress.effectTag |= Update;
            }

            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress.effectTag |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Update;
              }
            }

            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
                workInProgress.effectTag |= Snapshot;
              }
            }

            memoizeProps(workInProgress, newProps);
            memoizeState(workInProgress, newState);
          }

          instance.props = newProps;
          instance.state = newState;
          instance.context = newContext;
          return shouldUpdate;
        }

        return {
          adoptClassInstance: adoptClassInstance,
          callGetDerivedStateFromProps: callGetDerivedStateFromProps,
          constructClassInstance: constructClassInstance,
          mountClassInstance: mountClassInstance,
          resumeMountClassInstance: resumeMountClassInstance,
          updateClassInstance: updateClassInstance
        };
      };

      var getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
      var didWarnAboutMaps = void 0;
      var didWarnAboutStringRefInStrictMode = void 0;
      var ownerHasKeyUseWarning = void 0;
      var ownerHasFunctionTypeWarning = void 0;

      var warnForMissingKey = function warnForMissingKey(child) {};

      {
        didWarnAboutMaps = false;
        didWarnAboutStringRefInStrictMode = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};

        warnForMissingKey = function warnForMissingKey(child) {
          if (child === null || (typeof child === "undefined" ? "undefined" : _typeof(child)) !== "object") {
            return;
          }

          if (!child._store || child._store.validated || child.key != null) {
            return;
          }

          invariant(_typeof(child._store) === "object", "React Component in warnForMissingKey should have a _store. " + "This error is likely caused by a bug in React. Please file an issue.");
          child._store.validated = true;
          var currentComponentErrorInfo = "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information." + (getCurrentFiberStackAddendum$1() || "");

          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }

          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          warning(false, "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information.%s", getCurrentFiberStackAddendum$1());
        };
      }
      var isArray$1 = Array.isArray;

      function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;

        if (mixedRef !== null && typeof mixedRef !== "function" && (typeof mixedRef === "undefined" ? "undefined" : _typeof(mixedRef)) !== "object") {
          {
            if (returnFiber.mode & StrictMode) {
              var componentName = getComponentName(returnFiber) || "Component";

              if (!didWarnAboutStringRefInStrictMode[componentName]) {
                warning(false, 'A string ref, "%s", has been found within a strict mode tree. ' + "String refs are a source of potential bugs and should be avoided. " + "We recommend using createRef() instead." + "\n%s" + "\n\nLearn more about using refs safely here:" + "\nhttps://fb.me/react-strict-mode-string-ref", mixedRef, getStackAddendumByWorkInProgressFiber(returnFiber));
                didWarnAboutStringRefInStrictMode[componentName] = true;
              }
            }
          }

          if (element._owner) {
            var owner = element._owner;
            var inst = void 0;

            if (owner) {
              var ownerFiber = owner;
              invariant(ownerFiber.tag === ClassComponent, "Stateless function components cannot have refs.");
              inst = ownerFiber.stateNode;
            }

            invariant(inst, "Missing owner for string ref %s. This error is likely caused by a " + "bug in React. Please file an issue.", mixedRef);
            var stringRef = "" + mixedRef;

            if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
              return current.ref;
            }

            var ref = function ref(value) {
              var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;

              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };

            ref._stringRef = stringRef;
            return ref;
          } else {
            invariant(typeof mixedRef === "string", "Expected ref to be a function or a string.");
            invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. This could happen for one of" + " the following reasons:\n" + "1. You may be adding a ref to a functional component\n" + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + "3. You have multiple copies of React loaded\n" + "See https://fb.me/react-refs-must-have-owner for more information.", mixedRef);
          }
        }

        return mixedRef;
      }

      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          var addendum = "";
          {
            addendum = " If you meant to render a collection of children, use an array " + "instead." + (getCurrentFiberStackAddendum$1() || "");
          }
          invariant(false, "Objects are not valid as a React child (found: %s).%s", Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, addendum);
        }
      }

      function warnOnFunctionType() {
        var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it." + (getCurrentFiberStackAddendum$1() || "");

        if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
        warning(false, "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.%s", getCurrentFiberStackAddendum$1() || "");
      }

      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }

          childToDelete.nextEffect = null;
          childToDelete.effectTag = Deletion;
        }

        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }

          var childToDelete = currentFirstChild;

          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }

          return null;
        }

        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;

          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }

            existingChild = existingChild.sibling;
          }

          return existingChildren;
        }

        function useFiber(fiber, pendingProps, expirationTime) {
          var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }

        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;

          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }

          var current = newFiber.alternate;

          if (current !== null) {
            var oldIndex = current.index;

            if (oldIndex < lastPlacedIndex) {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          }
        }

        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.effectTag = Placement;
          }

          return newFiber;
        }

        function updateTextNode(returnFiber, current, textContent, expirationTime) {
          if (current === null || current.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, textContent, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateElement(returnFiber, current, element, expirationTime) {
          if (current !== null && current.type === element.type) {
            var existing = useFiber(current, element.props, expirationTime);
            existing.ref = coerceRef(returnFiber, current, element);
            existing["return"] = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          } else {
            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
            created.ref = coerceRef(returnFiber, current, element);
            created["return"] = returnFiber;
            return created;
          }
        }

        function updatePortal(returnFiber, current, portal, expirationTime) {
          if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, portal.children || [], expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function updateFragment(returnFiber, current, fragment, expirationTime, key) {
          if (current === null || current.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
            created["return"] = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, fragment, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }
        }

        function createChild(returnFiber, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
            created["return"] = returnFiber;
            return created;
          }

          if ((typeof newChild === "undefined" ? "undefined" : _typeof(newChild)) === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created["return"] = returnFiber;
                  return _created;
                }

              case REACT_PORTAL_TYPE:
                {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

                  _created2["return"] = returnFiber;
                  return _created2;
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

              _created3["return"] = returnFiber;
              return _created3;
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
          var key = oldFiber !== null ? oldFiber.key : null;

          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }

            return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
          }

          if ((typeof newChild === "undefined" ? "undefined" : _typeof(newChild)) === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                    }

                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }

              case REACT_PORTAL_TYPE:
                {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }

              return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
          }

          if ((typeof newChild === "undefined" ? "undefined" : _typeof(newChild)) === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }

                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }

              case REACT_PORTAL_TYPE:
                {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;

              return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }
          return null;
        }

        function warnOnInvalidKey(child, knownKeys) {
          {
            if ((typeof child === "undefined" ? "undefined" : _typeof(child)) !== "object" || child === null) {
              return knownKeys;
            }

            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child);
                var key = child.key;

                if (typeof key !== "string") {
                  break;
                }

                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }

                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }

                warning(false, "Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.%s", key, getCurrentFiberStackAddendum$1());
                break;

              default:
                break;
            }
          }
          return knownKeys;
        }

        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
          {
            var knownKeys = null;

            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;

          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

              if (!_newFiber) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }

              previousNewFiber = _newFiber;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

            if (_newFiber2) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren["delete"](_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }

              previousNewFiber = _newFiber2;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          invariant(typeof iteratorFn === "function", "An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue.");
          {
            if (typeof newChildrenIterable.entries === "function") {
              var possibleMap = newChildrenIterable;

              if (possibleMap.entries === iteratorFn) {
                !didWarnAboutMaps ? warning(false, "Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.%s", getCurrentFiberStackAddendum$1()) : void 0;
                didWarnAboutMaps = true;
              }
            }

            var _newChildren = iteratorFn.call(newChildrenIterable);

            if (_newChildren) {
              var knownKeys = null;

              var _step = _newChildren.next();

              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          invariant(newChildren != null, "An iterable object provided no iterator.");
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();

          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

            if (newFiber === null) {
              if (!oldFiber) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

              if (_newFiber3 === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }

              previousNewFiber = _newFiber3;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren["delete"](_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }

              previousNewFiber = _newFiber4;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent, expirationTime);
            existing["return"] = returnFiber;
            return existing;
          }

          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
          var key = element.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
                existing.ref = coerceRef(returnFiber, child, element);
                existing["return"] = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
            created["return"] = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4["return"] = returnFiber;
            return _created4;
          }
        }

        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
          var key = portal.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || [], expirationTime);
                existing["return"] = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
          if ((typeof newChild === "undefined" ? "undefined" : _typeof(newChild)) === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {
            newChild = newChild.props.children;
          }

          var isObject = (typeof newChild === "undefined" ? "undefined" : _typeof(newChild)) === "object" && newChild !== null;

          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
            }
          }

          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
          }

          if (isArray$1(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
          }

          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType();
            }
          }

          if (typeof newChild === "undefined") {
            switch (returnFiber.tag) {
              case ClassComponent:
                {
                  {
                    var instance = returnFiber.stateNode;

                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }

              case FunctionalComponent:
                {
                  var Component = returnFiber.type;
                  invariant(false, "%s(...): Nothing was returned from render. This usually means a " + "return statement is missing. Or, to render nothing, " + "return null.", Component.displayName || Component.name || "Component");
                }
            }
          }

          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }

        return reconcileChildFibers;
      }

      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);

      function cloneChildFibers(current, workInProgress) {
        invariant(current === null || workInProgress.child === current.child, "Resuming work not yet implemented.");

        if (workInProgress.child === null) {
          return;
        }

        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        workInProgress.child = newChild;
        newChild["return"] = workInProgress;

        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
          newChild["return"] = workInProgress;
        }

        newChild.sibling = null;
      }

      var didWarnAboutBadClass = void 0;
      var didWarnAboutGetDerivedStateOnFunctionalComponent = void 0;
      var didWarnAboutStatelessRefs = void 0;
      {
        didWarnAboutBadClass = {};
        didWarnAboutGetDerivedStateOnFunctionalComponent = {};
        didWarnAboutStatelessRefs = {};
      }

      var ReactFiberBeginWork = function ReactFiberBeginWork(config, hostContext, legacyContext, newContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
        var shouldSetTextContent = config.shouldSetTextContent,
            shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
        var pushHostContext = hostContext.pushHostContext,
            pushHostContainer = hostContext.pushHostContainer;
        var pushProvider = newContext.pushProvider;
        var getMaskedContext = legacyContext.getMaskedContext,
            getUnmaskedContext = legacyContext.getUnmaskedContext,
            hasLegacyContextChanged = legacyContext.hasContextChanged,
            pushLegacyContextProvider = legacyContext.pushContextProvider,
            pushTopLevelContextObject = legacyContext.pushTopLevelContextObject,
            invalidateContextProvider = legacyContext.invalidateContextProvider;
        var enterHydrationState = hydrationContext.enterHydrationState,
            resetHydrationState = hydrationContext.resetHydrationState,
            tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;

        var _ReactFiberClassCompo = ReactFiberClassComponent(legacyContext, scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),
            adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
            callGetDerivedStateFromProps = _ReactFiberClassCompo.callGetDerivedStateFromProps,
            constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
            mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
            resumeMountClassInstance = _ReactFiberClassCompo.resumeMountClassInstance,
            updateClassInstance = _ReactFiberClassCompo.updateClassInstance;

        function reconcileChildren(current, workInProgress, nextChildren) {
          reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
        }

        function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
          if (current === null) {
            workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
          } else {
            workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
          }
        }

        function updateForwardRef(current, workInProgress) {
          var render = workInProgress.type.render;
          var nextChildren = render(workInProgress.pendingProps, workInProgress.ref);
          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextChildren);
          return workInProgress.child;
        }

        function updateFragment(current, workInProgress) {
          var nextChildren = workInProgress.pendingProps;

          if (hasLegacyContextChanged()) {} else if (workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextChildren);
          return workInProgress.child;
        }

        function updateMode(current, workInProgress) {
          var nextChildren = workInProgress.pendingProps.children;

          if (hasLegacyContextChanged()) {} else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextChildren);
          return workInProgress.child;
        }

        function markRef(current, workInProgress) {
          var ref = workInProgress.ref;

          if (current === null && ref !== null || current !== null && current.ref !== ref) {
            workInProgress.effectTag |= Ref;
          }
        }

        function updateFunctionalComponent(current, workInProgress) {
          var fn = workInProgress.type;
          var nextProps = workInProgress.pendingProps;

          if (hasLegacyContextChanged()) {} else {
            if (workInProgress.memoizedProps === nextProps) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
          }

          var unmaskedContext = getUnmaskedContext(workInProgress);
          var context = getMaskedContext(workInProgress, unmaskedContext);
          var nextChildren = void 0;
          {
            ReactCurrentOwner.current = workInProgress;
            ReactDebugCurrentFiber.setCurrentPhase("render");
            nextChildren = fn(nextProps, context);
            ReactDebugCurrentFiber.setCurrentPhase(null);
          }
          workInProgress.effectTag |= PerformedWork;
          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextProps);
          return workInProgress.child;
        }

        function updateClassComponent(current, workInProgress, renderExpirationTime) {
          var hasContext = pushLegacyContextProvider(workInProgress);
          var shouldUpdate = void 0;

          if (current === null) {
            if (workInProgress.stateNode === null) {
              constructClassInstance(workInProgress, workInProgress.pendingProps);
              mountClassInstance(workInProgress, renderExpirationTime);
              shouldUpdate = true;
            } else {
              shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
            }
          } else {
            shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
          }

          var didCaptureError = false;
          var updateQueue = workInProgress.updateQueue;

          if (updateQueue !== null && updateQueue.capturedValues !== null) {
            shouldUpdate = true;
            didCaptureError = true;
          }

          return finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime);
        }

        function finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime) {
          markRef(current, workInProgress);

          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress, false);
            }

            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;
          ReactCurrentOwner.current = workInProgress;
          var nextChildren = void 0;

          if (didCaptureError && (!enableGetDerivedStateFromCatch || typeof ctor.getDerivedStateFromCatch !== "function")) {
            nextChildren = null;
          } else {
            {
              ReactDebugCurrentFiber.setCurrentPhase("render");
              nextChildren = instance.render();

              if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                instance.render();
              }

              ReactDebugCurrentFiber.setCurrentPhase(null);
            }
          }

          workInProgress.effectTag |= PerformedWork;

          if (didCaptureError) {
            reconcileChildrenAtExpirationTime(current, workInProgress, null, renderExpirationTime);
            workInProgress.child = null;
          }

          reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);
          memoizeState(workInProgress, instance.state);
          memoizeProps(workInProgress, instance.props);

          if (hasContext) {
            invalidateContextProvider(workInProgress, true);
          }

          return workInProgress.child;
        }

        function pushHostRootContext(workInProgress) {
          var root = workInProgress.stateNode;

          if (root.pendingContext) {
            pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
          } else if (root.context) {
            pushTopLevelContextObject(workInProgress, root.context, false);
          }

          pushHostContainer(workInProgress, root.containerInfo);
        }

        function updateHostRoot(current, workInProgress, renderExpirationTime) {
          pushHostRootContext(workInProgress);
          var updateQueue = workInProgress.updateQueue;

          if (updateQueue !== null) {
            var prevState = workInProgress.memoizedState;
            var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);
            memoizeState(workInProgress, state);
            updateQueue = workInProgress.updateQueue;
            var element = void 0;

            if (updateQueue !== null && updateQueue.capturedValues !== null) {
              element = null;
            } else if (prevState === state) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            } else {
              element = state.element;
            }

            var root = workInProgress.stateNode;

            if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
              workInProgress.effectTag |= Placement;
              workInProgress.child = mountChildFibers(workInProgress, null, element, renderExpirationTime);
            } else {
              resetHydrationState();
              reconcileChildren(current, workInProgress, element);
            }

            memoizeState(workInProgress, state);
            return workInProgress.child;
          }

          resetHydrationState();
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }

        function updateHostComponent(current, workInProgress, renderExpirationTime) {
          pushHostContext(workInProgress);

          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          var type = workInProgress.type;
          var memoizedProps = workInProgress.memoizedProps;
          var nextProps = workInProgress.pendingProps;
          var prevProps = current !== null ? current.memoizedProps : null;

          if (hasLegacyContextChanged()) {} else if (memoizedProps === nextProps) {
            var isHidden = workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps);

            if (isHidden) {
              workInProgress.expirationTime = Never;
            }

            if (!isHidden || renderExpirationTime !== Never) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
          }

          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);

          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps && shouldSetTextContent(type, prevProps)) {
            workInProgress.effectTag |= ContentReset;
          }

          markRef(current, workInProgress);

          if (renderExpirationTime !== Never && workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps)) {
            workInProgress.expirationTime = Never;
            workInProgress.memoizedProps = nextProps;
            return null;
          }

          reconcileChildren(current, workInProgress, nextChildren);
          memoizeProps(workInProgress, nextProps);
          return workInProgress.child;
        }

        function updateHostText(current, workInProgress) {
          if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
          }

          var nextProps = workInProgress.pendingProps;
          memoizeProps(workInProgress, nextProps);
          return null;
        }

        function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
          invariant(current === null, "An indeterminate component should never have mounted. This error is " + "likely caused by a bug in React. Please file an issue.");
          var fn = workInProgress.type;
          var props = workInProgress.pendingProps;
          var unmaskedContext = getUnmaskedContext(workInProgress);
          var context = getMaskedContext(workInProgress, unmaskedContext);
          var value = void 0;
          {
            if (fn.prototype && typeof fn.prototype.render === "function") {
              var componentName = getComponentName(workInProgress) || "Unknown";

              if (!didWarnAboutBadClass[componentName]) {
                warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }

            ReactCurrentOwner.current = workInProgress;
            value = fn(props, context);
          }
          workInProgress.effectTag |= PerformedWork;

          if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var Component = workInProgress.type;
            workInProgress.tag = ClassComponent;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;

            if (typeof Component.getDerivedStateFromProps === "function") {
              var partialState = callGetDerivedStateFromProps(workInProgress, value, props, workInProgress.memoizedState);

              if (partialState !== null && partialState !== undefined) {
                workInProgress.memoizedState = _extends({}, workInProgress.memoizedState, partialState);
              }
            }

            var hasContext = pushLegacyContextProvider(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, renderExpirationTime);
            return finishClassComponent(current, workInProgress, true, hasContext, false, renderExpirationTime);
          } else {
            workInProgress.tag = FunctionalComponent;
            {
              var _Component = workInProgress.type;

              if (_Component) {
                !!_Component.childContextTypes ? warning(false, "%s(...): childContextTypes cannot be defined on a functional component.", _Component.displayName || _Component.name || "Component") : void 0;
              }

              if (workInProgress.ref !== null) {
                var info = "";
                var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();

                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }

                var warningKey = ownerName || workInProgress._debugID || "";
                var debugSource = workInProgress._debugSource;

                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }

                if (!didWarnAboutStatelessRefs[warningKey]) {
                  didWarnAboutStatelessRefs[warningKey] = true;
                  warning(false, "Stateless function components cannot be given refs. " + "Attempts to access this ref will fail.%s%s", info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
                }
              }

              if (typeof fn.getDerivedStateFromProps === "function") {
                var _componentName = getComponentName(workInProgress) || "Unknown";

                if (!didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName]) {
                  warning(false, "%s: Stateless functional components do not support getDerivedStateFromProps.", _componentName);
                  didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName] = true;
                }
              }
            }
            reconcileChildren(current, workInProgress, value);
            memoizeProps(workInProgress, props);
            return workInProgress.child;
          }
        }

        function updateCallComponent(current, workInProgress, renderExpirationTime) {
          var nextProps = workInProgress.pendingProps;

          if (hasLegacyContextChanged()) {} else if (workInProgress.memoizedProps === nextProps) {
            nextProps = workInProgress.memoizedProps;
          }

          var nextChildren = nextProps.children;

          if (current === null) {
            workInProgress.stateNode = mountChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
          } else {
            workInProgress.stateNode = reconcileChildFibers(workInProgress, current.stateNode, nextChildren, renderExpirationTime);
          }

          memoizeProps(workInProgress, nextProps);
          return workInProgress.stateNode;
        }

        function updatePortalComponent(current, workInProgress, renderExpirationTime) {
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          var nextChildren = workInProgress.pendingProps;

          if (hasLegacyContextChanged()) {} else if (workInProgress.memoizedProps === nextChildren) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          if (current === null) {
            workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
            memoizeProps(workInProgress, nextChildren);
          } else {
            reconcileChildren(current, workInProgress, nextChildren);
            memoizeProps(workInProgress, nextChildren);
          }

          return workInProgress.child;
        }

        function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
          var fiber = workInProgress.child;

          if (fiber !== null) {
            fiber["return"] = workInProgress;
          }

          while (fiber !== null) {
            var nextFiber = void 0;

            switch (fiber.tag) {
              case ContextConsumer:
                var observedBits = fiber.stateNode | 0;

                if (fiber.type === context && (observedBits & changedBits) !== 0) {
                  var node = fiber;

                  while (node !== null) {
                    var alternate = node.alternate;

                    if (node.expirationTime === NoWork || node.expirationTime > renderExpirationTime) {
                      node.expirationTime = renderExpirationTime;

                      if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
                        alternate.expirationTime = renderExpirationTime;
                      }
                    } else if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
                      alternate.expirationTime = renderExpirationTime;
                    } else {
                      break;
                    }

                    node = node["return"];
                  }

                  nextFiber = null;
                } else {
                  nextFiber = fiber.child;
                }

                break;

              case ContextProvider:
                nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
                break;

              default:
                nextFiber = fiber.child;
                break;
            }

            if (nextFiber !== null) {
              nextFiber["return"] = fiber;
            } else {
              nextFiber = fiber;

              while (nextFiber !== null) {
                if (nextFiber === workInProgress) {
                  nextFiber = null;
                  break;
                }

                var sibling = nextFiber.sibling;

                if (sibling !== null) {
                  nextFiber = sibling;
                  break;
                }

                nextFiber = nextFiber["return"];
              }
            }

            fiber = nextFiber;
          }
        }

        function updateContextProvider(current, workInProgress, renderExpirationTime) {
          var providerType = workInProgress.type;
          var context = providerType._context;
          var newProps = workInProgress.pendingProps;
          var oldProps = workInProgress.memoizedProps;

          if (hasLegacyContextChanged()) {} else if (oldProps === newProps) {
            workInProgress.stateNode = 0;
            pushProvider(workInProgress);
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          var newValue = newProps.value;
          workInProgress.memoizedProps = newProps;
          var changedBits = void 0;

          if (oldProps === null) {
            changedBits = MAX_SIGNED_31_BIT_INT;
          } else {
            if (oldProps.value === newProps.value) {
              if (oldProps.children === newProps.children) {
                workInProgress.stateNode = 0;
                pushProvider(workInProgress);
                return bailoutOnAlreadyFinishedWork(current, workInProgress);
              }

              changedBits = 0;
            } else {
              var oldValue = oldProps.value;

              if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue) {
                  if (oldProps.children === newProps.children) {
                    workInProgress.stateNode = 0;
                    pushProvider(workInProgress);
                    return bailoutOnAlreadyFinishedWork(current, workInProgress);
                  }

                  changedBits = 0;
                } else {
                changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
                {
                  !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits) ? warning(false, "calculateChangedBits: Expected the return value to be a " + "31-bit integer. Instead received: %s", changedBits) : void 0;
                }
                changedBits |= 0;

                if (changedBits === 0) {
                  if (oldProps.children === newProps.children) {
                    workInProgress.stateNode = 0;
                    pushProvider(workInProgress);
                    return bailoutOnAlreadyFinishedWork(current, workInProgress);
                  }
                } else {
                  propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
                }
              }
            }
          }

          workInProgress.stateNode = changedBits;
          pushProvider(workInProgress);
          var newChildren = newProps.children;
          reconcileChildren(current, workInProgress, newChildren);
          return workInProgress.child;
        }

        function updateContextConsumer(current, workInProgress, renderExpirationTime) {
          var context = workInProgress.type;
          var newProps = workInProgress.pendingProps;
          var oldProps = workInProgress.memoizedProps;
          var newValue = context._currentValue;
          var changedBits = context._changedBits;

          if (hasLegacyContextChanged()) {} else if (changedBits === 0 && oldProps === newProps) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress);
          }

          workInProgress.memoizedProps = newProps;
          var observedBits = newProps.unstable_observedBits;

          if (observedBits === undefined || observedBits === null) {
            observedBits = MAX_SIGNED_31_BIT_INT;
          }

          workInProgress.stateNode = observedBits;

          if ((changedBits & observedBits) !== 0) {
            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
          }

          var render = newProps.children;
          {
            !(typeof render === "function") ? warning(false, "A context consumer was rendered with multiple children, or a child " + "that isn't a function. A context consumer expects a single child " + "that is a function. If you did pass a function, make sure there " + "is no trailing or leading whitespace around it.") : void 0;
          }
          var newChildren = render(newValue);
          reconcileChildren(current, workInProgress, newChildren);
          return workInProgress.child;
        }

        function bailoutOnAlreadyFinishedWork(current, workInProgress) {
          cancelWorkTimer(workInProgress);
          cloneChildFibers(current, workInProgress);
          return workInProgress.child;
        }

        function bailoutOnLowPriority(current, workInProgress) {
          cancelWorkTimer(workInProgress);

          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              break;

            case ClassComponent:
              pushLegacyContextProvider(workInProgress);
              break;

            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case ContextProvider:
              pushProvider(workInProgress);
              break;
          }

          return null;
        }

        function memoizeProps(workInProgress, nextProps) {
          workInProgress.memoizedProps = nextProps;
        }

        function memoizeState(workInProgress, nextState) {
          workInProgress.memoizedState = nextState;
        }

        function beginWork(current, workInProgress, renderExpirationTime) {
          if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
            return bailoutOnLowPriority(current, workInProgress);
          }

          switch (workInProgress.tag) {
            case IndeterminateComponent:
              return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);

            case FunctionalComponent:
              return updateFunctionalComponent(current, workInProgress);

            case ClassComponent:
              return updateClassComponent(current, workInProgress, renderExpirationTime);

            case HostRoot:
              return updateHostRoot(current, workInProgress, renderExpirationTime);

            case HostComponent:
              return updateHostComponent(current, workInProgress, renderExpirationTime);

            case HostText:
              return updateHostText(current, workInProgress);

            case CallHandlerPhase:
              workInProgress.tag = CallComponent;

            case CallComponent:
              return updateCallComponent(current, workInProgress, renderExpirationTime);

            case ReturnComponent:
              return null;

            case HostPortal:
              return updatePortalComponent(current, workInProgress, renderExpirationTime);

            case ForwardRef:
              return updateForwardRef(current, workInProgress);

            case Fragment:
              return updateFragment(current, workInProgress);

            case Mode:
              return updateMode(current, workInProgress);

            case ContextProvider:
              return updateContextProvider(current, workInProgress, renderExpirationTime);

            case ContextConsumer:
              return updateContextConsumer(current, workInProgress, renderExpirationTime);

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        return {
          beginWork: beginWork
        };
      };

      var ReactFiberCompleteWork = function ReactFiberCompleteWork(config, hostContext, legacyContext, newContext, hydrationContext) {
        var createInstance = config.createInstance,
            createTextInstance = config.createTextInstance,
            appendInitialChild = config.appendInitialChild,
            finalizeInitialChildren = config.finalizeInitialChildren,
            prepareUpdate = config.prepareUpdate,
            mutation = config.mutation,
            persistence = config.persistence;
        var getRootHostContainer = hostContext.getRootHostContainer,
            popHostContext = hostContext.popHostContext,
            getHostContext = hostContext.getHostContext,
            popHostContainer = hostContext.popHostContainer;
        var popLegacyContextProvider = legacyContext.popContextProvider,
            popTopLevelLegacyContextObject = legacyContext.popTopLevelContextObject;
        var popProvider = newContext.popProvider;
        var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
            prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
            popHydrationState = hydrationContext.popHydrationState;

        function markUpdate(workInProgress) {
          workInProgress.effectTag |= Update;
        }

        function markRef(workInProgress) {
          workInProgress.effectTag |= Ref;
        }

        function appendAllReturns(returns, workInProgress) {
          var node = workInProgress.stateNode;

          if (node) {
            node["return"] = workInProgress;
          }

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {
              invariant(false, "A call cannot have host component children.");
            } else if (node.tag === ReturnComponent) {
              returns.push(node.pendingProps.value);
            } else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === workInProgress) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {
          var props = workInProgress.memoizedProps;
          invariant(props, "Should be resolved by now. This error is likely caused by a bug in " + "React. Please file an issue.");
          workInProgress.tag = CallHandlerPhase;
          var returns = [];
          appendAllReturns(returns, workInProgress);
          var fn = props.handler;
          var childProps = props.props;
          var nextChildren = fn(childProps, returns);
          var currentFirstChild = current !== null ? current.child : null;
          workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);
          return workInProgress.child;
        }

        function appendAllChildren(parent, workInProgress) {
          var node = workInProgress.child;

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal) {} else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === workInProgress) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        var updateHostContainer = void 0;
        var updateHostComponent = void 0;
        var updateHostText = void 0;

        if (mutation) {
          if (enableMutatingReconciler) {
            updateHostContainer = function updateHostContainer(workInProgress) {};

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
              workInProgress.updateQueue = updatePayload;

              if (updatePayload) {
                markUpdate(workInProgress);
              }
            };

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress);
              }
            };
          } else {
            invariant(false, "Mutating reconciler is disabled.");
          }
        } else if (persistence) {
          if (enablePersistentReconciler) {
            var cloneInstance = persistence.cloneInstance,
                createContainerChildSet = persistence.createContainerChildSet,
                appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,
                finalizeContainerChildren = persistence.finalizeContainerChildren;

            var appendAllChildrenToContainer = function appendAllChildrenToContainer(containerChildSet, workInProgress) {
              var node = workInProgress.child;

              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendChildToContainerChildSet(containerChildSet, node.stateNode);
                } else if (node.tag === HostPortal) {} else if (node.child !== null) {
                  node.child["return"] = node;
                  node = node.child;
                  continue;
                }

                if (node === workInProgress) {
                  return;
                }

                while (node.sibling === null) {
                  if (node["return"] === null || node["return"] === workInProgress) {
                    return;
                  }

                  node = node["return"];
                }

                node.sibling["return"] = node["return"];
                node = node.sibling;
              }
            };

            updateHostContainer = function updateHostContainer(workInProgress) {
              var portalOrRoot = workInProgress.stateNode;
              var childrenUnchanged = workInProgress.firstEffect === null;

              if (childrenUnchanged) {} else {
                var container = portalOrRoot.containerInfo;
                var newChildSet = createContainerChildSet(container);
                appendAllChildrenToContainer(newChildSet, workInProgress);
                portalOrRoot.pendingChildren = newChildSet;
                markUpdate(workInProgress);
                finalizeContainerChildren(container, newChildSet);
              }
            };

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
              var childrenUnchanged = workInProgress.firstEffect === null;
              var currentInstance = current.stateNode;

              if (childrenUnchanged && updatePayload === null) {
                workInProgress.stateNode = currentInstance;
              } else {
                var recyclableInstance = workInProgress.stateNode;
                var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

                if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress);
                }

                workInProgress.stateNode = newInstance;

                if (childrenUnchanged) {
                  markUpdate(workInProgress);
                } else {
                  appendAllChildren(newInstance, workInProgress);
                }
              }
            };

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
              if (oldText !== newText) {
                var rootContainerInstance = getRootHostContainer();
                var currentHostContext = getHostContext();
                workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
                markUpdate(workInProgress);
              }
            };
          } else {
            invariant(false, "Persistent reconciler is disabled.");
          }
        } else {
          if (enableNoopReconciler) {
            updateHostContainer = function updateHostContainer(workInProgress) {};

            updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {};

            updateHostText = function updateHostText(current, workInProgress, oldText, newText) {};
          } else {
            invariant(false, "Noop reconciler is disabled.");
          }
        }

        function completeWork(current, workInProgress, renderExpirationTime) {
          var newProps = workInProgress.pendingProps;

          switch (workInProgress.tag) {
            case FunctionalComponent:
              return null;

            case ClassComponent:
              {
                popLegacyContextProvider(workInProgress);
                var instance = workInProgress.stateNode;
                var updateQueue = workInProgress.updateQueue;

                if (updateQueue !== null && updateQueue.capturedValues !== null) {
                  workInProgress.effectTag &= ~DidCapture;

                  if (typeof instance.componentDidCatch === "function") {
                    workInProgress.effectTag |= ErrLog;
                  } else {
                    updateQueue.capturedValues = null;
                  }
                }

                return null;
              }

            case HostRoot:
              {
                popHostContainer(workInProgress);
                popTopLevelLegacyContextObject(workInProgress);
                var fiberRoot = workInProgress.stateNode;

                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }

                if (current === null || current.child === null) {
                  popHydrationState(workInProgress);
                  workInProgress.effectTag &= ~Placement;
                }

                updateHostContainer(workInProgress);
                var _updateQueue = workInProgress.updateQueue;

                if (_updateQueue !== null && _updateQueue.capturedValues !== null) {
                  workInProgress.effectTag |= ErrLog;
                }

                return null;
              }

            case HostComponent:
              {
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;

                if (current !== null && workInProgress.stateNode != null) {
                  var oldProps = current.memoizedProps;
                  var _instance = workInProgress.stateNode;
                  var currentHostContext = getHostContext();
                  var updatePayload = prepareUpdate(_instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                  updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext);

                  if (current.ref !== workInProgress.ref) {
                    markRef(workInProgress);
                  }
                } else {
                  if (!newProps) {
                    invariant(workInProgress.stateNode !== null, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                    return null;
                  }

                  var _currentHostContext = getHostContext();

                  var wasHydrated = popHydrationState(workInProgress);

                  if (wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    var _instance2 = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

                    appendAllChildren(_instance2, workInProgress);

                    if (finalizeInitialChildren(_instance2, type, newProps, rootContainerInstance, _currentHostContext)) {
                      markUpdate(workInProgress);
                    }

                    workInProgress.stateNode = _instance2;
                  }

                  if (workInProgress.ref !== null) {
                    markRef(workInProgress);
                  }
                }

                return null;
              }

            case HostText:
              {
                var newText = newProps;

                if (current && workInProgress.stateNode != null) {
                  var oldText = current.memoizedProps;
                  updateHostText(current, workInProgress, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    invariant(workInProgress.stateNode !== null, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                    return null;
                  }

                  var _rootContainerInstance = getRootHostContainer();

                  var _currentHostContext2 = getHostContext();

                  var _wasHydrated = popHydrationState(workInProgress);

                  if (_wasHydrated) {
                    if (prepareToHydrateHostTextInstance(workInProgress)) {
                      markUpdate(workInProgress);
                    }
                  } else {
                    workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                  }
                }

                return null;
              }

            case CallComponent:
              return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);

            case CallHandlerPhase:
              workInProgress.tag = CallComponent;
              return null;

            case ReturnComponent:
              return null;

            case ForwardRef:
              return null;

            case Fragment:
              return null;

            case Mode:
              return null;

            case HostPortal:
              popHostContainer(workInProgress);
              updateHostContainer(workInProgress);
              return null;

            case ContextProvider:
              popProvider(workInProgress);
              return null;

            case ContextConsumer:
              return null;

            case IndeterminateComponent:
              invariant(false, "An indeterminate component should have become determinate before " + "completing. This error is likely caused by a bug in React. Please " + "file an issue.");

            default:
              invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
        }

        return {
          completeWork: completeWork
        };
      };

      function createCapturedValue(value, source) {
        return {
          value: value,
          source: source,
          stack: getStackAddendumByWorkInProgressFiber(source)
        };
      }

      var ReactFiberUnwindWork = function ReactFiberUnwindWork(hostContext, legacyContext, newContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary) {
        var popHostContainer = hostContext.popHostContainer,
            popHostContext = hostContext.popHostContext;
        var popLegacyContextProvider = legacyContext.popContextProvider,
            popTopLevelLegacyContextObject = legacyContext.popTopLevelContextObject;
        var popProvider = newContext.popProvider;

        function throwException(returnFiber, sourceFiber, rawValue) {
          sourceFiber.effectTag |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          var value = createCapturedValue(rawValue, sourceFiber);
          var workInProgress = returnFiber;

          do {
            switch (workInProgress.tag) {
              case HostRoot:
                {
                  var errorInfo = value;
                  ensureUpdateQueues(workInProgress);
                  var updateQueue = workInProgress.updateQueue;
                  updateQueue.capturedValues = [errorInfo];
                  workInProgress.effectTag |= ShouldCapture;
                  return;
                }

              case ClassComponent:
                var ctor = workInProgress.type;
                var _instance = workInProgress.stateNode;

                if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromCatch === "function" && enableGetDerivedStateFromCatch || _instance !== null && typeof _instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(_instance))) {
                  ensureUpdateQueues(workInProgress);
                  var _updateQueue = workInProgress.updateQueue;
                  var capturedValues = _updateQueue.capturedValues;

                  if (capturedValues === null) {
                    _updateQueue.capturedValues = [value];
                  } else {
                    capturedValues.push(value);
                  }

                  workInProgress.effectTag |= ShouldCapture;
                  return;
                }

                break;

              default:
                break;
            }

            workInProgress = workInProgress["return"];
          } while (workInProgress !== null);
        }

        function unwindWork(workInProgress) {
          switch (workInProgress.tag) {
            case ClassComponent:
              {
                popLegacyContextProvider(workInProgress);
                var effectTag = workInProgress.effectTag;

                if (effectTag & ShouldCapture) {
                  workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
                  return workInProgress;
                }

                return null;
              }

            case HostRoot:
              {
                popHostContainer(workInProgress);
                popTopLevelLegacyContextObject(workInProgress);
                var _effectTag = workInProgress.effectTag;

                if (_effectTag & ShouldCapture) {
                  workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
                  return workInProgress;
                }

                return null;
              }

            case HostComponent:
              {
                popHostContext(workInProgress);
                return null;
              }

            case HostPortal:
              popHostContainer(workInProgress);
              return null;

            case ContextProvider:
              popProvider(workInProgress);
              return null;

            default:
              return null;
          }
        }

        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent:
              {
                popLegacyContextProvider(interruptedWork);
                break;
              }

            case HostRoot:
              {
                popHostContainer(interruptedWork);
                popTopLevelLegacyContextObject(interruptedWork);
                break;
              }

            case HostComponent:
              {
                popHostContext(interruptedWork);
                break;
              }

            case HostPortal:
              popHostContainer(interruptedWork);
              break;

            case ContextProvider:
              popProvider(interruptedWork);
              break;

            default:
              break;
          }
        }

        return {
          throwException: throwException,
          unwindWork: unwindWork,
          unwindInterruptedWork: unwindInterruptedWork
        };
      };

      function showErrorDialog(capturedError) {
        var componentStack = capturedError.componentStack,
            error = capturedError.error;
        var errorToHandle = void 0;

        if (error instanceof Error) {
          var message = error.message,
              name = error.name;
          var summary = message ? name + ": " + message : name;
          errorToHandle = error;

          try {
            errorToHandle.message = summary + "\n\nThis error is located at:" + componentStack;
          } catch (e) {}
        } else if (typeof error === "string") {
          errorToHandle = new Error(error + "\n\nThis error is located at:" + componentStack);
        } else {
          errorToHandle = new Error("Unspecified error at:" + componentStack);
        }

        ExceptionsManager.handleException(errorToHandle, false);
        return false;
      }

      function logCapturedError(capturedError) {
        var logError = showErrorDialog(capturedError);

        if (logError === false) {
          return;
        }

        var error = capturedError.error;
        var suppressLogging = error && error.suppressReactErrorLogging;

        if (suppressLogging) {
          return;
        }

        {
          var componentName = capturedError.componentName,
              componentStack = capturedError.componentStack,
              errorBoundaryName = capturedError.errorBoundaryName,
              errorBoundaryFound = capturedError.errorBoundaryFound,
              willRetry = capturedError.willRetry;
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage = void 0;

          if (errorBoundaryFound && errorBoundaryName) {
            if (willRetry) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
            }
          } else {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n" + "Visit https://fb.me/react-error-boundaries to learn more about error boundaries.";
          }

          var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console.error(combinedMessage);
        }
      }

      var invokeGuardedCallback$3 = ReactErrorUtils.invokeGuardedCallback;
      var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
      var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
      }

      function logError(boundary, errorInfo) {
        var source = errorInfo.source;
        var stack = errorInfo.stack;

        if (stack === null) {
          stack = getStackAddendumByWorkInProgressFiber(source);
        }

        var capturedError = {
          componentName: source !== null ? getComponentName(source) : null,
          componentStack: stack !== null ? stack : "",
          error: errorInfo.value,
          errorBoundary: null,
          errorBoundaryName: null,
          errorBoundaryFound: false,
          willRetry: false
        };

        if (boundary !== null && boundary.tag === ClassComponent) {
          capturedError.errorBoundary = boundary.stateNode;
          capturedError.errorBoundaryName = getComponentName(boundary);
          capturedError.errorBoundaryFound = true;
          capturedError.willRetry = true;
        }

        try {
          logCapturedError(capturedError);
        } catch (e) {
          var suppressLogging = e && e.suppressReactErrorLogging;

          if (!suppressLogging) {
            console.error(e);
          }
        }
      }

      var ReactFiberCommitWork = function ReactFiberCommitWork(config, captureError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed, recalculateCurrentTime) {
        var getPublicInstance = config.getPublicInstance,
            mutation = config.mutation,
            persistence = config.persistence;

        var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
          startPhaseTimer(current, "componentWillUnmount");
          instance.props = current.memoizedProps;
          instance.state = current.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer();
        };

        function safelyCallComponentWillUnmount(current, instance) {
          {
            invokeGuardedCallback$3(null, callComponentWillUnmountWithTimer, null, current, instance);

            if (hasCaughtError$1()) {
              var unmountError = clearCaughtError$1();
              captureError(current, unmountError);
            }
          }
        }

        function safelyDetachRef(current) {
          var ref = current.ref;

          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback$3(null, ref, null, null);

                if (hasCaughtError$1()) {
                  var refError = clearCaughtError$1();
                  captureError(current, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }

        function commitBeforeMutationLifeCycles(current, finishedWork) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                if (finishedWork.effectTag & Snapshot) {
                  if (current !== null) {
                    var prevProps = current.memoizedProps;
                    var prevState = current.memoizedState;
                    startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                    var _instance = finishedWork.stateNode;
                    _instance.props = finishedWork.memoizedProps;
                    _instance.state = finishedWork.memoizedState;

                    var snapshot = _instance.getSnapshotBeforeUpdate(prevProps, prevState);

                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                      if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        warning(false, "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) " + "must be returned. You have returned undefined.", getComponentName(finishedWork));
                      }
                    }
                    _instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    stopPhaseTimer();
                  }
                }

                return;
              }

            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
              return;

            default:
              {
                invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
              }
          }
        }

        function commitLifeCycles(finishedRoot, current, finishedWork, currentTime, committedExpirationTime) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                var _instance2 = finishedWork.stateNode;

                if (finishedWork.effectTag & Update) {
                  if (current === null) {
                    startPhaseTimer(finishedWork, "componentDidMount");
                    _instance2.props = finishedWork.memoizedProps;
                    _instance2.state = finishedWork.memoizedState;

                    _instance2.componentDidMount();

                    stopPhaseTimer();
                  } else {
                    var prevProps = current.memoizedProps;
                    var prevState = current.memoizedState;
                    startPhaseTimer(finishedWork, "componentDidUpdate");
                    _instance2.props = finishedWork.memoizedProps;
                    _instance2.state = finishedWork.memoizedState;

                    _instance2.componentDidUpdate(prevProps, prevState, _instance2.__reactInternalSnapshotBeforeUpdate);

                    stopPhaseTimer();
                  }
                }

                var updateQueue = finishedWork.updateQueue;

                if (updateQueue !== null) {
                  commitCallbacks(updateQueue, _instance2);
                }

                return;
              }

            case HostRoot:
              {
                var _updateQueue = finishedWork.updateQueue;

                if (_updateQueue !== null) {
                  var _instance3 = null;

                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance3 = getPublicInstance(finishedWork.child.stateNode);
                        break;

                      case ClassComponent:
                        _instance3 = finishedWork.child.stateNode;
                        break;
                    }
                  }

                  commitCallbacks(_updateQueue, _instance3);
                }

                return;
              }

            case HostComponent:
              {
                var _instance4 = finishedWork.stateNode;

                if (current === null && finishedWork.effectTag & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance4, type, props, finishedWork);
                }

                return;
              }

            case HostText:
              {
                return;
              }

            case HostPortal:
              {
                return;
              }

            default:
              {
                invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
              }
          }
        }

        function commitErrorLogging(finishedWork, onUncaughtError) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                var ctor = finishedWork.type;
                var _instance5 = finishedWork.stateNode;
                var updateQueue = finishedWork.updateQueue;
                invariant(updateQueue !== null && updateQueue.capturedValues !== null, "An error logging effect should not have been scheduled if no errors " + "were captured. This error is likely caused by a bug in React. " + "Please file an issue.");
                var capturedErrors = updateQueue.capturedValues;
                updateQueue.capturedValues = null;

                if (typeof ctor.getDerivedStateFromCatch !== "function") {
                  markLegacyErrorBoundaryAsFailed(_instance5);
                }

                _instance5.props = finishedWork.memoizedProps;
                _instance5.state = finishedWork.memoizedState;

                for (var i = 0; i < capturedErrors.length; i++) {
                  var errorInfo = capturedErrors[i];
                  var _error = errorInfo.value;
                  var stack = errorInfo.stack;
                  logError(finishedWork, errorInfo);

                  _instance5.componentDidCatch(_error, {
                    componentStack: stack !== null ? stack : ""
                  });
                }
              }
              break;

            case HostRoot:
              {
                var _updateQueue2 = finishedWork.updateQueue;
                invariant(_updateQueue2 !== null && _updateQueue2.capturedValues !== null, "An error logging effect should not have been scheduled if no errors " + "were captured. This error is likely caused by a bug in React. " + "Please file an issue.");
                var _capturedErrors = _updateQueue2.capturedValues;
                _updateQueue2.capturedValues = null;

                for (var _i = 0; _i < _capturedErrors.length; _i++) {
                  var _errorInfo = _capturedErrors[_i];
                  logError(finishedWork, _errorInfo);
                  onUncaughtError(_errorInfo.value);
                }

                break;
              }

            default:
              invariant(false, "This unit of work tag cannot capture errors.  This error is " + "likely caused by a bug in React. Please file an issue.");
          }
        }

        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;

          if (ref !== null) {
            var _instance6 = finishedWork.stateNode;
            var instanceToUse = void 0;

            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(_instance6);
                break;

              default:
                instanceToUse = _instance6;
            }

            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  warning(false, "Unexpected ref object provided for %s. " + "Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork), getStackAddendumByWorkInProgressFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }

        function commitDetachRef(current) {
          var currentRef = current.ref;

          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }

        function commitUnmount(current) {
          if (typeof onCommitUnmount === "function") {
            onCommitUnmount(current);
          }

          switch (current.tag) {
            case ClassComponent:
              {
                safelyDetachRef(current);
                var _instance7 = current.stateNode;

                if (typeof _instance7.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current, _instance7);
                }

                return;
              }

            case HostComponent:
              {
                safelyDetachRef(current);
                return;
              }

            case CallComponent:
              {
                commitNestedUnmounts(current.stateNode);
                return;
              }

            case HostPortal:
              {
                if (enableMutatingReconciler && mutation) {
                  unmountHostComponents(current);
                } else if (enablePersistentReconciler && persistence) {
                  emptyPortalContainer(current);
                }

                return;
              }
          }
        }

        function commitNestedUnmounts(root) {
          var node = root;

          while (true) {
            commitUnmount(node);

            if (node.child !== null && (!mutation || node.tag !== HostPortal)) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === root) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === root) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function detachFiber(current) {
          current["return"] = null;
          current.child = null;

          if (current.alternate) {
            current.alternate.child = null;
            current.alternate["return"] = null;
          }
        }

        var emptyPortalContainer = void 0;

        if (!mutation) {
          var commitContainer = void 0;

          if (persistence) {
            var replaceContainerChildren = persistence.replaceContainerChildren,
                createContainerChildSet = persistence.createContainerChildSet;

            emptyPortalContainer = function emptyPortalContainer(current) {
              var portal = current.stateNode;
              var containerInfo = portal.containerInfo;
              var emptyChildSet = createContainerChildSet(containerInfo);
              replaceContainerChildren(containerInfo, emptyChildSet);
            };

            commitContainer = function commitContainer(finishedWork) {
              switch (finishedWork.tag) {
                case ClassComponent:
                  {
                    return;
                  }

                case HostComponent:
                  {
                    return;
                  }

                case HostText:
                  {
                    return;
                  }

                case HostRoot:
                case HostPortal:
                  {
                    var portalOrRoot = finishedWork.stateNode;
                    var containerInfo = portalOrRoot.containerInfo,
                        _pendingChildren = portalOrRoot.pendingChildren;
                    replaceContainerChildren(containerInfo, _pendingChildren);
                    return;
                  }

                default:
                  {
                    invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
                  }
              }
            };
          } else {
            commitContainer = function commitContainer(finishedWork) {};
          }

          if (enablePersistentReconciler || enableNoopReconciler) {
            return {
              commitResetTextContent: function commitResetTextContent(finishedWork) {},
              commitPlacement: function commitPlacement(finishedWork) {},
              commitDeletion: function commitDeletion(current) {
                commitNestedUnmounts(current);
                detachFiber(current);
              },
              commitWork: function commitWork(current, finishedWork) {
                commitContainer(finishedWork);
              },
              commitLifeCycles: commitLifeCycles,
              commitBeforeMutationLifeCycles: commitBeforeMutationLifeCycles,
              commitErrorLogging: commitErrorLogging,
              commitAttachRef: commitAttachRef,
              commitDetachRef: commitDetachRef
            };
          } else if (persistence) {
            invariant(false, "Persistent reconciler is disabled.");
          } else {
            invariant(false, "Noop reconciler is disabled.");
          }
        }

        var commitMount = mutation.commitMount,
            commitUpdate = mutation.commitUpdate,
            resetTextContent = mutation.resetTextContent,
            commitTextUpdate = mutation.commitTextUpdate,
            appendChild = mutation.appendChild,
            appendChildToContainer = mutation.appendChildToContainer,
            insertBefore = mutation.insertBefore,
            insertInContainerBefore = mutation.insertInContainerBefore,
            removeChild = mutation.removeChild,
            removeChildFromContainer = mutation.removeChildFromContainer;

        function getHostParentFiber(fiber) {
          var parent = fiber["return"];

          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }

            parent = parent["return"];
          }

          invariant(false, "Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
        }

        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }

        function getHostSibling(fiber) {
          var node = fiber;

          siblings: while (true) {
            while (node.sibling === null) {
              if (node["return"] === null || isHostParent(node["return"])) {
                return null;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;

            while (node.tag !== HostComponent && node.tag !== HostText) {
              if (node.effectTag & Placement) {
                continue siblings;
              }

              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child["return"] = node;
                node = node.child;
              }
            }

            if (!(node.effectTag & Placement)) {
              return node.stateNode;
            }
          }
        }

        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent = void 0;
          var isContainer = void 0;

          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentFiber.stateNode;
              isContainer = false;
              break;

            case HostRoot:
              parent = parentFiber.stateNode.containerInfo;
              isContainer = true;
              break;

            case HostPortal:
              parent = parentFiber.stateNode.containerInfo;
              isContainer = true;
              break;

            default:
              invariant(false, "Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
          }

          if (parentFiber.effectTag & ContentReset) {
            resetTextContent(parent);
            parentFiber.effectTag &= ~ContentReset;
          }

          var before = getHostSibling(finishedWork);
          var node = finishedWork;

          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              if (before) {
                if (isContainer) {
                  insertInContainerBefore(parent, node.stateNode, before);
                } else {
                  insertBefore(parent, node.stateNode, before);
                }
              } else {
                if (isContainer) {
                  appendChildToContainer(parent, node.stateNode);
                } else {
                  appendChild(parent, node.stateNode);
                }
              }
            } else if (node.tag === HostPortal) {} else if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }

            if (node === finishedWork) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === finishedWork) {
                return;
              }

              node = node["return"];
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function unmountHostComponents(current) {
          var node = current;
          var currentParentIsValid = false;
          var currentParent = void 0;
          var currentParentIsContainer = void 0;

          while (true) {
            if (!currentParentIsValid) {
              var parent = node["return"];

              findParent: while (true) {
                invariant(parent !== null, "Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue.");

                switch (parent.tag) {
                  case HostComponent:
                    currentParent = parent.stateNode;
                    currentParentIsContainer = false;
                    break findParent;

                  case HostRoot:
                    currentParent = parent.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;

                  case HostPortal:
                    currentParent = parent.stateNode.containerInfo;
                    currentParentIsContainer = true;
                    break findParent;
                }

                parent = parent["return"];
              }

              currentParentIsValid = true;
            }

            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(node);

              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              currentParent = node.stateNode.containerInfo;

              if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(node);

              if (node.child !== null) {
                node.child["return"] = node;
                node = node.child;
                continue;
              }
            }

            if (node === current) {
              return;
            }

            while (node.sibling === null) {
              if (node["return"] === null || node["return"] === current) {
                return;
              }

              node = node["return"];

              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }

            node.sibling["return"] = node["return"];
            node = node.sibling;
          }
        }

        function commitDeletion(current) {
          unmountHostComponents(current);
          detachFiber(current);
        }

        function commitWork(current, finishedWork) {
          switch (finishedWork.tag) {
            case ClassComponent:
              {
                return;
              }

            case HostComponent:
              {
                var _instance8 = finishedWork.stateNode;

                if (_instance8 != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current !== null ? current.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;

                  if (updatePayload !== null) {
                    commitUpdate(_instance8, updatePayload, type, oldProps, newProps, finishedWork);
                  }
                }

                return;
              }

            case HostText:
              {
                invariant(finishedWork.stateNode !== null, "This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current !== null ? current.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }

            case HostRoot:
              {
                return;
              }

            default:
              {
                invariant(false, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
              }
          }
        }

        function commitResetTextContent(current) {
          resetTextContent(current.stateNode);
        }

        if (enableMutatingReconciler) {
          return {
            commitBeforeMutationLifeCycles: commitBeforeMutationLifeCycles,
            commitResetTextContent: commitResetTextContent,
            commitPlacement: commitPlacement,
            commitDeletion: commitDeletion,
            commitWork: commitWork,
            commitLifeCycles: commitLifeCycles,
            commitErrorLogging: commitErrorLogging,
            commitAttachRef: commitAttachRef,
            commitDetachRef: commitDetachRef
          };
        } else {
          invariant(false, "Mutating reconciler is disabled.");
        }
      };

      var NO_CONTEXT = {};

      var ReactFiberHostContext = function ReactFiberHostContext(config, stack) {
        var getChildHostContext = config.getChildHostContext,
            getRootHostContext = config.getRootHostContext;
        var createCursor = stack.createCursor,
            push = stack.push,
            pop = stack.pop;
        var contextStackCursor = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);

        function requiredContext(c) {
          invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue.");
          return c;
        }

        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }

        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor, fiber);
          push(contextStackCursor, nextRootContext, fiber);
        }

        function popHostContainer(fiber) {
          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }

        function getHostContext() {
          var context = requiredContext(contextStackCursor.current);
          return context;
        }

        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor.current);
          var nextContext = getChildHostContext(context, fiber.type, rootInstance);

          if (context === nextContext) {
            return;
          }

          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor, nextContext, fiber);
        }

        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }

          pop(contextStackCursor, fiber);
          pop(contextFiberStackCursor, fiber);
        }

        return {
          getHostContext: getHostContext,
          getRootHostContainer: getRootHostContainer,
          popHostContainer: popHostContainer,
          popHostContext: popHostContext,
          pushHostContainer: pushHostContainer,
          pushHostContext: pushHostContext
        };
      };

      var ReactFiberHydrationContext = function ReactFiberHydrationContext(config) {
        var shouldSetTextContent = config.shouldSetTextContent,
            hydration = config.hydration;

        if (!hydration) {
          return {
            enterHydrationState: function enterHydrationState() {
              return false;
            },
            resetHydrationState: function resetHydrationState() {},
            tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
            prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
              invariant(false, "Expected prepareToHydrateHostInstance() to never be called. " + "This error is likely caused by a bug in React. Please file an issue.");
            },
            prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
              invariant(false, "Expected prepareToHydrateHostTextInstance() to never be called. " + "This error is likely caused by a bug in React. Please file an issue.");
            },
            popHydrationState: function popHydrationState(fiber) {
              return false;
            }
          };
        }

        var canHydrateInstance = hydration.canHydrateInstance,
            canHydrateTextInstance = hydration.canHydrateTextInstance,
            getNextHydratableSibling = hydration.getNextHydratableSibling,
            getFirstHydratableChild = hydration.getFirstHydratableChild,
            hydrateInstance = hydration.hydrateInstance,
            hydrateTextInstance = hydration.hydrateTextInstance,
            didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,
            didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,
            didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,
            didNotHydrateInstance = hydration.didNotHydrateInstance,
            didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,
            didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,
            didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,
            didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;

        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }

        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;

              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete["return"] = returnFiber;
          childToDelete.effectTag = Deletion;

          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }

        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.effectTag |= Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;

                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type, props);
                      break;

                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }

                  break;
                }

              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;

                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                      break;

                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                  }

                  break;
                }

              default:
                return;
            }
          }
        }

        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent:
              {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type, props);

                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }

                return false;
              }

            case HostText:
              {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);

                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }

                return false;
              }

            default:
              return false;
          }
        }

        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }

          var nextInstance = nextHydratableInstance;

          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }

          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(nextInstance);

            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }

            deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
          }

          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }

        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;

          if (updatePayload !== null) {
            return true;
          }

          return false;
        }

        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;

              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot:
                    {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }

                  case HostComponent:
                    {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                }
              }
            }
          }
          return shouldUpdate;
        }

        function popToNextHostParent(fiber) {
          var parent = fiber["return"];

          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
            parent = parent["return"];
          }

          hydrationParentFiber = parent;
        }

        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }

          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }

          var type = fiber.type;

          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;

            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }

          popToNextHostParent(fiber);
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          return true;
        }

        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }

        return {
          enterHydrationState: enterHydrationState,
          resetHydrationState: resetHydrationState,
          tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
          prepareToHydrateHostInstance: prepareToHydrateHostInstance,
          prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
          popHydrationState: popHydrationState
        };
      };

      var ReactFiberInstrumentation = {
        debugTool: null
      };
      var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
      var warnedAboutMissingGetChildContext = void 0;
      {
        warnedAboutMissingGetChildContext = {};
      }

      var ReactFiberLegacyContext = function ReactFiberLegacyContext(stack) {
        var createCursor = stack.createCursor,
            push = stack.push,
            pop = stack.pop;
        var contextStackCursor = createCursor(emptyObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyObject;

        function getUnmaskedContext(workInProgress) {
          var hasOwnContext = isContextProvider(workInProgress);

          if (hasOwnContext) {
            return previousContext;
          }

          return contextStackCursor.current;
        }

        function cacheContext(workInProgress, unmaskedContext, maskedContext) {
          var instance = workInProgress.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }

        function getMaskedContext(workInProgress, unmaskedContext) {
          var type = workInProgress.type;
          var contextTypes = type.contextTypes;

          if (!contextTypes) {
            return emptyObject;
          }

          var instance = workInProgress.stateNode;

          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }

          var context = {};

          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }

          {
            var name = getComponentName(workInProgress) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
          }

          if (instance) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return context;
        }

        function hasContextChanged() {
          return didPerformWorkStackCursor.current;
        }

        function isContextConsumer(fiber) {
          return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
        }

        function isContextProvider(fiber) {
          return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
        }

        function popContextProvider(fiber) {
          if (!isContextProvider(fiber)) {
            return;
          }

          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }

        function popTopLevelContextObject(fiber) {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }

        function pushTopLevelContextObject(fiber, context, didChange) {
          invariant(contextStackCursor.cursor == null, "Unexpected context found on stack. " + "This error is likely caused by a bug in React. Please file an issue.");
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }

        function processChildContext(fiber, parentContext) {
          var instance = fiber.stateNode;
          var childContextTypes = fiber.type.childContextTypes;

          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentName(fiber) || "Unknown";

              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                warning(false, "%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }

          var childContext = void 0;
          {
            ReactDebugCurrentFiber.setCurrentPhase("getChildContext");
          }
          startPhaseTimer(fiber, "getChildContext");
          childContext = instance.getChildContext();
          stopPhaseTimer();
          {
            ReactDebugCurrentFiber.setCurrentPhase(null);
          }

          for (var contextKey in childContext) {
            invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || "Unknown", contextKey);
          }

          {
            var name = getComponentName(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
          }
          return _extends({}, parentContext, childContext);
        }

        function pushContextProvider(workInProgress) {
          if (!isContextProvider(workInProgress)) {
            return false;
          }

          var instance = workInProgress.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
          return true;
        }

        function invalidateContextProvider(workInProgress, didChange) {
          var instance = workInProgress.stateNode;
          invariant(instance, "Expected to have an instance by this point. " + "This error is likely caused by a bug in React. Please file an issue.");

          if (didChange) {
            var mergedContext = processChildContext(workInProgress, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          }
        }

        function findCurrentUnmaskedContext(fiber) {
          invariant(isFiberMounted(fiber) && fiber.tag === ClassComponent, "Expected subtree parent to be a mounted class component. " + "This error is likely caused by a bug in React. Please file an issue.");
          var node = fiber;

          while (node.tag !== HostRoot) {
            if (isContextProvider(node)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            var parent = node["return"];
            invariant(parent, "Found unexpected detached subtree parent. " + "This error is likely caused by a bug in React. Please file an issue.");
            node = parent;
          }

          return node.stateNode.context;
        }

        return {
          getUnmaskedContext: getUnmaskedContext,
          cacheContext: cacheContext,
          getMaskedContext: getMaskedContext,
          hasContextChanged: hasContextChanged,
          isContextConsumer: isContextConsumer,
          isContextProvider: isContextProvider,
          popContextProvider: popContextProvider,
          popTopLevelContextObject: popTopLevelContextObject,
          pushTopLevelContextObject: pushTopLevelContextObject,
          processChildContext: processChildContext,
          pushContextProvider: pushContextProvider,
          invalidateContextProvider: invalidateContextProvider,
          findCurrentUnmaskedContext: findCurrentUnmaskedContext
        };
      };

      var ReactFiberNewContext = function ReactFiberNewContext(stack) {
        var createCursor = stack.createCursor,
            push = stack.push,
            pop = stack.pop;
        var providerCursor = createCursor(null);
        var valueCursor = createCursor(null);
        var changedBitsCursor = createCursor(0);
        var rendererSigil = void 0;
        {
          rendererSigil = {};
        }

        function pushProvider(providerFiber) {
          var context = providerFiber.type._context;
          push(changedBitsCursor, context._changedBits, providerFiber);
          push(valueCursor, context._currentValue, providerFiber);
          push(providerCursor, providerFiber, providerFiber);
          context._currentValue = providerFiber.pendingProps.value;
          context._changedBits = providerFiber.stateNode;
          {
            !(context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warning(false, "Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.") : void 0;
            context._currentRenderer = rendererSigil;
          }
        }

        function popProvider(providerFiber) {
          var changedBits = changedBitsCursor.current;
          var currentValue = valueCursor.current;
          pop(providerCursor, providerFiber);
          pop(valueCursor, providerFiber);
          pop(changedBitsCursor, providerFiber);
          var context = providerFiber.type._context;
          context._currentValue = currentValue;
          context._changedBits = changedBits;
        }

        return {
          pushProvider: pushProvider,
          popProvider: popProvider
        };
      };

      var ReactFiberStack = function ReactFiberStack() {
        var valueStack = [];
        var fiberStack = void 0;
        {
          fiberStack = [];
        }
        var index = -1;

        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }

        function isEmpty() {
          return index === -1;
        }

        function pop(cursor, fiber) {
          if (index < 0) {
            {
              warning(false, "Unexpected pop.");
            }
            return;
          }

          {
            if (fiber !== fiberStack[index]) {
              warning(false, "Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }

        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }

        function checkThatStackIsEmpty() {
          {
            if (index !== -1) {
              warning(false, "Expected an empty stack. Something was not reset properly.");
            }
          }
        }

        function resetStackAfterFatalErrorInDev() {
          {
            index = -1;
            valueStack.length = 0;
            fiberStack.length = 0;
          }
        }

        return {
          createCursor: createCursor,
          isEmpty: isEmpty,
          pop: pop,
          push: push,
          checkThatStackIsEmpty: checkThatStackIsEmpty,
          resetStackAfterFatalErrorInDev: resetStackAfterFatalErrorInDev
        };
      };

      var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
      var hasCaughtError = ReactErrorUtils.hasCaughtError;
      var clearCaughtError = ReactErrorUtils.clearCaughtError;
      var didWarnAboutStateTransition = void 0;
      var didWarnSetStateChildContext = void 0;
      var warnAboutUpdateOnUnmounted = void 0;
      var warnAboutInvalidUpdates = void 0;
      {
        didWarnAboutStateTransition = false;
        didWarnSetStateChildContext = false;
        var didWarnStateUpdateForUnmountedComponent = {};

        warnAboutUpdateOnUnmounted = function warnAboutUpdateOnUnmounted(fiber) {
          var componentName = getComponentName(fiber) || "ReactClass";

          if (didWarnStateUpdateForUnmountedComponent[componentName]) {
            return;
          }

          warning(false, "Can't call setState (or forceUpdate) on an unmounted component. This " + "is a no-op, but it indicates a memory leak in your application. To " + "fix, cancel all subscriptions and asynchronous tasks in the " + "componentWillUnmount method.%s", getStackAddendumByWorkInProgressFiber(fiber));
          didWarnStateUpdateForUnmountedComponent[componentName] = true;
        };

        warnAboutInvalidUpdates = function warnAboutInvalidUpdates(instance) {
          switch (ReactDebugCurrentFiber.phase) {
            case "getChildContext":
              if (didWarnSetStateChildContext) {
                return;
              }

              warning(false, "setState(...): Cannot call setState() inside getChildContext()");
              didWarnSetStateChildContext = true;
              break;

            case "render":
              if (didWarnAboutStateTransition) {
                return;
              }

              warning(false, "Cannot update during an existing state transition (such as within " + "`render` or another component's constructor). Render methods should " + "be a pure function of props and state; constructor side-effects are " + "an anti-pattern, but can be moved to `componentWillMount`.");
              didWarnAboutStateTransition = true;
              break;
          }
        };
      }

      var ReactFiberScheduler = function ReactFiberScheduler(config) {
        var stack = ReactFiberStack();
        var hostContext = ReactFiberHostContext(config, stack);
        var legacyContext = ReactFiberLegacyContext(stack);
        var newContext = ReactFiberNewContext(stack);
        var popHostContext = hostContext.popHostContext,
            popHostContainer = hostContext.popHostContainer;
        var popTopLevelLegacyContextObject = legacyContext.popTopLevelContextObject,
            popLegacyContextProvider = legacyContext.popContextProvider;
        var popProvider = newContext.popProvider;
        var hydrationContext = ReactFiberHydrationContext(config);

        var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, legacyContext, newContext, hydrationContext, scheduleWork, computeExpirationForFiber),
            beginWork = _ReactFiberBeginWork.beginWork;

        var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, legacyContext, newContext, hydrationContext),
            completeWork = _ReactFiberCompleteWo.completeWork;

        var _ReactFiberUnwindWork = ReactFiberUnwindWork(hostContext, legacyContext, newContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary),
            throwException = _ReactFiberUnwindWork.throwException,
            unwindWork = _ReactFiberUnwindWork.unwindWork,
            unwindInterruptedWork = _ReactFiberUnwindWork.unwindInterruptedWork;

        var _ReactFiberCommitWork = ReactFiberCommitWork(config, onCommitPhaseError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed, recalculateCurrentTime),
            commitBeforeMutationLifeCycles = _ReactFiberCommitWork.commitBeforeMutationLifeCycles,
            commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,
            commitPlacement = _ReactFiberCommitWork.commitPlacement,
            commitDeletion = _ReactFiberCommitWork.commitDeletion,
            commitWork = _ReactFiberCommitWork.commitWork,
            commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
            commitErrorLogging = _ReactFiberCommitWork.commitErrorLogging,
            commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
            commitDetachRef = _ReactFiberCommitWork.commitDetachRef;

        var now = config.now,
            scheduleDeferredCallback = config.scheduleDeferredCallback,
            cancelDeferredCallback = config.cancelDeferredCallback,
            prepareForCommit = config.prepareForCommit,
            resetAfterCommit = config.resetAfterCommit;
        var originalStartTimeMs = now();
        var mostRecentCurrentTime = msToExpirationTime(0);
        var mostRecentCurrentTimeMs = originalStartTimeMs;
        var lastUniqueAsyncExpiration = 0;
        var expirationContext = NoWork;
        var isWorking = false;
        var nextUnitOfWork = null;
        var nextRoot = null;
        var nextRenderExpirationTime = NoWork;
        var nextEffect = null;
        var isCommitting = false;
        var isRootReadyForCommit = false;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var interruptedBy = null;
        var stashedWorkInProgressProperties = void 0;
        var replayUnitOfWork = void 0;
        var isReplayingFailedUnitOfWork = void 0;
        var originalReplayError = void 0;
        var rethrowOriginalError = void 0;

        if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
          stashedWorkInProgressProperties = null;
          isReplayingFailedUnitOfWork = false;
          originalReplayError = null;

          replayUnitOfWork = function replayUnitOfWork(failedUnitOfWork, error, isAsync) {
            assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

            switch (failedUnitOfWork.tag) {
              case HostRoot:
                popHostContainer(failedUnitOfWork);
                popTopLevelLegacyContextObject(failedUnitOfWork);
                break;

              case HostComponent:
                popHostContext(failedUnitOfWork);
                break;

              case ClassComponent:
                popLegacyContextProvider(failedUnitOfWork);
                break;

              case HostPortal:
                popHostContainer(failedUnitOfWork);
                break;

              case ContextProvider:
                popProvider(failedUnitOfWork);
                break;
            }

            isReplayingFailedUnitOfWork = true;
            originalReplayError = error;
            invokeGuardedCallback$2(null, workLoop, null, isAsync);
            isReplayingFailedUnitOfWork = false;
            originalReplayError = null;

            if (hasCaughtError()) {
              clearCaughtError();
            } else {
              nextUnitOfWork = failedUnitOfWork;
            }
          };

          rethrowOriginalError = function rethrowOriginalError() {
            throw originalReplayError;
          };
        }

        function resetStack() {
          if (nextUnitOfWork !== null) {
            var interruptedWork = nextUnitOfWork["return"];

            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork["return"];
            }
          }

          {
            ReactStrictModeWarnings.discardPendingWarnings();
            stack.checkThatStackIsEmpty();
          }
          nextRoot = null;
          nextRenderExpirationTime = NoWork;
          nextUnitOfWork = null;
          isRootReadyForCommit = false;
        }

        function commitAllHostEffects() {
          while (nextEffect !== null) {
            {
              ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
            }
            recordEffect();
            var effectTag = nextEffect.effectTag;

            if (effectTag & ContentReset) {
              commitResetTextContent(nextEffect);
            }

            if (effectTag & Ref) {
              var current = nextEffect.alternate;

              if (current !== null) {
                commitDetachRef(current);
              }
            }

            var primaryEffectTag = effectTag & (Placement | Update | Deletion);

            switch (primaryEffectTag) {
              case Placement:
                {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  break;
                }

              case PlacementAndUpdate:
                {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }

              case Update:
                {
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }

              case Deletion:
                {
                  commitDeletion(nextEffect);
                  break;
                }
            }

            nextEffect = nextEffect.nextEffect;
          }

          {
            ReactDebugCurrentFiber.resetCurrentFiber();
          }
        }

        function commitBeforeMutationLifecycles() {
          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & Snapshot) {
              recordEffect();
              var current = nextEffect.alternate;
              commitBeforeMutationLifeCycles(current, nextEffect);
            }

            nextEffect = nextEffect.nextEffect;
          }
        }

        function commitAllLifeCycles(finishedRoot, currentTime, committedExpirationTime) {
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();

            if (warnAboutDeprecatedLifecycles) {
              ReactStrictModeWarnings.flushPendingDeprecationWarnings();
            }
          }

          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;

            if (effectTag & (Update | Callback)) {
              recordEffect();
              var current = nextEffect.alternate;
              commitLifeCycles(finishedRoot, current, nextEffect, currentTime, committedExpirationTime);
            }

            if (effectTag & ErrLog) {
              commitErrorLogging(nextEffect, onUncaughtError);
            }

            if (effectTag & Ref) {
              recordEffect();
              commitAttachRef(nextEffect);
            }

            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = next;
          }
        }

        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }

        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }

        function commitRoot(finishedWork) {
          isWorking = true;
          isCommitting = true;
          startCommitTimer();
          var root = finishedWork.stateNode;
          invariant(root.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug " + "related to the return field. This error is likely caused by a bug " + "in React. Please file an issue.");
          var committedExpirationTime = root.pendingCommitExpirationTime;
          invariant(committedExpirationTime !== NoWork, "Cannot commit an incomplete root. This error is likely caused by a " + "bug in React. Please file an issue.");
          root.pendingCommitExpirationTime = NoWork;
          var currentTime = recalculateCurrentTime();
          ReactCurrentOwner.current = null;
          var firstEffect = void 0;

          if (finishedWork.effectTag > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }

          prepareForCommit(root.containerInfo);
          nextEffect = firstEffect;
          startCommitSnapshotEffectsTimer();

          while (nextEffect !== null) {
            var didError = false;
            var error = void 0;
            {
              invokeGuardedCallback$2(null, commitBeforeMutationLifecycles, null);

              if (hasCaughtError()) {
                didError = true;
                error = clearCaughtError();
              }
            }

            if (didError) {
              invariant(nextEffect !== null, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue.");
              onCommitPhaseError(nextEffect, error);

              if (nextEffect !== null) {
                nextEffect = nextEffect.nextEffect;
              }
            }
          }

          stopCommitSnapshotEffectsTimer();
          nextEffect = firstEffect;
          startCommitHostEffectsTimer();

          while (nextEffect !== null) {
            var _didError = false;

            var _error = void 0;

            {
              invokeGuardedCallback$2(null, commitAllHostEffects, null);

              if (hasCaughtError()) {
                _didError = true;
                _error = clearCaughtError();
              }
            }

            if (_didError) {
              invariant(nextEffect !== null, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue.");
              onCommitPhaseError(nextEffect, _error);

              if (nextEffect !== null) {
                nextEffect = nextEffect.nextEffect;
              }
            }
          }

          stopCommitHostEffectsTimer();
          resetAfterCommit(root.containerInfo);
          root.current = finishedWork;
          nextEffect = firstEffect;
          startCommitLifeCyclesTimer();

          while (nextEffect !== null) {
            var _didError2 = false;

            var _error2 = void 0;

            {
              invokeGuardedCallback$2(null, commitAllLifeCycles, null, root, currentTime, committedExpirationTime);

              if (hasCaughtError()) {
                _didError2 = true;
                _error2 = clearCaughtError();
              }
            }

            if (_didError2) {
              invariant(nextEffect !== null, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue.");
              onCommitPhaseError(nextEffect, _error2);

              if (nextEffect !== null) {
                nextEffect = nextEffect.nextEffect;
              }
            }
          }

          isCommitting = false;
          isWorking = false;
          stopCommitLifeCyclesTimer();
          stopCommitTimer();

          if (typeof onCommitRoot === "function") {
            onCommitRoot(finishedWork.stateNode);
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
          }

          var remainingTime = root.current.expirationTime;

          if (remainingTime === NoWork) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }

          return remainingTime;
        }

        function resetExpirationTime(workInProgress, renderTime) {
          if (renderTime !== Never && workInProgress.expirationTime === Never) {
            return;
          }

          var newExpirationTime = getUpdateExpirationTime(workInProgress);
          var child = workInProgress.child;

          while (child !== null) {
            if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
              newExpirationTime = child.expirationTime;
            }

            child = child.sibling;
          }

          workInProgress.expirationTime = newExpirationTime;
        }

        function completeUnitOfWork(workInProgress) {
          while (true) {
            var current = workInProgress.alternate;
            {
              ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
            }
            var returnFiber = workInProgress["return"];
            var siblingFiber = workInProgress.sibling;

            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
              var next = completeWork(current, workInProgress, nextRenderExpirationTime);
              stopWorkTimer(workInProgress);
              resetExpirationTime(workInProgress, nextRenderExpirationTime);
              {
                ReactDebugCurrentFiber.resetCurrentFiber();
              }

              if (next !== null) {
                stopWorkTimer(workInProgress);

                if (true && ReactFiberInstrumentation_1.debugTool) {
                  ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                }

                return next;
              }

              if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = workInProgress.firstEffect;
                }

                if (workInProgress.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                  }

                  returnFiber.lastEffect = workInProgress.lastEffect;
                }

                var effectTag = workInProgress.effectTag;

                if (effectTag > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress;
                  } else {
                    returnFiber.firstEffect = workInProgress;
                  }

                  returnFiber.lastEffect = workInProgress;
                }
              }

              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
              }

              if (siblingFiber !== null) {
                return siblingFiber;
              } else if (returnFiber !== null) {
                workInProgress = returnFiber;
                continue;
              } else {
                isRootReadyForCommit = true;
                return null;
              }
            } else {
              var _next = unwindWork(workInProgress);

              if (workInProgress.effectTag & DidCapture) {
                stopFailedWorkTimer(workInProgress);
              } else {
                stopWorkTimer(workInProgress);
              }

              {
                ReactDebugCurrentFiber.resetCurrentFiber();
              }

              if (_next !== null) {
                stopWorkTimer(workInProgress);

                if (true && ReactFiberInstrumentation_1.debugTool) {
                  ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
                }

                _next.effectTag &= HostEffectMask;
                return _next;
              }

              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.effectTag |= Incomplete;
              }

              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
              }

              if (siblingFiber !== null) {
                return siblingFiber;
              } else if (returnFiber !== null) {
                workInProgress = returnFiber;
                continue;
              } else {
                return null;
              }
            }
          }

          return null;
        }

        function performUnitOfWork(workInProgress) {
          var current = workInProgress.alternate;
          startWorkTimer(workInProgress);
          {
            ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
          }

          if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
          }

          var next = beginWork(current, workInProgress, nextRenderExpirationTime);
          {
            ReactDebugCurrentFiber.resetCurrentFiber();

            if (isReplayingFailedUnitOfWork) {
              rethrowOriginalError();
            }
          }

          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
          }

          if (next === null) {
            next = completeUnitOfWork(workInProgress);
          }

          ReactCurrentOwner.current = null;
          return next;
        }

        function workLoop(isAsync) {
          if (!isAsync) {
            while (nextUnitOfWork !== null) {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          } else {
            while (nextUnitOfWork !== null && !shouldYield()) {
              nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
          }
        }

        function renderRoot(root, expirationTime, isAsync) {
          invariant(!isWorking, "renderRoot was called recursively. This error is likely caused " + "by a bug in React. Please file an issue.");
          isWorking = true;

          if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
            resetStack();
            nextRoot = root;
            nextRenderExpirationTime = expirationTime;
            nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
            root.pendingCommitExpirationTime = NoWork;
          }

          var didFatal = false;
          startWorkLoopTimer(nextUnitOfWork);

          do {
            try {
              workLoop(isAsync);
            } catch (thrownValue) {
              if (nextUnitOfWork === null) {
                didFatal = true;
                onUncaughtError(thrownValue);
                break;
              }

              if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
                var failedUnitOfWork = nextUnitOfWork;
                replayUnitOfWork(failedUnitOfWork, thrownValue, isAsync);
              }

              var sourceFiber = nextUnitOfWork;
              var returnFiber = sourceFiber["return"];

              if (returnFiber === null) {
                didFatal = true;
                onUncaughtError(thrownValue);
                break;
              }

              throwException(returnFiber, sourceFiber, thrownValue);
              nextUnitOfWork = completeUnitOfWork(sourceFiber);
            }

            break;
          } while (true);

          var didCompleteRoot = false;
          isWorking = false;

          if (didFatal) {
            stopWorkLoopTimer(interruptedBy, didCompleteRoot);
            interruptedBy = null;
            {
              stack.resetStackAfterFatalErrorInDev();
            }
            return null;
          } else if (nextUnitOfWork === null) {
            if (isRootReadyForCommit) {
              didCompleteRoot = true;
              stopWorkLoopTimer(interruptedBy, didCompleteRoot);
              interruptedBy = null;
              root.pendingCommitExpirationTime = expirationTime;
              var finishedWork = root.current.alternate;
              return finishedWork;
            } else {
              stopWorkLoopTimer(interruptedBy, didCompleteRoot);
              interruptedBy = null;
              invariant(false, "Expired work should have completed. This error is likely caused " + "by a bug in React. Please file an issue.");
            }
          } else {
            stopWorkLoopTimer(interruptedBy, didCompleteRoot);
            interruptedBy = null;
            return null;
          }
        }

        function scheduleCapture(sourceFiber, boundaryFiber, value, expirationTime) {
          var capturedValue = createCapturedValue(value, sourceFiber);
          var update = {
            expirationTime: expirationTime,
            partialState: null,
            callback: null,
            isReplace: false,
            isForced: false,
            capturedValue: capturedValue,
            next: null
          };
          insertUpdateIntoFiber(boundaryFiber, update);
          scheduleWork(boundaryFiber, expirationTime);
        }

        function dispatch(sourceFiber, value, expirationTime) {
          invariant(!isWorking || isCommitting, "dispatch: Cannot dispatch during the render phase.");
          var fiber = sourceFiber["return"];

          while (fiber !== null) {
            switch (fiber.tag) {
              case ClassComponent:
                var ctor = fiber.type;
                var instance = fiber.stateNode;

                if (typeof ctor.getDerivedStateFromCatch === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  scheduleCapture(sourceFiber, fiber, value, expirationTime);
                  return;
                }

                break;

              case HostRoot:
                scheduleCapture(sourceFiber, fiber, value, expirationTime);
                return;
            }

            fiber = fiber["return"];
          }

          if (sourceFiber.tag === HostRoot) {
            scheduleCapture(sourceFiber, sourceFiber, value, expirationTime);
          }
        }

        function onCommitPhaseError(fiber, error) {
          return dispatch(fiber, error, Sync);
        }

        function computeAsyncExpiration(currentTime) {
          var expirationMs = 5000;
          var bucketSizeMs = 250;
          return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
        }

        function computeInteractiveExpiration(currentTime) {
          var expirationMs = 500;
          var bucketSizeMs = 100;
          return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
        }

        function computeUniqueAsyncExpiration() {
          var currentTime = recalculateCurrentTime();
          var result = computeAsyncExpiration(currentTime);

          if (result <= lastUniqueAsyncExpiration) {
            result = lastUniqueAsyncExpiration + 1;
          }

          lastUniqueAsyncExpiration = result;
          return lastUniqueAsyncExpiration;
        }

        function computeExpirationForFiber(fiber) {
          var expirationTime = void 0;

          if (expirationContext !== NoWork) {
            expirationTime = expirationContext;
          } else if (isWorking) {
            if (isCommitting) {
              expirationTime = Sync;
            } else {
              expirationTime = nextRenderExpirationTime;
            }
          } else {
            if (fiber.mode & AsyncMode) {
              if (isBatchingInteractiveUpdates) {
                var currentTime = recalculateCurrentTime();
                expirationTime = computeInteractiveExpiration(currentTime);
              } else {
                var _currentTime = recalculateCurrentTime();

                expirationTime = computeAsyncExpiration(_currentTime);
              }
            } else {
              expirationTime = Sync;
            }
          }

          if (isBatchingInteractiveUpdates) {
            if (lowestPendingInteractiveExpirationTime === NoWork || expirationTime > lowestPendingInteractiveExpirationTime) {
              lowestPendingInteractiveExpirationTime = expirationTime;
            }
          }

          return expirationTime;
        }

        function scheduleWork(fiber, expirationTime) {
          return scheduleWorkImpl(fiber, expirationTime, false);
        }

        function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
          recordScheduleUpdate();
          {
            if (!isErrorRecovery && fiber.tag === ClassComponent) {
              var instance = fiber.stateNode;
              warnAboutInvalidUpdates(instance);
            }
          }
          var node = fiber;

          while (node !== null) {
            if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
              node.expirationTime = expirationTime;
            }

            if (node.alternate !== null) {
              if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
                node.alternate.expirationTime = expirationTime;
              }
            }

            if (node["return"] === null) {
              if (node.tag === HostRoot) {
                var root = node.stateNode;

                if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime < nextRenderExpirationTime) {
                  interruptedBy = fiber;
                  resetStack();
                }

                if (!isWorking || isCommitting || nextRoot !== root) {
                  requestWork(root, expirationTime);
                }

                if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                  invariant(false, "Maximum update depth exceeded. This can happen when a " + "component repeatedly calls setState inside " + "componentWillUpdate or componentDidUpdate. React limits " + "the number of nested updates to prevent infinite loops.");
                }
              } else {
                {
                  if (!isErrorRecovery && fiber.tag === ClassComponent) {
                    warnAboutUpdateOnUnmounted(fiber);
                  }
                }
                return;
              }
            }

            node = node["return"];
          }
        }

        function recalculateCurrentTime() {
          mostRecentCurrentTimeMs = now() - originalStartTimeMs;
          mostRecentCurrentTime = msToExpirationTime(mostRecentCurrentTimeMs);
          return mostRecentCurrentTime;
        }

        function deferredUpdates(fn) {
          var previousExpirationContext = expirationContext;
          var currentTime = recalculateCurrentTime();
          expirationContext = computeAsyncExpiration(currentTime);

          try {
            return fn();
          } finally {
            expirationContext = previousExpirationContext;
          }
        }

        function syncUpdates(fn, a, b, c, d) {
          var previousExpirationContext = expirationContext;
          expirationContext = Sync;

          try {
            return fn(a, b, c, d);
          } finally {
            expirationContext = previousExpirationContext;
          }
        }

        var firstScheduledRoot = null;
        var lastScheduledRoot = null;
        var callbackExpirationTime = NoWork;
        var callbackID = -1;
        var isRendering = false;
        var nextFlushedRoot = null;
        var nextFlushedExpirationTime = NoWork;
        var lowestPendingInteractiveExpirationTime = NoWork;
        var deadlineDidExpire = false;
        var hasUnhandledError = false;
        var unhandledError = null;
        var deadline = null;
        var isBatchingUpdates = false;
        var isUnbatchingUpdates = false;
        var isBatchingInteractiveUpdates = false;
        var completedBatches = null;
        var NESTED_UPDATE_LIMIT = 1000;
        var nestedUpdateCount = 0;
        var timeHeuristicForUnitOfWork = 1;

        function scheduleCallbackWithExpiration(expirationTime) {
          if (callbackExpirationTime !== NoWork) {
            if (expirationTime > callbackExpirationTime) {
              return;
            } else {
              cancelDeferredCallback(callbackID);
            }
          } else {
            startRequestCallbackTimer();
          }

          var currentMs = now() - originalStartTimeMs;
          var expirationMs = expirationTimeToMs(expirationTime);
          var timeout = expirationMs - currentMs;
          callbackExpirationTime = expirationTime;
          callbackID = scheduleDeferredCallback(performAsyncWork, {
            timeout: timeout
          });
        }

        function requestWork(root, expirationTime) {
          addRootToSchedule(root, expirationTime);

          if (isRendering) {
            return;
          }

          if (isBatchingUpdates) {
            if (isUnbatchingUpdates) {
              nextFlushedRoot = root;
              nextFlushedExpirationTime = Sync;
              performWorkOnRoot(root, Sync, false);
            }

            return;
          }

          if (expirationTime === Sync) {
            performSyncWork();
          } else {
            scheduleCallbackWithExpiration(expirationTime);
          }
        }

        function addRootToSchedule(root, expirationTime) {
          if (root.nextScheduledRoot === null) {
            root.remainingExpirationTime = expirationTime;

            if (lastScheduledRoot === null) {
              firstScheduledRoot = lastScheduledRoot = root;
              root.nextScheduledRoot = root;
            } else {
              lastScheduledRoot.nextScheduledRoot = root;
              lastScheduledRoot = root;
              lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            }
          } else {
            var remainingExpirationTime = root.remainingExpirationTime;

            if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
              root.remainingExpirationTime = expirationTime;
            }
          }
        }

        function findHighestPriorityRoot() {
          var highestPriorityWork = NoWork;
          var highestPriorityRoot = null;

          if (lastScheduledRoot !== null) {
            var previousScheduledRoot = lastScheduledRoot;
            var root = firstScheduledRoot;

            while (root !== null) {
              var remainingExpirationTime = root.remainingExpirationTime;

              if (remainingExpirationTime === NoWork) {
                invariant(previousScheduledRoot !== null && lastScheduledRoot !== null, "Should have a previous and last root. This error is likely " + "caused by a bug in React. Please file an issue.");

                if (root === root.nextScheduledRoot) {
                  root.nextScheduledRoot = null;
                  firstScheduledRoot = lastScheduledRoot = null;
                  break;
                } else if (root === firstScheduledRoot) {
                  var next = root.nextScheduledRoot;
                  firstScheduledRoot = next;
                  lastScheduledRoot.nextScheduledRoot = next;
                  root.nextScheduledRoot = null;
                } else if (root === lastScheduledRoot) {
                  lastScheduledRoot = previousScheduledRoot;
                  lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
                  root.nextScheduledRoot = null;
                  break;
                } else {
                  previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
                  root.nextScheduledRoot = null;
                }

                root = previousScheduledRoot.nextScheduledRoot;
              } else {
                if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
                  highestPriorityWork = remainingExpirationTime;
                  highestPriorityRoot = root;
                }

                if (root === lastScheduledRoot) {
                  break;
                }

                previousScheduledRoot = root;
                root = root.nextScheduledRoot;
              }
            }
          }

          var previousFlushedRoot = nextFlushedRoot;

          if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot && highestPriorityWork === Sync) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
          }

          nextFlushedRoot = highestPriorityRoot;
          nextFlushedExpirationTime = highestPriorityWork;
        }

        function performAsyncWork(dl) {
          performWork(NoWork, true, dl);
        }

        function performSyncWork() {
          performWork(Sync, false, null);
        }

        function performWork(minExpirationTime, isAsync, dl) {
          deadline = dl;
          findHighestPriorityRoot();

          if (enableUserTimingAPI && deadline !== null) {
            var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
            var timeout = expirationTimeToMs(nextFlushedExpirationTime);
            stopRequestCallbackTimer(didExpire, timeout);
          }

          if (isAsync) {
            while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || recalculateCurrentTime() >= nextFlushedExpirationTime)) {
              performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !deadlineDidExpire);
              findHighestPriorityRoot();
            }
          } else {
            while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime)) {
              performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
              findHighestPriorityRoot();
            }
          }

          if (deadline !== null) {
            callbackExpirationTime = NoWork;
            callbackID = -1;
          }

          if (nextFlushedExpirationTime !== NoWork) {
            scheduleCallbackWithExpiration(nextFlushedExpirationTime);
          }

          deadline = null;
          deadlineDidExpire = false;
          finishRendering();
        }

        function flushRoot(root, expirationTime) {
          invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely " + "means you attempted to commit from inside a lifecycle method.");
          nextFlushedRoot = root;
          nextFlushedExpirationTime = expirationTime;
          performWorkOnRoot(root, expirationTime, false);
          performSyncWork();
          finishRendering();
        }

        function finishRendering() {
          nestedUpdateCount = 0;

          if (completedBatches !== null) {
            var batches = completedBatches;
            completedBatches = null;

            for (var i = 0; i < batches.length; i++) {
              var batch = batches[i];

              try {
                batch._onComplete();
              } catch (error) {
                if (!hasUnhandledError) {
                  hasUnhandledError = true;
                  unhandledError = error;
                }
              }
            }
          }

          if (hasUnhandledError) {
            var error = unhandledError;
            unhandledError = null;
            hasUnhandledError = false;
            throw error;
          }
        }

        function performWorkOnRoot(root, expirationTime, isAsync) {
          invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused " + "by a bug in React. Please file an issue.");
          isRendering = true;

          if (!isAsync) {
            var finishedWork = root.finishedWork;

            if (finishedWork !== null) {
              completeRoot(root, finishedWork, expirationTime);
            } else {
              root.finishedWork = null;
              finishedWork = renderRoot(root, expirationTime, false);

              if (finishedWork !== null) {
                completeRoot(root, finishedWork, expirationTime);
              }
            }
          } else {
            var _finishedWork = root.finishedWork;

            if (_finishedWork !== null) {
              completeRoot(root, _finishedWork, expirationTime);
            } else {
              root.finishedWork = null;
              _finishedWork = renderRoot(root, expirationTime, true);

              if (_finishedWork !== null) {
                if (!shouldYield()) {
                  completeRoot(root, _finishedWork, expirationTime);
                } else {
                  root.finishedWork = _finishedWork;
                }
              }
            }
          }

          isRendering = false;
        }

        function completeRoot(root, finishedWork, expirationTime) {
          var firstBatch = root.firstBatch;

          if (firstBatch !== null && firstBatch._expirationTime <= expirationTime) {
            if (completedBatches === null) {
              completedBatches = [firstBatch];
            } else {
              completedBatches.push(firstBatch);
            }

            if (firstBatch._defer) {
              root.finishedWork = finishedWork;
              root.remainingExpirationTime = NoWork;
              return;
            }
          }

          root.finishedWork = null;
          root.remainingExpirationTime = commitRoot(finishedWork);
        }

        function shouldYield() {
          if (deadline === null) {
            return false;
          }

          if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
            return false;
          }

          deadlineDidExpire = true;
          return true;
        }

        function onUncaughtError(error) {
          invariant(nextFlushedRoot !== null, "Should be working on a root. This error is likely caused by a bug in " + "React. Please file an issue.");
          nextFlushedRoot.remainingExpirationTime = NoWork;

          if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
          }
        }

        function batchedUpdates(fn, a) {
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            return fn(a);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;

            if (!isBatchingUpdates && !isRendering) {
              performSyncWork();
            }
          }
        }

        function unbatchedUpdates(fn, a) {
          if (isBatchingUpdates && !isUnbatchingUpdates) {
            isUnbatchingUpdates = true;

            try {
              return fn(a);
            } finally {
              isUnbatchingUpdates = false;
            }
          }

          return fn(a);
        }

        function flushSync(fn, a) {
          invariant(!isRendering, "flushSync was called from inside a lifecycle method. It cannot be " + "called when React is already rendering.");
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            return syncUpdates(fn, a);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;
            performSyncWork();
          }
        }

        function interactiveUpdates(fn, a, b) {
          if (isBatchingInteractiveUpdates) {
            return fn(a, b);
          }

          if (!isBatchingUpdates && !isRendering && lowestPendingInteractiveExpirationTime !== NoWork) {
            performWork(lowestPendingInteractiveExpirationTime, false, null);
            lowestPendingInteractiveExpirationTime = NoWork;
          }

          var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingInteractiveUpdates = true;
          isBatchingUpdates = true;

          try {
            return fn(a, b);
          } finally {
            isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
            isBatchingUpdates = previousIsBatchingUpdates;

            if (!isBatchingUpdates && !isRendering) {
              performSyncWork();
            }
          }
        }

        function flushInteractiveUpdates() {
          if (!isRendering && lowestPendingInteractiveExpirationTime !== NoWork) {
            performWork(lowestPendingInteractiveExpirationTime, false, null);
            lowestPendingInteractiveExpirationTime = NoWork;
          }
        }

        function flushControlled(fn) {
          var previousIsBatchingUpdates = isBatchingUpdates;
          isBatchingUpdates = true;

          try {
            syncUpdates(fn);
          } finally {
            isBatchingUpdates = previousIsBatchingUpdates;

            if (!isBatchingUpdates && !isRendering) {
              performWork(Sync, false, null);
            }
          }
        }

        return {
          recalculateCurrentTime: recalculateCurrentTime,
          computeExpirationForFiber: computeExpirationForFiber,
          scheduleWork: scheduleWork,
          requestWork: requestWork,
          flushRoot: flushRoot,
          batchedUpdates: batchedUpdates,
          unbatchedUpdates: unbatchedUpdates,
          flushSync: flushSync,
          flushControlled: flushControlled,
          deferredUpdates: deferredUpdates,
          syncUpdates: syncUpdates,
          interactiveUpdates: interactiveUpdates,
          flushInteractiveUpdates: flushInteractiveUpdates,
          computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,
          legacyContext: legacyContext
        };
      };

      var didWarnAboutNestedUpdates = void 0;
      {
        didWarnAboutNestedUpdates = false;
      }

      var ReactFiberReconciler$1 = function ReactFiberReconciler$1(config) {
        var getPublicInstance = config.getPublicInstance;

        var _ReactFiberScheduler = ReactFiberScheduler(config),
            computeUniqueAsyncExpiration = _ReactFiberScheduler.computeUniqueAsyncExpiration,
            recalculateCurrentTime = _ReactFiberScheduler.recalculateCurrentTime,
            computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,
            scheduleWork = _ReactFiberScheduler.scheduleWork,
            requestWork = _ReactFiberScheduler.requestWork,
            flushRoot = _ReactFiberScheduler.flushRoot,
            batchedUpdates = _ReactFiberScheduler.batchedUpdates,
            unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
            flushSync = _ReactFiberScheduler.flushSync,
            flushControlled = _ReactFiberScheduler.flushControlled,
            deferredUpdates = _ReactFiberScheduler.deferredUpdates,
            syncUpdates = _ReactFiberScheduler.syncUpdates,
            interactiveUpdates = _ReactFiberScheduler.interactiveUpdates,
            flushInteractiveUpdates = _ReactFiberScheduler.flushInteractiveUpdates,
            legacyContext = _ReactFiberScheduler.legacyContext;

        var findCurrentUnmaskedContext = legacyContext.findCurrentUnmaskedContext,
            isContextProvider = legacyContext.isContextProvider,
            processChildContext = legacyContext.processChildContext;

        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyObject;
          }

          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
        }

        function scheduleRootUpdate(current, element, currentTime, expirationTime, callback) {
          {
            if (ReactDebugCurrentFiber.phase === "render" && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              warning(false, "Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(ReactDebugCurrentFiber.current) || "Unknown");
            }
          }
          callback = callback === undefined ? null : callback;
          {
            !(callback === null || typeof callback === "function") ? warning(false, "render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback) : void 0;
          }
          var update = {
            expirationTime: expirationTime,
            partialState: {
              element: element
            },
            callback: callback,
            isReplace: false,
            isForced: false,
            capturedValue: null,
            next: null
          };
          insertUpdateIntoFiber(current, update);
          scheduleWork(current, expirationTime);
          return expirationTime;
        }

        function _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback) {
          var current = container.current;
          {
            if (ReactFiberInstrumentation_1.debugTool) {
              if (current.alternate === null) {
                ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
              } else if (element === null) {
                ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
              } else {
                ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
              }
            }
          }
          var context = getContextForSubtree(parentComponent);

          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }

          return scheduleRootUpdate(current, element, currentTime, expirationTime, callback);
        }

        function findHostInstance(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        }

        return {
          createContainer: function createContainer(containerInfo, isAsync, hydrate) {
            return createFiberRoot(containerInfo, isAsync, hydrate);
          },
          updateContainer: function updateContainer(element, container, parentComponent, callback) {
            var current = container.current;
            var currentTime = recalculateCurrentTime();
            var expirationTime = computeExpirationForFiber(current);
            return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);
          },
          updateContainerAtExpirationTime: function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
            var currentTime = recalculateCurrentTime();
            return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);
          },
          flushRoot: flushRoot,
          requestWork: requestWork,
          computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,
          batchedUpdates: batchedUpdates,
          unbatchedUpdates: unbatchedUpdates,
          deferredUpdates: deferredUpdates,
          syncUpdates: syncUpdates,
          interactiveUpdates: interactiveUpdates,
          flushInteractiveUpdates: flushInteractiveUpdates,
          flushControlled: flushControlled,
          flushSync: flushSync,
          getPublicRootInstance: function getPublicRootInstance(container) {
            var containerFiber = container.current;

            if (!containerFiber.child) {
              return null;
            }

            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);

              default:
                return containerFiber.child.stateNode;
            }
          },
          findHostInstance: findHostInstance,
          findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

            if (hostFiber === null) {
              return null;
            }

            return hostFiber.stateNode;
          },
          injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
            var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            return injectInternals(_extends({}, devToolsConfig, {
              findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
                return findHostInstance(fiber);
              },
              findFiberByHostInstance: function findFiberByHostInstance(instance) {
                if (!_findFiberByHostInstance) {
                  return null;
                }

                return _findFiberByHostInstance(instance);
              }
            }));
          }
        };
      };

      var ReactFiberReconciler$2 = Object.freeze({
        default: ReactFiberReconciler$1
      });
      var ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2;
      var reactReconciler = ReactFiberReconciler$3["default"] ? ReactFiberReconciler$3["default"] : ReactFiberReconciler$3;
      var viewConfigCallbacks = new Map();
      var viewConfigs = new Map();

      function register(name, callback) {
        invariant(!viewConfigCallbacks.has(name), "Tried to register two views with the same name %s", name);
        viewConfigCallbacks.set(name, callback);
        return name;
      }

      function get$1(name) {
        var viewConfig = void 0;

        if (!viewConfigs.has(name)) {
          var callback = viewConfigCallbacks.get(name);
          invariant(typeof callback === "function", "View config not found for name %s", name);
          viewConfigCallbacks.set(name, null);
          viewConfig = callback();
          viewConfigs.set(name, viewConfig);
        } else {
          viewConfig = viewConfigs.get(name);
        }

        invariant(viewConfig, "View config not found for name %s", name);
        return viewConfig;
      }

      function _classCallCheck$2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var ReactNativeFiberHostComponent = function () {
        function ReactNativeFiberHostComponent(tag, viewConfig) {
          _classCallCheck$2(this, ReactNativeFiberHostComponent);

          this._nativeTag = tag;
          this._children = [];
          this.viewConfig = viewConfig;
        }

        ReactNativeFiberHostComponent.prototype.blur = function blur() {
          TextInputState.blurTextInput(this._nativeTag);
        };

        ReactNativeFiberHostComponent.prototype.focus = function focus() {
          TextInputState.focusTextInput(this._nativeTag);
        };

        ReactNativeFiberHostComponent.prototype.measure = function measure(callback) {
          UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
        };

        ReactNativeFiberHostComponent.prototype.measureInWindow = function measureInWindow(callback) {
          UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
        };

        ReactNativeFiberHostComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        };

        ReactNativeFiberHostComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
          {
            warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, this.viewConfig.validAttributes);

          if (updatePayload != null) {
            UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeFiberHostComponent;
      }();

      var hasNativePerformanceNow = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && typeof performance.now === "function";
      var now = hasNativePerformanceNow ? function () {
        return performance.now();
      } : function () {
        return Date.now();
      };
      var scheduledCallback = null;
      var frameDeadline = 0;
      var frameDeadlineObject = {
        timeRemaining: function timeRemaining() {
          return frameDeadline - now();
        },
        didTimeout: false
      };

      function setTimeoutCallback() {
        frameDeadline = now() + 5;
        var callback = scheduledCallback;
        scheduledCallback = null;

        if (callback !== null) {
          callback(frameDeadlineObject);
        }
      }

      function scheduleDeferredCallback(callback) {
        scheduledCallback = callback;
        return setTimeout(setTimeoutCallback, 1);
      }

      function cancelDeferredCallback(callbackID) {
        scheduledCallback = null;
        clearTimeout(callbackID);
      }

      function recursivelyUncacheFiberNode(node) {
        if (typeof node === "number") {
          uncacheFiberNode(node);
        } else {
          uncacheFiberNode(node._nativeTag);

          node._children.forEach(recursivelyUncacheFiberNode);
        }
      }

      var NativeRenderer = reactReconciler({
        appendInitialChild: function appendInitialChild(parentInstance, child) {
          parentInstance._children.push(child);
        },
        createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var tag = ReactNativeTagHandles.allocateTag();
          var viewConfig = get$1(type);
          {
            for (var key in viewConfig.validAttributes) {
              if (props.hasOwnProperty(key)) {
                deepFreezeAndThrowOnMutationInDev(props[key]);
              }
            }
          }
          var updatePayload = create(props, viewConfig.validAttributes);
          UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
          var component = new ReactNativeFiberHostComponent(tag, viewConfig);
          precacheFiberNode(internalInstanceHandle, tag);
          updateFiberProps(tag, props);
          return component;
        },
        createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          var tag = ReactNativeTagHandles.allocateTag();
          UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
            text: text
          });
          precacheFiberNode(internalInstanceHandle, tag);
          return tag;
        },
        finalizeInitialChildren: function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance) {
          if (parentInstance._children.length === 0) {
            return false;
          }

          var nativeTags = parentInstance._children.map(function (child) {
            return typeof child === "number" ? child : child._nativeTag;
          });

          UIManager.setChildren(parentInstance._nativeTag, nativeTags);
          return false;
        },
        getRootHostContext: function getRootHostContext() {
          return emptyObject;
        },
        getChildHostContext: function getChildHostContext() {
          return emptyObject;
        },
        getPublicInstance: function getPublicInstance(instance) {
          return instance;
        },
        now: now,
        prepareForCommit: function prepareForCommit() {},
        prepareUpdate: function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
          return emptyObject;
        },
        resetAfterCommit: function resetAfterCommit() {},
        scheduleDeferredCallback: scheduleDeferredCallback,
        cancelDeferredCallback: cancelDeferredCallback,
        shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {
          return false;
        },
        shouldSetTextContent: function shouldSetTextContent(type, props) {
          return false;
        },
        mutation: {
          appendChild: function appendChild(parentInstance, child) {
            var childTag = typeof child === "number" ? child : child._nativeTag;
            var children = parentInstance._children;
            var index = children.indexOf(child);

            if (index >= 0) {
              children.splice(index, 1);
              children.push(child);
              UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], []);
            } else {
              children.push(child);
              UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []);
            }
          },
          appendChildToContainer: function appendChildToContainer(parentInstance, child) {
            var childTag = typeof child === "number" ? child : child._nativeTag;
            UIManager.setChildren(parentInstance, [childTag]);
          },
          commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
            UIManager.updateView(textInstance, "RCTRawText", {
              text: newText
            });
          },
          commitMount: function commitMount(instance, type, newProps, internalInstanceHandle) {},
          commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
            var viewConfig = instance.viewConfig;
            updateFiberProps(instance._nativeTag, newProps);
            var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);

            if (updatePayload != null) {
              UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
            }
          },
          insertBefore: function insertBefore(parentInstance, child, beforeChild) {
            var children = parentInstance._children;
            var index = children.indexOf(child);

            if (index >= 0) {
              children.splice(index, 1);
              var beforeChildIndex = children.indexOf(beforeChild);
              children.splice(beforeChildIndex, 0, child);
              UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
            } else {
              var _beforeChildIndex = children.indexOf(beforeChild);

              children.splice(_beforeChildIndex, 0, child);
              var childTag = typeof child === "number" ? child : child._nativeTag;
              UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
            }
          },
          insertInContainerBefore: function insertInContainerBefore(parentInstance, child, beforeChild) {
            invariant(typeof parentInstance !== "number", "Container does not support insertBefore operation");
          },
          removeChild: function removeChild(parentInstance, child) {
            recursivelyUncacheFiberNode(child);
            var children = parentInstance._children;
            var index = children.indexOf(child);
            children.splice(index, 1);
            UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
          },
          removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
            recursivelyUncacheFiberNode(child);
            UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
          },
          resetTextContent: function resetTextContent(instance) {}
        }
      });
      var getInspectorDataForViewTag = void 0;
      {
        var traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
          if (instance) {
            hierarchy.unshift(instance);
            traverseOwnerTreeUp(hierarchy, instance._debugOwner);
          }
        };

        var getOwnerHierarchy = function getOwnerHierarchy(instance) {
          var hierarchy = [];
          traverseOwnerTreeUp(hierarchy, instance);
          return hierarchy;
        };

        var lastNonHostInstance = function lastNonHostInstance(hierarchy) {
          for (var i = hierarchy.length - 1; i > 1; i--) {
            var instance = hierarchy[i];

            if (instance.tag !== HostComponent) {
              return instance;
            }
          }

          return hierarchy[0];
        };

        var getHostProps = function getHostProps(fiber) {
          var host = findCurrentHostFiber(fiber);

          if (host) {
            return host.memoizedProps || emptyObject;
          }

          return emptyObject;
        };

        var getHostNode = function getHostNode(fiber, findNodeHandle) {
          var hostNode = void 0;

          while (fiber) {
            if (fiber.stateNode !== null && fiber.tag === HostComponent) {
              hostNode = findNodeHandle(fiber.stateNode);
            }

            if (hostNode) {
              return hostNode;
            }

            fiber = fiber.child;
          }

          return null;
        };

        var createHierarchy = function createHierarchy(fiberHierarchy) {
          return fiberHierarchy.map(function (fiber) {
            return {
              name: getComponentName(fiber),
              getInspectorData: function getInspectorData(findNodeHandle) {
                return {
                  measure: function measure(callback) {
                    return UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                  },
                  props: getHostProps(fiber),
                  source: fiber._debugSource
                };
              }
            };
          });
        };

        getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
          var closestInstance = getInstanceFromTag(viewTag);

          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject,
              selection: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selection = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selection: selection,
            source: source
          };
        };
      }

      var createReactNativeComponentClass = function createReactNativeComponentClass(name, callback) {
        return register(name, callback);
      };

      function takeSnapshot(view, options) {
        if (typeof view !== "number" && view !== "window") {
          view = findNumericNodeHandleFiber(view) || "window";
        }

        return UIManager.__takeSnapshot(view, options);
      }

      injectFindHostInstance(NativeRenderer.findHostInstance);
      injection$2.injectRenderer(NativeRenderer);
      var roots = new Map();
      var ReactNativeRenderer = {
        NativeComponent: ReactNativeComponent,
        findNodeHandle: findNumericNodeHandleFiber,
        render: function render(element, containerTag, callback) {
          var root = roots.get(containerTag);

          if (!root) {
            root = NativeRenderer.createContainer(containerTag, false, false);
            roots.set(containerTag, root);
          }

          NativeRenderer.updateContainer(element, root, null, callback);
          return NativeRenderer.getPublicRootInstance(root);
        },
        unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
          var root = roots.get(containerTag);

          if (root) {
            NativeRenderer.updateContainer(null, root, null, function () {
              roots["delete"](containerTag);
            });
          }
        },
        unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
          ReactNativeRenderer.unmountComponentAtNode(containerTag);
          UIManager.removeRootView(containerTag);
        },
        createPortal: function createPortal(children, containerTag) {
          var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          return _createPortal(children, containerTag, null, key);
        },
        unstable_batchedUpdates: batchedUpdates,
        flushSync: NativeRenderer.flushSync,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
          NativeMethodsMixin: NativeMethodsMixin,
          ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
          ReactNativeComponentTree: ReactNativeComponentTree,
          ReactNativePropRegistry: ReactNativePropRegistry,
          TouchHistoryMath: TouchHistoryMath,
          createReactNativeComponentClass: createReactNativeComponentClass,
          takeSnapshot: takeSnapshot
        }
      };
      {
        _extends(ReactNativeRenderer.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
          ReactDebugTool: {
            addHook: function addHook() {},
            removeHook: function removeHook() {}
          },
          ReactPerf: {
            start: function start() {},
            stop: function stop() {},
            printInclusive: function printInclusive() {},
            printWasted: function printWasted() {}
          }
        });
      }
      NativeRenderer.injectIntoDevTools({
        findFiberByHostInstance: getInstanceFromTag,
        getInspectorDataForViewTag: getInspectorDataForViewTag,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-native-renderer"
      });
      var ReactNativeRenderer$2 = Object.freeze({
        default: ReactNativeRenderer
      });
      var ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
      var reactNativeRenderer = ReactNativeRenderer$3["default"] ? ReactNativeRenderer$3["default"] : ReactNativeRenderer$3;
      module.exports = reactNativeRenderer;
    })();
  }
},93,[94,19,20,17,164,165,166,167,159,13,16,168,102,21,72,169],"ReactNativeRenderer-dev");
__d(function (global, _require3, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require3(_dependencyMap[0], 'PolyfillFunctions'),
      polyfillObjectProperty = _require.polyfillObjectProperty,
      polyfillGlobal = _require.polyfillGlobal;

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  var _shouldPolyfillCollection = _require3(_dependencyMap[1], '_shouldPolyfillES6Collection');

  if (_shouldPolyfillCollection('Map')) {
    polyfillGlobal('Map', function () {
      return _require3(_dependencyMap[2], 'Map');
    });
  }

  if (_shouldPolyfillCollection('Set')) {
    polyfillGlobal('Set', function () {
      return _require3(_dependencyMap[3], 'Set');
    });
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';
  }

  if (global.__RCTProfileIsProfiling) {
    var Systrace = _require3(_dependencyMap[4], 'Systrace');

    Systrace.installReactHook();
    Systrace.setEnabled(true);
  }

  var ExceptionsManager = _require3(_dependencyMap[5], 'ExceptionsManager');

  ExceptionsManager.installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = _require3(_dependencyMap[6], 'ErrorUtils');

    ErrorUtils.setGlobalHandler(handleError);
  }

  var ReactNativeVersionCheck = _require3(_dependencyMap[7], 'ReactNativeVersionCheck');

  ReactNativeVersionCheck.checkVersions();
  polyfillGlobal('Promise', function () {
    return _require3(_dependencyMap[8], 'Promise');
  });
  polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;

    _require3(_dependencyMap[9], 'regenerator-runtime/runtime');

    return global.regeneratorRuntime;
  });

  var defineLazyTimer = function defineLazyTimer(name) {
    polyfillGlobal(name, function () {
      return _require3(_dependencyMap[10], 'JSTimers')[name];
    });
  };

  defineLazyTimer('setTimeout');
  defineLazyTimer('setInterval');
  defineLazyTimer('setImmediate');
  defineLazyTimer('clearTimeout');
  defineLazyTimer('clearInterval');
  defineLazyTimer('clearImmediate');
  defineLazyTimer('requestAnimationFrame');
  defineLazyTimer('cancelAnimationFrame');
  defineLazyTimer('requestIdleCallback');
  defineLazyTimer('cancelIdleCallback');
  polyfillGlobal('XMLHttpRequest', function () {
    return _require3(_dependencyMap[11], 'XMLHttpRequest');
  });
  polyfillGlobal('FormData', function () {
    return _require3(_dependencyMap[12], 'FormData');
  });
  polyfillGlobal('fetch', function () {
    return _require3(_dependencyMap[13], 'fetch').fetch;
  });
  polyfillGlobal('Headers', function () {
    return _require3(_dependencyMap[13], 'fetch').Headers;
  });
  polyfillGlobal('Request', function () {
    return _require3(_dependencyMap[13], 'fetch').Request;
  });
  polyfillGlobal('Response', function () {
    return _require3(_dependencyMap[13], 'fetch').Response;
  });
  polyfillGlobal('WebSocket', function () {
    return _require3(_dependencyMap[14], 'WebSocket');
  });
  polyfillGlobal('Blob', function () {
    return _require3(_dependencyMap[15], 'Blob');
  });
  polyfillGlobal('File', function () {
    return _require3(_dependencyMap[16], 'File');
  });
  polyfillGlobal('FileReader', function () {
    return _require3(_dependencyMap[17], 'FileReader');
  });
  polyfillGlobal('URL', function () {
    return _require3(_dependencyMap[18], 'URL');
  });

  if (!global.alert) {
    global.alert = function (text) {
      _require3(_dependencyMap[19], 'Alert').alert('Alert', '' + text);
    };
  }

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  polyfillObjectProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
  polyfillObjectProperty(navigator, 'geolocation', function () {
    return _require3(_dependencyMap[20], 'Geolocation');
  });

  var BatchedBridge = _require3(_dependencyMap[21], 'BatchedBridge');

  BatchedBridge.registerLazyCallableModule('Systrace', function () {
    return _require3(_dependencyMap[4], 'Systrace');
  });
  BatchedBridge.registerLazyCallableModule('JSTimers', function () {
    return _require3(_dependencyMap[10], 'JSTimers');
  });
  BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
    return _require3(_dependencyMap[22], 'HeapCapture');
  });
  BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
    return _require3(_dependencyMap[23], 'SamplingProfiler');
  });
  BatchedBridge.registerLazyCallableModule('RCTLog', function () {
    return _require3(_dependencyMap[24], 'RCTLog');
  });
  BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
    return _require3(_dependencyMap[25], 'RCTDeviceEventEmitter');
  });
  BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
    return _require3(_dependencyMap[26], 'RCTNativeAppEventEmitter');
  });
  BatchedBridge.registerLazyCallableModule('PerformanceLogger', function () {
    return _require3(_dependencyMap[27], 'PerformanceLogger');
  });
  BatchedBridge.registerLazyCallableModule('JSDevSupportModule', function () {
    return _require3(_dependencyMap[28], 'JSDevSupportModule');
  });

  global.__fetchSegment = function (segmentId, callback) {
    var _require2 = _require3(_dependencyMap[29], 'NativeModules'),
        SegmentFetcher = _require2.SegmentFetcher;

    if (!SegmentFetcher) {
      throw new Error('SegmentFetcher is missing. Please ensure that it is ' + 'included as a NativeModule.');
    }

    SegmentFetcher.fetchSegment(segmentId, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  };

  if (__DEV__) {
    if (!global.__RCTProfileIsProfiling) {
      BatchedBridge.registerCallableModule('HMRClient', _require3(_dependencyMap[30], 'HMRClient'));

      if (!window.document) {
        _require3(_dependencyMap[31], 'setupDevtools');
      }

      var JSInspector = _require3(_dependencyMap[32], 'JSInspector');

      JSInspector.registerAgent(_require3(_dependencyMap[33], 'NetworkAgent'));
    }
  }
},94,[95,96,97,101,71,102,70,107,109,117,74,118,132,104,133,129,135,136,137,138,140,68,143,144,145,83,146,147,149,67,150,156,161,162],"InitializeCore");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var defineLazyObjectProperty = _require(_dependencyMap[0], 'defineLazyObjectProperty');

  function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    if (__DEV__ && descriptor) {
      var backupName = "original" + name[0].toUpperCase() + name.substr(1);
      Object.defineProperty(object, backupName, _extends({}, descriptor, {
        value: object[name]
      }));
    }

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(global, name, getValue);
  }

  module.exports = {
    polyfillObjectProperty: polyfillObjectProperty,
    polyfillGlobal: polyfillGlobal
  };
},95,[82],"PolyfillFunctions");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _shouldActuallyPolyfillES6Collection(collectionName) {
    var Collection = global[collectionName];

    if (Collection == null) {
      return true;
    }

    if (typeof global.Symbol !== 'function') {
      return true;
    }

    var proto = Collection.prototype;
    return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
  }

  var cache = {};

  function _shouldPolyfillES6Collection(collectionName) {
    var result = cache[collectionName];

    if (result !== undefined) {
      return result;
    }

    result = _shouldActuallyPolyfillES6Collection(collectionName);
    cache[collectionName] = result;
    return result;
  }

  module.exports = _shouldPolyfillES6Collection;
},96,[],"_shouldPolyfillES6Collection");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var _shouldPolyfillES6Collection = _require(_dependencyMap[0], '_shouldPolyfillES6Collection');

  var guid = _require(_dependencyMap[1], 'guid');

  var isNode = _require(_dependencyMap[2], 'fbjs/lib/isNode');

  var toIterator = _require(_dependencyMap[3], 'toIterator');

  module.exports = function (global, undefined) {
    if (!_shouldPolyfillES6Collection('Map')) {
      return global.Map;
    }

    var KIND_KEY = 'key';
    var KIND_VALUE = 'value';
    var KIND_KEY_VALUE = 'key+value';
    var KEY_PREFIX = '$map_';
    var SECRET_SIZE_PROP;

    if (__DEV__) {
      SECRET_SIZE_PROP = '$size' + guid();
    }

    var OLD_IE_HASH_PREFIX = 'IE_HASH_';

    var Map = function () {
      function Map(iterable) {
        _classCallCheck(this, Map);

        if (!isObject(this)) {
          throw new TypeError('Wrong map object type.');
        }

        initMap(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            if (!isObject(next.value)) {
              throw new TypeError('Expected iterable items to be pair objects.');
            }

            this.set(next.value[0], next.value[1]);
          }
        }
      }

      _createClass(Map, [{
        key: "clear",
        value: function clear() {
          initMap(this);
        }
      }, {
        key: "has",
        value: function has(key) {
          var index = getIndex(this, key);
          return !!(index != null && this._mapData[index]);
        }
      }, {
        key: "set",
        value: function set(key, value) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            this._mapData[index][1] = value;
          } else {
            index = this._mapData.push([key, value]) - 1;
            setIndex(this, key, index);

            if (__DEV__) {
              this[SECRET_SIZE_PROP] += 1;
            } else {
              this.size += 1;
            }
          }

          return this;
        }
      }, {
        key: "get",
        value: function get(key) {
          var index = getIndex(this, key);

          if (index == null) {
            return undefined;
          } else {
            return this._mapData[index][1];
          }
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            setIndex(this, key, undefined);
            this._mapData[index] = undefined;

            if (__DEV__) {
              this[SECRET_SIZE_PROP] -= 1;
            } else {
              this.size -= 1;
            }

            return true;
          } else {
            return false;
          }
        }
      }, {
        key: "entries",
        value: function entries() {
          return new MapIterator(this, KIND_KEY_VALUE);
        }
      }, {
        key: "keys",
        value: function keys() {
          return new MapIterator(this, KIND_KEY);
        }
      }, {
        key: "values",
        value: function values() {
          return new MapIterator(this, KIND_VALUE);
        }
      }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
          if (typeof callback !== 'function') {
            throw new TypeError('Callback must be callable.');
          }

          var boundCallback = callback.bind(thisArg || undefined);
          var mapData = this._mapData;

          for (var i = 0; i < mapData.length; i++) {
            var entry = mapData[i];

            if (entry != null) {
              boundCallback(entry[1], entry[0], this);
            }
          }
        }
      }]);

      return Map;
    }();

    Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

    var MapIterator = function () {
      function MapIterator(map, kind) {
        _classCallCheck(this, MapIterator);

        if (!(isObject(map) && map._mapData)) {
          throw new TypeError('Object is not a map.');
        }

        if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
          throw new Error('Invalid iteration kind.');
        }

        this._map = map;
        this._nextIndex = 0;
        this._kind = kind;
      }

      _createClass(MapIterator, [{
        key: "next",
        value: function next() {
          if (!this instanceof Map) {
            throw new TypeError('Expected to be called on a MapIterator.');
          }

          var map = this._map;
          var index = this._nextIndex;
          var kind = this._kind;

          if (map == null) {
            return createIterResultObject(undefined, true);
          }

          var entries = map._mapData;

          while (index < entries.length) {
            var record = entries[index];
            index += 1;
            this._nextIndex = index;

            if (record) {
              if (kind === KIND_KEY) {
                return createIterResultObject(record[0], false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(record[1], false);
              } else if (kind) {
                return createIterResultObject(record, false);
              }
            }
          }

          this._map = undefined;
          return createIterResultObject(undefined, true);
        }
      }]);

      return MapIterator;
    }();

    MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
      return this;
    };

    function getIndex(map, key) {
      if (isObject(key)) {
        var hash = getHash(key);
        return map._objectIndex[hash];
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          return map._stringIndex[prefixedKey];
        } else {
          return map._otherIndex[prefixedKey];
        }
      }
    }

    function setIndex(map, key, index) {
      var shouldDelete = index == null;

      if (isObject(key)) {
        var hash = getHash(key);

        if (shouldDelete) {
          delete map._objectIndex[hash];
        } else {
          map._objectIndex[hash] = index;
        }
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          if (shouldDelete) {
            delete map._stringIndex[prefixedKey];
          } else {
            map._stringIndex[prefixedKey] = index;
          }
        } else {
          if (shouldDelete) {
            delete map._otherIndex[prefixedKey];
          } else {
            map._otherIndex[prefixedKey] = index;
          }
        }
      }
    }

    function initMap(map) {
      map._mapData = [];
      map._objectIndex = {};
      map._stringIndex = {};
      map._otherIndex = {};

      if (__DEV__) {
        if (isES5) {
          if (map.hasOwnProperty(SECRET_SIZE_PROP)) {
            map[SECRET_SIZE_PROP] = 0;
          } else {
            Object.defineProperty(map, SECRET_SIZE_PROP, {
              value: 0,
              writable: true
            });
            Object.defineProperty(map, 'size', {
              set: function set(v) {
                console.error('PLEASE FIX ME: You are changing the map size property which ' + 'should not be writable and will break in production.');
                throw new Error('The map size property is not writable.');
              },
              get: function get() {
                return map[SECRET_SIZE_PROP];
              }
            });
          }

          return;
        }
      }

      map.size = 0;
    }

    function isObject(o) {
      return o != null && ((typeof o === "undefined" ? "undefined" : _typeof(o)) === 'object' || typeof o === 'function');
    }

    function createIterResultObject(value, done) {
      return {
        value: value,
        done: done
      };
    }

    var isES5 = function () {
      try {
        Object.defineProperty({}, 'x', {});
        return true;
      } catch (e) {
        return false;
      }
    }();

    function isExtensible(o) {
      if (!isES5) {
        return true;
      } else {
        return Object.isExtensible(o);
      }
    }

    function getIENodeHash(node) {
      var uniqueID;

      switch (node.nodeType) {
        case 1:
          uniqueID = node.uniqueID;
          break;

        case 9:
          uniqueID = node.documentElement.uniqueID;
          break;

        default:
          return null;
      }

      if (uniqueID) {
        return OLD_IE_HASH_PREFIX + uniqueID;
      } else {
        return null;
      }
    }

    var getHash = function () {
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      var hashProperty = guid();
      var hashCounter = 0;
      return function getHash(o) {
        if (o[hashProperty]) {
          return o[hashProperty];
        } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
          return o.propertyIsEnumerable[hashProperty];
        } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
          return getIENodeHash(o);
        } else if (!isES5 && o[hashProperty]) {
          return o[hashProperty];
        }

        if (isExtensible(o)) {
          hashCounter += 1;

          if (isES5) {
            Object.defineProperty(o, hashProperty, {
              enumerable: false,
              writable: false,
              configurable: false,
              value: hashCounter
            });
          } else if (o.propertyIsEnumerable) {
            o.propertyIsEnumerable = function () {
              return propIsEnumerable.apply(this, arguments);
            };

            o.propertyIsEnumerable[hashProperty] = hashCounter;
          } else if (isNode(o)) {
            o[hashProperty] = hashCounter;
          } else {
            throw new Error('Unable to set a non-enumerable property on object.');
          }

          return hashCounter;
        } else {
          throw new Error('Non-extensible objects are not allowed as keys.');
        }
      };
    }();

    return Map;
  }(Function('return this')());
},97,[96,98,99,100],"Map");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function guid() {
    return 'f' + (Math.random() * (1 << 30)).toString(16).replace('.', '');
  }

  module.exports = guid;
},98,[],"guid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  function isNode(object) {
    var doc = object ? object.ownerDocument || object : document;
    var defaultView = doc.defaultView || window;
    return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : (typeof object === "undefined" ? "undefined" : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }

  module.exports = isNode;
},99,[],"node_modules/fbjs/lib/isNode.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VAL = 'key+value';
  var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';

  var toIterator = function () {
    if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
      return function () {
        var ArrayIterator = function () {
          function ArrayIterator(array, kind) {
            _classCallCheck(this, ArrayIterator);

            if (!Array.isArray(array)) {
              throw new TypeError('Object is not an Array');
            }

            this._iteratedObject = array;
            this._kind = kind;
            this._nextIndex = 0;
          }

          _createClass(ArrayIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof ArrayIterator) {
                throw new TypeError('Object is not an ArrayIterator');
              }

              if (this._iteratedObject == null) {
                return createIterResultObject(undefined, true);
              }

              var array = this._iteratedObject;
              var len = this._iteratedObject.length;
              var index = this._nextIndex;
              var kind = this._kind;

              if (index >= len) {
                this._iteratedObject = undefined;
                return createIterResultObject(undefined, true);
              }

              this._nextIndex = index + 1;

              if (kind === KIND_KEY) {
                return createIterResultObject(index, false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(array[index], false);
              } else if (kind === KIND_KEY_VAL) {
                return createIterResultObject([index, array[index]], false);
              }
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);

          return ArrayIterator;
        }();

        var StringIterator = function () {
          function StringIterator(string) {
            _classCallCheck(this, StringIterator);

            if (typeof string !== 'string') {
              throw new TypeError('Object is not a string');
            }

            this._iteratedString = string;
            this._nextIndex = 0;
          }

          _createClass(StringIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof StringIterator) {
                throw new TypeError('Object is not a StringIterator');
              }

              if (this._iteratedString == null) {
                return createIterResultObject(undefined, true);
              }

              var index = this._nextIndex;
              var s = this._iteratedString;
              var len = s.length;

              if (index >= len) {
                this._iteratedString = undefined;
                return createIterResultObject(undefined, true);
              }

              var ret;
              var first = s.charCodeAt(index);

              if (first < 0xD800 || first > 0xDBFF || index + 1 === len) {
                ret = s[index];
              } else {
                var second = s.charCodeAt(index + 1);

                if (second < 0xDC00 || second > 0xDFFF) {
                  ret = s[index];
                } else {
                  ret = s[index] + s[index + 1];
                }
              }

              this._nextIndex = index + ret.length;
              return createIterResultObject(ret, false);
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);

          return StringIterator;
        }();

        function createIterResultObject(value, done) {
          return {
            value: value,
            done: done
          };
        }

        return function (object, kind) {
          if (typeof object === 'string') {
            return new StringIterator(object);
          } else if (Array.isArray(object)) {
            return new ArrayIterator(object, kind || KIND_VALUE);
          } else {
            return object[ITERATOR_SYMBOL]();
          }
        };
      }();
    } else {
      return function (object) {
        return object[ITERATOR_SYMBOL]();
      };
    }
  }();

  _extends(toIterator, {
    KIND_KEY: KIND_KEY,
    KIND_VALUE: KIND_VALUE,
    KIND_KEY_VAL: KIND_KEY_VAL,
    ITERATOR_SYMBOL: ITERATOR_SYMBOL
  });

  module.exports = toIterator;
},100,[],"toIterator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Map = _require(_dependencyMap[0], 'Map');

  var _shouldPolyfillES6Collection = _require(_dependencyMap[1], '_shouldPolyfillES6Collection');

  var toIterator = _require(_dependencyMap[2], 'toIterator');

  module.exports = function (global) {
    if (!_shouldPolyfillES6Collection('Set')) {
      return global.Set;
    }

    var Set = function () {
      function Set(iterable) {
        _classCallCheck(this, Set);

        if (this == null || _typeof(this) !== 'object' && typeof this !== 'function') {
          throw new TypeError('Wrong set object type.');
        }

        initSet(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            this.add(next.value);
          }
        }
      }

      _createClass(Set, [{
        key: "add",
        value: function add(value) {
          this._map.set(value, value);

          this.size = this._map.size;
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          initSet(this);
        }
      }, {
        key: "delete",
        value: function _delete(value) {
          var ret = this._map.delete(value);

          this.size = this._map.size;
          return ret;
        }
      }, {
        key: "entries",
        value: function entries() {
          return this._map.entries();
        }
      }, {
        key: "forEach",
        value: function forEach(callback) {
          var thisArg = arguments[1];

          var it = this._map.keys();

          var next;

          while (!(next = it.next()).done) {
            callback.call(thisArg, next.value, next.value, this);
          }
        }
      }, {
        key: "has",
        value: function has(value) {
          return this._map.has(value);
        }
      }, {
        key: "values",
        value: function values() {
          return this._map.values();
        }
      }]);

      return Set;
    }();

    Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;
    Set.prototype.keys = Set.prototype.values;

    function initSet(set) {
      set._map = new Map();
      set.size = set._map.size;
    }

    return Set;
  }(Function('return this')());
},101,[97,96,100],"Set");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var exceptionID = 0;

  function reportException(e, isFatal) {
    var _require = _require2(_dependencyMap[0], 'NativeModules'),
        ExceptionsManager = _require.ExceptionsManager;

    if (ExceptionsManager) {
      var parseErrorStack = _require2(_dependencyMap[1], 'parseErrorStack');

      var stack = parseErrorStack(e);
      var currentExceptionID = ++exceptionID;

      if (isFatal) {
        ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
      } else {
        ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
      }

      if (__DEV__) {
        var symbolicateStackTrace = _require2(_dependencyMap[2], 'symbolicateStackTrace');

        symbolicateStackTrace(stack).then(function (prettyStack) {
          if (prettyStack) {
            ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);
          } else {
            throw new Error('The stack is null');
          }
        }).catch(function (error) {
          return console.warn('Unable to symbolicate stack trace: ' + error.message);
        });
      }
    }
  }

  function handleException(e, isFatal) {
    if (!e.message) {
      e = new Error(e);
    }

    if (console._errorOriginal) {
      console._errorOriginal(e.message);
    } else {
      console.error(e.message);
    }

    reportException(e, isFatal);
  }

  function reactConsoleErrorHandler() {
    console._errorOriginal.apply(console, arguments);

    if (!console.reportErrorsAsExceptions) {
      return;
    }

    if (arguments[0] && arguments[0].stack) {
      reportException(arguments[0], false);
    } else {
      var stringifySafe = _require2(_dependencyMap[3], 'stringifySafe');

      var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');

      if (str.slice(0, 10) === '"Warning: ') {
        return;
      }

      var error = new Error('console.error: ' + str);
      error.framesToPop = 1;
      reportException(error, false);
    }
  }

  function installConsoleErrorReporter() {
    if (console._errorOriginal) {
      return;
    }

    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;

    if (console.reportErrorsAsExceptions === undefined) {
      console.reportErrorsAsExceptions = true;
    }
  }

  module.exports = {
    handleException: handleException,
    installConsoleErrorReporter: installConsoleErrorReporter
  };
},102,[67,79,103,73],"ExceptionsManager");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var symbolicateStackTrace = function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(stack) {
      var devServer, stackCopy, foundInternalSource, response, json;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!fetch) {
                fetch = global.fetch || _require2(_dependencyMap[0], 'fetch').fetch;
              }

              devServer = getDevServer();

              if (devServer.bundleLoadedFromServer) {
                _context.next = 4;
                break;
              }

              throw new Error('Bundle was not loaded from the packager');

            case 4:
              stackCopy = stack;

              if (SourceCode.scriptURL) {
                foundInternalSource = false;
                stackCopy = stack.map(function (frame) {
                  if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                    return _extends({}, frame, {
                      file: SourceCode.scriptURL
                    });
                  }

                  foundInternalSource = true;
                  return frame;
                });
              }

              _context.next = 8;
              return fetch(devServer.url + 'symbolicate', {
                method: 'POST',
                body: JSON.stringify({
                  stack: stackCopy
                })
              });

            case 8:
              response = _context.sent;
              _context.next = 11;
              return response.json();

            case 11:
              json = _context.sent;
              return _context.abrupt("return", json.stack);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function symbolicateStackTrace(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

  var getDevServer = _require2(_dependencyMap[1], 'getDevServer');

  var _require = _require2(_dependencyMap[2], 'NativeModules'),
      SourceCode = _require.SourceCode;

  var fetch = void 0;

  function isSourcedFromDisk(sourcePath) {
    return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
  }

  module.exports = symbolicateStackTrace;
},103,[104,106,67],"symbolicateStackTrace");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _whatwgFetch = _require(_dependencyMap[0], "whatwg-fetch");

  var _whatwgFetch2 = _interopRequireDefault(_whatwgFetch);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  if (_whatwgFetch2.default && _whatwgFetch2.default.fetch) {
    module.exports = _whatwgFetch2.default;
  } else {
    module.exports = {
      fetch: fetch,
      Headers: Headers,
      Request: Request,
      Response: Response
    };
  }
},104,[105],"fetch");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  (function (self) {
    'use strict';

    if (self.fetch) {
      return;
    }

    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isDataView = function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      };

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var list = this.map[name];

      if (!list) {
        list = [];
        this.map[name] = list;
      }

      list.push(value);
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      var values = this.map[normalizeName(name)];
      return values ? values[0] : null;
    };

    Headers.prototype.getAll = function (name) {
      return this.map[normalizeName(name)] || [];
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = [normalizeValue(value)];
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      Object.getOwnPropertyNames(this.map).forEach(function (name) {
        this.map[name].forEach(function (value) {
          callback.call(thisArg, value, name, this);
        }, this);
      }, this);
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          throw new Error('unsupported BodyInit type');
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (typeof input === 'string') {
        this.url = input;
      } else {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      }

      this.credentials = options.credentials || this.credentials || 'omit';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      rawHeaders.split('\r\n').forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = 'status' in options ? options.status : 200;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;

    self.fetch = function (input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);
        var xhr = new XMLHttpRequest();

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        }

        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    };

    self.fetch.polyfill = true;
  })(typeof self !== 'undefined' ? self : undefined);
},105,[],"node_modules/whatwg-fetch/fetch.js");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'NativeModules'),
      SourceCode = _require.SourceCode;

  var _cachedDevServerURL = void 0;

  var FALLBACK = 'http://localhost:8081/';

  function getDevServer() {
    if (_cachedDevServerURL === undefined) {
      var match = SourceCode && SourceCode.scriptURL && SourceCode.scriptURL.match(/^https?:\/\/.*?\//);
      _cachedDevServerURL = match ? match[0] : null;
    }

    return {
      url: _cachedDevServerURL || FALLBACK,
      bundleLoadedFromServer: _cachedDevServerURL !== null
    };
  }

  module.exports = getDevServer;
},106,[67],"getDevServer");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'NativeModules'),
      PlatformConstants = _require.PlatformConstants;

  var ReactNativeVersion = _require2(_dependencyMap[1], 'ReactNativeVersion');

  exports.checkVersions = function checkVersions() {
    if (!PlatformConstants) {
      return;
    }

    var nativeVersion = PlatformConstants.reactNativeVersion;

    if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {
      console.error("React Native version mismatch.\n\nJavaScript version: " + _formatVersion(ReactNativeVersion.version) + "\n" + ("Native version: " + _formatVersion(nativeVersion) + "\n\n") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');
    }
  };

  function _formatVersion(version) {
    return version.major + "." + version.minor + "." + version.patch + (version.prerelease !== null ? "-" + version.prerelease : '');
  }
},107,[67,108],"ReactNativeVersionCheck");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  exports.version = {
    major: 0,
    minor: 55,
    patch: 2,
    prerelease: null
  };
},108,[],"ReactNativeVersion");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], 'fbjs/lib/Promise.native');

  if (__DEV__) {
    _require(_dependencyMap[1], 'promise/setimmediate/rejection-tracking').enable({
      allRejections: true,
      onUnhandled: function onUnhandled(id) {
        var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var message = void 0;
        var stack = void 0;
        var stringValue = Object.prototype.toString.call(error);

        if (stringValue === '[object Error]') {
          message = Error.prototype.toString.call(error);
          stack = error.stack;
        } else {
          message = _require(_dependencyMap[2], 'pretty-format')(error);
        }

        var warning = "Possible Unhandled Promise Rejection (id: " + id + "):\n" + (message + "\n") + (stack == null ? '' : stack);
        console.warn(warning);
      },
      onHandled: function onHandled(id) {
        var warning = "Promise Rejection Handled (id: " + id + ")\n" + 'This means you can ignore any previous messages of the form ' + ("\"Possible Unhandled Promise Rejection (id: " + id + "):\"");
        console.warn(warning);
      }
    });
  }

  module.exports = Promise;
},109,[110,114,115],"Promise");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], 'promise/setimmediate/es6-extensions');

  _require(_dependencyMap[1], 'promise/setimmediate/done');

  Promise.prototype['finally'] = function (onSettled) {
    return this.then(onSettled, onSettled);
  };

  module.exports = Promise;
},110,[111,113],"node_modules/fbjs/lib/Promise.native.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var Promise = _require(_dependencyMap[0], './core.js');

  module.exports = Promise;
  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');

  function valuePromise(value) {
    var p = new Promise(Promise._61);
    p._65 = 1;
    p._55 = value;
    return p;
  }

  Promise.resolve = function (value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;

    if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object' || typeof value === 'function') {
      try {
        var then = value.then;

        if (typeof then === 'function') {
          return new Promise(then.bind(value));
        }
      } catch (ex) {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      }
    }

    return valuePromise(value);
  };

  Promise.all = function (arr) {
    var args = Array.prototype.slice.call(arr);
    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        if (val && ((typeof val === "undefined" ? "undefined" : _typeof(val)) === 'object' || typeof val === 'function')) {
          if (val instanceof Promise && val.then === Promise.prototype.then) {
            while (val._65 === 3) {
              val = val._55;
            }

            if (val._65 === 1) return res(i, val._55);
            if (val._65 === 2) reject(val._55);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;

            if (typeof then === 'function') {
              var p = new Promise(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }

        args[i] = val;

        if (--remaining === 0) {
          resolve(args);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      values.forEach(function (value) {
        Promise.resolve(value).then(resolve, reject);
      });
    });
  };

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
},111,[112],"node_modules/promise/setimmediate/es6-extensions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  function noop() {}

  var LAST_ERROR = null;
  var IS_ERROR = {};

  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  module.exports = Promise;

  function Promise(fn) {
    if (_typeof(this) !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }

    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }

    this._40 = 0;
    this._65 = 0;
    this._55 = null;
    this._72 = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }

  Promise._37 = null;
  Promise._87 = null;
  Promise._61 = noop;

  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }

    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };

  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }

  function handle(self, deferred) {
    while (self._65 === 3) {
      self = self._55;
    }

    if (Promise._37) {
      Promise._37(self);
    }

    if (self._65 === 0) {
      if (self._40 === 0) {
        self._40 = 1;
        self._72 = deferred;
        return;
      }

      if (self._40 === 1) {
        self._40 = 2;
        self._72 = [self._72, deferred];
        return;
      }

      self._72.push(deferred);

      return;
    }

    handleResolved(self, deferred);
  }

  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;

      if (cb === null) {
        if (self._65 === 1) {
          resolve(deferred.promise, self._55);
        } else {
          reject(deferred.promise, self._55);
        }

        return;
      }

      var ret = tryCallOne(cb, self._55);

      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }

  function resolve(self, newValue) {
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }

    if (newValue && ((typeof newValue === "undefined" ? "undefined" : _typeof(newValue)) === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);

      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }

      if (then === self.then && newValue instanceof Promise) {
        self._65 = 3;
        self._55 = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }

    self._65 = 1;
    self._55 = newValue;
    finale(self);
  }

  function reject(self, newValue) {
    self._65 = 2;
    self._55 = newValue;

    if (Promise._87) {
      Promise._87(self, newValue);
    }

    finale(self);
  }

  function finale(self) {
    if (self._40 === 1) {
      handle(self, self._72);
      self._72 = null;
    }

    if (self._40 === 2) {
      for (var i = 0; i < self._72.length; i++) {
        handle(self, self._72[i]);
      }

      self._72 = null;
    }
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });

    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},112,[],"node_modules/promise/setimmediate/core.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], './core.js');

  module.exports = Promise;

  Promise.prototype.done = function (onFulfilled, onRejected) {
    var self = arguments.length ? this.then.apply(this, arguments) : this;
    self.then(null, function (err) {
      setTimeout(function () {
        throw err;
      }, 0);
    });
  };
},113,[112],"node_modules/promise/setimmediate/done.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _require(_dependencyMap[0], './core');

  var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];
  var enabled = false;
  exports.disable = disable;

  function disable() {
    enabled = false;
    Promise._37 = null;
    Promise._87 = null;
  }

  exports.enable = enable;

  function enable(options) {
    options = options || {};
    if (enabled) disable();
    enabled = true;
    var id = 0;
    var displayId = 0;
    var rejections = {};

    Promise._37 = function (promise) {
      if (promise._65 === 2 && rejections[promise._51]) {
        if (rejections[promise._51].logged) {
          onHandled(promise._51);
        } else {
          clearTimeout(rejections[promise._51].timeout);
        }

        delete rejections[promise._51];
      }
    };

    Promise._87 = function (promise, err) {
      if (promise._40 === 0) {
        promise._51 = id++;
        rejections[promise._51] = {
          displayId: null,
          error: err,
          timeout: setTimeout(onUnhandled.bind(null, promise._51), matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
          logged: false
        };
      }
    };

    function onUnhandled(id) {
      if (options.allRejections || matchWhitelist(rejections[id].error, options.whitelist || DEFAULT_WHITELIST)) {
        rejections[id].displayId = displayId++;

        if (options.onUnhandled) {
          rejections[id].logged = true;
          options.onUnhandled(rejections[id].displayId, rejections[id].error);
        } else {
          rejections[id].logged = true;
          logError(rejections[id].displayId, rejections[id].error);
        }
      }
    }

    function onHandled(id) {
      if (rejections[id].logged) {
        if (options.onHandled) {
          options.onHandled(rejections[id].displayId, rejections[id].error);
        } else if (!rejections[id].onUnhandled) {
          console.warn('Promise Rejection Handled (id: ' + rejections[id].displayId + '):');
          console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id].displayId + '.');
        }
      }
    }
  }

  function logError(id, error) {
    console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
    var errStr = (error && (error.stack || error)) + '';
    errStr.split('\n').forEach(function (line) {
      console.warn('  ' + line);
    });
  }

  function matchWhitelist(error, list) {
    return list.some(function (cls) {
      return error instanceof cls;
    });
  }
},114,[112],"node_modules/promise/setimmediate/rejection-tracking.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var printString = _require(_dependencyMap[0], './printString');

  var toString = Object.prototype.toString;
  var toISOString = Date.prototype.toISOString;
  var errorToString = Error.prototype.toString;
  var regExpToString = RegExp.prototype.toString;
  var symbolToString = (typeof Symbol === "function" ? Symbol.prototype : "@@prototype").toString;
  var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
  var NEWLINE_REGEXP = /\n/ig;

  var getSymbols = Object.getOwnPropertySymbols || function (obj) {
    return [];
  };

  function isToStringedArrayType(toStringed) {
    return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
  }

  function printNumber(val) {
    if (val != +val) return 'NaN';
    var isNegativeZero = val === 0 && 1 / val < 0;
    return isNegativeZero ? '-0' : '' + val;
  }

  function printFunction(val, printFunctionName) {
    if (!printFunctionName) {
      return '[Function]';
    } else if (val.name === '') {
      return '[Function anonymous]';
    } else {
      return '[Function ' + val.name + ']';
    }
  }

  function printSymbol(val) {
    return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
  }

  function printError(val) {
    return '[' + errorToString.call(val) + ']';
  }

  function printBasicValue(val, printFunctionName, escapeRegex) {
    if (val === true || val === false) return '' + val;
    if (val === undefined) return 'undefined';
    if (val === null) return 'null';
    var typeOf = typeof val === "undefined" ? "undefined" : _typeof(val);
    if (typeOf === 'number') return printNumber(val);
    if (typeOf === 'string') return '"' + printString(val) + '"';
    if (typeOf === 'function') return printFunction(val, printFunctionName);
    if (typeOf === 'symbol') return printSymbol(val);
    var toStringed = toString.call(val);
    if (toStringed === '[object WeakMap]') return 'WeakMap {}';
    if (toStringed === '[object WeakSet]') return 'WeakSet {}';
    if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') return printFunction(val, printFunctionName);
    if (toStringed === '[object Symbol]') return printSymbol(val);
    if (toStringed === '[object Date]') return toISOString.call(val);
    if (toStringed === '[object Error]') return printError(val);

    if (toStringed === '[object RegExp]') {
      if (escapeRegex) {
        return printString(regExpToString.call(val));
      }

      return regExpToString.call(val);
    }

    ;
    if (toStringed === '[object Arguments]' && val.length === 0) return 'Arguments []';
    if (isToStringedArrayType(toStringed) && val.length === 0) return val.constructor.name + ' []';
    if (val instanceof Error) return printError(val);
    return false;
  }

  function printList(list, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var body = '';

    if (list.length) {
      body += edgeSpacing;
      var innerIndent = prevIndent + indent;

      for (var i = 0; i < list.length; i++) {
        body += innerIndent + print(list[i], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

        if (i < list.length - 1) {
          body += ',' + spacing;
        }
      }

      body += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return '[' + body + ']';
  }

  function printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    return (min ? '' : 'Arguments ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    return (min ? '' : val.constructor.name + ' ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var result = 'Map {';
    var iterator = val.entries();
    var current = iterator.next();

    if (!current.done) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      while (!current.done) {
        var key = print(current.value[0], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        var value = print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        result += innerIndent + key + ' => ' + value;
        current = iterator.next();

        if (!current.done) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var constructor = min ? '' : val.constructor ? val.constructor.name + ' ' : 'Object ';
    var result = constructor + '{';
    var keys = Object.keys(val).sort();
    var symbols = getSymbols(val);

    if (symbols.length) {
      keys = keys.filter(function (key) {
        return !((typeof key === "undefined" ? "undefined" : _typeof(key)) === 'symbol' || toString.call(key) === '[object Symbol]');
      }).concat(symbols);
    }

    if (keys.length) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var name = print(key, indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        var value = print(val[key], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        result += innerIndent + name + ': ' + value;

        if (i < keys.length - 1) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var result = 'Set {';
    var iterator = val.entries();
    var current = iterator.next();

    if (!current.done) {
      result += edgeSpacing;
      var innerIndent = prevIndent + indent;

      while (!current.done) {
        result += innerIndent + print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
        current = iterator.next();

        if (!current.done) {
          result += ',' + spacing;
        }
      }

      result += (min ? '' : ',') + edgeSpacing + prevIndent;
    }

    return result + '}';
  }

  function printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    refs = refs.slice();

    if (refs.indexOf(val) > -1) {
      return '[Circular]';
    } else {
      refs.push(val);
    }

    currentDepth++;
    var hitMaxDepth = currentDepth > maxDepth;

    if (callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function') {
      return print(val.toJSON(), indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }

    var toStringed = toString.call(val);

    if (toStringed === '[object Arguments]') {
      return hitMaxDepth ? '[Arguments]' : printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (isToStringedArrayType(toStringed)) {
      return hitMaxDepth ? '[Array]' : printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (toStringed === '[object Map]') {
      return hitMaxDepth ? '[Map]' : printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if (toStringed === '[object Set]') {
      return hitMaxDepth ? '[Set]' : printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    } else if ((typeof val === "undefined" ? "undefined" : _typeof(val)) === 'object') {
      return hitMaxDepth ? '[Object]' : printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }
  }

  function printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var match = false;
    var plugin = void 0;

    for (var p = 0; p < plugins.length; p++) {
      plugin = plugins[p];

      if (plugin.test(val)) {
        match = true;
        break;
      }
    }

    if (!match) {
      return false;
    }

    function boundPrint(val) {
      return print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    }

    function boundIndent(str) {
      var indentation = prevIndent + indent;
      return indentation + str.replace(NEWLINE_REGEXP, '\n' + indentation);
    }

    return plugin.print(val, boundPrint, boundIndent, {
      edgeSpacing: edgeSpacing,
      spacing: spacing
    });
  }

  function print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
    var basic = printBasicValue(val, printFunctionName, escapeRegex);
    if (basic) return basic;
    var plugin = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
    if (plugin) return plugin;
    return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  var DEFAULTS = {
    callToJSON: true,
    indent: 2,
    maxDepth: Infinity,
    min: false,
    plugins: [],
    printFunctionName: true,
    escapeRegex: false
  };

  function validateOptions(opts) {
    Object.keys(opts).forEach(function (key) {
      if (!DEFAULTS.hasOwnProperty(key)) {
        throw new Error('prettyFormat: Invalid option: ' + key);
      }
    });

    if (opts.min && opts.indent !== undefined && opts.indent !== 0) {
      throw new Error('prettyFormat: Cannot run with min option and indent');
    }
  }

  function normalizeOptions(opts) {
    var result = {};
    Object.keys(DEFAULTS).forEach(function (key) {
      return result[key] = opts.hasOwnProperty(key) ? opts[key] : DEFAULTS[key];
    });

    if (result.min) {
      result.indent = 0;
    }

    return result;
  }

  function createIndent(indent) {
    return new Array(indent + 1).join(' ');
  }

  function prettyFormat(val, opts) {
    if (!opts) {
      opts = DEFAULTS;
    } else {
      validateOptions(opts);
      opts = normalizeOptions(opts);
    }

    var indent = void 0;
    var refs = void 0;
    var prevIndent = '';
    var currentDepth = 0;
    var spacing = opts.min ? ' ' : '\n';
    var edgeSpacing = opts.min ? '' : '\n';

    if (opts && opts.plugins.length) {
      indent = createIndent(opts.indent);
      refs = [];
      var pluginsResult = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
      if (pluginsResult) return pluginsResult;
    }

    var basicResult = printBasicValue(val, opts.printFunctionName, opts.escapeRegex);
    if (basicResult) return basicResult;
    if (!indent) indent = createIndent(opts.indent);
    if (!refs) refs = [];
    return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
  }

  module.exports = prettyFormat;
},115,[116],"node_modules/pretty-format/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ESCAPED_CHARACTERS = /(\\|\"|\')/g;

  module.exports = function printString(val) {
    return val.replace(ESCAPED_CHARACTERS, '\\$1');
  };
},116,[],"node_modules/pretty-format/printString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  !function (global) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = (typeof module === "undefined" ? "undefined" : _typeof(module)) === "object";
    var runtime = global.regeneratorRuntime;

    if (runtime) {
      if (inModule) {
        module.exports = runtime;
      }

      return;
    }

    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    runtime.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    runtime.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    runtime.AsyncIterator = AsyncIterator;

    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    runtime.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(function () {
    return this;
  }() || Function("return this")());
},117,[],"node_modules/regenerator-runtime/runtime.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventTarget = _require(_dependencyMap[0], 'event-target-shim');

  var RCTNetworking = _require(_dependencyMap[1], 'RCTNetworking');

  var base64 = _require(_dependencyMap[2], 'base64-js');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var warning = _require(_dependencyMap[4], 'fbjs/lib/warning');

  var BlobManager = _require(_dependencyMap[5], 'BlobManager');

  if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
  }

  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

  var XMLHttpRequestEventTarget = function (_EventTarget) {
    _inherits(XMLHttpRequestEventTarget, _EventTarget);

    function XMLHttpRequestEventTarget() {
      _classCallCheck(this, XMLHttpRequestEventTarget);

      return _possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).apply(this, arguments));
    }

    return XMLHttpRequestEventTarget;
  }(EventTarget.apply(undefined, REQUEST_EVENTS));

  var XMLHttpRequest = function (_EventTarget2) {
    _inherits(XMLHttpRequest, _EventTarget2);

    _createClass(XMLHttpRequest, null, [{
      key: "setInterceptor",
      value: function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }]);

    function XMLHttpRequest() {
      _classCallCheck(this, XMLHttpRequest);

      var _this2 = _possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

      _this2.UNSENT = UNSENT;
      _this2.OPENED = OPENED;
      _this2.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this2.LOADING = LOADING;
      _this2.DONE = DONE;
      _this2.readyState = UNSENT;
      _this2.status = 0;
      _this2.timeout = 0;
      _this2.withCredentials = true;
      _this2.upload = new XMLHttpRequestEventTarget();
      _this2._aborted = false;
      _this2._hasError = false;
      _this2._method = null;
      _this2._response = '';
      _this2._url = null;
      _this2._timedOut = false;
      _this2._trackingName = 'unknown';
      _this2._incrementalEvents = false;

      _this2._reset();

      return _this2;
    }

    _createClass(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};

        this._clearSubscriptions();

        this._timedOut = false;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total: total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);

          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }

          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }

        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }

        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);

        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }

        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded: loaded,
          total: total
        });
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }

            this._hasError = true;

            if (timeOutError) {
              this._timedOut = true;
            }
          }

          this._clearSubscriptions();

          this._requestId = null;
          this.setReadyState(this.DONE);

          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(function (sub) {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }

        var headers = this.responseHeaders || {};
        return Object.keys(headers).map(function (headerName) {
          return headerName + ': ' + headers[headerName];
        }).join('\r\n');
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];

        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }

        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }

        if (!url) {
          throw new Error('Cannot load an empty url');
        }

        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        var _this3 = this;

        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        if (this._sent) {
          throw new Error('Request has already been sent');
        }

        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
          return _this3.__didUploadProgress.apply(_this3, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
          return _this3.__didReceiveResponse.apply(_this3, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
          return _this3.__didReceiveData.apply(_this3, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
          return _this3.__didReceiveIncrementalData.apply(_this3, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
          return _this3.__didReceiveDataProgress.apply(_this3, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
          return _this3.__didCompleteResponse.apply(_this3, _toConsumableArray(args));
        }));

        var nativeResponseType = 'text';

        if (this._responseType === 'arraybuffer') {
          nativeResponseType = 'base64';
        }

        if (this._responseType === 'blob') {
          nativeResponseType = 'blob';
        }

        invariant(this._method, 'Request method needs to be defined.');
        invariant(this._url, 'Request URL needs to be defined.');
        RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._requestId) {
          RCTNetworking.abortRequest(this._requestId);
        }

        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();

          this.setReadyState(this.DONE);
        }

        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }

        _get(XMLHttpRequest.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
      }
    }, {
      key: "responseType",
      get: function get() {
        return this._responseType;
      },
      set: function set(responseType) {
        if (this._sent) {
          throw new Error('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The ' + 'response type cannot be set after the request has been sent.');
        }

        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          warning(false, "The provided value '" + responseType + "' is not a valid 'responseType'.");
          return;
        }

        invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', "The provided value '" + responseType + "' is unsupported in this environment.");

        if (responseType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
        }

        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function get() {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + ("is set to '' or 'text', but it is '" + this._responseType + "'."));
        }

        if (this.readyState < LOADING) {
          return '';
        }

        return this._response;
      }
    }, {
      key: "response",
      get: function get() {
        var responseType = this.responseType;

        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }

        if (this.readyState !== DONE) {
          return null;
        }

        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }

        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;

          case 'arraybuffer':
            this._cachedResponse = base64.toByteArray(this._response).buffer;
            break;

          case 'blob':
            if (_typeof(this._response) === 'object' && this._response) {
              this._cachedResponse = BlobManager.createFromOptions(this._response);
            } else {
              throw new Error("Invalid response for blob: " + this._response);
            }

            break;

          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }

            break;

          default:
            this._cachedResponse = null;
        }

        return this._cachedResponse;
      }
    }]);

    return XMLHttpRequest;
  }(EventTarget.apply(undefined, _toConsumableArray(XHR_EVENTS)));

  XMLHttpRequest.UNSENT = UNSENT;
  XMLHttpRequest.OPENED = OPENED;
  XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
  XMLHttpRequest.LOADING = LOADING;
  XMLHttpRequest.DONE = DONE;
  XMLHttpRequest._interceptor = null;
  module.exports = XMLHttpRequest;
},118,[119,123,128,19,20,130],"XMLHttpRequest");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

    var Commons = _require(_dependencyMap[0], "./commons");

    var CustomEventTarget = _require(_dependencyMap[1], "./custom-event-target");

    var EventWrapper = _require(_dependencyMap[2], "./event-wrapper");

    var LISTENERS = Commons.LISTENERS;
    var CAPTURE = Commons.CAPTURE;
    var BUBBLE = Commons.BUBBLE;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;
    var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
    var createEventWrapper = EventWrapper.createEventWrapper;
    var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;
    var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

    var EventTarget = module.exports = function EventTarget() {
        if (this instanceof EventTarget) {
            Object.defineProperty(this, LISTENERS, {
                value: Object.create(null)
            });
        } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
            return defineCustomEventTarget(EventTarget, arguments[0]);
        } else if (arguments.length > 0) {
            var types = Array(arguments.length);

            for (var i = 0; i < arguments.length; ++i) {
                types[i] = arguments[i];
            }

            return defineCustomEventTarget(EventTarget, types);
        } else {
            throw new TypeError("Cannot call a class as a function");
        }
    };

    EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
        constructor: {
            value: EventTarget,
            writable: true,
            configurable: true
        },
        addEventListener: {
            value: function addEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                if (typeof listener !== "function" && (typeof listener === "undefined" ? "undefined" : _typeof(listener)) !== "object") {
                    throw new TypeError("\"listener\" is not an object.");
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var node = this[LISTENERS][type];

                if (node == null) {
                    this[LISTENERS][type] = newNode(listener, kind);
                    return true;
                }

                var prev = null;

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        return false;
                    }

                    prev = node;
                    node = node.next;
                }

                prev.next = newNode(listener, kind);
                return true;
            },
            configurable: true,
            writable: true
        },
        removeEventListener: {
            value: function removeEventListener(type, listener, capture) {
                if (listener == null) {
                    return false;
                }

                var kind = capture ? CAPTURE : BUBBLE;
                var prev = null;
                var node = this[LISTENERS][type];

                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        if (prev == null) {
                            this[LISTENERS][type] = node.next;
                        } else {
                            prev.next = node.next;
                        }

                        return true;
                    }

                    prev = node;
                    node = node.next;
                }

                return false;
            },
            configurable: true,
            writable: true
        },
        dispatchEvent: {
            value: function dispatchEvent(event) {
                var node = this[LISTENERS][event.type];

                if (node == null) {
                    return true;
                }

                var wrapped = createEventWrapper(event, this);

                while (node != null) {
                    if (typeof node.listener === "function") {
                        node.listener.call(this, wrapped);
                    } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                        node.listener.handleEvent(wrapped);
                    }

                    if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
                        break;
                    }

                    node = node.next;
                }

                return !wrapped.defaultPrevented;
            },
            configurable: true,
            writable: true
        }
    });
},119,[120,121,122],"node_modules/event-target-shim/lib/event-target.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
    return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
  };
  exports.LISTENERS = createUniqueKey("listeners");
  exports.CAPTURE = 1;
  exports.BUBBLE = 2;
  exports.ATTRIBUTE = 3;

  exports.newNode = function newNode(listener, kind) {
    return {
      listener: listener,
      kind: kind,
      next: null
    };
  };
},120,[],"node_modules/event-target-shim/lib/commons.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

    var Commons = _require(_dependencyMap[0], "./commons");

    var LISTENERS = Commons.LISTENERS;
    var ATTRIBUTE = Commons.ATTRIBUTE;
    var newNode = Commons.newNode;

    function getAttributeListener(eventTarget, type) {
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                return node.listener;
            }

            node = node.next;
        }

        return null;
    }

    function setAttributeListener(eventTarget, type, listener) {
        if (typeof listener !== "function" && (typeof listener === "undefined" ? "undefined" : _typeof(listener)) !== "object") {
            listener = null;
        }

        var prev = null;
        var node = eventTarget[LISTENERS][type];

        while (node != null) {
            if (node.kind === ATTRIBUTE) {
                if (prev == null) {
                    eventTarget[LISTENERS][type] = node.next;
                } else {
                    prev.next = node.next;
                }
            } else {
                prev = node;
            }

            node = node.next;
        }

        if (listener != null) {
            if (prev == null) {
                eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
            } else {
                prev.next = newNode(listener, ATTRIBUTE);
            }
        }
    }

    exports.defineCustomEventTarget = function (EventTargetBase, types) {
        function EventTarget() {
            EventTargetBase.call(this);
        }

        var descripter = {
            constructor: {
                value: EventTarget,
                configurable: true,
                writable: true
            }
        };
        types.forEach(function (type) {
            descripter["on" + type] = {
                get: function get() {
                    return getAttributeListener(this, type);
                },
                set: function set(listener) {
                    setAttributeListener(this, type, listener);
                },
                configurable: true,
                enumerable: true
            };
        });
        EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);
        return EventTarget;
    };
},121,[120],"node_modules/event-target-shim/lib/custom-event-target.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var createUniqueKey = _require(_dependencyMap[0], "./commons").createUniqueKey;

    var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");
    var CANCELED_FLAG = createUniqueKey("canceled_flag");
    var ORIGINAL_EVENT = createUniqueKey("original_event");
    var wrapperPrototypeDefinition = Object.freeze({
        stopPropagation: Object.freeze({
            value: function stopPropagation() {
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopPropagation === "function") {
                    e.stopPropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        stopImmediatePropagation: Object.freeze({
            value: function stopImmediatePropagation() {
                this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;
                var e = this[ORIGINAL_EVENT];

                if (typeof e.stopImmediatePropagation === "function") {
                    e.stopImmediatePropagation();
                }
            },
            writable: true,
            configurable: true
        }),
        preventDefault: Object.freeze({
            value: function preventDefault() {
                if (this.cancelable === true) {
                    this[CANCELED_FLAG] = true;
                }

                var e = this[ORIGINAL_EVENT];

                if (typeof e.preventDefault === "function") {
                    e.preventDefault();
                }
            },
            writable: true,
            configurable: true
        }),
        defaultPrevented: Object.freeze({
            get: function defaultPrevented() {
                return this[CANCELED_FLAG];
            },
            enumerable: true,
            configurable: true
        })
    });
    exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

    exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
        var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
        var propertyDefinition = {
            type: {
                value: event.type,
                enumerable: true
            },
            target: {
                value: eventTarget,
                enumerable: true
            },
            currentTarget: {
                value: eventTarget,
                enumerable: true
            },
            eventPhase: {
                value: 2,
                enumerable: true
            },
            bubbles: {
                value: Boolean(event.bubbles),
                enumerable: true
            },
            cancelable: {
                value: Boolean(event.cancelable),
                enumerable: true
            },
            timeStamp: {
                value: timeStamp,
                enumerable: true
            },
            isTrusted: {
                value: false,
                enumerable: true
            }
        };
        propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[CANCELED_FLAG] = {
            value: false,
            writable: true
        };
        propertyDefinition[ORIGINAL_EVENT] = {
            value: event
        };

        if (typeof event.detail !== "undefined") {
            propertyDefinition.detail = {
                value: event.detail,
                enumerable: true
            };
        }

        return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
    };
},122,[120],"node_modules/event-target-shim/lib/event-wrapper.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var MissingNativeEventEmitterShim = _require(_dependencyMap[0], 'MissingNativeEventEmitterShim');

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var RCTNetworkingNative = _require(_dependencyMap[2], 'NativeModules').Networking;

  var convertRequestBody = _require(_dependencyMap[3], 'convertRequestBody');

  function convertHeadersMapToArray(headers) {
    var headerArray = [];

    for (var name in headers) {
      headerArray.push([name, headers[name]]);
    }

    return headerArray;
  }

  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var RCTNetworking = function (_NativeEventEmitter) {
    _inherits(RCTNetworking, _NativeEventEmitter);

    function RCTNetworking() {
      _classCallCheck(this, RCTNetworking);

      var _this = _possibleConstructorReturn(this, (RCTNetworking.__proto__ || Object.getPrototypeOf(RCTNetworking)).call(this, RCTNetworkingNative));

      _this.isAvailable = true;
      return _this;
    }

    _createClass(RCTNetworking, [{
      key: "sendRequest",
      value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = convertRequestBody(data);

        if (body && body.formData) {
          body.formData = body.formData.map(function (part) {
            return _extends({}, part, {
              headers: convertHeadersMapToArray(part.headers)
            });
          });
        }

        var requestId = generateRequestId();
        RCTNetworkingNative.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), _extends({}, body, {
          trackingName: trackingName
        }), responseType, incrementalUpdates, timeout, withCredentials);
        callback(requestId);
      }
    }, {
      key: "abortRequest",
      value: function abortRequest(requestId) {
        RCTNetworkingNative.abortRequest(requestId);
      }
    }, {
      key: "clearCookies",
      value: function clearCookies(callback) {
        RCTNetworkingNative.clearCookies(callback);
      }
    }]);

    return RCTNetworking;
  }(NativeEventEmitter);

  if (__DEV__ && !RCTNetworkingNative) {
    var MissingNativeRCTNetworkingShim = function (_MissingNativeEventEm) {
      _inherits(MissingNativeRCTNetworkingShim, _MissingNativeEventEm);

      function MissingNativeRCTNetworkingShim() {
        _classCallCheck(this, MissingNativeRCTNetworkingShim);

        return _possibleConstructorReturn(this, (MissingNativeRCTNetworkingShim.__proto__ || Object.getPrototypeOf(MissingNativeRCTNetworkingShim)).call(this, 'RCTNetworking', 'Networking'));
      }

      _createClass(MissingNativeRCTNetworkingShim, [{
        key: "sendRequest",
        value: function sendRequest() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "abortRequest",
        value: function abortRequest() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "clearCookies",
        value: function clearCookies() {
          this.throwMissingNativeModule();
        }
      }]);

      return MissingNativeRCTNetworkingShim;
    }(MissingNativeEventEmitterShim);

    RCTNetworking = new MissingNativeRCTNetworkingShim();
  } else {
    RCTNetworking = new RCTNetworking();
  }

  module.exports = RCTNetworking;
},123,[124,125,67,126],"RCTNetworking");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EmitterSubscription = _require(_dependencyMap[0], 'EmitterSubscription');

  var EventEmitter = _require(_dependencyMap[1], 'EventEmitter');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var MissingNativeEventEmitterShim = function (_EventEmitter) {
    _inherits(MissingNativeEventEmitterShim, _EventEmitter);

    function MissingNativeEventEmitterShim(nativeModuleName, nativeEventEmitterName) {
      _classCallCheck(this, MissingNativeEventEmitterShim);

      var _this = _possibleConstructorReturn(this, (MissingNativeEventEmitterShim.__proto__ || Object.getPrototypeOf(MissingNativeEventEmitterShim)).call(this, null));

      _this.isAvailable = false;
      _this._nativeModuleName = nativeModuleName;
      _this._nativeEventEmitterName = nativeEventEmitterName;
      return _this;
    }

    _createClass(MissingNativeEventEmitterShim, [{
      key: "throwMissingNativeModule",
      value: function throwMissingNativeModule() {
        invariant(false, "Cannot use '" + this._nativeEventEmitterName + "' module when " + ("native '" + this._nativeModuleName + "' is not included in the build. ") + ("Either include it, or check '" + this._nativeEventEmitterName + "'.isAvailable ") + 'before calling any methods.');
      }
    }, {
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        this.throwMissingNativeModule();
      }
    }]);

    return MissingNativeEventEmitterShim;
  }(EventEmitter);

  module.exports = MissingNativeEventEmitterShim;
},124,[85,84,19],"MissingNativeEventEmitterShim");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var RCTDeviceEventEmitter = _require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var NativeEventEmitter = function (_EventEmitter) {
    _inherits(NativeEventEmitter, _EventEmitter);

    function NativeEventEmitter(nativeModule) {
      _classCallCheck(this, NativeEventEmitter);

      var _this = _possibleConstructorReturn(this, (NativeEventEmitter.__proto__ || Object.getPrototypeOf(NativeEventEmitter)).call(this, RCTDeviceEventEmitter.sharedSubscriber));

      if (Platform.OS === 'ios') {
        invariant(nativeModule, 'Native module cannot be null.');
        _this._nativeModule = nativeModule;
      }

      return _this;
    }

    _createClass(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (this._nativeModule != null) {
          this._nativeModule.addListener(eventType);
        }

        return _get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        invariant(eventType, 'eventType argument is required.');
        var count = this.listeners(eventType).length;

        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(count);
        }

        _get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(1);
        }

        _get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
      }
    }]);

    return NativeEventEmitter;
  }(EventEmitter);

  module.exports = NativeEventEmitter;
},125,[84,75,83,19],"NativeEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var binaryToBase64 = _require(_dependencyMap[0], 'binaryToBase64');

  var Blob = _require(_dependencyMap[1], 'Blob');

  var FormData = _require(_dependencyMap[2], 'FormData');

  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }

    if (body instanceof Blob) {
      return {
        blob: body.data
      };
    }

    if (body instanceof FormData) {
      return {
        formData: body.getParts()
      };
    }

    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      return {
        base64: binaryToBase64(body)
      };
    }

    return body;
  }

  module.exports = convertRequestBody;
},126,[127,129,132],"convertRequestBody");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var base64 = _require(_dependencyMap[0], 'base64-js');

  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      data = new Uint8Array(data);
    }

    if (data instanceof Uint8Array) {
      return base64.fromByteArray(data);
    }

    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }

    var _data = data,
        buffer = _data.buffer,
        byteOffset = _data.byteOffset,
        byteLength = _data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }

  module.exports = binaryToBase64;
},127,[128],"binaryToBase64");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;

  function placeHoldersCount(b64) {
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
  }

  function byteLength(b64) {
    return b64.length * 3 / 4 - placeHoldersCount(b64);
  }

  function toByteArray(b64) {
    var i, l, tmp, placeHolders, arr;
    var len = b64.length;
    placeHolders = placeHoldersCount(b64);
    arr = new Arr(len * 3 / 4 - placeHolders);
    l = placeHolders > 0 ? len - 4 : len;
    var L = 0;

    for (i = 0; i < l; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = tmp >> 16 & 0xFF;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var output = '';
    var parts = [];
    var maxChunkLength = 16383;

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[tmp << 4 & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      output += lookup[tmp >> 10];
      output += lookup[tmp >> 4 & 0x3F];
      output += lookup[tmp << 2 & 0x3F];
      output += '=';
    }

    parts.push(output);
    return parts.join('');
  }
},128,[],"node_modules/base64-js/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Blob = function () {
    function Blob() {
      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments[1];

      _classCallCheck(this, Blob);

      var BlobManager = _require(_dependencyMap[0], 'BlobManager');

      this.data = BlobManager.createFromParts(parts, options).data;
    }

    _createClass(Blob, [{
      key: "slice",
      value: function slice(start, end) {
        var BlobManager = _require(_dependencyMap[0], 'BlobManager');

        var _data = this.data,
            offset = _data.offset,
            size = _data.size;

        if (typeof start === 'number') {
          if (start > size) {
            start = size;
          }

          offset += start;
          size -= start;

          if (typeof end === 'number') {
            if (end < 0) {
              end = this.size + end;
            }

            size = end - start;
          }
        }

        return BlobManager.createFromOptions({
          blobId: this.data.blobId,
          offset: offset,
          size: size
        });
      }
    }, {
      key: "close",
      value: function close() {
        var BlobManager = _require(_dependencyMap[0], 'BlobManager');

        BlobManager.release(this.data.blobId);
        this.data = null;
      }
    }, {
      key: "data",
      set: function set(data) {
        this._data = data;
      },
      get: function get() {
        if (!this._data) {
          throw new Error('Blob has been closed and is no longer available');
        }

        return this._data;
      }
    }, {
      key: "size",
      get: function get() {
        return this.data.size;
      }
    }, {
      key: "type",
      get: function get() {
        return this.data.type || '';
      }
    }]);

    return Blob;
  }();

  module.exports = Blob;
},129,[130],"Blob");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Blob = _require2(_dependencyMap[0], 'Blob');

  var BlobRegistry = _require2(_dependencyMap[1], 'BlobRegistry');

  var _require = _require2(_dependencyMap[2], 'NativeModules'),
      BlobModule = _require.BlobModule;

  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }

  var BlobManager = function () {
    function BlobManager() {
      _classCallCheck(this, BlobManager);
    }

    _createClass(BlobManager, null, [{
      key: "createFromParts",
      value: function createFromParts(parts, options) {
        var blobId = uuidv4();
        var items = parts.map(function (part) {
          if (part instanceof ArrayBuffer || global.ArrayBufferView && part instanceof global.ArrayBufferView) {
            throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
          }

          if (part instanceof Blob) {
            return {
              data: part.data,
              type: 'blob'
            };
          } else {
            return {
              data: String(part),
              type: 'string'
            };
          }
        });
        var size = items.reduce(function (acc, curr) {
          if (curr.type === 'string') {
            return acc + global.unescape(encodeURI(curr.data)).length;
          } else {
            return acc + curr.data.size;
          }
        }, 0);
        BlobModule.createFromParts(items, blobId);
        return BlobManager.createFromOptions({
          blobId: blobId,
          offset: 0,
          size: size,
          type: options ? options.type : '',
          lastModified: options ? options.lastModified : Date.now()
        });
      }
    }, {
      key: "createFromOptions",
      value: function createFromOptions(options) {
        BlobRegistry.register(options.blobId);
        return _extends(Object.create(Blob.prototype), {
          data: options
        });
      }
    }, {
      key: "release",
      value: function release(blobId) {
        BlobRegistry.unregister(blobId);

        if (BlobRegistry.has(blobId)) {
          return;
        }

        BlobModule.release(blobId);
      }
    }, {
      key: "addNetworkingHandler",
      value: function addNetworkingHandler() {
        BlobModule.addNetworkingHandler();
      }
    }, {
      key: "addWebSocketHandler",
      value: function addWebSocketHandler(socketId) {
        BlobModule.addWebSocketHandler(socketId);
      }
    }, {
      key: "removeWebSocketHandler",
      value: function removeWebSocketHandler(socketId) {
        BlobModule.removeWebSocketHandler(socketId);
      }
    }, {
      key: "sendOverSocket",
      value: function sendOverSocket(blob, socketId) {
        BlobModule.sendOverSocket(blob.data, socketId);
      }
    }]);

    return BlobManager;
  }();

  BlobManager.isAvailable = !!BlobModule;
  module.exports = BlobManager;
},130,[129,131,67],"BlobManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var registry = {};

  var register = function register(id) {
    if (registry[id]) {
      registry[id]++;
    } else {
      registry[id] = 1;
    }
  };

  var unregister = function unregister(id) {
    if (registry[id]) {
      registry[id]--;

      if (registry[id] <= 0) {
        delete registry[id];
      }
    }
  };

  var has = function has(id) {
    return registry[id] && registry[id] > 0;
  };

  module.exports = {
    register: register,
    unregister: unregister,
    has: has
  };
},131,[],"BlobRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var FormData = function () {
    function FormData() {
      _classCallCheck(this, FormData);

      this._parts = [];
    }

    _createClass(FormData, [{
      key: "append",
      value: function append(key, value) {
        this._parts.push([key, value]);
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              name = _ref2[0],
              value = _ref2[1];

          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };

          if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object' && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += '; filename="' + value.name + '"';
            }

            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }

            return _extends({}, value, {
              headers: headers,
              fieldName: name
            });
          }

          return {
            string: String(value),
            headers: headers,
            fieldName: name
          };
        });
      }
    }]);

    return FormData;
  }();

  module.exports = FormData;
},132,[],"FormData");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Blob = _require(_dependencyMap[0], 'Blob');

  var EventTarget = _require(_dependencyMap[1], 'event-target-shim');

  var NativeEventEmitter = _require(_dependencyMap[2], 'NativeEventEmitter');

  var BlobManager = _require(_dependencyMap[3], 'BlobManager');

  var NativeModules = _require(_dependencyMap[4], 'NativeModules');

  var WebSocketEvent = _require(_dependencyMap[5], 'WebSocketEvent');

  var base64 = _require(_dependencyMap[6], 'base64-js');

  var binaryToBase64 = _require(_dependencyMap[7], 'binaryToBase64');

  var invariant = _require(_dependencyMap[8], 'fbjs/lib/invariant');

  var WebSocketModule = NativeModules.WebSocketModule;
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;

  var WebSocket = function (_EventTarget) {
    _inherits(WebSocket, _EventTarget);

    function WebSocket(url, protocols, options) {
      _classCallCheck(this, WebSocket);

      var _this = _possibleConstructorReturn(this, (WebSocket.__proto__ || Object.getPrototypeOf(WebSocket)).call(this));

      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;

      if (typeof protocols === 'string') {
        protocols = [protocols];
      }

      var _ref = options || {},
          _ref$headers = _ref.headers,
          headers = _ref$headers === undefined ? {} : _ref$headers,
          unrecognized = _objectWithoutProperties(_ref, ["headers"]);

      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }

      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }

      if (!Array.isArray(protocols)) {
        protocols = null;
      }

      if (!WebSocket.isAvailable) {
        throw new Error('Cannot initialize WebSocket module. ' + 'Native module WebSocketModule is missing.');
      }

      _this._eventEmitter = new NativeEventEmitter(WebSocketModule);
      _this._socketId = nextWebSocketId++;

      _this._registerEvents();

      WebSocketModule.connect(url, protocols, {
        headers: headers
      }, _this._socketId);
      return _this;
    }

    _createClass(WebSocket, [{
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }

        this.readyState = this.CLOSING;

        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        if (data instanceof Blob) {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
          BlobManager.sendOverSocket(data, this._socketId);
          return;
        }

        if (typeof data === 'string') {
          WebSocketModule.send(data, this._socketId);
          return;
        }

        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          WebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
          return;
        }

        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        WebSocketModule.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        if (WebSocketModule.close.length === 3) {
          var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
          var closeReason = typeof reason === 'string' ? reason : '';
          WebSocketModule.close(statusCode, closeReason, this._socketId);
        } else {
          WebSocketModule.close(this._socketId);
        }

        if (BlobManager.isAvailable && this._binaryType === 'blob') {
          BlobManager.removeWebSocketHandler(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        var _this2 = this;

        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          var data = ev.data;

          switch (ev.type) {
            case 'binary':
              data = base64.toByteArray(ev.data).buffer;
              break;

            case 'blob':
              data = BlobManager.createFromOptions(ev.data);
              break;
          }

          _this2.dispatchEvent(new WebSocketEvent('message', {
            data: data
          }));
        }), this._eventEmitter.addListener('websocketOpen', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.OPEN;

          _this2.dispatchEvent(new WebSocketEvent('open'));
        }), this._eventEmitter.addListener('websocketClosed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('close', {
            code: ev.code,
            reason: ev.reason
          }));

          _this2._unregisterEvents();

          _this2.close();
        }), this._eventEmitter.addListener('websocketFailed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('error', {
            message: ev.message
          }));

          _this2.dispatchEvent(new WebSocketEvent('close', {
            message: ev.message
          }));

          _this2._unregisterEvents();

          _this2.close();
        })];
      }
    }, {
      key: "binaryType",
      get: function get() {
        return this._binaryType;
      },
      set: function set(binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error('binaryType must be either \'blob\' or \'arraybuffer\'');
        }

        if (this._binaryType === 'blob' || binaryType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');

          if (binaryType === 'blob') {
            BlobManager.addWebSocketHandler(this._socketId);
          } else {
            BlobManager.removeWebSocketHandler(this._socketId);
          }
        }

        this._binaryType = binaryType;
      }
    }]);

    return WebSocket;
  }(EventTarget.apply(undefined, WEBSOCKET_EVENTS));

  WebSocket.CONNECTING = CONNECTING;
  WebSocket.OPEN = OPEN;
  WebSocket.CLOSING = CLOSING;
  WebSocket.CLOSED = CLOSED;
  WebSocket.isAvailable = !!WebSocketModule;
  module.exports = WebSocket;
},133,[129,119,125,130,67,134,128,127,19],"WebSocket");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
    _classCallCheck(this, WebSocketEvent);

    this.type = type.toString();

    _extends(this, eventInitDict);
  };

  module.exports = WebSocketEvent;
},134,[],"WebSocketEvent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Blob = _require(_dependencyMap[0], 'Blob');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var File = function (_Blob) {
    _inherits(File, _Blob);

    function File(parts, name, options) {
      _classCallCheck(this, File);

      invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');

      var _this = _possibleConstructorReturn(this, (File.__proto__ || Object.getPrototypeOf(File)).call(this, parts, options));

      _this.data.name = name;
      return _this;
    }

    _createClass(File, [{
      key: "name",
      get: function get() {
        invariant(this.data.name != null, 'Files must have a name set.');
        return this.data.name;
      }
    }, {
      key: "lastModified",
      get: function get() {
        return this.data.lastModified || 0;
      }
    }]);

    return File;
  }(Blob);

  module.exports = File;
},135,[129,19],"File");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventTarget = _require2(_dependencyMap[0], 'event-target-shim');

  var Blob = _require2(_dependencyMap[1], 'Blob');

  var _require = _require2(_dependencyMap[2], 'NativeModules'),
      FileReaderModule = _require.FileReaderModule;

  var READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];
  var EMPTY = 0;
  var LOADING = 1;
  var DONE = 2;

  var FileReader = function (_EventTarget) {
    _inherits(FileReader, _EventTarget);

    function FileReader() {
      _classCallCheck(this, FileReader);

      var _this = _possibleConstructorReturn(this, (FileReader.__proto__ || Object.getPrototypeOf(FileReader)).call(this));

      _this.EMPTY = EMPTY;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this._aborted = false;
      _this._subscriptions = [];

      _this._reset();

      return _this;
    }

    _createClass(FileReader, [{
      key: "_reset",
      value: function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        this._subscriptions.forEach(function (sub) {
          return sub.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_setReadyState",
      value: function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._error) {
            this.dispatchEvent({
              type: 'error'
            });
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer() {
        throw new Error('FileReader.readAsArrayBuffer is not implemented');
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(blob) {
        var _this2 = this;

        this._aborted = false;
        FileReaderModule.readAsDataURL(blob.data).then(function (text) {
          if (_this2._aborted) {
            return;
          }

          _this2._result = text;

          _this2._setReadyState(DONE);
        }, function (error) {
          if (_this2._aborted) {
            return;
          }

          _this2._error = error;

          _this2._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsText",
      value: function readAsText(blob) {
        var _this3 = this;

        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';
        this._aborted = false;
        FileReaderModule.readAsText(blob.data, encoding).then(function (text) {
          if (_this3._aborted) {
            return;
          }

          _this3._result = text;

          _this3._setReadyState(DONE);
        }, function (error) {
          if (_this3._aborted) {
            return;
          }

          _this3._error = error;

          _this3._setReadyState(DONE);
        });
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._readyState !== EMPTY && this._readyState !== DONE) {
          this._reset();

          this._setReadyState(DONE);
        }

        this._reset();
      }
    }, {
      key: "readyState",
      get: function get() {
        return this._readyState;
      }
    }, {
      key: "error",
      get: function get() {
        return this._error;
      }
    }, {
      key: "result",
      get: function get() {
        return this._result;
      }
    }]);

    return FileReader;
  }(EventTarget.apply(undefined, READER_EVENTS));

  FileReader.EMPTY = EMPTY;
  FileReader.LOADING = LOADING;
  FileReader.DONE = DONE;
  module.exports = FileReader;
},136,[119,129,67],"FileReader");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Blob = _require2(_dependencyMap[0], 'Blob');

  var _require = _require2(_dependencyMap[1], 'NativeModules'),
      BlobModule = _require.BlobModule;

  var BLOB_URL_PREFIX = null;

  if (BlobModule && typeof BlobModule.BLOB_URI_SCHEME === 'string') {
    BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';

    if (typeof BlobModule.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += "//" + BlobModule.BLOB_URI_HOST + "/";
    }
  }

  var URL = function () {
    function URL() {
      _classCallCheck(this, URL);

      throw new Error('Creating URL objects is not supported yet.');
    }

    _createClass(URL, null, [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }

        return "" + BLOB_URL_PREFIX + blob.data.blobId + "?offset=" + blob.data.offset + "&size=" + blob.size;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {}
    }]);

    return URL;
  }();

  module.exports = URL;
},137,[129,67],"URL");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var AlertIOS = _require(_dependencyMap[0], 'AlertIOS');

  var NativeModules = _require(_dependencyMap[1], 'NativeModules');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var Alert = function () {
    function Alert() {
      _classCallCheck(this, Alert);
    }

    _createClass(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options, type) {
        if (Platform.OS === 'ios') {
          if (typeof type !== 'undefined') {
            console.warn('Alert.alert() with a 5th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
            AlertIOS.alert(title, message, buttons, type);
            return;
          }

          AlertIOS.alert(title, message, buttons);
        } else if (Platform.OS === 'android') {
          AlertAndroid.alert(title, message, buttons, options);
        }
      }
    }]);

    return Alert;
  }();

  var AlertAndroid = function () {
    function AlertAndroid() {
      _classCallCheck(this, AlertAndroid);
    }

    _createClass(AlertAndroid, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        var config = {
          title: title || '',
          message: message || ''
        };

        if (options) {
          config = _extends({}, config, {
            cancelable: options.cancelable
          });
        }

        var validButtons = buttons ? buttons.slice(0, 3) : [{
          text: 'OK'
        }];
        var buttonPositive = validButtons.pop();
        var buttonNegative = validButtons.pop();
        var buttonNeutral = validButtons.pop();

        if (buttonNeutral) {
          config = _extends({}, config, {
            buttonNeutral: buttonNeutral.text || ''
          });
        }

        if (buttonNegative) {
          config = _extends({}, config, {
            buttonNegative: buttonNegative.text || ''
          });
        }

        if (buttonPositive) {
          config = _extends({}, config, {
            buttonPositive: buttonPositive.text || ''
          });
        }

        NativeModules.DialogManagerAndroid.showAlert(config, function (errorMessage) {
          return console.warn(errorMessage);
        }, function (action, buttonKey) {
          if (action === NativeModules.DialogManagerAndroid.buttonClicked) {
            if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {
              buttonNeutral.onPress && buttonNeutral.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {
              buttonNegative.onPress && buttonNegative.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {
              buttonPositive.onPress && buttonPositive.onPress();
            }
          } else if (action === NativeModules.DialogManagerAndroid.dismissed) {
            options && options.onDismiss && options.onDismiss();
          }
        });
      }
    }]);

    return AlertAndroid;
  }();

  module.exports = Alert;
},138,[139,67,75],"Alert");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RCTAlertManager = _require(_dependencyMap[0], 'NativeModules').AlertManager;

  var AlertIOS = function () {
    function AlertIOS() {
      _classCallCheck(this, AlertIOS);
    }

    _createClass(AlertIOS, null, [{
      key: "alert",
      value: function alert(title, message, callbackOrButtons, type) {
        if (typeof type !== 'undefined') {
          console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          this.prompt(title, message, callbackOrButtons, type);
          return;
        }

        this.prompt(title, message, callbackOrButtons, 'default');
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments[4];
        var keyboardType = arguments[5];

        if (typeof type === 'function') {
          console.warn('You passed a callback function as the "type" argument to AlertIOS.prompt(). React Native is ' + 'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' + 'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' + 'keyboardType) and the old syntax will be removed in a future version.');
          var callback = type;
          RCTAlertManager.alertWithArgs({
            title: title || '',
            type: 'plain-text',
            defaultValue: message
          }, function (id, value) {
            callback(value);
          });
          return;
        }

        var callbacks = [];
        var buttons = [];
        var cancelButtonKey;
        var destructiveButtonKey;

        if (typeof callbackOrButtons === 'function') {
          callbacks = [callbackOrButtons];
        } else if (callbackOrButtons instanceof Array) {
          callbackOrButtons.forEach(function (btn, index) {
            callbacks[index] = btn.onPress;

            if (btn.style === 'cancel') {
              cancelButtonKey = String(index);
            } else if (btn.style === 'destructive') {
              destructiveButtonKey = String(index);
            }

            if (btn.text || index < (callbackOrButtons || []).length - 1) {
              var btnDef = {};
              btnDef[index] = btn.text || '';
              buttons.push(btnDef);
            }
          });
        }

        RCTAlertManager.alertWithArgs({
          title: title || '',
          message: message || undefined,
          buttons: buttons,
          type: type || undefined,
          defaultValue: defaultValue,
          cancelButtonKey: cancelButtonKey,
          destructiveButtonKey: destructiveButtonKey,
          keyboardType: keyboardType
        }, function (id, value) {
          var cb = callbacks[id];
          cb && cb(value);
        });
      }
    }]);

    return AlertIOS;
  }();

  module.exports = AlertIOS;
},139,[67],"AlertIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

  var NativeEventEmitter = _require(_dependencyMap[0], 'NativeEventEmitter');

  var RCTLocationObserver = _require(_dependencyMap[1], 'NativeModules').LocationObserver;

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var logError = _require(_dependencyMap[3], 'logError');

  var warning = _require(_dependencyMap[4], 'fbjs/lib/warning');

  var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

  var Platform = _require(_dependencyMap[5], 'Platform');

  var PermissionsAndroid = _require(_dependencyMap[6], 'PermissionsAndroid');

  var subscriptions = [];
  var updatesEnabled = false;
  var Geolocation = {
    setRNConfiguration: function setRNConfiguration(config) {
      if (RCTLocationObserver.setConfiguration) {
        RCTLocationObserver.setConfiguration(config);
      }
    },
    requestAuthorization: function requestAuthorization() {
      RCTLocationObserver.requestAuthorization();
    },
    getCurrentPosition: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(geo_success, geo_error, geo_options) {
        var hasPermission, status;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
                hasPermission = true;

                if (!(Platform.OS === 'android' && Platform.Version >= 23)) {
                  _context.next = 11;
                  break;
                }

                _context.next = 5;
                return PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);

              case 5:
                hasPermission = _context.sent;

                if (hasPermission) {
                  _context.next = 11;
                  break;
                }

                _context.next = 9;
                return PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);

              case 9:
                status = _context.sent;
                hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;

              case 11:
                if (hasPermission) {
                  RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
                }

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getCurrentPosition(_x, _x2, _x3) {
        return _ref.apply(this, arguments);
      }

      return getCurrentPosition;
    }(),
    watchPosition: function watchPosition(success, error, options) {
      if (!updatesEnabled) {
        RCTLocationObserver.startObserving(options || {});
        updatesEnabled = true;
      }

      var watchID = subscriptions.length;
      subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
      return watchID;
    },
    clearWatch: function clearWatch(watchID) {
      var sub = subscriptions[watchID];

      if (!sub) {
        return;
      }

      sub[0].remove();
      var sub1 = sub[1];
      sub1 && sub1.remove();
      subscriptions[watchID] = undefined;
      var noWatchers = true;

      for (var ii = 0; ii < subscriptions.length; ii++) {
        if (subscriptions[ii]) {
          noWatchers = false;
        }
      }

      if (noWatchers) {
        Geolocation.stopObserving();
      }
    },
    stopObserving: function stopObserving() {
      if (updatesEnabled) {
        RCTLocationObserver.stopObserving();
        updatesEnabled = false;

        for (var ii = 0; ii < subscriptions.length; ii++) {
          var sub = subscriptions[ii];

          if (sub) {
            warning(false, 'Called stopObserving with existing subscriptions.');
            sub[0].remove();
            var sub1 = sub[1];
            sub1 && sub1.remove();
          }
        }

        subscriptions = [];
      }
    }
  };
  module.exports = Geolocation;
},140,[125,67,19,141,20,75,142],"Geolocation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var logError = function logError() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };

  module.exports = logError;
},141,[],"logError");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var PermissionsAndroid = function () {
    function PermissionsAndroid() {
      _classCallCheck(this, PermissionsAndroid);

      this.PERMISSIONS = {
        READ_CALENDAR: 'android.permission.READ_CALENDAR',
        WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
        CAMERA: 'android.permission.CAMERA',
        READ_CONTACTS: 'android.permission.READ_CONTACTS',
        WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
        GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
        ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
        ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
        RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
        READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
        CALL_PHONE: 'android.permission.CALL_PHONE',
        READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
        WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
        ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
        USE_SIP: 'android.permission.USE_SIP',
        PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
        BODY_SENSORS: 'android.permission.BODY_SENSORS',
        SEND_SMS: 'android.permission.SEND_SMS',
        RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
        READ_SMS: 'android.permission.READ_SMS',
        RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
        RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
        READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
        WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
      };
      this.RESULTS = {
        GRANTED: 'granted',
        DENIED: 'denied',
        NEVER_ASK_AGAIN: 'never_ask_again'
      };
    }

    _createClass(PermissionsAndroid, [{
      key: "checkPermission",
      value: function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "check",
      value: function check(permission) {
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "requestPermission",
      value: function () {
        var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(permission, rationale) {
          var response;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
                  _context.next = 3;
                  return this.request(permission, rationale);

                case 3:
                  response = _context.sent;
                  return _context.abrupt("return", response === this.RESULTS.GRANTED);

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function requestPermission(_x, _x2) {
          return _ref.apply(this, arguments);
        }

        return requestPermission;
      }()
    }, {
      key: "request",
      value: function () {
        var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(permission, rationale) {
          var shouldShowRationale;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!rationale) {
                    _context2.next = 6;
                    break;
                  }

                  _context2.next = 3;
                  return NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission);

                case 3:
                  shouldShowRationale = _context2.sent;

                  if (!shouldShowRationale) {
                    _context2.next = 6;
                    break;
                  }

                  return _context2.abrupt("return", new Promise(function (resolve, reject) {
                    NativeModules.DialogManagerAndroid.showAlert(rationale, function () {
                      return reject(new Error('Error showing rationale'));
                    }, function () {
                      return resolve(NativeModules.PermissionsAndroid.requestPermission(permission));
                    });
                  }));

                case 6:
                  return _context2.abrupt("return", NativeModules.PermissionsAndroid.requestPermission(permission));

                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function request(_x3, _x4) {
          return _ref2.apply(this, arguments);
        }

        return request;
      }()
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);
      }
    }]);

    return PermissionsAndroid;
  }();

  PermissionsAndroid = new PermissionsAndroid();
  module.exports = PermissionsAndroid;
},142,[67],"PermissionsAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      _require(_dependencyMap[0], 'NativeModules').JSCHeapCapture.captureComplete(path, error);
    }
  };
  module.exports = HeapCapture;
},143,[67],"HeapCapture");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var SamplingProfiler = {
    poke: function poke(token) {
      var error = null;
      var result = null;

      try {
        result = global.pokeSamplingProfiler();

        if (result === null) {
          console.log('The JSC Sampling Profiler has started');
        } else {
          console.log('The JSC Sampling Profiler has stopped');
        }
      } catch (e) {
        console.log('Error occurred when restarting Sampling Profiler: ' + e.toString());
        error = e.toString();
      }

      var _require = _require2(_dependencyMap[0], 'NativeModules'),
          JSCSamplingProfiler = _require.JSCSamplingProfiler;

      JSCSamplingProfiler.operationComplete(token, result, error);
    }
  };
  module.exports = SamplingProfiler;
},144,[67],"SamplingProfiler");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    logIfNoNativeHook: function logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, [level].concat(_toConsumableArray(args)));
      } else {
        if (warningHandler && level === 'warn') {
          warningHandler.apply(undefined, _toConsumableArray(args));
        }
      }
    },
    logToConsole: function logToConsole(level) {
      var _console;

      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_console = console)[logFn].apply(_console, _toConsumableArray(args));
    },
    setWarningHandler: function setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  module.exports = RCTLog;
},145,[19],"RCTLog");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTDeviceEventEmitter = _require(_dependencyMap[0], 'RCTDeviceEventEmitter');

  var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;
  module.exports = RCTNativeAppEventEmitter;
},146,[83],"RCTNativeAppEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Systrace = _require(_dependencyMap[0], 'Systrace');

  var infoLog = _require(_dependencyMap[1], 'infoLog');

  var performanceNow = global.nativePerformanceNow || _require(_dependencyMap[2], 'fbjs/lib/performanceNow');

  var timespans = {};
  var extras = {};
  var cookies = {};
  var PRINT_TO_CONSOLE = false;
  var PerformanceLogger = {
    addTimespan: function addTimespan(key, lengthInMs, description) {
      if (timespans[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);
        }

        return;
      }

      timespans[key] = {
        description: description,
        totalTime: lengthInMs
      };
    },
    startTimespan: function startTimespan(key, description) {
      if (timespans[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);
        }

        return;
      }

      timespans[key] = {
        description: description,
        startTime: performanceNow()
      };
      cookies[key] = Systrace.beginAsyncEvent(key);

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'start: ' + key);
      }
    },
    stopTimespan: function stopTimespan(key) {
      var timespan = timespans[key];

      if (!timespan || !timespan.startTime) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);
        }

        return;
      }

      if (timespan.endTime) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
        }

        return;
      }

      timespan.endTime = performanceNow();
      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'end: ' + key);
      }

      Systrace.endAsyncEvent(key, cookies[key]);
      delete cookies[key];
    },
    clear: function clear() {
      timespans = {};
      extras = {};

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'clear');
      }
    },
    clearCompleted: function clearCompleted() {
      for (var _key in timespans) {
        if (timespans[_key].totalTime) {
          delete timespans[_key];
        }
      }

      extras = {};

      if (__DEV__ && PRINT_TO_CONSOLE) {
        infoLog('PerformanceLogger.js', 'clearCompleted');
      }
    },
    clearExceptTimespans: function clearExceptTimespans(keys) {
      timespans = Object.keys(timespans).reduce(function (previous, key) {
        if (keys.indexOf(key) !== -1) {
          previous[key] = timespans[key];
        }

        return previous;
      }, {});
      extras = {};
    },
    currentTimestamp: function currentTimestamp() {
      return performanceNow();
    },
    getTimespans: function getTimespans() {
      return timespans;
    },
    hasTimespan: function hasTimespan(key) {
      return !!timespans[key];
    },
    logTimespans: function logTimespans() {
      for (var _key2 in timespans) {
        if (timespans[_key2].totalTime) {
          infoLog(_key2 + ': ' + timespans[_key2].totalTime + 'ms');
        }
      }
    },
    addTimespans: function addTimespans(newTimespans, labels) {
      for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
        var label = labels[ii / 2];
        PerformanceLogger.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
      }
    },
    setExtra: function setExtra(key, value) {
      if (extras[key]) {
        if (__DEV__) {
          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {
            key: key,
            currentValue: extras[key],
            attemptedValue: value
          });
        }

        return;
      }

      extras[key] = value;
    },
    getExtras: function getExtras() {
      return extras;
    }
  };
  module.exports = PerformanceLogger;
},147,[71,148,76],"PerformanceLogger");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function infoLog() {
    var _console;

    return (_console = console).log.apply(_console, arguments);
  }

  module.exports = infoLog;
},148,[],"infoLog");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var JSDevSupportModule = {
    getJSHierarchy: function getJSHierarchy(tag) {
      var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
      var renderers = hook._renderers;
      var keys = Object.keys(renderers);
      var renderer = renderers[keys[0]];
      var result = renderer.getInspectorDataForViewTag(tag);
      var path = result.hierarchy.map(function (item) {
        return item.name;
      }).join(' -> ');

      _require(_dependencyMap[0], 'NativeModules').JSDevSupport.setResult(path, null);
    }
  };
  module.exports = JSDevSupportModule;
},149,[67],"JSDevSupportModule");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var MetroHMRClient = _require(_dependencyMap[2], 'metro/src/lib/bundle-modules/HMRClient');

  var HMRClient = {
    enable: function enable(platform, bundleEntry, host, port) {
      invariant(platform, 'Missing required parameter `platform`');
      invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');
      invariant(host, 'Missing required paramenter `host`');

      var HMRLoadingView = _require(_dependencyMap[3], 'HMRLoadingView');

      var wsHostPort = port !== null && port !== '' ? host + ":" + port : host;
      bundleEntry = bundleEntry.replace(/\.(bundle|delta)/, '.js');
      var wsUrl = "ws://" + wsHostPort + "/hot?" + ("platform=" + platform + "&") + ("bundleEntry=" + bundleEntry);
      var hmrClient = new MetroHMRClient(wsUrl);
      hmrClient.on('connection-error', function (e) {
        var error = "Hot loading isn't working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network";

        if (Platform.OS === 'ios') {
          error += "\n- Ensure that the Packager server URL is correctly set in AppDelegate";
        } else {
          error += "\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081";
        }

        error += "\n\nURL: " + host + ":" + port + "\n\nError: " + e.message;
        throw new Error(error);
      });
      hmrClient.on('update-start', function () {
        HMRLoadingView.showMessage('Hot Loading...');
      });
      hmrClient.on('update', function () {
        if (Platform.OS === 'ios') {
          var RCTRedBox = _require(_dependencyMap[4], 'NativeModules').RedBox;

          RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();
        } else {
          var RCTExceptionsManager = _require(_dependencyMap[4], 'NativeModules').ExceptionsManager;

          RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();
        }
      });
      hmrClient.on('update-done', function () {
        HMRLoadingView.hide();
      });
      hmrClient.on('error', function (data) {
        HMRLoadingView.hide();
        throw new Error(data.type + " " + data.message);
      });
      hmrClient.enable();
    }
  };
  module.exports = HMRClient;
},150,[75,19,151,154,67],"HMRClient");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], './MetroClient');
},151,[152],"node_modules/metro/src/lib/bundle-modules/HMRClient.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventEmitter = _require(_dependencyMap[0], 'eventemitter3');

  var MetroClient = function (_EventEmitter) {
    _inherits(MetroClient, _EventEmitter);

    function MetroClient(url) {
      _classCallCheck(this, MetroClient);

      var _this = _possibleConstructorReturn(this, (MetroClient.__proto__ || Object.getPrototypeOf(MetroClient)).call(this));

      _this._url = url;
      return _this;
    }

    _createClass(MetroClient, [{
      key: "enable",
      value: function enable() {
        var _this2 = this;

        if (this._ws) {
          this.disable();
        }

        this._ws = new global.WebSocket(this._url);

        this._ws.onerror = function (error) {
          _this2.emit('connection-error', error);
        };

        this._ws.onclose = function () {
          _this2.emit('close');
        };

        this._ws.onmessage = function (message) {
          var data = JSON.parse(message.data);

          switch (data.type) {
            case 'update-start':
              _this2.emit('update-start');

              break;

            case 'update':
              var _data$body = data.body;
              var modules = _data$body.modules,
                  sourceMappingURLs = _data$body.sourceMappingURLs,
                  sourceURLs = _data$body.sourceURLs;

              _this2.emit('update');

              modules.forEach(function (_ref, i) {
                var id = _ref.id,
                    code = _ref.code;
                code += '\n\n' + sourceMappingURLs[i];
                var injectFunction = typeof global.nativeInjectHMRUpdate === 'function' ? global.nativeInjectHMRUpdate : eval;
                injectFunction(code, sourceURLs[i]);
              });
              break;

            case 'update-done':
              _this2.emit('update-done');

              break;

            case 'error':
              _this2.emit('error', data.body);

              break;

            default:
              _this2.emit('error', {
                type: 'unknown-message',
                message: data
              });

          }
        };
      }
    }, {
      key: "disable",
      value: function disable() {
        if (this._ws) {
          this._ws.close();

          this._ws = undefined;
        }
      }
    }]);

    return MetroClient;
  }(EventEmitter);

  module.exports = MetroClient;
},152,[153],"node_modules/metro/src/lib/bundle-modules/MetroClient.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var has = Object.prototype.hasOwnProperty,
      prefix = '~';

  function Events() {}

  if (Object.create) {
    Events.prototype = Object.create(null);
    if (!new Events().__proto__) prefix = false;
  }

  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
      throw new TypeError('The listener must be a function');
    }

    var listener = new EE(fn, context || emitter, once),
        evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }

  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
  }

  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    var names = [],
        events,
        name;
    if (this._eventsCount === 0) return names;

    for (name in events = this._events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event,
        handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };

  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event,
        listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };

  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;

        case 2:
          return listeners.fn.call(listeners.context, a1), true;

        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;

        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;

        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length,
          j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;

          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;

          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;

          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;

          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };

  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };

  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;

    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events.push(listeners[i]);
        }
      }

      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  EventEmitter.prefixed = prefix;
  EventEmitter.EventEmitter = EventEmitter;

  if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
  }
},153,[],"node_modules/eventemitter3/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ToastAndroid = _require(_dependencyMap[0], 'ToastAndroid');

  var TOAST_SHORT_DELAY = 2000;

  var HMRLoadingView = function () {
    function HMRLoadingView() {
      _classCallCheck(this, HMRLoadingView);
    }

    _createClass(HMRLoadingView, null, [{
      key: "showMessage",
      value: function showMessage(message) {
        if (HMRLoadingView._showing) {
          return;
        }

        ToastAndroid.show(message, ToastAndroid.SHORT);
        HMRLoadingView._showing = true;
        setTimeout(function () {
          HMRLoadingView._showing = false;
        }, TOAST_SHORT_DELAY);
      }
    }, {
      key: "hide",
      value: function hide() {}
    }]);

    return HMRLoadingView;
  }();

  module.exports = HMRLoadingView;
},154,[155],"HMRLoadingView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTToastAndroid = _require(_dependencyMap[0], 'NativeModules').ToastAndroid;

  var ToastAndroid = {
    SHORT: RCTToastAndroid.SHORT,
    LONG: RCTToastAndroid.LONG,
    TOP: RCTToastAndroid.TOP,
    BOTTOM: RCTToastAndroid.BOTTOM,
    CENTER: RCTToastAndroid.CENTER,
    show: function show(message, duration) {
      RCTToastAndroid.show(message, duration);
    },
    showWithGravity: function showWithGravity(message, duration, gravity) {
      RCTToastAndroid.showWithGravity(message, duration, gravity);
    },
    showWithGravityAndOffset: function showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset) {
      RCTToastAndroid.showWithGravityAndOffset(message, duration, gravity, xOffset, yOffset);
    }
  };
  module.exports = ToastAndroid;
},155,[67],"ToastAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var register = function register() {};

  if (__DEV__) {
    var AppState = _require(_dependencyMap[0], 'AppState');

    var WebSocket = _require(_dependencyMap[1], 'WebSocket');

    var reactDevTools = _require(_dependencyMap[2], 'react-devtools-core');

    var getDevServer = _require(_dependencyMap[3], 'getDevServer');

    if (WebSocket.isAvailable) {
      var _isAppActive = function _isAppActive() {
        return AppState.currentState !== 'background';
      };

      var devServer = getDevServer();

      var _host = devServer.bundleLoadedFromServer ? devServer.url.replace(/https?:\/\//, '').split(':')[0] : 'localhost';

      reactDevTools.connectToDevTools({
        isAppActive: _isAppActive,
        host: _host,
        port: window.__REACT_DEVTOOLS_PORT__,
        resolveRNStyle: _require(_dependencyMap[4], 'flattenStyle')
      });
    }
  }

  module.exports = {
    register: register
  };
},156,[157,133,158,106,159],"setupDevtools");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var MissingNativeEventEmitterShim = _require(_dependencyMap[0], 'MissingNativeEventEmitterShim');

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[2], 'NativeModules');

  var RCTAppState = NativeModules.AppState;

  var logError = _require(_dependencyMap[3], 'logError');

  var invariant = _require(_dependencyMap[4], 'fbjs/lib/invariant');

  var AppState = function (_NativeEventEmitter) {
    _inherits(AppState, _NativeEventEmitter);

    function AppState() {
      _classCallCheck(this, AppState);

      var _this = _possibleConstructorReturn(this, (AppState.__proto__ || Object.getPrototypeOf(AppState)).call(this, RCTAppState));

      _this.isAvailable = true;
      _this.isAvailable = true;
      _this._eventHandlers = {
        change: new Map(),
        memoryWarning: new Map()
      };
      _this.currentState = RCTAppState.initialAppState || 'active';
      var eventUpdated = false;

      _this.addListener('appStateDidChange', function (appStateData) {
        eventUpdated = true;
        _this.currentState = appStateData.app_state;
      });

      RCTAppState.getCurrentAppState(function (appStateData) {
        if (!eventUpdated) {
          _this.currentState = appStateData.app_state;
        }
      }, logError);
      return _this;
    }

    _createClass(AppState, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);

        if (type === 'change') {
          this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
            handler(appStateData.app_state);
          }));
        } else if (type === 'memoryWarning') {
          this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
        }
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);

        if (!this._eventHandlers[type].has(handler)) {
          return;
        }

        this._eventHandlers[type].get(handler).remove();

        this._eventHandlers[type].delete(handler);
      }
    }]);

    return AppState;
  }(NativeEventEmitter);

  if (__DEV__ && !RCTAppState) {
    var MissingNativeAppStateShim = function (_MissingNativeEventEm) {
      _inherits(MissingNativeAppStateShim, _MissingNativeEventEm);

      function MissingNativeAppStateShim() {
        _classCallCheck(this, MissingNativeAppStateShim);

        return _possibleConstructorReturn(this, (MissingNativeAppStateShim.__proto__ || Object.getPrototypeOf(MissingNativeAppStateShim)).call(this, 'RCTAppState', 'AppState'));
      }

      _createClass(MissingNativeAppStateShim, [{
        key: "addEventListener",
        value: function addEventListener() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "removeEventListener",
        value: function removeEventListener() {
          this.throwMissingNativeModule();
        }
      }, {
        key: "currentState",
        get: function get() {
          this.throwMissingNativeModule();
        }
      }]);

      return MissingNativeAppStateShim;
    }(MissingNativeEventEmitterShim);

    AppState = new MissingNativeAppStateShim();
  } else {
    AppState = new AppState();
  }

  module.exports = AppState;
},157,[124,125,67,141,19],"AppState");
__d(function (global, _require3, module, exports, _dependencyMap) {
    "use strict";

    var _extends2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _typeof2 = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

    !function (root, factory) {
        "object" == (typeof exports === "undefined" ? "undefined" : _typeof2(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof2(module)) ? module.exports = factory() : "function" == typeof define && define.amd ? define([], factory) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof2(exports)) ? exports.ReactDevToolsBackend = factory() : root.ReactDevToolsBackend = factory();
    }(undefined, function () {
        return function (modules) {
            function __webpack_require__(moduleId) {
                if (installedModules[moduleId]) return installedModules[moduleId].exports;
                var module = installedModules[moduleId] = {
                    exports: {},
                    id: moduleId,
                    loaded: !1
                };
                return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.loaded = !0, module.exports;
            }

            var installedModules = {};
            return __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.p = "", __webpack_require__(0);
        }([function (module, exports, __webpack_require__) {
            "use strict";

            function connectToDevTools(options) {
                function scheduleRetry() {
                    setTimeout(function () {
                        return connectToDevTools(options);
                    }, 2e3);
                }

                function handleClose() {
                    hasClosed || (hasClosed = !0, scheduleRetry(), closeListeners.forEach(function (fn) {
                        return fn();
                    }));
                }

                function handleMessage(evt) {
                    var data;

                    try {
                        data = JSON.parse(evt.data);
                    } catch (e) {
                        return void console.error("failed to parse json: " + evt.data);
                    }

                    messageListeners.forEach(function (fn) {
                        try {
                            fn(data);
                        } catch (e) {
                            throw console.log(data), e;
                        }
                    });
                }

                var _ref = options || {},
                    _ref$host = _ref.host,
                    host = void 0 === _ref$host ? "localhost" : _ref$host,
                    _ref$port = _ref.port,
                    port = void 0 === _ref$port ? 8097 : _ref$port,
                    websocket = _ref.websocket,
                    _ref$resolveRNStyle = _ref.resolveRNStyle,
                    resolveRNStyle = void 0 === _ref$resolveRNStyle ? null : _ref$resolveRNStyle,
                    _ref$isAppActive = _ref.isAppActive,
                    isAppActive = void 0 === _ref$isAppActive ? function () {
                    return !0;
                } : _ref$isAppActive;

                if (!isAppActive()) return void scheduleRetry();
                var messageListeners = [],
                    closeListeners = [],
                    uri = "ws://" + host + ":" + port,
                    ws = websocket ? websocket : new window.WebSocket(uri);
                ws.onclose = handleClose, ws.onerror = handleClose, ws.onmessage = handleMessage, ws.onopen = function () {
                    var wall = {
                        listen: function listen(fn) {
                            messageListeners.push(fn);
                        },
                        onClose: function onClose(fn) {
                            closeListeners.push(fn);
                        },
                        send: function send(data) {
                            ws.send(JSON.stringify(data));
                        }
                    };
                    setupBackend(wall, resolveRNStyle);
                };
                var hasClosed = !1;
            }

            function setupBackend(wall, resolveRNStyle) {
                wall.onClose(function () {
                    agent && agent.emit("shutdown"), window.__REACT_DEVTOOLS_GLOBAL_HOOK__.emit("shutdown"), bridge = null, agent = null, console.log("closing devtools");
                });
                var bridge = new Bridge(wall),
                    agent = new Agent(window, {
                    rnStyle: !!resolveRNStyle,
                    rnStyleMeasure: !!resolveRNStyle
                });
                agent.addBridge(bridge), resolveRNStyle && setupRNStyle(bridge, agent, resolveRNStyle), setupRelay(bridge, agent, window.__REACT_DEVTOOLS_GLOBAL_HOOK__);

                var _connectTimeout = setTimeout(function () {
                    console.warn("react-devtools agent got no connection");
                }, 2e4);

                agent.once("connected", function () {
                    agent && (inject(window.__REACT_DEVTOOLS_GLOBAL_HOOK__, agent), clearTimeout(_connectTimeout));
                });
            }

            var Agent = __webpack_require__(1),
                Bridge = __webpack_require__(6),
                installGlobalHook = __webpack_require__(31),
                installRelayHook = __webpack_require__(32),
                inject = __webpack_require__(33),
                setupRNStyle = __webpack_require__(46),
                setupRelay = __webpack_require__(48);

            installGlobalHook(window), installRelayHook(window), window.document && window.__REACT_DEVTOOLS_GLOBAL_HOOK__.on("react-devtools", function (agent) {
                var setupHighlighter = __webpack_require__(49);

                setupHighlighter(agent);
            }), module.exports = {
                connectToDevTools: connectToDevTools
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function _possibleConstructorReturn(self, call) {
                if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return !call || "object" != (typeof call === "undefined" ? "undefined" : _typeof2(call)) && "function" != typeof call ? self : call;
            }

            function _inherits(subClass, superClass) {
                if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
            }

            var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            },
                _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                _require = __webpack_require__(2),
                EventEmitter = _require.EventEmitter,
                assign = __webpack_require__(3),
                guid = __webpack_require__(4),
                getIn = __webpack_require__(5),
                Agent = function (_EventEmitter) {
                function Agent(global, capabilities) {
                    _classCallCheck(this, Agent);

                    var _this = _possibleConstructorReturn(this, (Agent.__proto__ || Object.getPrototypeOf(Agent)).call(this));

                    _this.global = global, _this.internalInstancesById = new Map(), _this.idsByInternalInstances = new WeakMap(), _this.renderers = new Map(), _this.elementData = new Map(), _this.roots = new Set(), _this.reactInternals = {};
                    var lastSelected;
                    _this.on("selected", function (id) {
                        var data = _this.elementData.get(id);

                        data && data.publicInstance && _this.global.$r === lastSelected && (_this.global.$r = data.publicInstance, lastSelected = data.publicInstance);
                    }), _this._prevSelected = null, _this._scrollUpdate = !1;
                    var isReactDOM = window.document && "function" == typeof window.document.createElement;
                    return _this.capabilities = assign({
                        scroll: isReactDOM && "function" == typeof window.document.body.scrollIntoView,
                        dom: isReactDOM,
                        editTextContent: !1
                    }, capabilities), isReactDOM && (_this._updateScroll = _this._updateScroll.bind(_this), window.addEventListener("scroll", _this._onScroll.bind(_this), !0), window.addEventListener("click", _this._onClick.bind(_this), !0), window.addEventListener("mouseover", _this._onMouseOver.bind(_this), !0), window.addEventListener("resize", _this._onResize.bind(_this), !0)), _this;
                }

                return _inherits(Agent, _EventEmitter), _createClass(Agent, [{
                    key: "sub",
                    value: function value(ev, fn) {
                        var _this2 = this;

                        return this.on(ev, fn), function () {
                            _this2.removeListener(ev, fn);
                        };
                    }
                }, {
                    key: "setReactInternals",
                    value: function value(renderer, reactInternals) {
                        this.reactInternals[renderer] = reactInternals;
                    }
                }, {
                    key: "addBridge",
                    value: function value(bridge) {
                        var _this3 = this;

                        bridge.on("requestCapabilities", function () {
                            bridge.send("capabilities", _this3.capabilities), _this3.emit("connected");
                        }), bridge.on("setState", this._setState.bind(this)), bridge.on("setProps", this._setProps.bind(this)), bridge.on("setContext", this._setContext.bind(this)), bridge.on("makeGlobal", this._makeGlobal.bind(this)), bridge.on("highlight", function (id) {
                            return _this3.highlight(id);
                        }), bridge.on("highlightMany", function (id) {
                            return _this3.highlightMany(id);
                        }), bridge.on("hideHighlight", function () {
                            return _this3.emit("hideHighlight");
                        }), bridge.on("startInspecting", function () {
                            return _this3.emit("startInspecting");
                        }), bridge.on("stopInspecting", function () {
                            return _this3.emit("stopInspecting");
                        }), bridge.on("selected", function (id) {
                            return _this3.emit("selected", id);
                        }), bridge.on("setInspectEnabled", function (enabled) {
                            _this3._inspectEnabled = enabled, _this3.emit("stopInspecting");
                        }), bridge.on("shutdown", function () {
                            return _this3.emit("shutdown");
                        }), bridge.on("changeTextContent", function (_ref) {
                            var id = _ref.id,
                                text = _ref.text,
                                node = _this3.getNodeForID(id);

                            node && (node.textContent = text);
                        }), bridge.on("putSelectedNode", function (id) {
                            window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node = _this3.getNodeForID(id);
                        }), bridge.on("putSelectedInstance", function (id) {
                            var node = _this3.elementData.get(id);

                            node ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = node.type : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = null, node && node.publicInstance ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = node.publicInstance : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = null;
                        }), bridge.on("checkSelection", function () {
                            var newSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;

                            if (newSelected !== _this3._prevSelected) {
                                _this3._prevSelected = newSelected;
                                var sentSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node;
                                newSelected !== sentSelected && _this3.selectFromDOMNode(newSelected, !0);
                            }
                        }), bridge.on("scrollToNode", function (id) {
                            return _this3.scrollToNode(id);
                        }), bridge.on("traceupdatesstatechange", function (value) {
                            return _this3.emit("traceupdatesstatechange", value);
                        }), bridge.on("colorizerchange", function (value) {
                            return _this3.emit("colorizerchange", value);
                        }), this.on("root", function (id) {
                            return bridge.send("root", id);
                        }), this.on("mount", function (data) {
                            return bridge.send("mount", data);
                        }), this.on("update", function (data) {
                            return bridge.send("update", data);
                        }), this.on("unmount", function (id) {
                            bridge.send("unmount", id), bridge.forget(id);
                        }), this.on("setSelection", function (data) {
                            return bridge.send("select", data);
                        }), this.on("setInspectEnabled", function (data) {
                            return bridge.send("setInspectEnabled", data);
                        });
                    }
                }, {
                    key: "scrollToNode",
                    value: function value(id) {
                        var node = this.getNodeForID(id);
                        if (!node) return void console.warn("unable to get the node for scrolling");
                        var domElement = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;
                        return domElement ? ("function" == typeof domElement.scrollIntoViewIfNeeded ? domElement.scrollIntoViewIfNeeded() : "function" == typeof domElement.scrollIntoView && domElement.scrollIntoView(), void this.highlight(id)) : void console.warn("unable to get the domElement for scrolling");
                    }
                }, {
                    key: "highlight",
                    value: function value(id) {
                        var data = this.elementData.get(id),
                            node = this.getNodeForID(id);
                        data && node && this.emit("highlight", {
                            node: node,
                            name: data.name,
                            props: data.props
                        });
                    }
                }, {
                    key: "highlightMany",
                    value: function value(ids) {
                        var _this4 = this,
                            nodes = [];

                        ids.forEach(function (id) {
                            var node = _this4.getNodeForID(id);

                            node && nodes.push(node);
                        }), nodes.length && this.emit("highlightMany", nodes);
                    }
                }, {
                    key: "getNodeForID",
                    value: function value(id) {
                        var component = this.internalInstancesById.get(id);
                        if (!component) return null;
                        var renderer = this.renderers.get(id);
                        return renderer && this.reactInternals[renderer].getNativeFromReactElement ? this.reactInternals[renderer].getNativeFromReactElement(component) : null;
                    }
                }, {
                    key: "selectFromDOMNode",
                    value: function value(node, quiet) {
                        var offsetFromLeaf = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                            id = this.getIDForNode(node);
                        id && this.emit("setSelection", {
                            id: id,
                            quiet: quiet,
                            offsetFromLeaf: offsetFromLeaf
                        });
                    }
                }, {
                    key: "selectFromReactInstance",
                    value: function value(instance, quiet) {
                        var id = this.getId(instance);
                        return id ? void this.emit("setSelection", {
                            id: id,
                            quiet: quiet
                        }) : void console.log("no instance id", instance);
                    }
                }, {
                    key: "getIDForNode",
                    value: function value(node) {
                        if (!this.reactInternals) return null;
                        var component;

                        for (var renderer in this.reactInternals) {
                            try {
                                component = this.reactInternals[renderer].getReactElementFromNative(node);
                            } catch (e) {}

                            if (component) return this.getId(component);
                        }

                        return null;
                    }
                }, {
                    key: "_setProps",
                    value: function value(_ref2) {
                        var id = _ref2.id,
                            path = _ref2.path,
                            value = _ref2.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInProps ? data.updater.setInProps(path, value) : console.warn("trying to set props on a component that doesn't support it");
                    }
                }, {
                    key: "_setState",
                    value: function value(_ref3) {
                        var id = _ref3.id,
                            path = _ref3.path,
                            value = _ref3.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInState ? data.updater.setInState(path, value) : console.warn("trying to set state on a component that doesn't support it");
                    }
                }, {
                    key: "_setContext",
                    value: function value(_ref4) {
                        var id = _ref4.id,
                            path = _ref4.path,
                            value = _ref4.value,
                            data = this.elementData.get(id);
                        data && data.updater && data.updater.setInContext ? data.updater.setInContext(path, value) : console.warn("trying to set context on a component that doesn't support it");
                    }
                }, {
                    key: "_makeGlobal",
                    value: function value(_ref5) {
                        var id = _ref5.id,
                            path = _ref5.path,
                            data = this.elementData.get(id);

                        if (data) {
                            var value;
                            value = "instance" === path ? data.publicInstance : getIn(data, path), this.global.$tmp = value, console.log("$tmp =", value);
                        }
                    }
                }, {
                    key: "getId",
                    value: function value(internalInstance) {
                        return "object" === ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance)) && internalInstance ? (this.idsByInternalInstances.has(internalInstance) || (this.idsByInternalInstances.set(internalInstance, guid()), this.internalInstancesById.set(this.idsByInternalInstances.get(internalInstance), internalInstance)), this.idsByInternalInstances.get(internalInstance)) : internalInstance;
                    }
                }, {
                    key: "addRoot",
                    value: function value(renderer, internalInstance) {
                        var id = this.getId(internalInstance);
                        this.roots.add(id), this.emit("root", id);
                    }
                }, {
                    key: "onMounted",
                    value: function value(renderer, component, data) {
                        var _this5 = this,
                            id = this.getId(component);

                        this.renderers.set(id, renderer), this.elementData.set(id, data);
                        var send = assign({}, data);
                        send.children && send.children.map && (send.children = send.children.map(function (c) {
                            return _this5.getId(c);
                        })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("mount", send);
                    }
                }, {
                    key: "onUpdated",
                    value: function value(component, data) {
                        var _this6 = this,
                            id = this.getId(component);

                        this.elementData.set(id, data);
                        var send = assign({}, data);
                        send.children && send.children.map && (send.children = send.children.map(function (c) {
                            return _this6.getId(c);
                        })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("update", send);
                    }
                }, {
                    key: "onUnmounted",
                    value: function value(component) {
                        var id = this.getId(component);
                        this.elementData["delete"](id), this.roots["delete"](id), this.renderers["delete"](id), this.emit("unmount", id), this.idsByInternalInstances["delete"](component);
                    }
                }, {
                    key: "_onScroll",
                    value: function value() {
                        this._scrollUpdate || (this._scrollUpdate = !0, window.requestAnimationFrame(this._updateScroll));
                    }
                }, {
                    key: "_updateScroll",
                    value: function value() {
                        this.emit("refreshMultiOverlay"), this.emit("stopInspecting"), this._scrollUpdate = !1;
                    }
                }, {
                    key: "_onClick",
                    value: function value(event) {
                        if (this._inspectEnabled) {
                            var id = this.getIDForNode(event.target);
                            id && (event.stopPropagation(), event.preventDefault(), this.emit("setSelection", {
                                id: id
                            }), this.emit("setInspectEnabled", !1));
                        }
                    }
                }, {
                    key: "_onMouseOver",
                    value: function value(event) {
                        if (this._inspectEnabled) {
                            var id = this.getIDForNode(event.target);
                            if (!id) return;
                            this.highlight(id);
                        }
                    }
                }, {
                    key: "_onResize",
                    value: function value(event) {
                        this.emit("stopInspecting");
                    }
                }]), Agent;
            }(EventEmitter);

            module.exports = Agent;
        }, function (module, exports) {
            function EventEmitter() {
                this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
            }

            function isFunction(arg) {
                return "function" == typeof arg;
            }

            function isNumber(arg) {
                return "number" == typeof arg;
            }

            function isObject(arg) {
                return "object" == (typeof arg === "undefined" ? "undefined" : _typeof2(arg)) && null !== arg;
            }

            function isUndefined(arg) {
                return void 0 === arg;
            }

            module.exports = EventEmitter, EventEmitter.EventEmitter = EventEmitter, EventEmitter.prototype._events = void 0, EventEmitter.prototype._maxListeners = void 0, EventEmitter.defaultMaxListeners = 10, EventEmitter.prototype.setMaxListeners = function (n) {
                if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
                return this._maxListeners = n, this;
            }, EventEmitter.prototype.emit = function (type) {
                var er, handler, len, args, i, listeners;

                if (this._events || (this._events = {}), "error" === type && (!this._events.error || isObject(this._events.error) && !this._events.error.length)) {
                    if (er = arguments[1], er instanceof Error) throw er;
                    var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                    throw err.context = er, err;
                }

                if (handler = this._events[type], isUndefined(handler)) return !1;
                if (isFunction(handler)) switch (arguments.length) {
                    case 1:
                        handler.call(this);
                        break;

                    case 2:
                        handler.call(this, arguments[1]);
                        break;

                    case 3:
                        handler.call(this, arguments[1], arguments[2]);
                        break;

                    default:
                        args = Array.prototype.slice.call(arguments, 1), handler.apply(this, args);
                } else if (isObject(handler)) for (args = Array.prototype.slice.call(arguments, 1), listeners = handler.slice(), len = listeners.length, i = 0; i < len; i++) {
                    listeners[i].apply(this, args);
                }
                return !0;
            }, EventEmitter.prototype.addListener = function (type, listener) {
                var m;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener), this._events[type] ? isObject(this._events[type]) ? this._events[type].push(listener) : this._events[type] = [this._events[type], listener] : this._events[type] = listener, isObject(this._events[type]) && !this._events[type].warned && (m = isUndefined(this._maxListeners) ? EventEmitter.defaultMaxListeners : this._maxListeners, m && m > 0 && this._events[type].length > m && (this._events[type].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length), "function" == typeof console.trace && console.trace())), this;
            }, EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.once = function (type, listener) {
                function g() {
                    this.removeListener(type, g), fired || (fired = !0, listener.apply(this, arguments));
                }

                if (!isFunction(listener)) throw TypeError("listener must be a function");
                var fired = !1;
                return g.listener = listener, this.on(type, g), this;
            }, EventEmitter.prototype.removeListener = function (type, listener) {
                var list, position, length, i;
                if (!isFunction(listener)) throw TypeError("listener must be a function");
                if (!this._events || !this._events[type]) return this;
                if (list = this._events[type], length = list.length, position = -1, list === listener || isFunction(list.listener) && list.listener === listener) delete this._events[type], this._events.removeListener && this.emit("removeListener", type, listener);else if (isObject(list)) {
                    for (i = length; i-- > 0;) {
                        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                            position = i;
                            break;
                        }
                    }

                    if (position < 0) return this;
                    1 === list.length ? (list.length = 0, delete this._events[type]) : list.splice(position, 1), this._events.removeListener && this.emit("removeListener", type, listener);
                }
                return this;
            }, EventEmitter.prototype.removeAllListeners = function (type) {
                var key, listeners;
                if (!this._events) return this;
                if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[type] && delete this._events[type], this;

                if (0 === arguments.length) {
                    for (key in this._events) {
                        "removeListener" !== key && this.removeAllListeners(key);
                    }

                    return this.removeAllListeners("removeListener"), this._events = {}, this;
                }

                if (listeners = this._events[type], isFunction(listeners)) this.removeListener(type, listeners);else if (listeners) for (; listeners.length;) {
                    this.removeListener(type, listeners[listeners.length - 1]);
                }
                return delete this._events[type], this;
            }, EventEmitter.prototype.listeners = function (type) {
                var ret;
                return ret = this._events && this._events[type] ? isFunction(this._events[type]) ? [this._events[type]] : this._events[type].slice() : [];
            }, EventEmitter.prototype.listenerCount = function (type) {
                if (this._events) {
                    var evlistener = this._events[type];
                    if (isFunction(evlistener)) return 1;
                    if (evlistener) return evlistener.length;
                }

                return 0;
            }, EventEmitter.listenerCount = function (emitter, type) {
                return emitter.listenerCount(type);
            };
        }, function (module, exports) {
            "use strict";

            function toObject(val) {
                if (null === val || void 0 === val) throw new TypeError("Object.assign cannot be called with null or undefined");
                return Object(val);
            }

            var hasOwnProperty = Object.prototype.hasOwnProperty,
                propIsEnumerable = Object.prototype.propertyIsEnumerable;

            module.exports = Object.assign || function (target, source) {
                for (var from, symbols, to = toObject(target), s = 1; s < arguments.length; s++) {
                    from = Object(arguments[s]);

                    for (var key in from) {
                        hasOwnProperty.call(from, key) && (to[key] = from[key]);
                    }

                    if (Object.getOwnPropertySymbols) {
                        symbols = Object.getOwnPropertySymbols(from);

                        for (var i = 0; i < symbols.length; i++) {
                            propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
                        }
                    }
                }

                return to;
            };
        }, function (module, exports) {
            "use strict";

            function guid() {
                return "g" + Math.random().toString(16).substr(2);
            }

            module.exports = guid;
        }, function (module, exports) {
            "use strict";

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }

                    return arr2;
                }

                return Array.from(arr);
            }

            function getIn(base, path) {
                return path.reduce(function (obj, attr) {
                    if (obj) {
                        if (obj.hasOwnProperty(attr)) return obj[attr];
                        if ("function" == typeof obj[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return [].concat(_toConsumableArray(obj))[attr];
                    }

                    return null;
                }, base);
            }

            module.exports = getIn;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }

                    return arr2;
                }

                return Array.from(arr);
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function getWindowFunction(name, polyfill) {
                return String(window[name]).indexOf("[native code]") === -1 ? polyfill : window[name];
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            },
                _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                consts = __webpack_require__(7),
                hydrate = __webpack_require__(26),
                dehydrate = __webpack_require__(27),
                getIn = __webpack_require__(5),
                performanceNow = __webpack_require__(28),
                lastRunTimeMS = 5,
                cancelIdleCallback = getWindowFunction("cancelIdleCallback", clearTimeout),
                requestIdleCallback = getWindowFunction("requestIdleCallback", function (cb, options) {
                var delayMS = 3e3 * lastRunTimeMS;
                return delayMS > 500 && (delayMS = 500), setTimeout(function () {
                    var startTime = performanceNow();
                    cb({
                        didTimeout: !1,
                        timeRemaining: function timeRemaining() {
                            return 1 / 0;
                        }
                    });
                    var endTime = performanceNow();
                    lastRunTimeMS = (endTime - startTime) / 1e3;
                }, delayMS);
            }),
                Bridge = function () {
                function Bridge(wall) {
                    _classCallCheck(this, Bridge), this._cbs = new Map(), this._inspectables = new Map(), this._cid = 0, this._listeners = {}, this._buffer = [], this._flushHandle = null, this._callers = {}, this._paused = !1, this._wall = wall, wall.listen(this._handleMessage.bind(this));
                }

                return _createClass(Bridge, [{
                    key: "inspect",
                    value: function value(id, path, cb) {
                        var _cid = this._cid++;

                        this._cbs.set(_cid, function (data, cleaned, proto, protoclean) {
                            cleaned.length && hydrate(data, cleaned), proto && protoclean.length && hydrate(proto, protoclean), proto && (data[consts.proto] = proto), cb(data);
                        }), this._wall.send({
                            type: "inspect",
                            callback: _cid,
                            path: path,
                            id: id
                        });
                    }
                }, {
                    key: "call",
                    value: function value(name, args, cb) {
                        var _cid = this._cid++;

                        this._cbs.set(_cid, cb), this._wall.send({
                            type: "call",
                            callback: _cid,
                            args: args,
                            name: name
                        });
                    }
                }, {
                    key: "onCall",
                    value: function value(name, handler) {
                        if (this._callers[name]) throw new Error("only one call handler per call name allowed");
                        this._callers[name] = handler;
                    }
                }, {
                    key: "pause",
                    value: function value() {
                        this._wall.send({
                            type: "pause"
                        });
                    }
                }, {
                    key: "resume",
                    value: function value() {
                        this._wall.send({
                            type: "resume"
                        });
                    }
                }, {
                    key: "setInspectable",
                    value: function value(id, data) {
                        var prev = this._inspectables.get(id);

                        return prev ? void this._inspectables.set(id, _extends({}, prev, data)) : void this._inspectables.set(id, data);
                    }
                }, {
                    key: "send",
                    value: function value(evt, data) {
                        this._buffer.push({
                            evt: evt,
                            data: data
                        }), this.scheduleFlush();
                    }
                }, {
                    key: "scheduleFlush",
                    value: function value() {
                        if (!this._flushHandle && this._buffer.length) {
                            var timeout = this._paused ? 5e3 : 500;
                            this._flushHandle = requestIdleCallback(this.flushBufferWhileIdle.bind(this), {
                                timeout: timeout
                            });
                        }
                    }
                }, {
                    key: "cancelFlush",
                    value: function value() {
                        this._flushHandle && (cancelIdleCallback(this._flushHandle), this._flushHandle = null);
                    }
                }, {
                    key: "flushBufferWhileIdle",
                    value: function value(deadline) {
                        this._flushHandle = null;

                        for (var chunkCount = this._paused ? 20 : 10, chunkSize = Math.round(this._buffer.length / chunkCount), minChunkSize = this._paused ? 50 : 100; this._buffer.length && (deadline.timeRemaining() > 0 || deadline.didTimeout);) {
                            var take = Math.min(this._buffer.length, Math.max(minChunkSize, chunkSize)),
                                currentBuffer = this._buffer.splice(0, take);

                            this.flushBufferSlice(currentBuffer);
                        }

                        this._buffer.length && this.scheduleFlush();
                    }
                }, {
                    key: "flushBufferSlice",
                    value: function value(bufferSlice) {
                        var _this = this,
                            events = bufferSlice.map(function (_ref) {
                            var evt = _ref.evt,
                                data = _ref.data,
                                cleaned = [],
                                san = dehydrate(data, cleaned);
                            return cleaned.length && _this.setInspectable(data.id, data), {
                                type: "event",
                                evt: evt,
                                data: san,
                                cleaned: cleaned
                            };
                        });

                        this._wall.send({
                            type: "many-events",
                            events: events
                        });
                    }
                }, {
                    key: "forget",
                    value: function value(id) {
                        this._inspectables["delete"](id);
                    }
                }, {
                    key: "on",
                    value: function value(evt, fn) {
                        this._listeners[evt] ? this._listeners[evt].push(fn) : this._listeners[evt] = [fn];
                    }
                }, {
                    key: "off",
                    value: function value(evt, fn) {
                        if (this._listeners[evt]) {
                            var ix = this._listeners[evt].indexOf(fn);

                            ix !== -1 && this._listeners[evt].splice(ix, 1);
                        }
                    }
                }, {
                    key: "once",
                    value: function value(evt, fn) {
                        var self = this,
                            listener = function listener() {
                            fn.apply(this, arguments), self.off(evt, listener);
                        };

                        this.on(evt, listener);
                    }
                }, {
                    key: "_handleMessage",
                    value: function value(payload) {
                        var _this2 = this;

                        if ("resume" === payload.type) return this._paused = !1, void this.scheduleFlush();
                        if ("pause" === payload.type) return this._paused = !0, void this.cancelFlush();

                        if ("callback" === payload.type) {
                            var callback = this._cbs.get(payload.id);

                            return void (callback && (callback.apply(void 0, _toConsumableArray(payload.args)), this._cbs["delete"](payload.id)));
                        }

                        if ("call" === payload.type) return void this._handleCall(payload.name, payload.args, payload.callback);
                        if ("inspect" === payload.type) return void this._inspectResponse(payload.id, payload.path, payload.callback);

                        if ("event" === payload.type) {
                            payload.cleaned && hydrate(payload.data, payload.cleaned);
                            var fns = this._listeners[payload.evt],
                                data = payload.data;
                            fns && fns.forEach(function (fn) {
                                return fn(data);
                            });
                        }

                        "many-events" === payload.type && payload.events.forEach(function (event) {
                            event.cleaned && hydrate(event.data, event.cleaned);
                            var handlers = _this2._listeners[event.evt];
                            handlers && handlers.forEach(function (fn) {
                                return fn(event.data);
                            });
                        });
                    }
                }, {
                    key: "_handleCall",
                    value: function value(name, args, callback) {
                        if (!this._callers[name]) return void console.warn('unknown call: "' + name + '"');
                        args = Array.isArray(args) ? args : [args];
                        var result;

                        try {
                            result = this._callers[name].apply(null, args);
                        } catch (e) {
                            return void console.error("Failed to call", e);
                        }

                        this._wall.send({
                            type: "callback",
                            id: callback,
                            args: [result]
                        });
                    }
                }, {
                    key: "_inspectResponse",
                    value: function value(id, path, callback) {
                        var inspectable = this._inspectables.get(id),
                            result = {},
                            cleaned = [],
                            proto = null,
                            protoclean = [];

                        if (inspectable) {
                            var val = getIn(inspectable, path),
                                protod = !1,
                                isFn = "function" == typeof val;

                            if (val && "function" == typeof val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) {
                                var iterVal = Object.create({}),
                                    count = 0,
                                    _iteratorNormalCompletion = !0,
                                    _didIteratorError = !1,
                                    _iteratorError = void 0;

                                try {
                                    for (var _step, _iterator = val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
                                        var entry = _step.value;
                                        if (count > 100) break;
                                        iterVal[count] = entry, count++;
                                    }
                                } catch (err) {
                                    _didIteratorError = !0, _iteratorError = err;
                                } finally {
                                    try {
                                        !_iteratorNormalCompletion && _iterator["return"] && _iterator["return"]();
                                    } finally {
                                        if (_didIteratorError) throw _iteratorError;
                                    }
                                }

                                val = iterVal;
                            }

                            if (Object.getOwnPropertyNames(val).forEach(function (name) {
                                "__proto__" === name && (protod = !0), (!isFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (result[name] = dehydrate(val[name], cleaned, [name]));
                            }), !protod && val.__proto__ && "Object" !== val.constructor.name) {
                                var newProto = {},
                                    pIsFn = "function" == typeof val.__proto__;
                                Object.getOwnPropertyNames(val.__proto__).forEach(function (name) {
                                    (!pIsFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (newProto[name] = dehydrate(val.__proto__[name], protoclean, [name]));
                                }), proto = newProto;
                            }
                        }

                        this._wall.send({
                            type: "callback",
                            id: callback,
                            args: [result, cleaned, proto, protoclean]
                        });
                    }
                }]), Bridge;
            }();

            module.exports = Bridge;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var _Symbol = __webpack_require__(8);

            module.exports = {
                name: _Symbol("name"),
                type: _Symbol("type"),
                inspected: _Symbol("inspected"),
                meta: _Symbol("meta"),
                proto: _Symbol("proto")
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(9)() ? Symbol : __webpack_require__(10);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                var symbol;
                if ("function" != typeof Symbol) return !1;
                symbol = Symbol("test symbol");

                try {
                    String(symbol);
                } catch (e) {
                    return !1;
                }

                return "symbol" == _typeof2(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") || "object" == _typeof2(typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable") && "object" == _typeof2(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") && "object" == _typeof2(typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive") && "object" == _typeof2(typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") && "object" == _typeof2(typeof Symbol === "function" ? Symbol.unscopables : "@@unscopables");
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var NativeSymbol,
                SymbolPolyfill,
                _HiddenSymbol,
                d = __webpack_require__(11),
                validateSymbol = __webpack_require__(24),
                create = Object.create,
                defineProperties = Object.defineProperties,
                defineProperty = Object.defineProperty,
                objPrototype = Object.prototype,
                globalSymbols = create(null);

            "function" == typeof Symbol && (NativeSymbol = Symbol);

            var generateName = function () {
                var created = create(null);
                return function (desc) {
                    for (var name, ie11BugWorkaround, postfix = 0; created[desc + (postfix || "")];) {
                        ++postfix;
                    }

                    return desc += postfix || "", created[desc] = !0, name = "@@" + desc, defineProperty(objPrototype, name, d.gs(null, function (value) {
                        ie11BugWorkaround || (ie11BugWorkaround = !0, defineProperty(this, name, d(value)), ie11BugWorkaround = !1);
                    })), name;
                };
            }();

            _HiddenSymbol = function HiddenSymbol(description) {
                if (this instanceof _HiddenSymbol) throw new TypeError("TypeError: Symbol is not a constructor");
                return SymbolPolyfill(description);
            }, module.exports = SymbolPolyfill = function _Symbol2(description) {
                var symbol;
                if (this instanceof _Symbol2) throw new TypeError("TypeError: Symbol is not a constructor");
                return symbol = create(_HiddenSymbol.prototype), description = void 0 === description ? "" : String(description), defineProperties(symbol, {
                    __description__: d("", description),
                    __name__: d("", generateName(description))
                });
            }, defineProperties(SymbolPolyfill, {
                "for": d(function (key) {
                    return globalSymbols[key] ? globalSymbols[key] : globalSymbols[key] = SymbolPolyfill(String(key));
                }),
                keyFor: d(function (s) {
                    var key;
                    validateSymbol(s);

                    for (key in globalSymbols) {
                        if (globalSymbols[key] === s) return key;
                    }
                }),
                hasInstance: d("", NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill("hasInstance")),
                isConcatSpreadable: d("", NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill("isConcatSpreadable")),
                iterator: d("", NativeSymbol && NativeSymbol.iterator || SymbolPolyfill("iterator")),
                match: d("", NativeSymbol && NativeSymbol.match || SymbolPolyfill("match")),
                replace: d("", NativeSymbol && NativeSymbol.replace || SymbolPolyfill("replace")),
                search: d("", NativeSymbol && NativeSymbol.search || SymbolPolyfill("search")),
                species: d("", NativeSymbol && NativeSymbol.species || SymbolPolyfill("species")),
                split: d("", NativeSymbol && NativeSymbol.split || SymbolPolyfill("split")),
                toPrimitive: d("", NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill("toPrimitive")),
                toStringTag: d("", NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill("toStringTag")),
                unscopables: d("", NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill("unscopables"))
            }), defineProperties(_HiddenSymbol.prototype, {
                constructor: d(SymbolPolyfill),
                toString: d("", function () {
                    return this.__name__;
                })
            }), defineProperties(SymbolPolyfill.prototype, {
                toString: d(function () {
                    return "Symbol (" + validateSymbol(this).__description__ + ")";
                }),
                valueOf: d(function () {
                    return validateSymbol(this);
                })
            }), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d("", function () {
                return validateSymbol(this);
            })), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol")), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var d,
                assign = __webpack_require__(12),
                normalizeOpts = __webpack_require__(19),
                isCallable = __webpack_require__(20),
                contains = __webpack_require__(21);

            d = module.exports = function (dscr, value) {
                var c, e, w, options, desc;
                return arguments.length < 2 || "string" != typeof dscr ? (options = value, value = dscr, dscr = null) : options = arguments[2], null == dscr ? (c = w = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e"), w = contains.call(dscr, "w")), desc = {
                    value: value,
                    configurable: c,
                    enumerable: e,
                    writable: w
                }, options ? assign(normalizeOpts(options), desc) : desc;
            }, d.gs = function (dscr, get, set) {
                var c, e, options, desc;
                return "string" != typeof dscr ? (options = set, set = get, get = dscr, dscr = null) : options = arguments[3], null == get ? get = void 0 : isCallable(get) ? null == set ? set = void 0 : isCallable(set) || (options = set, set = void 0) : (options = get, get = set = void 0), null == dscr ? (c = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e")), desc = {
                    get: get,
                    set: set,
                    configurable: c,
                    enumerable: e
                }, options ? assign(normalizeOpts(options), desc) : desc;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(13)() ? Object.assign : __webpack_require__(14);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                var obj,
                    assign = Object.assign;
                return "function" == typeof assign && (obj = {
                    foo: "raz"
                }, assign(obj, {
                    bar: "dwa"
                }, {
                    trzy: "trzy"
                }), obj.foo + obj.bar + obj.trzy === "razdwatrzy");
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var keys = __webpack_require__(15),
                value = __webpack_require__(18),
                max = Math.max;

            module.exports = function (dest, src) {
                var error,
                    i,
                    assign,
                    l = max(arguments.length, 2);

                for (dest = Object(value(dest)), assign = function assign(key) {
                    try {
                        dest[key] = src[key];
                    } catch (e) {
                        error || (error = e);
                    }
                }, i = 1; i < l; ++i) {
                    src = arguments[i], keys(src).forEach(assign);
                }

                if (void 0 !== error) throw error;
                return dest;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(16)() ? Object.keys : __webpack_require__(17);
        }, function (module, exports) {
            "use strict";

            module.exports = function () {
                try {
                    return Object.keys("primitive"), !0;
                } catch (e) {
                    return !1;
                }
            };
        }, function (module, exports) {
            "use strict";

            var keys = Object.keys;

            module.exports = function (object) {
                return keys(null == object ? object : Object(object));
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (value) {
                if (null == value) throw new TypeError("Cannot use null or undefined");
                return value;
            };
        }, function (module, exports) {
            "use strict";

            var forEach = Array.prototype.forEach,
                create = Object.create,
                process = function process(src, obj) {
                var key;

                for (key in src) {
                    obj[key] = src[key];
                }
            };

            module.exports = function (options) {
                var result = create(null);
                return forEach.call(arguments, function (options) {
                    null != options && process(Object(options), result);
                }), result;
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (obj) {
                return "function" == typeof obj;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            module.exports = __webpack_require__(22)() ? String.prototype.contains : __webpack_require__(23);
        }, function (module, exports) {
            "use strict";

            var str = "razdwatrzy";

            module.exports = function () {
                return "function" == typeof str.contains && str.contains("dwa") === !0 && str.contains("foo") === !1;
            };
        }, function (module, exports) {
            "use strict";

            var indexOf = String.prototype.indexOf;

            module.exports = function (searchString) {
                return indexOf.call(this, searchString, arguments[1]) > -1;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var isSymbol = __webpack_require__(25);

            module.exports = function (value) {
                if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
                return value;
            };
        }, function (module, exports) {
            "use strict";

            module.exports = function (x) {
                return x && ("symbol" == (typeof x === "undefined" ? "undefined" : _typeof2(x)) || "Symbol" === x["@@toStringTag"]) || !1;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function hydrate(data, cleaned) {
                cleaned.forEach(function (path) {
                    var last = path.pop(),
                        obj = path.reduce(function (obj_, attr) {
                        return obj_ ? obj_[attr] : null;
                    }, data);

                    if (obj && obj[last]) {
                        var replace = {};
                        replace[consts.name] = obj[last].name, replace[consts.type] = obj[last].type, replace[consts.meta] = obj[last].meta, replace[consts.inspected] = !1, obj[last] = replace;
                    }
                });
            }

            var consts = __webpack_require__(7);

            module.exports = hydrate;
        }, function (module, exports) {
            "use strict";

            function getPropType(data) {
                if (!data) return null;
                var type = "undefined" == typeof data ? "undefined" : _typeof(data);

                if ("object" === type) {
                    if (data._reactFragment) return "react_fragment";
                    if (Array.isArray(data)) return "array";
                    if (ArrayBuffer.isView(data)) return data instanceof DataView ? "data_view" : "typed_array";
                    if (data instanceof ArrayBuffer) return "array_buffer";
                    if ("function" == typeof data[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return "iterator";
                    if ("[object Date]" === Object.prototype.toString.call(data)) return "date";
                }

                return type;
            }

            function createDehydrated(type, data, cleaned, path) {
                var meta = {};
                return "array" !== type && "typed_array" !== type || (meta.length = data.length), "iterator" !== type && "typed_array" !== type || (meta.readOnly = !0), cleaned.push(path), {
                    type: type,
                    meta: meta,
                    name: data.constructor && "Object" !== data.constructor.name ? data.constructor.name : ""
                };
            }

            function dehydrate(data, cleaned) {
                var path = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],
                    level = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                    type = getPropType(data);

                switch (type) {
                    case "function":
                        return cleaned.push(path), {
                            name: data.name,
                            type: "function"
                        };

                    case "string":
                        return data.length <= 500 ? data : data.slice(0, 500) + "...";

                    case "symbol":
                        return cleaned.push(path), {
                            type: "symbol",
                            name: data.toString()
                        };

                    case "react_fragment":
                        return "A React Fragment";

                    case "array_buffer":
                    case "data_view":
                        return cleaned.push(path), {
                            type: type,
                            name: "data_view" === type ? "DataView" : "ArrayBuffer",
                            meta: {
                                length: data.byteLength,
                                uninspectable: !0
                            }
                        };

                    case "array":
                        return level > 2 ? createDehydrated(type, data, cleaned, path) : data.map(function (item, i) {
                            return dehydrate(item, cleaned, path.concat([i]), level + 1);
                        });

                    case "typed_array":
                    case "iterator":
                        return createDehydrated(type, data, cleaned, path);

                    case "date":
                        return cleaned.push(path), {
                            name: data.toString(),
                            type: "date",
                            meta: {
                                uninspectable: !0
                            }
                        };

                    case "object":
                        if (level > 2 || data.constructor && "function" == typeof data.constructor && "Object" !== data.constructor.name) return createDehydrated(type, data, cleaned, path);
                        var res = {};

                        for (var name in data) {
                            res[name] = dehydrate(data[name], cleaned, path.concat([name]), level + 1);
                        }

                        return res;

                    default:
                        return data;
                }
            }

            var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            };

            module.exports = dehydrate;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var performanceNow,
                performance = __webpack_require__(29);

            performanceNow = performance.now ? function () {
                return performance.now();
            } : function () {
                return Date.now();
            }, module.exports = performanceNow;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var performance,
                ExecutionEnvironment = __webpack_require__(30);

            ExecutionEnvironment.canUseDOM && (performance = window.performance || window.msPerformance || window.webkitPerformance), module.exports = performance || {};
        }, function (module, exports) {
            "use strict";

            var canUseDOM = !("undefined" == typeof window || !window.document || !window.document.createElement),
                ExecutionEnvironment = {
                canUseDOM: canUseDOM,
                canUseWorkers: "undefined" != typeof Worker,
                canUseEventListeners: canUseDOM && !(!window.addEventListener && !window.attachEvent),
                canUseViewport: canUseDOM && !!window.screen,
                isInWorker: !canUseDOM
            };
            module.exports = ExecutionEnvironment;
        }, function (module, exports) {
            "use strict";

            function installGlobalHook(window) {
                function detectReactBuildType(renderer) {
                    try {
                        if ("string" == typeof renderer.version) return renderer.bundleType > 0 ? "development" : "production";
                        var toString = Function.prototype.toString;

                        if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
                            var renderRootCode = toString.call(renderer.Mount._renderNewRootComponent);
                            return 0 !== renderRootCode.indexOf("function") ? "production" : renderRootCode.indexOf("storedMeasure") !== -1 ? "development" : renderRootCode.indexOf("should be a pure function") !== -1 ? renderRootCode.indexOf("NODE_ENV") !== -1 ? "development" : renderRootCode.indexOf("development") !== -1 ? "development" : renderRootCode.indexOf("true") !== -1 ? "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : renderRootCode.indexOf("._registerComponent") !== -1 ? "outdated" : "production";
                        }
                    } catch (err) {}

                    return "production";
                }

                if (!window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
                    var hasDetectedBadDCE = !1,
                        hook = {
                        _renderers: {},
                        helpers: {},
                        checkDCE: function checkDCE(fn) {
                            try {
                                var toString = Function.prototype.toString,
                                    code = toString.call(fn);
                                code.indexOf("^_^") > -1 && (hasDetectedBadDCE = !0, setTimeout(function () {
                                    throw new Error("React is running in production mode, but dead code elimination has not been applied. Read how to correctly configure React for production: https://fb.me/react-perf-use-the-production-build");
                                }));
                            } catch (err) {}
                        },
                        inject: function inject(renderer) {
                            var id = Math.random().toString(16).slice(2);
                            hook._renderers[id] = renderer;
                            var reactBuildType = hasDetectedBadDCE ? "deadcode" : detectReactBuildType(renderer);
                            return hook.emit("renderer", {
                                id: id,
                                renderer: renderer,
                                reactBuildType: reactBuildType
                            }), id;
                        },
                        _listeners: {},
                        sub: function sub(evt, fn) {
                            return hook.on(evt, fn), function () {
                                return hook.off(evt, fn);
                            };
                        },
                        on: function on(evt, fn) {
                            hook._listeners[evt] || (hook._listeners[evt] = []), hook._listeners[evt].push(fn);
                        },
                        off: function off(evt, fn) {
                            if (hook._listeners[evt]) {
                                var ix = hook._listeners[evt].indexOf(fn);

                                ix !== -1 && hook._listeners[evt].splice(ix, 1), hook._listeners[evt].length || (hook._listeners[evt] = null);
                            }
                        },
                        emit: function emit(evt, data) {
                            hook._listeners[evt] && hook._listeners[evt].map(function (fn) {
                                return fn(data);
                            });
                        },
                        supportsFiber: !0,
                        _fiberRoots: {},
                        getFiberRoots: function getFiberRoots(rendererID) {
                            var roots = hook._fiberRoots;
                            return roots[rendererID] || (roots[rendererID] = new Set()), roots[rendererID];
                        },
                        onCommitFiberUnmount: function onCommitFiberUnmount(rendererID, fiber) {
                            hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberUnmount(fiber);
                        },
                        onCommitFiberRoot: function onCommitFiberRoot(rendererID, root) {
                            var mountedRoots = hook.getFiberRoots(rendererID),
                                current = root.current,
                                isKnownRoot = mountedRoots.has(root),
                                isUnmounting = null == current.memoizedState || null == current.memoizedState.element;
                            isKnownRoot || isUnmounting ? isKnownRoot && isUnmounting && mountedRoots["delete"](root) : mountedRoots.add(root), hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberRoot(root);
                        }
                    };
                    Object.defineProperty(window, "__REACT_DEVTOOLS_GLOBAL_HOOK__", {
                        value: hook
                    });
                }
            }

            module.exports = installGlobalHook;
        }, function (module, exports) {
            "use strict";

            function installRelayHook(window) {
                function decorate(obj, attr, fn) {
                    var old = obj[attr];

                    obj[attr] = function () {
                        var res = old.apply(this, arguments);
                        return fn.apply(this, arguments), res;
                    };
                }

                function emit(name, data) {
                    _eventQueue.push({
                        name: name,
                        data: data
                    }), _listener && _listener(name, data);
                }

                function setRequestListener(listener) {
                    if (_listener) throw new Error("Relay Devtools: Called only call setRequestListener once.");
                    return _listener = listener, _eventQueue.forEach(function (_ref) {
                        var name = _ref.name,
                            data = _ref.data;
                        listener(name, data);
                    }), function () {
                        _listener = null;
                    };
                }

                function recordRequest(type, start, request, requestNumber) {
                    var id = Math.random().toString(16).substr(2);
                    request.then(function (response) {
                        emit("relay:success", {
                            id: id,
                            end: performanceNow(),
                            response: response.response
                        });
                    }, function (error) {
                        emit("relay:failure", {
                            id: id,
                            end: performanceNow(),
                            error: error
                        });
                    });

                    for (var textChunks = [], text = request.getQueryString(); text.length > 0;) {
                        textChunks.push(text.substr(0, TEXT_CHUNK_LENGTH)), text = text.substr(TEXT_CHUNK_LENGTH);
                    }

                    return {
                        id: id,
                        name: request.getDebugName(),
                        requestNumber: requestNumber,
                        start: start,
                        text: textChunks,
                        type: type,
                        variables: request.getVariables()
                    };
                }

                function instrumentRelayRequests(relayInternals) {
                    var NetworkLayer = relayInternals.NetworkLayer;
                    decorate(NetworkLayer, "sendMutation", function (mutation) {
                        requestNumber++, emit("relay:pending", [recordRequest("mutation", performanceNow(), mutation, requestNumber)]);
                    }), decorate(NetworkLayer, "sendQueries", function (queries) {
                        requestNumber++;
                        var start = performanceNow();
                        emit("relay:pending", queries.map(function (query) {
                            return recordRequest("query", start, query, requestNumber);
                        }));
                    });
                    var instrumented = {};

                    for (var key in relayInternals) {
                        relayInternals.hasOwnProperty(key) && (instrumented[key] = relayInternals[key]);
                    }

                    return instrumented.setRequestListener = setRequestListener, instrumented;
                }

                var performanceNow,
                    performance = window.performance;
                performanceNow = performance && "function" == typeof performance.now ? function () {
                    return performance.now();
                } : function () {
                    return Date.now();
                };
                var TEXT_CHUNK_LENGTH = 500,
                    hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;

                if (hook) {
                    var _eventQueue = [],
                        _listener = null,
                        requestNumber = 0,
                        _relayInternals = null;
                    Object.defineProperty(hook, "_relayInternals", {
                        configurable: !0,
                        set: function set(relayInternals) {
                            _relayInternals = instrumentRelayRequests(relayInternals);
                        },
                        get: function get() {
                            return _relayInternals;
                        }
                    });
                }
            }

            module.exports = installRelayHook;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var setupBackend = __webpack_require__(34);

            module.exports = function (hook, agent) {
                var subs = [hook.sub("renderer-attached", function (_ref) {
                    var id = _ref.id,
                        helpers = (_ref.renderer, _ref.helpers);
                    agent.setReactInternals(id, helpers), helpers.walkTree(agent.onMounted.bind(agent, id), agent.addRoot.bind(agent, id));
                }), hook.sub("root", function (_ref2) {
                    var renderer = _ref2.renderer,
                        internalInstance = _ref2.internalInstance;
                    return agent.addRoot(renderer, internalInstance);
                }), hook.sub("mount", function (_ref3) {
                    var renderer = _ref3.renderer,
                        internalInstance = _ref3.internalInstance,
                        data = _ref3.data;
                    return agent.onMounted(renderer, internalInstance, data);
                }), hook.sub("update", function (_ref4) {
                    var internalInstance = (_ref4.renderer, _ref4.internalInstance),
                        data = _ref4.data;
                    return agent.onUpdated(internalInstance, data);
                }), hook.sub("unmount", function (_ref5) {
                    var internalInstance = (_ref5.renderer, _ref5.internalInstance);
                    return agent.onUnmounted(internalInstance);
                })],
                    success = setupBackend(hook);
                success && (hook.emit("react-devtools", agent), hook.reactDevtoolsAgent = agent, agent.on("shutdown", function () {
                    subs.forEach(function (fn) {
                        return fn();
                    }), hook.reactDevtoolsAgent = null;
                }));
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var attachRenderer = __webpack_require__(35);

            module.exports = function (hook) {
                var oldReact = window.React && window.React.__internals;
                oldReact && 0 === Object.keys(hook._renderers).length && hook.inject(oldReact);

                for (var rid in hook._renderers) {
                    hook.helpers[rid] = attachRenderer(hook, rid, hook._renderers[rid]), hook.emit("renderer-attached", {
                        id: rid,
                        renderer: hook._renderers[rid],
                        helpers: hook.helpers[rid]
                    });
                }

                hook.on("renderer", function (_ref) {
                    var id = _ref.id,
                        renderer = _ref.renderer;
                    hook.helpers[id] = attachRenderer(hook, id, renderer), hook.emit("renderer-attached", {
                        id: id,
                        renderer: renderer,
                        helpers: hook.helpers[id]
                    });
                });

                var shutdown = function shutdown() {
                    for (var id in hook.helpers) {
                        hook.helpers[id].cleanup();
                    }

                    hook.off("shutdown", shutdown);
                };

                return hook.on("shutdown", shutdown), !0;
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function attachRenderer(hook, rid, renderer) {
                var rootNodeIDMap = new Map(),
                    extras = {},
                    isPre013 = !renderer.Reconciler;
                if ("function" == typeof renderer.findFiberByHostInstance) return attachRendererFiber(hook, rid, renderer);
                renderer.Mount.findNodeHandle && renderer.Mount.nativeTagToRootNodeID ? (extras.getNativeFromReactElement = function (component) {
                    return renderer.Mount.findNodeHandle(component);
                }, extras.getReactElementFromNative = function (nativeTag) {
                    var id = renderer.Mount.nativeTagToRootNodeID(nativeTag);
                    return rootNodeIDMap.get(id);
                }) : renderer.ComponentTree ? (extras.getNativeFromReactElement = function (component) {
                    return renderer.ComponentTree.getNodeFromInstance(component);
                }, extras.getReactElementFromNative = function (node) {
                    return renderer.ComponentTree.getClosestInstanceFromNode(node);
                }) : renderer.Mount.getID && renderer.Mount.getNode ? (extras.getNativeFromReactElement = function (component) {
                    try {
                        return renderer.Mount.getNode(component._rootNodeID);
                    } catch (e) {
                        return;
                    }
                }, extras.getReactElementFromNative = function (node) {
                    for (var id = renderer.Mount.getID(node); node && node.parentNode && !id;) {
                        node = node.parentNode, id = renderer.Mount.getID(node);
                    }

                    return rootNodeIDMap.get(id);
                }) : console.warn("Unknown react version (does not have getID), probably an unshimmed React Native");
                var oldMethods, oldRenderComponent, oldRenderRoot;
                return renderer.Mount._renderNewRootComponent ? oldRenderRoot = decorateResult(renderer.Mount, "_renderNewRootComponent", function (internalInstance) {
                    hook.emit("root", {
                        renderer: rid,
                        internalInstance: internalInstance
                    });
                }) : renderer.Mount.renderComponent && (oldRenderComponent = decorateResult(renderer.Mount, "renderComponent", function (internalInstance) {
                    hook.emit("root", {
                        renderer: rid,
                        internalInstance: internalInstance._reactInternalInstance
                    });
                })), renderer.Component ? (console.error("You are using a version of React with limited support in this version of the devtools.\nPlease upgrade to use at least 0.13, or you can downgrade to use the old version of the devtools:\ninstructions here https://github.com/facebook/react-devtools/tree/devtools-next#how-do-i-use-this-for-react--013"), oldMethods = decorateMany(renderer.Component.Mixin, {
                    mountComponent: function mountComponent() {
                        var _this = this;

                        rootNodeIDMap.set(this._rootNodeID, this), setTimeout(function () {
                            hook.emit("mount", {
                                internalInstance: _this,
                                data: getData012(_this),
                                renderer: rid
                            });
                        }, 0);
                    },
                    updateComponent: function updateComponent() {
                        var _this2 = this;

                        setTimeout(function () {
                            hook.emit("update", {
                                internalInstance: _this2,
                                data: getData012(_this2),
                                renderer: rid
                            });
                        }, 0);
                    },
                    unmountComponent: function unmountComponent() {
                        hook.emit("unmount", {
                            internalInstance: this,
                            renderer: rid
                        }), rootNodeIDMap["delete"](this._rootNodeID, this);
                    }
                })) : renderer.Reconciler && (oldMethods = decorateMany(renderer.Reconciler, {
                    mountComponent: function mountComponent(internalInstance, rootID, transaction, context) {
                        var data = getData(internalInstance);
                        rootNodeIDMap.set(internalInstance._rootNodeID, internalInstance), hook.emit("mount", {
                            internalInstance: internalInstance,
                            data: data,
                            renderer: rid
                        });
                    },
                    performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, nextChild, transaction, context) {
                        hook.emit("update", {
                            internalInstance: internalInstance,
                            data: getData(internalInstance),
                            renderer: rid
                        });
                    },
                    receiveComponent: function receiveComponent(internalInstance, nextChild, transaction, context) {
                        hook.emit("update", {
                            internalInstance: internalInstance,
                            data: getData(internalInstance),
                            renderer: rid
                        });
                    },
                    unmountComponent: function unmountComponent(internalInstance) {
                        hook.emit("unmount", {
                            internalInstance: internalInstance,
                            renderer: rid
                        }), rootNodeIDMap["delete"](internalInstance._rootNodeID, internalInstance);
                    }
                })), extras.walkTree = function (visit, visitRoot) {
                    var onMount = function onMount(component, data) {
                        rootNodeIDMap.set(component._rootNodeID, component), visit(component, data);
                    };

                    walkRoots(renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID, onMount, visitRoot, isPre013);
                }, extras.cleanup = function () {
                    oldMethods && (renderer.Component ? restoreMany(renderer.Component.Mixin, oldMethods) : restoreMany(renderer.Reconciler, oldMethods)), oldRenderRoot && (renderer.Mount._renderNewRootComponent = oldRenderRoot), oldRenderComponent && (renderer.Mount.renderComponent = oldRenderComponent), oldMethods = null, oldRenderRoot = null, oldRenderComponent = null;
                }, extras;
            }

            function walkRoots(roots, onMount, onRoot, isPre013) {
                for (var name in roots) {
                    walkNode(roots[name], onMount, isPre013), onRoot(roots[name]);
                }
            }

            function walkNode(internalInstance, onMount, isPre013) {
                var data = isPre013 ? getData012(internalInstance) : getData(internalInstance);
                data.children && Array.isArray(data.children) && data.children.forEach(function (child) {
                    return walkNode(child, onMount, isPre013);
                }), onMount(internalInstance, data);
            }

            function decorateResult(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function (instance) {
                    var res = old.apply(this, arguments);
                    return fn(res), res;
                }, old;
            }

            function decorate(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function (instance) {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                }, old;
            }

            function decorateMany(source, fns) {
                var olds = {};

                for (var name in fns) {
                    olds[name] = decorate(source, name, fns[name]);
                }

                return olds;
            }

            function restoreMany(source, olds) {
                for (var name in olds) {
                    source[name] = olds[name];
                }
            }

            var getData = __webpack_require__(36),
                getData012 = __webpack_require__(41),
                attachRendererFiber = __webpack_require__(42);

            module.exports = attachRenderer;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getData(internalInstance) {
                var children = null,
                    props = null,
                    state = null,
                    context = null,
                    updater = null,
                    name = null,
                    type = null,
                    key = null,
                    ref = null,
                    source = null,
                    text = null,
                    publicInstance = null,
                    nodeType = "Native";
                if ("object" !== ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance))) nodeType = "Text", text = internalInstance + "";else if (null === internalInstance._currentElement || internalInstance._currentElement === !1) nodeType = "Empty";else if (internalInstance._renderedComponent) nodeType = "NativeWrapper", children = [internalInstance._renderedComponent], props = internalInstance._instance.props, state = internalInstance._instance.state, context = internalInstance._instance.context, context && 0 === Object.keys(context).length && (context = null);else if (internalInstance._renderedChildren) children = childrenList(internalInstance._renderedChildren);else if (internalInstance._currentElement && internalInstance._currentElement.props) {
                    var unfilteredChildren = internalInstance._currentElement.props.children,
                        filteredChildren = [];
                    traverseAllChildrenImpl(unfilteredChildren, "", function (_traverseContext, child) {
                        var childType = "undefined" == typeof child ? "undefined" : _typeof(child);
                        "string" !== childType && "number" !== childType || filteredChildren.push(child);
                    }), children = filteredChildren.length <= 1 ? filteredChildren.length ? String(filteredChildren[0]) : void 0 : filteredChildren;
                }

                if (!props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), null != internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), source = internalInstance._currentElement._source, ref = internalInstance._currentElement.ref, "string" == typeof type ? (name = type, null != internalInstance._nativeNode && (publicInstance = internalInstance._nativeNode), null != internalInstance._hostNode && (publicInstance = internalInstance._hostNode)) : "function" == typeof type ? (nodeType = "Composite", name = getDisplayName(type), internalInstance._renderedComponent && (internalInstance._currentElement.props === internalInstance._renderedComponent._currentElement || internalInstance._currentElement.type.isReactTopLevelWrapper) && (nodeType = "Wrapper"), null === name && (name = "No display name")) : "string" == typeof internalInstance._stringText ? (nodeType = "Text", text = internalInstance._stringText) : name = getDisplayName(type)), internalInstance._instance) {
                    var inst = internalInstance._instance,
                        forceUpdate = inst.forceUpdate || inst.updater && inst.updater.enqueueForceUpdate && function (cb) {
                        inst.updater.enqueueForceUpdate(this, cb, "forceUpdate");
                    };

                    updater = {
                        setState: inst.setState && inst.setState.bind(inst),
                        forceUpdate: forceUpdate && forceUpdate.bind(inst),
                        setInProps: forceUpdate && setInProps.bind(null, internalInstance, forceUpdate),
                        setInState: inst.forceUpdate && setInState.bind(null, inst),
                        setInContext: forceUpdate && setInContext.bind(null, inst, forceUpdate)
                    }, "function" == typeof type && (publicInstance = inst), inst._renderedChildren && (children = childrenList(inst._renderedChildren));
                }

                return "function" == typeof internalInstance.setNativeProps && (updater = {
                    setNativeProps: function setNativeProps(nativeProps) {
                        internalInstance.setNativeProps(nativeProps);
                    }
                }), {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: source,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(internalInst, forceUpdate, path, value) {
                var element = internalInst._currentElement;
                internalInst._currentElement = _extends({}, element, {
                    props: copyWithSet(element.props, path, value)
                }), forceUpdate.call(internalInst._instance);
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, forceUpdate, path, value) {
                setIn(inst.context, path, value), forceUpdate.call(inst);
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            function childrenList(children) {
                var res = [];

                for (var name in children) {
                    res.push(children[name]);
                }

                return res;
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            },
                _typeof = "function" == typeof Symbol && "symbol" == _typeof2(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            },
                copyWithSet = __webpack_require__(37),
                getDisplayName = __webpack_require__(38),
                traverseAllChildrenImpl = __webpack_require__(39);

            module.exports = getData;
        }, function (module, exports) {
            "use strict";

            function copyWithSetImpl(obj, path, idx, value) {
                if (idx >= path.length) return value;
                var key = path[idx],
                    updated = Array.isArray(obj) ? obj.slice() : _extends({}, obj);
                return updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value), updated;
            }

            function copyWithSet(obj, path, value) {
                return copyWithSetImpl(obj, path, 0, value);
            }

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                    }
                }

                return target;
            };

            module.exports = copyWithSet;
        }, function (module, exports) {
            "use strict";

            function getDisplayName(type) {
                if (cachedDisplayNames.has(type)) return cachedDisplayNames.get(type);
                var displayName = void 0;
                "string" == typeof type.displayName && (displayName = type.displayName), displayName || (displayName = type.name || "Unknown");
                var match = displayName.match(FB_MODULE_RE);

                if (match) {
                    var componentName = match[1],
                        moduleName = match[2];
                    componentName && moduleName && (moduleName === componentName || moduleName.startsWith(componentName + ".")) && (displayName = componentName);
                }

                return cachedDisplayNames.set(type, displayName), displayName;
            }

            var FB_MODULE_RE = /^(.*) \[from (.*)\]$/,
                cachedDisplayNames = new WeakMap();
            module.exports = getDisplayName;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function escape(key) {
                var escapeRegex = /[=:]/g,
                    escaperLookup = {
                    "=": "=0",
                    ":": "=2"
                },
                    escapedString = ("" + key).replace(escapeRegex, function (match) {
                    return escaperLookup[match];
                });
                return "$" + escapedString;
            }

            function getComponentKey(component, index) {
                return "object" === ("undefined" == typeof component ? "undefined" : _typeof(component)) && null !== component && null != component.key ? escape(component.key) : index.toString(36);
            }

            function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
                var type = "undefined" == typeof children ? "undefined" : _typeof(children);
                if ("undefined" !== type && "boolean" !== type || (children = null), null === children || "string" === type || "number" === type || "object" === type && children.$$typeof === REACT_ELEMENT_TYPE) return callback(traverseContext, children, "" === nameSoFar ? SEPARATOR + getComponentKey(children, 0) : nameSoFar), 1;
                var child,
                    nextName,
                    subtreeCount = 0,
                    nextNamePrefix = "" === nameSoFar ? SEPARATOR : nameSoFar + SUBSEPARATOR;
                if (Array.isArray(children)) for (var i = 0; i < children.length; i++) {
                    child = children[i], nextName = nextNamePrefix + getComponentKey(child, i), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                } else {
                    var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
                    if ("function" == typeof iteratorFn) for (var step, iterator = iteratorFn.call(children), ii = 0; !(step = iterator.next()).done;) {
                        child = step.value, nextName = nextNamePrefix + getComponentKey(child, ii++), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                    } else if ("object" === type) {
                        var addendum = " If you meant to render a collection of children, use an array instead.",
                            childrenString = "" + children;
                        invariant(!1, "The React Devtools cannot render an object as a child. (found: %s).%s", "[object Object]" === childrenString ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString, addendum);
                    }
                }
                return subtreeCount;
            }

            var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            },
                invariant = __webpack_require__(40),
                SEPARATOR = ".",
                SUBSEPARATOR = ":",
                FAUX_ITERATOR_SYMBOL = "@@iterator",
                ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
                REACT_ELEMENT_TYPE = "function" == typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103;

            module.exports = traverseAllChildrenImpl;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function invariant(condition, format, a, b, c, d, e, f) {
                if (!condition) {
                    var error;
                    if (void 0 === format) error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
                        var args = [a, b, c, d, e, f],
                            argIndex = 0;
                        error = new Error(format.replace(/%s/g, function () {
                            return args[argIndex++];
                        })), error.name = "Invariant Violation";
                    }
                    throw error.framesToPop = 1, error;
                }
            }

            module.exports = invariant;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getData012(internalInstance) {
                var children = null,
                    props = internalInstance.props,
                    state = internalInstance.state,
                    context = internalInstance.context,
                    updater = null,
                    name = null,
                    type = null,
                    key = null,
                    ref = null,
                    text = null,
                    publicInstance = null,
                    nodeType = "Native";
                return internalInstance._renderedComponent ? (nodeType = "Wrapper", children = [internalInstance._renderedComponent], context && 0 === Object.keys(context).length && (context = null)) : internalInstance._renderedChildren ? (name = internalInstance.constructor.displayName, children = childrenList(internalInstance._renderedChildren)) : "string" == typeof props.children && (name = internalInstance.constructor.displayName, children = props.children, nodeType = "Native"), !props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), ref = internalInstance._currentElement.ref, "string" == typeof type ? name = type : (nodeType = "Composite", name = type.displayName, name || (name = "No display name"))), name || (name = internalInstance.constructor.displayName || "No display name", nodeType = "Composite"), "string" == typeof props && (nodeType = "Text", text = props, props = null, name = null), internalInstance.forceUpdate && (updater = {
                    setState: internalInstance.setState.bind(internalInstance),
                    forceUpdate: internalInstance.forceUpdate.bind(internalInstance),
                    setInProps: internalInstance.forceUpdate && setInProps.bind(null, internalInstance),
                    setInState: internalInstance.forceUpdate && setInState.bind(null, internalInstance),
                    setInContext: internalInstance.forceUpdate && setInContext.bind(null, internalInstance)
                }, publicInstance = internalInstance), {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: null,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(inst, path, value) {
                inst.props = copyWithSet(inst.props, path, value), inst.forceUpdate();
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, path, value) {
                setIn(inst.context, path, value), inst.forceUpdate();
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            function childrenList(children) {
                var res = [];

                for (var name in children) {
                    res.push(children[name]);
                }

                return res;
            }

            var copyWithSet = __webpack_require__(37);

            module.exports = getData012;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function attachRendererFiber(hook, rid, renderer) {
                function getOpaqueNode(fiber) {
                    if (opaqueNodes.has(fiber)) return fiber;
                    var alternate = fiber.alternate;
                    return null != alternate && opaqueNodes.has(alternate) ? alternate : (opaqueNodes.add(fiber), fiber);
                }

                function hasDataChanged(prevFiber, nextFiber) {
                    if (prevFiber.tag === ClassComponent) {
                        if ((nextFiber.effectTag & PerformedWork) !== PerformedWork) return !1;
                        if (prevFiber.stateNode.context !== nextFiber.stateNode.context) return !0;
                        if (null != nextFiber.updateQueue && nextFiber.updateQueue.hasForceUpdate) return !0;
                    }

                    return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref || prevFiber._debugSource !== nextFiber._debugSource;
                }

                function flushPendingEvents() {
                    var events = pendingEvents;
                    pendingEvents = [];

                    for (var i = 0; i < events.length; i++) {
                        var event = events[i];
                        hook.emit(event.type, event);
                    }
                }

                function enqueueMount(fiber) {
                    pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        data: getDataFiber(fiber, getOpaqueNode),
                        renderer: rid,
                        type: "mount"
                    });
                    var isRoot = fiber.tag === HostRoot;
                    isRoot && pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        renderer: rid,
                        type: "root"
                    });
                }

                function enqueueUpdateIfNecessary(fiber, hasChildOrderChanged) {
                    (hasChildOrderChanged || hasDataChanged(fiber.alternate, fiber)) && pendingEvents.push({
                        internalInstance: getOpaqueNode(fiber),
                        data: getDataFiber(fiber, getOpaqueNode),
                        renderer: rid,
                        type: "update"
                    });
                }

                function enqueueUnmount(fiber) {
                    var isRoot = fiber.tag === HostRoot,
                        opaqueNode = getOpaqueNode(fiber),
                        event = {
                        internalInstance: opaqueNode,
                        renderer: rid,
                        type: "unmount"
                    };
                    isRoot ? pendingEvents.push(event) : pendingEvents.unshift(event), opaqueNodes["delete"](opaqueNode);
                }

                function mountFiber(fiber) {
                    var node = fiber;

                    outer: for (;;) {
                        if (node.child) node.child["return"] = node, node = node.child;else {
                            if (enqueueMount(node), node == fiber) return;

                            if (!node.sibling) {
                                for (; node["return"];) {
                                    if (node = node["return"], enqueueMount(node), node == fiber) return;

                                    if (node.sibling) {
                                        node.sibling["return"] = node["return"], node = node.sibling;
                                        continue outer;
                                    }
                                }

                                return;
                            }

                            node.sibling["return"] = node["return"], node = node.sibling;
                        }
                    }
                }

                function updateFiber(nextFiber, prevFiber) {
                    var hasChildOrderChanged = !1;

                    if (nextFiber.child !== prevFiber.child) {
                        for (var nextChild = nextFiber.child, prevChildAtSameIndex = prevFiber.child; nextChild;) {
                            if (nextChild.alternate) {
                                var prevChild = nextChild.alternate;
                                updateFiber(nextChild, prevChild), hasChildOrderChanged || prevChild === prevChildAtSameIndex || (hasChildOrderChanged = !0);
                            } else mountFiber(nextChild), hasChildOrderChanged || (hasChildOrderChanged = !0);

                            nextChild = nextChild.sibling, hasChildOrderChanged || null == prevChildAtSameIndex || (prevChildAtSameIndex = prevChildAtSameIndex.sibling);
                        }

                        hasChildOrderChanged || null == prevChildAtSameIndex || (hasChildOrderChanged = !0);
                    }

                    enqueueUpdateIfNecessary(nextFiber, hasChildOrderChanged);
                }

                function walkTree() {
                    hook.getFiberRoots(rid).forEach(function (root) {
                        mountFiber(root.current);
                    }), flushPendingEvents();
                }

                function cleanup() {}

                function handleCommitFiberUnmount(fiber) {
                    enqueueUnmount(fiber);
                }

                function handleCommitFiberRoot(root) {
                    var current = root.current,
                        alternate = current.alternate;

                    if (alternate) {
                        var wasMounted = null != alternate.memoizedState && null != alternate.memoizedState.element,
                            isMounted = null != current.memoizedState && null != current.memoizedState.element;
                        !wasMounted && isMounted ? mountFiber(current) : wasMounted && isMounted ? updateFiber(current, alternate) : wasMounted && !isMounted && enqueueUnmount(current);
                    } else mountFiber(current);

                    flushPendingEvents();
                }

                function getNativeFromReactElement(fiber) {
                    try {
                        var opaqueNode = fiber,
                            hostInstance = renderer.findHostInstanceByFiber(opaqueNode);
                        return hostInstance;
                    } catch (err) {
                        return null;
                    }
                }

                function getReactElementFromNative(hostInstance) {
                    var fiber = renderer.findFiberByHostInstance(hostInstance);

                    if (null != fiber) {
                        var opaqueNode = getOpaqueNode(fiber);
                        return opaqueNode;
                    }

                    return null;
                }

                var opaqueNodes = new Set(),
                    pendingEvents = [];
                return {
                    getNativeFromReactElement: getNativeFromReactElement,
                    getReactElementFromNative: getReactElementFromNative,
                    handleCommitFiberRoot: handleCommitFiberRoot,
                    handleCommitFiberUnmount: handleCommitFiberUnmount,
                    cleanup: cleanup,
                    walkTree: walkTree
                };
            }

            var getDataFiber = __webpack_require__(43),
                _require = __webpack_require__(44),
                ClassComponent = _require.ClassComponent,
                HostRoot = _require.HostRoot,
                PerformedWork = 1;

            module.exports = attachRendererFiber;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function getDataFiber(fiber, getOpaqueNode) {
                var type = fiber.type,
                    key = fiber.key,
                    ref = fiber.ref,
                    source = fiber._debugSource,
                    publicInstance = null,
                    props = null,
                    state = null,
                    children = null,
                    context = null,
                    updater = null,
                    nodeType = null,
                    name = null,
                    text = null;

                switch (fiber.tag) {
                    case FunctionalComponent:
                    case ClassComponent:
                        nodeType = "Composite", name = getDisplayName(fiber.type), publicInstance = fiber.stateNode, props = fiber.memoizedProps, state = fiber.memoizedState, null != publicInstance && (context = publicInstance.context, context && 0 === Object.keys(context).length && (context = null));
                        var inst = publicInstance;
                        inst && (updater = {
                            setState: inst.setState && inst.setState.bind(inst),
                            forceUpdate: inst.forceUpdate && inst.forceUpdate.bind(inst),
                            setInProps: inst.forceUpdate && setInProps.bind(null, fiber),
                            setInState: inst.forceUpdate && setInState.bind(null, inst),
                            setInContext: inst.forceUpdate && setInContext.bind(null, inst)
                        }), children = [];
                        break;

                    case HostRoot:
                        nodeType = "Wrapper", children = [];
                        break;

                    case HostPortal:
                        nodeType = "Portal", name = "ReactPortal", props = {
                            target: fiber.stateNode.containerInfo
                        }, children = [];
                        break;

                    case HostComponent:
                        nodeType = "Native", name = fiber.type, name = name.replace("topsecret-", ""), publicInstance = fiber.stateNode, props = fiber.memoizedProps, children = "string" == typeof props.children || "number" == typeof props.children ? props.children.toString() : [], "function" == typeof fiber.stateNode.setNativeProps && (updater = {
                            setNativeProps: function setNativeProps(nativeProps) {
                                fiber.stateNode.setNativeProps(nativeProps);
                            }
                        });
                        break;

                    case HostText:
                        nodeType = "Text", text = fiber.memoizedProps;
                        break;

                    case Fragment:
                        nodeType = "Wrapper", children = [];
                        break;

                    default:
                        var symbolOrNumber = "object" === ("undefined" == typeof type ? "undefined" : _typeof(type)) && null !== type ? type.$$typeof : type,
                            switchValue = "symbol" === ("undefined" == typeof symbolOrNumber ? "undefined" : _typeof(symbolOrNumber)) ? symbolOrNumber.toString() : symbolOrNumber;

                        switch (switchValue) {
                            case ASYNC_MODE_NUMBER:
                            case ASYNC_MODE_SYMBOL_STRING:
                                nodeType = "Composite", name = "AsyncMode", children = [];
                                break;

                            case CONTEXT_PROVIDER_NUMBER:
                            case CONTEXT_PROVIDER_SYMBOL_STRING:
                                nodeType = "Composite", props = fiber.memoizedProps, name = "Context.Provider", children = [];
                                break;

                            case CONTEXT_CONSUMER_NUMBER:
                            case CONTEXT_CONSUMER_SYMBOL_STRING:
                                nodeType = "Composite", props = fiber.memoizedProps, name = "Context.Consumer", children = [];
                                break;

                            case STRICT_MODE_NUMBER:
                            case STRICT_MODE_SYMBOL_STRING:
                                nodeType = "Composite", name = "StrictMode", children = [];
                                break;

                            default:
                                nodeType = "Native", props = fiber.memoizedProps, name = "TODO_NOT_IMPLEMENTED_YET", children = [];
                        }

                }

                if (Array.isArray(children)) for (var child = fiber.child; child;) {
                    children.push(getOpaqueNode(child)), child = child.sibling;
                }
                return {
                    nodeType: nodeType,
                    type: type,
                    key: key,
                    ref: ref,
                    source: source,
                    name: name,
                    props: props,
                    state: state,
                    context: context,
                    children: children,
                    text: text,
                    updater: updater,
                    publicInstance: publicInstance
                };
            }

            function setInProps(fiber, path, value) {
                var inst = fiber.stateNode;
                fiber.pendingProps = copyWithSet(inst.props, path, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps), fiber.stateNode.forceUpdate();
            }

            function setInState(inst, path, value) {
                setIn(inst.state, path, value), inst.forceUpdate();
            }

            function setInContext(inst, path, value) {
                setIn(inst.context, path, value), inst.forceUpdate();
            }

            function setIn(obj, path, value) {
                var last = path.pop(),
                    parent = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, obj);
                parent && (parent[last] = value);
            }

            var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            },
                copyWithSet = __webpack_require__(37),
                getDisplayName = __webpack_require__(38),
                _require = __webpack_require__(44),
                FunctionalComponent = _require.FunctionalComponent,
                ClassComponent = _require.ClassComponent,
                HostRoot = _require.HostRoot,
                HostPortal = _require.HostPortal,
                HostComponent = _require.HostComponent,
                HostText = _require.HostText,
                Fragment = _require.Fragment,
                _require2 = __webpack_require__(45),
                ASYNC_MODE_NUMBER = _require2.ASYNC_MODE_NUMBER,
                ASYNC_MODE_SYMBOL_STRING = _require2.ASYNC_MODE_SYMBOL_STRING,
                CONTEXT_CONSUMER_NUMBER = _require2.CONTEXT_CONSUMER_NUMBER,
                CONTEXT_CONSUMER_SYMBOL_STRING = _require2.CONTEXT_CONSUMER_SYMBOL_STRING,
                CONTEXT_PROVIDER_NUMBER = _require2.CONTEXT_PROVIDER_NUMBER,
                CONTEXT_PROVIDER_SYMBOL_STRING = _require2.CONTEXT_PROVIDER_SYMBOL_STRING,
                STRICT_MODE_NUMBER = _require2.STRICT_MODE_NUMBER,
                STRICT_MODE_SYMBOL_STRING = _require2.STRICT_MODE_SYMBOL_STRING;

            module.exports = getDataFiber;
        }, function (module, exports) {
            "use strict";

            module.exports = {
                IndeterminateComponent: 0,
                FunctionalComponent: 1,
                ClassComponent: 2,
                HostRoot: 3,
                HostPortal: 4,
                HostComponent: 5,
                HostText: 6,
                CoroutineComponent: 7,
                CoroutineHandlerPhase: 8,
                YieldComponent: 9,
                Fragment: 10
            };
        }, function (module, exports) {
            "use strict";

            module.exports = {
                ASYNC_MODE_NUMBER: 60111,
                ASYNC_MODE_SYMBOL_STRING: "Symbol(react.async_mode)",
                CONTEXT_CONSUMER_NUMBER: 60110,
                CONTEXT_CONSUMER_SYMBOL_STRING: "Symbol(react.context)",
                CONTEXT_PROVIDER_NUMBER: 60109,
                CONTEXT_PROVIDER_SYMBOL_STRING: "Symbol(react.provider)",
                STRICT_MODE_NUMBER: 60108,
                STRICT_MODE_SYMBOL_STRING: "Symbol(react.strict_mode)"
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _defineProperty(obj, key, value) {
                return key in obj ? Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : obj[key] = value, obj;
            }

            function measureStyle(agent, bridge, resolveRNStyle, id) {
                var node = agent.elementData.get(id);
                if (!node || !node.props) return void bridge.send("rn-style:measure", {});
                var style = resolveRNStyle(node.props.style);
                styleOverridesByHostComponentId[id] && (style = _extends2({}, style, styleOverridesByHostComponentId[id]));
                var instance = node.publicInstance;
                return instance && instance.measure ? void instance.measure(function (x, y, width, height, left, top) {
                    if ("number" != typeof x) return void bridge.send("rn-style:measure", {
                        style: style
                    });
                    var margin = style && resolveBoxStyle("margin", style) || blank,
                        padding = style && resolveBoxStyle("padding", style) || blank;
                    bridge.send("rn-style:measure", {
                        style: style,
                        measuredLayout: {
                            x: x,
                            y: y,
                            width: width,
                            height: height,
                            left: left,
                            top: top,
                            margin: margin,
                            padding: padding
                        }
                    });
                }) : void bridge.send("rn-style:measure", {
                    style: style
                });
            }

            function shallowClone(obj) {
                var nobj = {};

                for (var n in obj) {
                    nobj[n] = obj[n];
                }

                return nobj;
            }

            function renameStyle(agent, id, oldName, newName, val) {
                var _ref3,
                    data = agent.elementData.get(id),
                    newStyle = newName ? (_ref3 = {}, _defineProperty(_ref3, oldName, void 0), _defineProperty(_ref3, newName, val), _ref3) : _defineProperty({}, oldName, void 0);

                if (data && data.updater && data.updater.setInProps) {
                    var customStyle,
                        style = data && data.props && data.props.style;

                    if (Array.isArray(style)) {
                        var lastLength = style.length - 1;
                        "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : (customStyle = shallowClone(style[lastLength]), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style", lastLength], customStyle));
                    } else "object" === ("undefined" == typeof style ? "undefined" : _typeof(style)) ? (customStyle = shallowClone(style), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style"], customStyle)) : (style = [style, newStyle], data.updater.setInProps(["style"], style));
                } else {
                    if (!(data && data.updater && data.updater.setNativeProps)) return;
                    styleOverridesByHostComponentId[id] ? _extends2(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                        style: newStyle
                    });
                }

                agent.emit("hideHighlight");
            }

            function setStyle(agent, id, attr, val) {
                var data = agent.elementData.get(id),
                    newStyle = _defineProperty({}, attr, val);

                if (data && data.updater && data.updater.setInProps) {
                    var style = data.props && data.props.style;

                    if (Array.isArray(style)) {
                        var lastLength = style.length - 1;
                        "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : data.updater.setInProps(["style", lastLength, attr], val);
                    } else style = [style, newStyle], data.updater.setInProps(["style"], style);
                } else {
                    if (!(data && data.updater && data.updater.setNativeProps)) return;
                    styleOverridesByHostComponentId[id] ? _extends2(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                        style: newStyle
                    });
                }

                agent.emit("hideHighlight");
            }

            var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
                return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
            },
                resolveBoxStyle = __webpack_require__(47),
                styleOverridesByHostComponentId = {};

            module.exports = function (bridge, agent, resolveRNStyle) {
                bridge.onCall("rn-style:get", function (id) {
                    var node = agent.elementData.get(id);
                    return node && node.props ? resolveRNStyle(node.props.style) : null;
                }), bridge.on("rn-style:measure", function (id) {
                    measureStyle(agent, bridge, resolveRNStyle, id);
                }), bridge.on("rn-style:rename", function (_ref) {
                    var id = _ref.id,
                        oldName = _ref.oldName,
                        newName = _ref.newName,
                        val = _ref.val;
                    renameStyle(agent, id, oldName, newName, val), setTimeout(function () {
                        return measureStyle(agent, bridge, resolveRNStyle, id);
                    });
                }), bridge.on("rn-style:set", function (_ref2) {
                    var id = _ref2.id,
                        attr = _ref2.attr,
                        val = _ref2.val;
                    setStyle(agent, id, attr, val), setTimeout(function () {
                        return measureStyle(agent, bridge, resolveRNStyle, id);
                    });
                });
            };

            var blank = {
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            };
        }, function (module, exports) {
            "use strict";

            function resolveBoxStyle(prefix, style) {
                var res = {},
                    subs = ["top", "left", "bottom", "right"],
                    set = !1;
                return subs.forEach(function (sub) {
                    res[sub] = style[prefix] || 0;
                }), style[prefix] && (set = !0), style[prefix + "Vertical"] && (res.top = res.bottom = style[prefix + "Vertical"], set = !0), style[prefix + "Horizontal"] && (res.left = res.right = style[prefix + "Horizontal"], set = !0), subs.forEach(function (sub) {
                    var val = style[prefix + capFirst(sub)];
                    val && (res[sub] = val, set = !0);
                }), set ? res : null;
            }

            function capFirst(text) {
                return text[0].toUpperCase() + text.slice(1);
            }

            module.exports = resolveBoxStyle;
        }, function (module, exports) {
            "use strict";

            function decorate(obj, attr, fn) {
                var old = obj[attr];
                return obj[attr] = function () {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                }, function () {
                    obj[attr] = old;
                };
            }

            var subscriptionEnabled = !1;

            module.exports = function (bridge, agent, hook) {
                function sendStoreData() {
                    subscriptionEnabled && bridge.send("relay:store", {
                        id: "relay:store",
                        nodes: DefaultStoreData.getNodeData()
                    });
                }

                var shouldEnable = !!hook._relayInternals;

                if (bridge.onCall("relay:check", function () {
                    return shouldEnable;
                }), shouldEnable) {
                    var _hook$_relayInternals = hook._relayInternals,
                        DefaultStoreData = _hook$_relayInternals.DefaultStoreData,
                        setRequestListener = _hook$_relayInternals.setRequestListener;
                    bridge.onCall("relay:store:enable", function () {
                        subscriptionEnabled = !0, sendStoreData();
                    }), bridge.onCall("relay:store:disable", function () {
                        subscriptionEnabled = !1;
                    }), sendStoreData(), decorate(DefaultStoreData, "handleUpdatePayload", sendStoreData), decorate(DefaultStoreData, "handleQueryPayload", sendStoreData);
                    var removeListener = setRequestListener(function (event, data) {
                        bridge.send(event, data);
                    });
                    hook.on("shutdown", removeListener);
                }
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            var Highlighter = __webpack_require__(50);

            module.exports = function (agent) {
                var hl = new Highlighter(window, function (node) {
                    agent.selectFromDOMNode(node);
                });
                agent.on("highlight", function (data) {
                    return hl.highlight(data.node, data.name);
                }), agent.on("highlightMany", function (nodes) {
                    return hl.highlightMany(nodes);
                }), agent.on("hideHighlight", function () {
                    return hl.hideHighlight();
                }), agent.on("refreshMultiOverlay", function () {
                    return hl.refreshMultiOverlay();
                }), agent.on("startInspecting", function () {
                    return hl.startInspecting();
                }), agent.on("stopInspecting", function () {
                    return hl.stopInspecting();
                }), agent.on("shutdown", function () {
                    hl.remove();
                });
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function captureSubscription(obj, evt, cb) {
                return obj.addEventListener(evt, cb, !0), function () {
                    return obj.removeEventListener(evt, cb, !0);
                };
            }

            function makeMagnifier() {
                var button = window.document.createElement("button");
                return button.innerHTML = "&#128269;", button.style.backgroundColor = "transparent", button.style.border = "none", button.style.outline = "none", button.style.cursor = "pointer", button.style.position = "fixed", button.style.bottom = "10px", button.style.right = "10px", button.style.fontSize = "30px", button.style.zIndex = 1e7, button;
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                Overlay = __webpack_require__(51),
                MultiOverlay = __webpack_require__(53),
                Highlighter = function () {
                function Highlighter(win, onSelect) {
                    _classCallCheck(this, Highlighter), this._win = win, this._onSelect = onSelect, this._overlay = null, this._multiOverlay = null, this._subs = [];
                }

                return _createClass(Highlighter, [{
                    key: "startInspecting",
                    value: function value() {
                        this._inspecting = !0, this._subs = [captureSubscription(this._win, "mouseover", this.onHover.bind(this)), captureSubscription(this._win, "mousedown", this.onMouseDown.bind(this)), captureSubscription(this._win, "click", this.onClick.bind(this))];
                    }
                }, {
                    key: "stopInspecting",
                    value: function value() {
                        this._subs.forEach(function (unsub) {
                            return unsub();
                        }), this.hideHighlight();
                    }
                }, {
                    key: "remove",
                    value: function value() {
                        this.stopInspecting(), this._button && this._button.parentNode && this._button.parentNode.removeChild(this._button);
                    }
                }, {
                    key: "highlight",
                    value: function value(node, name) {
                        this.removeMultiOverlay(), node.nodeType !== Node.COMMENT_NODE && (this._overlay || (this._overlay = new Overlay(this._win)), this._overlay.inspect(node, name));
                    }
                }, {
                    key: "highlightMany",
                    value: function value(nodes) {
                        this.removeOverlay(), this._multiOverlay || (this._multiOverlay = new MultiOverlay(this._win)), this._multiOverlay.highlightMany(nodes);
                    }
                }, {
                    key: "hideHighlight",
                    value: function value() {
                        this._inspecting = !1, this.removeOverlay(), this.removeMultiOverlay();
                    }
                }, {
                    key: "refreshMultiOverlay",
                    value: function value() {
                        this._multiOverlay && this._multiOverlay.refresh();
                    }
                }, {
                    key: "removeOverlay",
                    value: function value() {
                        this._overlay && (this._overlay.remove(), this._overlay = null);
                    }
                }, {
                    key: "removeMultiOverlay",
                    value: function value() {
                        this._multiOverlay && (this._multiOverlay.remove(), this._multiOverlay = null);
                    }
                }, {
                    key: "onMouseDown",
                    value: function value(evt) {
                        this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this._onSelect(evt.target));
                    }
                }, {
                    key: "onClick",
                    value: function value(evt) {
                        this._inspecting && (this._subs.forEach(function (unsub) {
                            return unsub();
                        }), evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.hideHighlight());
                    }
                }, {
                    key: "onHover",
                    value: function value(evt) {
                        this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.highlight(evt.target));
                    }
                }, {
                    key: "injectButton",
                    value: function value() {
                        this._button = makeMagnifier(), this._button.onclick = this.startInspecting.bind(this), this._win.document.body.appendChild(this._button);
                    }
                }]), Highlighter;
            }();

            module.exports = Highlighter;
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            function findTipPos(dims, win) {
                var top,
                    tipHeight = 20,
                    margin = 5;
                return top = dims.top + dims.height + tipHeight <= win.innerHeight ? dims.top + dims.height < 0 ? margin : dims.top + dims.height + margin : dims.top - tipHeight <= win.innerHeight ? dims.top - tipHeight - margin < margin ? margin : dims.top - tipHeight - margin : win.innerHeight - tipHeight - margin, top += "px", dims.left < 0 ? {
                    top: top,
                    left: margin
                } : dims.left + 200 > win.innerWidth ? {
                    top: top,
                    right: margin
                } : {
                    top: top,
                    left: dims.left + margin + "px"
                };
            }

            function getElementDimensions(domElement) {
                var calculatedStyle = window.getComputedStyle(domElement);
                return {
                    borderLeft: +calculatedStyle.borderLeftWidth.match(/[0-9]*/)[0],
                    borderRight: +calculatedStyle.borderRightWidth.match(/[0-9]*/)[0],
                    borderTop: +calculatedStyle.borderTopWidth.match(/[0-9]*/)[0],
                    borderBottom: +calculatedStyle.borderBottomWidth.match(/[0-9]*/)[0],
                    marginLeft: +calculatedStyle.marginLeft.match(/[0-9]*/)[0],
                    marginRight: +calculatedStyle.marginRight.match(/[0-9]*/)[0],
                    marginTop: +calculatedStyle.marginTop.match(/[0-9]*/)[0],
                    marginBottom: +calculatedStyle.marginBottom.match(/[0-9]*/)[0],
                    paddingLeft: +calculatedStyle.paddingLeft.match(/[0-9]*/)[0],
                    paddingRight: +calculatedStyle.paddingRight.match(/[0-9]*/)[0],
                    paddingTop: +calculatedStyle.paddingTop.match(/[0-9]*/)[0],
                    paddingBottom: +calculatedStyle.paddingBottom.match(/[0-9]*/)[0]
                };
            }

            function getOwnerWindow(node) {
                return node.ownerDocument ? node.ownerDocument.defaultView : null;
            }

            function getOwnerIframe(node) {
                var nodeWindow = getOwnerWindow(node);
                return nodeWindow ? nodeWindow.frameElement : null;
            }

            function getBoundingClientRectWithBorderOffset(node) {
                var dimensions = getElementDimensions(node);
                return mergeRectOffsets([node.getBoundingClientRect(), {
                    top: dimensions.borderTop,
                    left: dimensions.borderLeft,
                    bottom: dimensions.borderBottom,
                    right: dimensions.borderRight,
                    width: 0,
                    height: 0
                }]);
            }

            function mergeRectOffsets(rects) {
                return rects.reduce(function (previousRect, rect) {
                    return null == previousRect ? rect : {
                        top: previousRect.top + rect.top,
                        left: previousRect.left + rect.left,
                        width: previousRect.width,
                        height: previousRect.height,
                        bottom: previousRect.bottom + rect.bottom,
                        right: previousRect.right + rect.right
                    };
                });
            }

            function getNestedBoundingClientRect(node, boundaryWindow) {
                var ownerIframe = getOwnerIframe(node);

                if (ownerIframe && ownerIframe !== boundaryWindow) {
                    for (var rects = [node.getBoundingClientRect()], currentIframe = ownerIframe, onlyOneMore = !1; currentIframe;) {
                        var rect = getBoundingClientRectWithBorderOffset(currentIframe);
                        if (rects.push(rect), currentIframe = getOwnerIframe(currentIframe), onlyOneMore) break;
                        currentIframe && getOwnerWindow(currentIframe) === boundaryWindow && (onlyOneMore = !0);
                    }

                    return mergeRectOffsets(rects);
                }

                return node.getBoundingClientRect();
            }

            function boxWrap(dims, what, node) {
                assign(node.style, {
                    borderTopWidth: dims[what + "Top"] + "px",
                    borderLeftWidth: dims[what + "Left"] + "px",
                    borderRightWidth: dims[what + "Right"] + "px",
                    borderBottomWidth: dims[what + "Bottom"] + "px",
                    borderStyle: "solid"
                });
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                assign = __webpack_require__(3),
                _require = __webpack_require__(52),
                monospace = _require.monospace,
                Overlay = function () {
                function Overlay(window) {
                    _classCallCheck(this, Overlay);

                    var doc = window.document;
                    this.win = window, this.container = doc.createElement("div"), this.node = doc.createElement("div"), this.border = doc.createElement("div"), this.padding = doc.createElement("div"), this.content = doc.createElement("div"), this.border.style.borderColor = overlayStyles.border, this.padding.style.borderColor = overlayStyles.padding, this.content.style.backgroundColor = overlayStyles.background, assign(this.node.style, {
                        borderColor: overlayStyles.margin,
                        pointerEvents: "none",
                        position: "fixed"
                    }), this.tip = doc.createElement("div"), assign(this.tip.style, {
                        backgroundColor: "#333740",
                        borderRadius: "2px",
                        fontFamily: monospace.family,
                        fontWeight: "bold",
                        padding: "3px 5px",
                        position: "fixed",
                        fontSize: monospace.sizes.normal
                    }), this.nameSpan = doc.createElement("span"), this.tip.appendChild(this.nameSpan), assign(this.nameSpan.style, {
                        color: "#ee78e6",
                        borderRight: "1px solid #aaaaaa",
                        paddingRight: "0.5rem",
                        marginRight: "0.5rem"
                    }), this.dimSpan = doc.createElement("span"), this.tip.appendChild(this.dimSpan), assign(this.dimSpan.style, {
                        color: "#d7d7d7"
                    }), this.container.style.zIndex = 1e7, this.node.style.zIndex = 1e7, this.tip.style.zIndex = 1e7, this.container.appendChild(this.node), this.container.appendChild(this.tip), this.node.appendChild(this.border), this.border.appendChild(this.padding), this.padding.appendChild(this.content), doc.body.appendChild(this.container);
                }

                return _createClass(Overlay, [{
                    key: "remove",
                    value: function value() {
                        this.container.parentNode && this.container.parentNode.removeChild(this.container);
                    }
                }, {
                    key: "inspect",
                    value: function value(node, name) {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            var box = getNestedBoundingClientRect(node, this.win),
                                dims = getElementDimensions(node);
                            boxWrap(dims, "margin", this.node), boxWrap(dims, "border", this.border), boxWrap(dims, "padding", this.padding), assign(this.content.style, {
                                height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + "px",
                                width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + "px"
                            }), assign(this.node.style, {
                                top: box.top - dims.marginTop + "px",
                                left: box.left - dims.marginLeft + "px"
                            }), this.nameSpan.textContent = name || node.nodeName.toLowerCase(), this.dimSpan.textContent = box.width + "px × " + box.height + "px";
                            var tipPos = findTipPos({
                                top: box.top - dims.marginTop,
                                left: box.left - dims.marginLeft,
                                height: box.height + dims.marginTop + dims.marginBottom,
                                width: box.width + dims.marginLeft + dims.marginRight
                            }, this.win);
                            assign(this.tip.style, tipPos);
                        }
                    }
                }]), Overlay;
            }(),
                overlayStyles = {
                background: "rgba(120, 170, 210, 0.7)",
                padding: "rgba(77, 200, 0, 0.3)",
                margin: "rgba(255, 155, 0, 0.3)",
                border: "rgba(255, 200, 50, 0.3)"
            };

            module.exports = Overlay;
        }, function (module, exports) {
            "use strict";

            module.exports = {
                monospace: {
                    family: "Menlo, Consolas, monospace",
                    sizes: {
                        normal: 11,
                        large: 14
                    }
                },
                sansSerif: {
                    family: '"Helvetica Neue", "Lucida Grande", -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, sans-serif',
                    sizes: {
                        small: 10,
                        normal: 12,
                        large: 14
                    }
                }
            };
        }, function (module, exports, __webpack_require__) {
            "use strict";

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
                };
            }(),
                assign = __webpack_require__(3),
                MultiOverlay = function () {
                function MultiOverlay(window) {
                    _classCallCheck(this, MultiOverlay), this.win = window;
                    var doc = window.document;
                    this.container = doc.createElement("div"), doc.body.appendChild(this.container), this._currentNodes = null;
                }

                return _createClass(MultiOverlay, [{
                    key: "highlightMany",
                    value: function value(nodes) {
                        var _this = this;

                        this._currentNodes = nodes, this.container.innerHTML = "", nodes.forEach(function (node) {
                            var div = _this.win.document.createElement("div");

                            if ("function" == typeof node.getBoundingClientRect) {
                                var box = node.getBoundingClientRect();
                                box.bottom < 0 || box.top > window.innerHeight || (assign(div.style, {
                                    top: box.top + "px",
                                    left: box.left + "px",
                                    width: box.width + "px",
                                    height: box.height + "px",
                                    border: "2px dotted rgba(200, 100, 100, .8)",
                                    boxSizing: "border-box",
                                    backgroundColor: "rgba(200, 100, 100, .2)",
                                    position: "fixed",
                                    zIndex: 1e7,
                                    pointerEvents: "none"
                                }), _this.container.appendChild(div));
                            }
                        });
                    }
                }, {
                    key: "refresh",
                    value: function value() {
                        this._currentNodes && this.highlightMany(this._currentNodes);
                    }
                }, {
                    key: "remove",
                    value: function value() {
                        this.container.parentNode && (this.container.parentNode.removeChild(this.container), this._currentNodes = null);
                    }
                }]), MultiOverlay;
            }();

            module.exports = MultiOverlay;
        }]);
    });
},158,[],"node_modules/react-devtools-core/build/backend.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativePropRegistry;

  function getStyle(style) {
    if (ReactNativePropRegistry === undefined) {
      ReactNativePropRegistry = _require(_dependencyMap[0], 'ReactNativePropRegistry');
    }

    if (typeof style === 'number') {
      return ReactNativePropRegistry.getByID(style);
    }

    return style;
  }

  function flattenStyle(style) {
    if (style == null) {
      return undefined;
    }

    if (!Array.isArray(style)) {
      return getStyle(style);
    }

    var result = {};

    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);

      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }

    return result;
  }

  module.exports = flattenStyle;
},159,[160],"flattenStyle");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativePropRegistry;
},160,[92],"ReactNativePropRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var JSInspector = {
    registerAgent: function registerAgent(type) {
      if (global.__registerInspectorAgent) {
        global.__registerInspectorAgent(type);
      }
    },
    getTimestamp: function getTimestamp() {
      return global.__inspectorTimestamp();
    }
  };
  module.exports = JSInspector;
},161,[],"JSInspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var InspectorAgent = _require(_dependencyMap[0], 'InspectorAgent');

  var JSInspector = _require(_dependencyMap[1], 'JSInspector');

  var Map = _require(_dependencyMap[2], 'Map');

  var XMLHttpRequest = _require(_dependencyMap[3], 'XMLHttpRequest');

  var Interceptor = function () {
    function Interceptor(agent) {
      _classCallCheck(this, Interceptor);

      this._agent = agent;
      this._requests = new Map();
    }

    _createClass(Interceptor, [{
      key: "getData",
      value: function getData(requestId) {
        return this._requests.get(requestId);
      }
    }, {
      key: "requestSent",
      value: function requestSent(id, url, method, headers) {
        var requestId = String(id);

        this._requests.set(requestId, '');

        var request = {
          url: url,
          method: method,
          headers: headers,
          initialPriority: 'Medium'
        };
        var event = {
          requestId: requestId,
          documentURL: '',
          frameId: '1',
          loaderId: '1',
          request: request,
          timestamp: JSInspector.getTimestamp(),
          initiator: {
            type: 'other'
          },
          type: 'Other'
        };

        this._agent.sendEvent('requestWillBeSent', event);
      }
    }, {
      key: "responseReceived",
      value: function responseReceived(id, url, status, headers) {
        var requestId = String(id);
        var response = {
          url: url,
          status: status,
          statusText: String(status),
          headers: headers,
          requestHeaders: {},
          mimeType: this._getMimeType(headers),
          connectionReused: false,
          connectionId: -1,
          encodedDataLength: 0,
          securityState: 'unknown'
        };
        var event = {
          requestId: requestId,
          frameId: '1',
          loaderId: '1',
          timestamp: JSInspector.getTimestamp(),
          type: 'Other',
          response: response
        };

        this._agent.sendEvent('responseReceived', event);
      }
    }, {
      key: "dataReceived",
      value: function dataReceived(id, data) {
        var requestId = String(id);
        var existingData = this._requests.get(requestId) || '';

        this._requests.set(requestId, existingData.concat(data));

        var event = {
          requestId: requestId,
          timestamp: JSInspector.getTimestamp(),
          dataLength: data.length,
          encodedDataLength: data.length
        };

        this._agent.sendEvent('dataReceived', event);
      }
    }, {
      key: "loadingFinished",
      value: function loadingFinished(id, encodedDataLength) {
        var event = {
          requestId: String(id),
          timestamp: JSInspector.getTimestamp(),
          encodedDataLength: encodedDataLength
        };

        this._agent.sendEvent('loadingFinished', event);
      }
    }, {
      key: "loadingFailed",
      value: function loadingFailed(id, error) {
        var event = {
          requestId: String(id),
          timestamp: JSInspector.getTimestamp(),
          type: 'Other',
          errorText: error
        };

        this._agent.sendEvent('loadingFailed', event);
      }
    }, {
      key: "_getMimeType",
      value: function _getMimeType(headers) {
        var contentType = headers['Content-Type'] || '';
        return contentType.split(';')[0];
      }
    }]);

    return Interceptor;
  }();

  var NetworkAgent = function (_InspectorAgent) {
    _inherits(NetworkAgent, _InspectorAgent);

    function NetworkAgent() {
      _classCallCheck(this, NetworkAgent);

      return _possibleConstructorReturn(this, (NetworkAgent.__proto__ || Object.getPrototypeOf(NetworkAgent)).apply(this, arguments));
    }

    _createClass(NetworkAgent, [{
      key: "enable",
      value: function enable(_ref) {
        var maxResourceBufferSize = _ref.maxResourceBufferSize,
            maxTotalBufferSize = _ref.maxTotalBufferSize;
        this._interceptor = new Interceptor(this);
        XMLHttpRequest.setInterceptor(this._interceptor);
      }
    }, {
      key: "disable",
      value: function disable() {
        XMLHttpRequest.setInterceptor(null);
        this._interceptor = null;
      }
    }, {
      key: "getResponseBody",
      value: function getResponseBody(_ref2) {
        var requestId = _ref2.requestId;
        return {
          body: this.interceptor().getData(requestId),
          base64Encoded: false
        };
      }
    }, {
      key: "interceptor",
      value: function interceptor() {
        if (this._interceptor) {
          return this._interceptor;
        } else {
          throw Error('_interceptor can not be null');
        }
      }
    }]);

    return NetworkAgent;
  }(InspectorAgent);

  NetworkAgent.DOMAIN = 'Network';
  module.exports = NetworkAgent;
},162,[163,161,97,118],"NetworkAgent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var InspectorAgent = function () {
    function InspectorAgent(eventSender) {
      _classCallCheck(this, InspectorAgent);

      this._eventSender = eventSender;
    }

    _createClass(InspectorAgent, [{
      key: "sendEvent",
      value: function sendEvent(name, params) {
        this._eventSender(name, params);
      }
    }]);

    return InspectorAgent;
  }();

  module.exports = InspectorAgent;
},163,[],"InspectorAgent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var defineLazyObjectProperty = _require(_dependencyMap[2], 'defineLazyObjectProperty');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var UIManager = NativeModules.UIManager;
  invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');
  UIManager.__takeSnapshot = UIManager.takeSnapshot;

  UIManager.takeSnapshot = function () {
    invariant(false, 'UIManager.takeSnapshot should not be called directly. ' + 'Use ReactNative.takeSnapshot instead.');
  };

  if (Platform.OS === 'ios') {
    Object.keys(UIManager).forEach(function (viewName) {
      var viewConfig = UIManager[viewName];

      if (viewConfig.Manager) {
        defineLazyObjectProperty(viewConfig, 'Constants', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var constants = {};
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value !== 'function') {
                constants[key] = value;
              }
            });
            return constants;
          }
        });
        defineLazyObjectProperty(viewConfig, 'Commands', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var commands = {};
            var index = 0;
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value === 'function') {
                commands[key] = index++;
              }
            });
            return commands;
          }
        });
      }
    });
  } else if (UIManager.ViewManagerNames) {
    UIManager.ViewManagerNames.forEach(function (viewManagerName) {
      defineLazyObjectProperty(UIManager, viewManagerName, {
        get: function get() {
          return UIManager.getConstantsForViewManager(viewManagerName);
        }
      });
    });
  }

  module.exports = UIManager;
},164,[67,75,82,19],"UIManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var RCTEventEmitter = {
    register: function register(eventEmitter) {
      BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
    }
  };
  module.exports = RCTEventEmitter;
},165,[68],"RCTEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var UIManager = _require(_dependencyMap[1], 'UIManager');

  var TextInputState = {
    _currentlyFocusedID: null,
    currentlyFocusedField: function currentlyFocusedField() {
      return this._currentlyFocusedID;
    },
    focusTextInput: function focusTextInput(textFieldID) {
      if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = textFieldID;

        if (Platform.OS === 'ios') {
          UIManager.focus(textFieldID);
        } else if (Platform.OS === 'android') {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
        }
      }
    },
    blurTextInput: function blurTextInput(textFieldID) {
      if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {
        this._currentlyFocusedID = null;

        if (Platform.OS === 'ios') {
          UIManager.blur(textFieldID);
        } else if (Platform.OS === 'android') {
          UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
        }
      }
    }
  };
  module.exports = TextInputState;
},166,[75,164],"TextInputState");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var deepDiffer = function deepDiffer(one, two) {
    if (one === two) {
      return false;
    }

    if (typeof one === 'function' && typeof two === 'function') {
      return false;
    }

    if ((typeof one === "undefined" ? "undefined" : _typeof(one)) !== 'object' || one === null) {
      return one !== two;
    }

    if ((typeof two === "undefined" ? "undefined" : _typeof(two)) !== 'object' || two === null) {
      return true;
    }

    if (one.constructor !== two.constructor) {
      return true;
    }

    if (Array.isArray(one)) {
      var len = one.length;

      if (two.length !== len) {
        return true;
      }

      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii])) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key])) {
          return true;
        }
      }

      for (var twoKey in two) {
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }

    return false;
  };

  module.exports = deepDiffer;
},167,[],"deepDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    if (x === y) {
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }

    if ((typeof objA === "undefined" ? "undefined" : _typeof(objA)) !== 'object' || objA === null || (typeof objB === "undefined" ? "undefined" : _typeof(objB)) !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  module.exports = shallowEqual;
},168,[],"node_modules/fbjs/lib/shallowEqual.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactFeatureFlags = {
    debugRenderPhaseSideEffects: false,
    debugRenderPhaseSideEffectsForStrictMode: false,
    warnAboutDeprecatedLifecycles: false
  };
  module.exports = ReactFeatureFlags;
},169,[],"ReactFeatureFlags");
__d(function (global, _require2, module, exports, _dependencyMap) {
  "use strict";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  _require2(_dependencyMap[0], "InitializeCore");

  var invariant = _require2(_dependencyMap[1], "fbjs/lib/invariant"),
      emptyFunction = _require2(_dependencyMap[2], "fbjs/lib/emptyFunction"),
      UIManager = _require2(_dependencyMap[3], "UIManager"),
      RCTEventEmitter = _require2(_dependencyMap[4], "RCTEventEmitter"),
      TextInputState = _require2(_dependencyMap[5], "TextInputState"),
      deepDiffer = _require2(_dependencyMap[6], "deepDiffer"),
      flattenStyle = _require2(_dependencyMap[7], "flattenStyle"),
      React = _require2(_dependencyMap[8], "react"),
      emptyObject = _require2(_dependencyMap[9], "fbjs/lib/emptyObject"),
      shallowEqual = _require2(_dependencyMap[10], "fbjs/lib/shallowEqual"),
      ExceptionsManager = _require2(_dependencyMap[11], "ExceptionsManager");

  function _invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    this._hasCaughtError = !1;
    this._caughtError = null;
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this._caughtError = error, this._hasCaughtError = !0;
    }
  }

  var ReactErrorUtils = {
    _caughtError: null,
    _hasCaughtError: !1,
    _rethrowError: null,
    _hasRethrowError: !1,
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      _invokeGuardedCallback.apply(ReactErrorUtils, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);

      if (ReactErrorUtils.hasCaughtError()) {
        var error = ReactErrorUtils.clearCaughtError();
        ReactErrorUtils._hasRethrowError || (ReactErrorUtils._hasRethrowError = !0, ReactErrorUtils._rethrowError = error);
      }
    },
    rethrowCaughtError: function rethrowCaughtError() {
      return _rethrowCaughtError.apply(ReactErrorUtils, arguments);
    },
    hasCaughtError: function hasCaughtError() {
      return ReactErrorUtils._hasCaughtError;
    },
    clearCaughtError: function clearCaughtError() {
      if (ReactErrorUtils._hasCaughtError) {
        var error = ReactErrorUtils._caughtError;
        ReactErrorUtils._caughtError = null;
        ReactErrorUtils._hasCaughtError = !1;
        return error;
      }

      invariant(!1, "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
  };

  function _rethrowCaughtError() {
    if (ReactErrorUtils._hasRethrowError) {
      var error = ReactErrorUtils._rethrowError;
      ReactErrorUtils._rethrowError = null;
      ReactErrorUtils._hasRethrowError = !1;
      throw error;
    }
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      invariant(-1 < pluginIndex, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", pluginName);

      if (!plugins[pluginIndex]) {
        invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", pluginName);
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = void 0;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0), "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", eventName$jscomp$0);
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = !0;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = !0) : JSCompiler_inline_result = !1;

          invariant(JSCompiler_inline_result, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
  }

  function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
  }

  function executeDispatch(event, simulated, listener, inst) {
    simulated = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(simulated, listener, void 0, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, !1, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, !1, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = !1,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];
          namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = !1;
    }

    if (inst) return null;
    invariant(!listener || "function" === typeof listener, "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener === "undefined" ? "undefined" : _typeof(listener));
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst["return"];
    } while (inst && 5 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  var shouldBeReleasedProperties = "dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),
      EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse;
    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = !0;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      for (Interface = 0; Interface < shouldBeReleasedProperties.length; Interface++) {
        this[shouldBeReleasedProperties[Interface]] = null;
      }
    }
  });

  SyntheticEvent.Interface = EventInterface;

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    invariant(event instanceof this, "Trying to release an event instance  into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  }),
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    invariant(null != _ref, "Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: !0,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0,
      previousActiveTouches = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      }
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      }
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      }
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      }
    },
    responderStart: {
      registrationName: "onResponderStart"
    },
    responderMove: {
      registrationName: "onResponderMove"
    },
    responderEnd: {
      registrationName: "onResponderEnd"
    },
    responderRelease: {
      registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
      registrationName: "onResponderGrant"
    },
    responderReject: {
      registrationName: "onResponderReject"
    },
    responderTerminate: {
      registrationName: "onResponderTerminate"
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if (isEndish(topLevelType)) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = void 0, targetInst = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = !0 === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && isEndish(topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes.responderStart : targetInst ? eventTypes.responderMove : depthA ? eventTypes.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && isEndish(topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && void 0 !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = !0;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = !1;
            }

            if (depthA) {
              topLevelType = !1;
              break a;
            }
          }
        }
        topLevelType = !0;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      nativeEvent = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;
      if (ResponderEventPlugin.GlobalInteractionHandler && nativeEvent !== previousActiveTouches) ResponderEventPlugin.GlobalInteractionHandler.onChange(nativeEvent);
      previousActiveTouches = nativeEvent;
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      },
      injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
        ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
      }
    }
  },
      customBubblingEventTypes = {},
      customDirectEventTypes = {},
      ReactNativeBridgeEventPlugin = {
    eventTypes: {},
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (null == targetInst) return null;
      var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
          directDispatchConfig = customDirectEventTypes[topLevelType];
      invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
      topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
      return topLevelType;
    },
    processEventTypes: function processEventTypes(viewConfig) {
      var bubblingEventTypes = viewConfig.bubblingEventTypes;
      viewConfig = viewConfig.directEventTypes;
      if (null != bubblingEventTypes) for (var _topLevelType in bubblingEventTypes) {
        null == customBubblingEventTypes[_topLevelType] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType]);
      }
      if (null != viewConfig) for (var _topLevelType2 in viewConfig) {
        null == customDirectEventTypes[_topLevelType2] && (ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = viewConfig[_topLevelType2]);
      }
    }
  },
      instanceCache = {},
      instanceProps = {};

  function uncacheFiberNode(tag) {
    delete instanceCache[tag];
    delete instanceProps[tag];
  }

  function getInstanceFromTag(tag) {
    return "number" === typeof tag ? instanceCache[tag] || null : tag;
  }

  var ReactNativeComponentTree = Object.freeze({
    precacheFiberNode: function precacheFiberNode(hostInst, tag) {
      instanceCache[tag] = hostInst;
    },
    uncacheFiberNode: uncacheFiberNode,
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: function getNodeFromInstance(inst) {
      var tag = inst.stateNode._nativeTag;
      void 0 === tag && (tag = inst.stateNode.canonical._nativeTag);
      invariant(tag, "All native instances should have a tag.");
      return tag;
    },
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(stateNode) {
      return instanceProps[stateNode._nativeTag] || null;
    },
    updateFiberProps: function updateFiberProps(tag, props) {
      instanceProps[tag] = props;
    }
  });
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  getFiberCurrentPropsFromNode = ReactNativeComponentTree.getFiberCurrentPropsFromNode;
  getInstanceFromNode = ReactNativeComponentTree.getInstanceFromNode;
  getNodeFromInstance = ReactNativeComponentTree.getNodeFromInstance;
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : UIManager.clearJSResponder();
    }
  });
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
  });
  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (target = getInstanceFromNode(target)) {
      invariant(null, "Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      var props = getFiberCurrentPropsFromNode(target.stateNode);
      null.restoreControlledState(target.stateNode, target.type, props);
    }
  }

  function _batchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function _flushInteractiveUpdates() {}

  var isBatching = !1;

  function batchedUpdates(fn, bookkeeping) {
    if (isBatching) return fn(bookkeeping);
    isBatching = !0;

    try {
      return _batchedUpdates(fn, bookkeeping);
    } finally {
      if (isBatching = !1, null !== restoreTarget || null !== restoreQueue) if (_flushInteractiveUpdates(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  var ReactNativeTagHandles = {
    tagsStartAt: 1,
    tagCount: 1,
    allocateTag: function allocateTag() {
      for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
        ReactNativeTagHandles.tagCount++;
      }

      var tag = ReactNativeTagHandles.tagCount;
      ReactNativeTagHandles.tagCount++;
      return tag;
    },
    assertRootTag: function assertRootTag(tag) {
      invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
      return 1 === reactTag % 10;
    }
  },
      EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID);
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;
      events && (forEachAccumulated(events, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."), ReactErrorUtils.rethrowCaughtError());
    });
  }

  var ReactNativeEventEmitter = Object.freeze({
    getListener: getListener,
    registrationNames: registrationNameModules,
    _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || void 0 === target || target < ReactNativeTagHandles.tagsStartAt || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    }
  });
  RCTEventEmitter.register(ReactNativeEventEmitter);
  var hasSymbol = "function" === typeof Symbol && Symbol["for"],
      REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]("react.element") : 60103,
      REACT_CALL_TYPE = hasSymbol ? Symbol["for"]("react.call") : 60104,
      REACT_RETURN_TYPE = hasSymbol ? Symbol["for"]("react.return") : 60105,
      REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]("react.strict_mode") : 60108,
      REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]("react.context") : 60110,
      REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]("react.async_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol["for"]("react.forward_ref") : 60112,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "undefined" === typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank,
          total = 0,
          count = 0;
      touchHistory = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
      if (null !== touchHistory) touchHistory.touchActive && touchHistory.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? touchHistory.currentPageX : ofCurrent && !isXAxis ? touchHistory.currentPageY : !ofCurrent && isXAxis ? touchHistory.previousPageX : touchHistory.previousPageY, count = 1);else for (touchHistory = 0; touchHistory < touchBank.length; touchHistory++) {
        var touchTrack = touchBank[touchHistory];
        null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter && (total += ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, count++);
      }
      return 0 < count ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
  },
      objects = {},
      uniqueID = 1,
      emptyObject$2 = {},
      ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
      if (!(this instanceof ReactNativePropRegistry)) throw new TypeError("Cannot call a class as a function");
    }

    ReactNativePropRegistry.register = function (object) {
      var id = ++uniqueID;
      objects[id] = object;
      return id;
    };

    ReactNativePropRegistry.getByID = function (id) {
      if (!id) return emptyObject$2;
      var object = objects[id];
      return object ? object : (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$2);
    };

    return ReactNativePropRegistry;
  }(),
      emptyObject$1 = {},
      removedKeys = null,
      removedKeyCount = 0;

  function resolveObject(idOrObject) {
    return "number" === typeof idOrObject ? ReactNativePropRegistry.getByID(idOrObject) : idOrObject;
  }

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in node = resolveObject(node), removedKeys) {
      if (removedKeys[i]) {
        var _nextProp = node[i];

        if (void 0 !== _nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof _nextProp && (_nextProp = !0);
            "undefined" === typeof _nextProp && (_nextProp = null);
            if ("object" !== (typeof attributeConfig === "undefined" ? "undefined" : _typeof(attributeConfig))) updatePayload[i] = _nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) _nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(_nextProp) : _nextProp, updatePayload[i] = _nextProp;
            removedKeys[i] = !1;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return nextProp = resolveObject(nextProp), diffProperties(updatePayload, emptyObject$1, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return prevProp = resolveObject(prevProp), diffProperties(updatePayload, prevProp, emptyObject$1, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = !0, "function" === typeof prevProp && (prevProp = !0));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = !1);
        if (updatePayload && void 0 !== updatePayload[propKey]) {
          if ("object" !== (typeof attributeConfig === "undefined" ? "undefined" : _typeof(attributeConfig))) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== (typeof attributeConfig === "undefined" ? "undefined" : _typeof(attributeConfig))) ("object" !== (typeof nextProp === "undefined" ? "undefined" : _typeof(nextProp)) || null === nextProp || deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (void 0 === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== (typeof nextProp === "undefined" ? "undefined" : _typeof(nextProp)) || null === nextProp || deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      void 0 === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && void 0 !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], void 0 !== prevProp && ("object" !== (typeof attributeConfig === "undefined" ? "undefined" : _typeof(attributeConfig)) || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback(context, callback) {
    return function () {
      if (callback) {
        if ("boolean" === typeof context.__isMounted) {
          if (!context.__isMounted) return;
        } else if ("function" === typeof context.isMounted && !context.isMounted()) return;

        return callback.apply(context, arguments);
      }
    };
  }

  var ReactCurrentOwner = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;

  function getComponentName(fiber) {
    fiber = fiber.type;
    if ("function" === typeof fiber) return fiber.displayName || fiber.name;
    if ("string" === typeof fiber) return fiber;

    switch (fiber) {
      case REACT_FRAGMENT_TYPE:
        return "ReactFragment";

      case REACT_PORTAL_TYPE:
        return "ReactPortal";

      case REACT_CALL_TYPE:
        return "ReactCall";

      case REACT_RETURN_TYPE:
        return "ReactReturn";
    }

    return null;
  }

  function findHostInstance() {
    return null;
  }

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    var internalInstance = componentOrHandle._reactInternalFiber;
    if (internalInstance) return findHostInstance(internalInstance) || null;
    if (componentOrHandle) return componentOrHandle;
    invariant("object" === (typeof componentOrHandle === "undefined" ? "undefined" : _typeof(componentOrHandle)) && "_nativeTag" in componentOrHandle || null != componentOrHandle.render && "function" === typeof componentOrHandle.render, "findNodeHandle(...): Argument is not a component (type: %s, keys: %s)", typeof componentOrHandle === "undefined" ? "undefined" : _typeof(componentOrHandle), Object.keys(componentOrHandle));
    invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted component.");
  }

  function findNumericNodeHandleFiber(componentOrHandle) {
    componentOrHandle = findNodeHandle(componentOrHandle);
    return null == componentOrHandle || "number" === typeof componentOrHandle ? componentOrHandle : componentOrHandle._nativeTag;
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var ReactNativeComponent = function (_React$Component) {
    function ReactNativeComponent() {
      if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

      var call = _React$Component.apply(this, arguments);

      if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return !call || "object" !== (typeof call === "undefined" ? "undefined" : _typeof(call)) && "function" !== typeof call ? this : call;
    }

    _inherits(ReactNativeComponent, _React$Component);

    ReactNativeComponent.prototype.blur = function () {
      TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.focus = function () {
      TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
    };

    ReactNativeComponent.prototype.measure = function (callback) {
      UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
    };

    ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
      var maybeInstance = void 0;

      try {
        maybeInstance = findNodeHandle(this);
      } catch (error) {}

      if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
        nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
        null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
      }
    };

    return ReactNativeComponent;
  }(React.Component);

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node["return"];) {
      node = node["return"];
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node["return"];) {
        if (node = node["return"], 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 3 === node.tag ? 2 : 3;
  }

  function isMounted(component) {
    return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : !1;
  }

  function assertIsMounted(fiber) {
    invariant(2 === isFiberMountedImpl(fiber), "Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) return alternate = isFiberMountedImpl(fiber), invariant(3 !== alternate, "Unable to find node on an unmounted component."), 1 === alternate ? null : fiber;

    for (var a = fiber, b = alternate;;) {
      var parentA = a["return"],
          parentB = parentA ? parentA.alternate : null;
      if (!parentA || !parentB) break;

      if (parentA.child === parentB.child) {
        for (var child = parentA.child; child;) {
          if (child === a) return assertIsMounted(parentA), fiber;
          if (child === b) return assertIsMounted(parentA), alternate;
          child = child.sibling;
        }

        invariant(!1, "Unable to find node on an unmounted component.");
      }

      if (a["return"] !== b["return"]) a = parentA, b = parentB;else {
        child = !1;

        for (var _child = parentA.child; _child;) {
          if (_child === a) {
            child = !0;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            child = !0;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!child) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              child = !0;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              child = !0;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          invariant(child, "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      invariant(a.alternate === b, "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    invariant(3 === a.tag, "Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  function findCurrentHostFiberWithNoPortals(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (5 === node.tag || 6 === node.tag) return node;
      if (node.child && 4 !== node.tag) node.child["return"] = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node["return"] || node["return"] === parent) return null;
          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    return null;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.stateNode = this.type = null;
    this.sibling = this.child = this["return"] = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.expirationTime = 0;
    this.alternate = null;
  }

  function createWorkInProgress(current, pendingProps, expirationTime) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = new FiberNode(current.tag, pendingProps, current.key, current.mode), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.expirationTime = expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromElement(element, mode, expirationTime) {
    var type = element.type,
        key = element.key;
    element = element.props;
    var fiberTag = void 0;
    if ("function" === typeof type) fiberTag = type.prototype && type.prototype.isReactComponent ? 2 : 0;else if ("string" === typeof type) fiberTag = 5;else switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(element.children, mode, expirationTime, key);

      case REACT_ASYNC_MODE_TYPE:
        fiberTag = 11;
        mode |= 3;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 11;
        mode |= 2;
        break;

      case REACT_CALL_TYPE:
        fiberTag = 7;
        break;

      case REACT_RETURN_TYPE:
        fiberTag = 9;
        break;

      default:
        if ("object" === (typeof type === "undefined" ? "undefined" : _typeof(type)) && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 13;
            break;

          case REACT_CONTEXT_TYPE:
            fiberTag = 12;
            break;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 14;
            break;

          default:
            if ("number" === typeof type.tag) return mode = type, mode.pendingProps = element, mode.expirationTime = expirationTime, mode;
            throwOnInvalidElementType(type, null);
        } else throwOnInvalidElementType(type, null);
    }
    mode = new FiberNode(fiberTag, element, key, mode);
    mode.type = type;
    mode.expirationTime = expirationTime;
    return mode;
  }

  function throwOnInvalidElementType(type) {
    invariant(!1, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type === "undefined" ? "undefined" : _typeof(type), "");
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = new FiberNode(10, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = new FiberNode(6, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = new FiberNode(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function catchErrors(fn) {
    return function (arg) {
      try {
        return fn(arg);
      } catch (err) {}
    };
  }

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return !0;

    try {
      var rendererID = hook.inject(internals);
      onCommitFiberRoot = catchErrors(function (root) {
        return hook.onCommitFiberRoot(rendererID, root);
      });
      onCommitFiberUnmount = catchErrors(function (fiber) {
        return hook.onCommitFiberUnmount(rendererID, fiber);
      });
    } catch (err) {}

    return !0;
  }

  function onCommitRoot(root) {
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(root);
  }

  function onCommitUnmount(fiber) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(fiber);
  }

  function getStackAddendumByWorkInProgressFiber(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 0:
        case 1:
        case 2:
        case 5:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource;
          var JSCompiler_inline_result = getComponentName(workInProgress);
          var ownerName = null;
          owner && (ownerName = getComponentName(owner));
          owner = source;
          JSCompiler_inline_result = "\n    in " + (JSCompiler_inline_result || "Unknown") + (owner ? " (at " + owner.fileName.replace(/^.*[\\\/]/, "") + ":" + owner.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
          break a;

        default:
          JSCompiler_inline_result = "";
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress["return"];
    } while (workInProgress);

    return info;
  }

  var _require = _require2(_dependencyMap[12], "ReactFeatureFlags"),
      enableGetDerivedStateFromCatch = _require.enableGetDerivedStateFromCatch,
      debugRenderPhaseSideEffects = _require.debugRenderPhaseSideEffects,
      debugRenderPhaseSideEffectsForStrictMode = _require.debugRenderPhaseSideEffectsForStrictMode;

  new Set();

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      expirationTime: 0,
      first: null,
      last: null,
      callbackList: null,
      hasForceUpdate: !1,
      isInitialized: !1,
      capturedValues: null
    };
  }

  function insertUpdateIntoQueue(queue, update) {
    null === queue.last ? queue.first = queue.last = update : (queue.last.next = update, queue.last = update);
    if (0 === queue.expirationTime || queue.expirationTime > update.expirationTime) queue.expirationTime = update.expirationTime;
  }

  var q1 = void 0,
      q2 = void 0;

  function ensureUpdateQueues(fiber) {
    q1 = q2 = null;
    var alternateFiber = fiber.alternate,
        queue1 = fiber.updateQueue;
    null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(null));
    null !== alternateFiber ? (fiber = alternateFiber.updateQueue, null === fiber && (fiber = alternateFiber.updateQueue = createUpdateQueue(null))) : fiber = null;
    q1 = queue1;
    q2 = fiber !== queue1 ? fiber : null;
  }

  function insertUpdateIntoFiber(fiber, update) {
    ensureUpdateQueues(fiber);
    fiber = q1;
    var queue2 = q2;
    null === queue2 ? insertUpdateIntoQueue(fiber, update) : null === fiber.last || null === queue2.last ? (insertUpdateIntoQueue(fiber, update), insertUpdateIntoQueue(queue2, update)) : (insertUpdateIntoQueue(fiber, update), queue2.last = update);
  }

  function getStateFromUpdate(update, instance, prevState, props) {
    update = update.partialState;
    return "function" === typeof update ? update.call(instance, prevState, props) : update;
  }

  function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
    null !== current && current.updateQueue === queue && (queue = workInProgress.updateQueue = {
      baseState: queue.baseState,
      expirationTime: queue.expirationTime,
      first: queue.first,
      last: queue.last,
      isInitialized: queue.isInitialized,
      capturedValues: queue.capturedValues,
      callbackList: null,
      hasForceUpdate: !1
    });
    queue.expirationTime = 0;
    queue.isInitialized ? current = queue.baseState : (current = queue.baseState = workInProgress.memoizedState, queue.isInitialized = !0);

    for (var dontMutatePrevState = !0, update = queue.first, didSkip = !1; null !== update;) {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime > renderExpirationTime) {
        var remainingExpirationTime = queue.expirationTime;
        if (0 === remainingExpirationTime || remainingExpirationTime > updateExpirationTime) queue.expirationTime = updateExpirationTime;
        didSkip || (didSkip = !0, queue.baseState = current);
      } else {
        didSkip || (queue.first = update.next, null === queue.first && (queue.last = null));
        (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && getStateFromUpdate(update, instance, current, props);
        if (update.isReplace) current = getStateFromUpdate(update, instance, current, props), dontMutatePrevState = !0;else if (updateExpirationTime = getStateFromUpdate(update, instance, current, props)) current = dontMutatePrevState ? _extends({}, current, updateExpirationTime) : _extends(current, updateExpirationTime), dontMutatePrevState = !1;
        update.isForced && (queue.hasForceUpdate = !0);
        null !== update.callback && (updateExpirationTime = queue.callbackList, null === updateExpirationTime && (updateExpirationTime = queue.callbackList = []), updateExpirationTime.push(update));
        null !== update.capturedValue && (updateExpirationTime = queue.capturedValues, null === updateExpirationTime ? queue.capturedValues = [update.capturedValue] : updateExpirationTime.push(update.capturedValue));
      }

      update = update.next;
    }

    null !== queue.callbackList ? workInProgress.effectTag |= 32 : null !== queue.first || queue.hasForceUpdate || null !== queue.capturedValues || (workInProgress.updateQueue = null);
    didSkip || (queue.baseState = current);
    return current;
  }

  function commitCallbacks(queue, context) {
    var callbackList = queue.callbackList;
    if (null !== callbackList) for (queue.callbackList = null, queue = 0; queue < callbackList.length; queue++) {
      var update = callbackList[queue],
          _callback = update.callback;
      update.callback = null;
      invariant("function" === typeof _callback, "Invalid argument passed as callback. Expected a function. Instead received: %s", _callback);

      _callback.call(context);
    }
  }

  function callGetDerivedStateFromCatch(ctor, capturedValues) {
    for (var resultState = {}, i = 0; i < capturedValues.length; i++) {
      var partialState = ctor.getDerivedStateFromCatch.call(null, capturedValues[i].value);
      null !== partialState && void 0 !== partialState && _extends(resultState, partialState);
    }

    return resultState;
  }

  function ReactFiberClassComponent(legacyContext, scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
    function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
      if (null === oldProps || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate) return !0;
      var instance = workInProgress.stateNode;
      workInProgress = workInProgress.type;
      return "function" === typeof instance.shouldComponentUpdate ? instance.shouldComponentUpdate(newProps, newState, newContext) : workInProgress.prototype && workInProgress.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
    }

    function adoptClassInstance(workInProgress, instance) {
      instance.updater = updater;
      workInProgress.stateNode = instance;
      instance._reactInternalFiber = workInProgress;
    }

    function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
      workInProgress = instance.state;
      "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, newContext);
      "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, newContext);
      instance.state !== workInProgress && updater.enqueueReplaceState(instance, instance.state, null);
    }

    function callGetDerivedStateFromProps(workInProgress, instance, nextProps, prevState) {
      instance = workInProgress.type;
      if ("function" === typeof instance.getDerivedStateFromProps) return (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && instance.getDerivedStateFromProps.call(null, nextProps, prevState), instance.getDerivedStateFromProps.call(null, nextProps, prevState);
    }

    var cacheContext = legacyContext.cacheContext,
        getMaskedContext = legacyContext.getMaskedContext,
        getUnmaskedContext = legacyContext.getUnmaskedContext,
        isContextConsumer = legacyContext.isContextConsumer,
        hasContextChanged = legacyContext.hasContextChanged,
        updater = {
      isMounted: isMounted,
      enqueueSetState: function enqueueSetState(instance, partialState, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: partialState,
          callback: callback,
          isReplace: !1,
          isForced: !1,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: state,
          callback: callback,
          isReplace: !0,
          isForced: !1,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      },
      enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
        instance = instance._reactInternalFiber;
        callback = void 0 === callback ? null : callback;
        var expirationTime = computeExpirationForFiber(instance);
        insertUpdateIntoFiber(instance, {
          expirationTime: expirationTime,
          partialState: null,
          callback: callback,
          isReplace: !1,
          isForced: !0,
          capturedValue: null,
          next: null
        });
        scheduleWork(instance, expirationTime);
      }
    };
    return {
      adoptClassInstance: adoptClassInstance,
      callGetDerivedStateFromProps: callGetDerivedStateFromProps,
      constructClassInstance: function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type,
            unmaskedContext = getUnmaskedContext(workInProgress),
            needsContext = isContextConsumer(workInProgress),
            context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
        (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && new ctor(props, context);
        ctor = new ctor(props, context);
        var state = null !== ctor.state && void 0 !== ctor.state ? ctor.state : null;
        adoptClassInstance(workInProgress, ctor);
        workInProgress.memoizedState = state;
        props = callGetDerivedStateFromProps(workInProgress, ctor, props, state);
        null !== props && void 0 !== props && (workInProgress.memoizedState = _extends({}, workInProgress.memoizedState, props));
        needsContext && cacheContext(workInProgress, unmaskedContext, context);
        return ctor;
      },
      mountClassInstance: function mountClassInstance(workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            current = workInProgress.alternate,
            instance = workInProgress.stateNode,
            props = workInProgress.pendingProps,
            unmaskedContext = getUnmaskedContext(workInProgress);
        instance.props = props;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyObject;
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
        "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && updater.enqueueReplaceState(instance, instance.state, null), ctor = workInProgress.updateQueue, null !== ctor && (instance.state = processUpdateQueue(current, workInProgress, ctor, instance, props, renderExpirationTime)));
        "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
      },
      resumeMountClassInstance: function resumeMountClassInstance(workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            instance = workInProgress.stateNode;
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps,
            oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext(workInProgress);
        newUnmaskedContext = getMaskedContext(workInProgress, newUnmaskedContext);
        var hasNewLifecycles = "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
        hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== newProps || oldContext !== newUnmaskedContext) && callComponentWillReceiveProps(workInProgress, instance, newProps, newUnmaskedContext);
        oldContext = workInProgress.memoizedState;
        var derivedStateFromCatch = void 0;

        if (null !== workInProgress.updateQueue) {
          renderExpirationTime = processUpdateQueue(null, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
          var updateQueue = workInProgress.updateQueue;
          null !== updateQueue && null !== updateQueue.capturedValues && enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch && (derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, updateQueue.capturedValues));
        } else renderExpirationTime = oldContext;

        ctor = void 0;
        oldProps !== newProps && (ctor = callGetDerivedStateFromProps(workInProgress, instance, newProps, renderExpirationTime));
        null !== ctor && void 0 !== ctor && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? ctor : _extends({}, renderExpirationTime, ctor), updateQueue = workInProgress.updateQueue, null !== updateQueue && (updateQueue.baseState = _extends({}, updateQueue.baseState, ctor)));
        null !== derivedStateFromCatch && void 0 !== derivedStateFromCatch && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? derivedStateFromCatch : _extends({}, renderExpirationTime, derivedStateFromCatch), ctor = workInProgress.updateQueue, null !== ctor && (ctor.baseState = _extends({}, ctor.baseState, derivedStateFromCatch)));
        if (!(oldProps !== newProps || oldContext !== renderExpirationTime || hasContextChanged() || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), !1;
        (oldProps = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldContext, renderExpirationTime, newUnmaskedContext)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, renderExpirationTime));
        instance.props = newProps;
        instance.state = renderExpirationTime;
        instance.context = newUnmaskedContext;
        return oldProps;
      },
      updateClassInstance: function updateClassInstance(current, workInProgress, renderExpirationTime) {
        var ctor = workInProgress.type,
            instance = workInProgress.stateNode;
        instance.props = workInProgress.memoizedProps;
        instance.state = workInProgress.memoizedState;
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps,
            oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext(workInProgress);
        newUnmaskedContext = getMaskedContext(workInProgress, newUnmaskedContext);
        var hasNewLifecycles = "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
        hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (oldProps !== newProps || oldContext !== newUnmaskedContext) && callComponentWillReceiveProps(workInProgress, instance, newProps, newUnmaskedContext);
        oldContext = workInProgress.memoizedState;
        var derivedStateFromCatch = void 0;

        if (null !== workInProgress.updateQueue) {
          renderExpirationTime = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
          var updateQueue = workInProgress.updateQueue;
          null !== updateQueue && null !== updateQueue.capturedValues && enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch && (derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, updateQueue.capturedValues));
        } else renderExpirationTime = oldContext;

        ctor = void 0;
        oldProps !== newProps && (ctor = callGetDerivedStateFromProps(workInProgress, instance, newProps, renderExpirationTime));
        null !== ctor && void 0 !== ctor && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? ctor : _extends({}, renderExpirationTime, ctor), updateQueue = workInProgress.updateQueue, null !== updateQueue && (updateQueue.baseState = _extends({}, updateQueue.baseState, ctor)));
        null !== derivedStateFromCatch && void 0 !== derivedStateFromCatch && (renderExpirationTime = null === renderExpirationTime || void 0 === renderExpirationTime ? derivedStateFromCatch : _extends({}, renderExpirationTime, derivedStateFromCatch), ctor = workInProgress.updateQueue, null !== ctor && (ctor.baseState = _extends({}, ctor.baseState, derivedStateFromCatch)));
        if (!(oldProps !== newProps || oldContext !== renderExpirationTime || hasContextChanged() || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 2048), !1;
        (derivedStateFromCatch = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldContext, renderExpirationTime, newUnmaskedContext)) ? (hasNewLifecycles || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(newProps, renderExpirationTime, newUnmaskedContext)), "function" === typeof instance.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 2048)) : ("function" !== typeof instance.componentDidUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || oldProps === current.memoizedProps && oldContext === current.memoizedState || (workInProgress.effectTag |= 2048), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, renderExpirationTime));
        instance.props = newProps;
        instance.state = renderExpirationTime;
        instance.context = newUnmaskedContext;
        return derivedStateFromCatch;
      }
    };
  }

  var isArray$1 = Array.isArray;

  function coerceRef(returnFiber, current, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== (typeof returnFiber === "undefined" ? "undefined" : _typeof(returnFiber))) {
      if (element._owner) {
        element = element._owner;
        var inst = void 0;
        element && (invariant(2 === element.tag, "Stateless function components cannot have refs."), inst = element.stateNode);
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.", returnFiber);
        var stringRef = "" + returnFiber;
        if (null !== current && null !== current.ref && current.ref._stringRef === stringRef) return current.ref;

        current = function current(value) {
          var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current._stringRef = stringRef;
        return current;
      }

      invariant("string" === typeof returnFiber, "Expected ref to be a function or a string.");
      invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.", returnFiber);
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    "textarea" !== returnFiber.type && invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current, textContent, expirationTime) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, textContent, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateElement(returnFiber, current, element, expirationTime) {
      if (null !== current && current.type === element.type) return expirationTime = useFiber(current, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current, element), expirationTime["return"] = returnFiber, expirationTime;
      expirationTime = createFiberFromElement(element, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current, element);
      expirationTime["return"] = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current, portal, expirationTime) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current["return"] = returnFiber, current;
      current = useFiber(current, portal.children || [], expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function updateFragment(returnFiber, current, fragment, expirationTime, key) {
      if (null === current || 10 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current["return"] = returnFiber, current;
      current = useFiber(current, fragment, expirationTime);
      current["return"] = returnFiber;
      return current;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild["return"] = returnFiber, newChild;

      if ("object" === (typeof newChild === "undefined" ? "undefined" : _typeof(newChild)) && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime["return"] = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild["return"] = returnFiber, newChild;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild["return"] = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === (typeof newChild === "undefined" ? "undefined" : _typeof(newChild)) && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === (typeof newChild === "undefined" ? "undefined" : _typeof(newChild)) && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          if (oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime)) currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber;
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        if (nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime)) {
          if (shouldTrackSideEffects && null !== nextOldFiber.alternate) oldFiber["delete"](null === nextOldFiber.key ? newIdx : nextOldFiber.key);
          currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx);
          null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber;
          previousNewFiber = nextOldFiber;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      invariant("function" === typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      invariant(null != newChildrenIterable, "An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          oldFiber || (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        if (step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step) {
          if (shouldTrackSideEffects && null !== step.alternate) oldFiber["delete"](null === step.key ? newIdx : step.key);
          currentFirstChild = placeChild(step, currentFirstChild, newIdx);
          null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step;
          previousNewFiber = step;
        }
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      "object" === (typeof newChild === "undefined" ? "undefined" : _typeof(newChild)) && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      var isObject = "object" === (typeof newChild === "undefined" ? "undefined" : _typeof(newChild)) && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            var key = newChild.key;

            for (isObject = currentFirstChild; null !== isObject;) {
              if (isObject.key === key) {
                if (10 === isObject.tag ? newChild.type === REACT_FRAGMENT_TYPE : isObject.type === newChild.type) {
                  deleteRemainingChildren(returnFiber, isObject.sibling);
                  currentFirstChild = useFiber(isObject, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isObject, newChild);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, isObject);
                  break;
                }
              } else deleteChild(returnFiber, isObject);
              isObject = isObject.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime["return"] = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isObject = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isObject) {
                if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild["return"] = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild["return"] = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime)) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime)), currentFirstChild["return"] = returnFiber, returnFiber = currentFirstChild, placeSingleChild(returnFiber);
      if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild) switch (returnFiber.tag) {
        case 2:
        case 1:
          expirationTime = returnFiber.type, invariant(!1, "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.", expirationTime.displayName || expirationTime.name || "Component");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(!0),
      mountChildFibers = ChildReconciler(!1);

  function ReactFiberBeginWork(config, hostContext, legacyContext, newContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
    function reconcileChildren(current, workInProgress, nextChildren) {
      reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
    }

    function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
      workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
    }

    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      if (null === current && null !== ref || null !== current && current.ref !== ref) workInProgress.effectTag |= 128;
    }

    function finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime) {
      markRef(current, workInProgress);
      if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, !1), bailoutOnAlreadyFinishedWork(current, workInProgress);
      var ctor = workInProgress.type;
      shouldUpdate = workInProgress.stateNode;
      ReactCurrentOwner.current = workInProgress;
      !didCaptureError || enableGetDerivedStateFromCatch && "function" === typeof ctor.getDerivedStateFromCatch ? ((debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & 2) && shouldUpdate.render(), ctor = shouldUpdate.render()) : ctor = null;
      workInProgress.effectTag |= 1;
      didCaptureError && (reconcileChildrenAtExpirationTime(current, workInProgress, null, renderExpirationTime), workInProgress.child = null);
      reconcileChildrenAtExpirationTime(current, workInProgress, ctor, renderExpirationTime);
      workInProgress.memoizedState = shouldUpdate.state;
      workInProgress.memoizedProps = shouldUpdate.props;
      hasContext && invalidateContextProvider(workInProgress, !0);
      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, !1);
      pushHostContainer(workInProgress, root.containerInfo);
    }

    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
      var fiber = workInProgress.child;

      for (null !== fiber && (fiber["return"] = workInProgress); null !== fiber;) {
        switch (fiber.tag) {
          case 12:
            var nextFiber = fiber.stateNode | 0;

            if (fiber.type === context && 0 !== (nextFiber & changedBits)) {
              for (nextFiber = fiber; null !== nextFiber;) {
                var alternate = nextFiber.alternate;
                if (0 === nextFiber.expirationTime || nextFiber.expirationTime > renderExpirationTime) nextFiber.expirationTime = renderExpirationTime, null !== alternate && (0 === alternate.expirationTime || alternate.expirationTime > renderExpirationTime) && (alternate.expirationTime = renderExpirationTime);else if (null !== alternate && (0 === alternate.expirationTime || alternate.expirationTime > renderExpirationTime)) alternate.expirationTime = renderExpirationTime;else break;
                nextFiber = nextFiber["return"];
              }

              nextFiber = null;
            } else nextFiber = fiber.child;

            break;

          case 13:
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            break;

          default:
            nextFiber = fiber.child;
        }

        if (null !== nextFiber) nextFiber["return"] = fiber;else for (nextFiber = fiber; null !== nextFiber;) {
          if (nextFiber === workInProgress) {
            nextFiber = null;
            break;
          }

          fiber = nextFiber.sibling;

          if (null !== fiber) {
            nextFiber = fiber;
            break;
          }

          nextFiber = nextFiber["return"];
        }
        fiber = nextFiber;
      }
    }

    function updateContextProvider(current, workInProgress, renderExpirationTime) {
      var context = workInProgress.type._context,
          newProps = workInProgress.pendingProps,
          oldProps = workInProgress.memoizedProps;
      if (!hasLegacyContextChanged() && oldProps === newProps) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
      var newValue = newProps.value;
      workInProgress.memoizedProps = newProps;
      if (null === oldProps) newValue = 1073741823;else if (oldProps.value === newProps.value) {
        if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
        newValue = 0;
      } else {
        var oldValue = oldProps.value;

        if (oldValue === newValue && (0 !== oldValue || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue) {
          if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
          newValue = 0;
        } else if (newValue = "function" === typeof context._calculateChangedBits ? context._calculateChangedBits(oldValue, newValue) : 1073741823, newValue |= 0, 0 === newValue) {
          if (oldProps.children === newProps.children) return workInProgress.stateNode = 0, pushProvider(workInProgress), bailoutOnAlreadyFinishedWork(current, workInProgress);
        } else propagateContextChange(workInProgress, context, newValue, renderExpirationTime);
      }
      workInProgress.stateNode = newValue;
      pushProvider(workInProgress);
      reconcileChildren(current, workInProgress, newProps.children);
      return workInProgress.child;
    }

    function bailoutOnAlreadyFinishedWork(current, workInProgress) {
      invariant(null === current || workInProgress.child === current.child, "Resuming work not yet implemented.");

      if (null !== workInProgress.child) {
        current = workInProgress.child;
        var newChild = createWorkInProgress(current, current.pendingProps, current.expirationTime);
        workInProgress.child = newChild;

        for (newChild["return"] = workInProgress; null !== current.sibling;) {
          current = current.sibling, newChild = newChild.sibling = createWorkInProgress(current, current.pendingProps, current.expirationTime), newChild["return"] = workInProgress;
        }

        newChild.sibling = null;
      }

      return workInProgress.child;
    }

    var shouldSetTextContent = config.shouldSetTextContent,
        shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree,
        pushHostContext = hostContext.pushHostContext,
        pushHostContainer = hostContext.pushHostContainer,
        pushProvider = newContext.pushProvider,
        getMaskedContext = legacyContext.getMaskedContext,
        getUnmaskedContext = legacyContext.getUnmaskedContext,
        hasLegacyContextChanged = legacyContext.hasContextChanged,
        pushLegacyContextProvider = legacyContext.pushContextProvider,
        pushTopLevelContextObject = legacyContext.pushTopLevelContextObject,
        invalidateContextProvider = legacyContext.invalidateContextProvider,
        enterHydrationState = hydrationContext.enterHydrationState,
        resetHydrationState = hydrationContext.resetHydrationState,
        tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;
    config = ReactFiberClassComponent(legacyContext, scheduleWork, computeExpirationForFiber, function (workInProgress, nextProps) {
      workInProgress.memoizedProps = nextProps;
    }, function (workInProgress, nextState) {
      workInProgress.memoizedState = nextState;
    });
    var adoptClassInstance = config.adoptClassInstance,
        callGetDerivedStateFromProps = config.callGetDerivedStateFromProps,
        constructClassInstance = config.constructClassInstance,
        mountClassInstance = config.mountClassInstance,
        resumeMountClassInstance = config.resumeMountClassInstance,
        updateClassInstance = config.updateClassInstance;
    return {
      beginWork: function beginWork(current, workInProgress, renderExpirationTime) {
        if (0 === workInProgress.expirationTime || workInProgress.expirationTime > renderExpirationTime) {
          switch (workInProgress.tag) {
            case 3:
              pushHostRootContext(workInProgress);
              break;

            case 2:
              pushLegacyContextProvider(workInProgress);
              break;

            case 4:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case 13:
              pushProvider(workInProgress);
          }

          return null;
        }

        switch (workInProgress.tag) {
          case 0:
            invariant(null === current, "An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.");
            var fn = workInProgress.type,
                props = workInProgress.pendingProps,
                unmaskedContext = getUnmaskedContext(workInProgress);
            unmaskedContext = getMaskedContext(workInProgress, unmaskedContext);
            fn = fn(props, unmaskedContext);
            workInProgress.effectTag |= 1;
            "object" === (typeof fn === "undefined" ? "undefined" : _typeof(fn)) && null !== fn && "function" === typeof fn.render && void 0 === fn.$$typeof ? (unmaskedContext = workInProgress.type, workInProgress.tag = 2, workInProgress.memoizedState = null !== fn.state && void 0 !== fn.state ? fn.state : null, "function" === typeof unmaskedContext.getDerivedStateFromProps && (props = callGetDerivedStateFromProps(workInProgress, fn, props, workInProgress.memoizedState), null !== props && void 0 !== props && (workInProgress.memoizedState = _extends({}, workInProgress.memoizedState, props))), props = pushLegacyContextProvider(workInProgress), adoptClassInstance(workInProgress, fn), mountClassInstance(workInProgress, renderExpirationTime), current = finishClassComponent(current, workInProgress, !0, props, !1, renderExpirationTime)) : (workInProgress.tag = 1, reconcileChildren(current, workInProgress, fn), workInProgress.memoizedProps = props, current = workInProgress.child);
            return current;

          case 1:
            return props = workInProgress.type, renderExpirationTime = workInProgress.pendingProps, hasLegacyContextChanged() || workInProgress.memoizedProps !== renderExpirationTime ? (fn = getUnmaskedContext(workInProgress), fn = getMaskedContext(workInProgress, fn), props = props(renderExpirationTime, fn), workInProgress.effectTag |= 1, reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 2:
            props = pushLegacyContextProvider(workInProgress);
            null === current ? null === workInProgress.stateNode ? (constructClassInstance(workInProgress, workInProgress.pendingProps), mountClassInstance(workInProgress, renderExpirationTime), fn = !0) : fn = resumeMountClassInstance(workInProgress, renderExpirationTime) : fn = updateClassInstance(current, workInProgress, renderExpirationTime);
            unmaskedContext = !1;
            var updateQueue = workInProgress.updateQueue;
            null !== updateQueue && null !== updateQueue.capturedValues && (unmaskedContext = fn = !0);
            return finishClassComponent(current, workInProgress, fn, props, unmaskedContext, renderExpirationTime);

          case 3:
            a: if (pushHostRootContext(workInProgress), fn = workInProgress.updateQueue, null !== fn) {
              unmaskedContext = workInProgress.memoizedState;
              props = processUpdateQueue(current, workInProgress, fn, null, null, renderExpirationTime);
              workInProgress.memoizedState = props;
              fn = workInProgress.updateQueue;
              if (null !== fn && null !== fn.capturedValues) fn = null;else if (unmaskedContext === props) {
                resetHydrationState();
                current = bailoutOnAlreadyFinishedWork(current, workInProgress);
                break a;
              } else fn = props.element;
              unmaskedContext = workInProgress.stateNode;
              (null === current || null === current.child) && unmaskedContext.hydrate && enterHydrationState(workInProgress) ? (workInProgress.effectTag |= 2, workInProgress.child = mountChildFibers(workInProgress, null, fn, renderExpirationTime)) : (resetHydrationState(), reconcileChildren(current, workInProgress, fn));
              workInProgress.memoizedState = props;
              current = workInProgress.child;
            } else resetHydrationState(), current = bailoutOnAlreadyFinishedWork(current, workInProgress);

            return current;

          case 5:
            a: {
              pushHostContext(workInProgress);
              null === current && tryToClaimNextHydratableInstance(workInProgress);
              props = workInProgress.type;
              updateQueue = workInProgress.memoizedProps;
              fn = workInProgress.pendingProps;
              unmaskedContext = null !== current ? current.memoizedProps : null;

              if (!hasLegacyContextChanged() && updateQueue === fn) {
                if (updateQueue = workInProgress.mode & 1 && shouldDeprioritizeSubtree(props, fn)) workInProgress.expirationTime = 1073741823;

                if (!updateQueue || 1073741823 !== renderExpirationTime) {
                  current = bailoutOnAlreadyFinishedWork(current, workInProgress);
                  break a;
                }
              }

              updateQueue = fn.children;
              shouldSetTextContent(props, fn) ? updateQueue = null : unmaskedContext && shouldSetTextContent(props, unmaskedContext) && (workInProgress.effectTag |= 16);
              markRef(current, workInProgress);
              1073741823 !== renderExpirationTime && workInProgress.mode & 1 && shouldDeprioritizeSubtree(props, fn) ? (workInProgress.expirationTime = 1073741823, workInProgress.memoizedProps = fn, current = null) : (reconcileChildren(current, workInProgress, updateQueue), workInProgress.memoizedProps = fn, current = workInProgress.child);
            }

            return current;

          case 6:
            return null === current && tryToClaimNextHydratableInstance(workInProgress), workInProgress.memoizedProps = workInProgress.pendingProps, null;

          case 8:
            workInProgress.tag = 7;

          case 7:
            return props = workInProgress.pendingProps, hasLegacyContextChanged() || workInProgress.memoizedProps !== props || (props = workInProgress.memoizedProps), fn = props.children, workInProgress.stateNode = null === current ? mountChildFibers(workInProgress, workInProgress.stateNode, fn, renderExpirationTime) : reconcileChildFibers(workInProgress, current.stateNode, fn, renderExpirationTime), workInProgress.memoizedProps = props, workInProgress.stateNode;

          case 9:
            return null;

          case 4:
            return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), props = workInProgress.pendingProps, hasLegacyContextChanged() || workInProgress.memoizedProps !== props ? (null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, props, renderExpirationTime) : reconcileChildren(current, workInProgress, props), workInProgress.memoizedProps = props, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 14:
            return renderExpirationTime = workInProgress.type.render, renderExpirationTime = renderExpirationTime(workInProgress.pendingProps, workInProgress.ref), reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, workInProgress.child;

          case 10:
            return renderExpirationTime = workInProgress.pendingProps, hasLegacyContextChanged() || workInProgress.memoizedProps !== renderExpirationTime ? (reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 11:
            return renderExpirationTime = workInProgress.pendingProps.children, hasLegacyContextChanged() || null !== renderExpirationTime && workInProgress.memoizedProps !== renderExpirationTime ? (reconcileChildren(current, workInProgress, renderExpirationTime), workInProgress.memoizedProps = renderExpirationTime, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress), current;

          case 13:
            return updateContextProvider(current, workInProgress, renderExpirationTime);

          case 12:
            fn = workInProgress.type;
            unmaskedContext = workInProgress.pendingProps;
            var oldProps = workInProgress.memoizedProps;
            props = fn._currentValue;
            updateQueue = fn._changedBits;

            if (hasLegacyContextChanged() || 0 !== updateQueue || oldProps !== unmaskedContext) {
              workInProgress.memoizedProps = unmaskedContext;
              oldProps = unmaskedContext.unstable_observedBits;
              if (void 0 === oldProps || null === oldProps) oldProps = 1073741823;
              workInProgress.stateNode = oldProps;
              0 !== (updateQueue & oldProps) && propagateContextChange(workInProgress, fn, updateQueue, renderExpirationTime);
              renderExpirationTime = unmaskedContext.children;
              renderExpirationTime = renderExpirationTime(props);
              reconcileChildren(current, workInProgress, renderExpirationTime);
              current = workInProgress.child;
            } else current = bailoutOnAlreadyFinishedWork(current, workInProgress);

            return current;

          default:
            invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    };
  }

  function ReactFiberCompleteWork(config, hostContext, legacyContext, newContext, hydrationContext) {
    function markUpdate(workInProgress) {
      workInProgress.effectTag |= 4;
    }

    var createInstance = config.createInstance,
        createTextInstance = config.createTextInstance,
        appendInitialChild = config.appendInitialChild,
        finalizeInitialChildren = config.finalizeInitialChildren,
        prepareUpdate = config.prepareUpdate,
        persistence = config.persistence,
        getRootHostContainer = hostContext.getRootHostContainer,
        popHostContext = hostContext.popHostContext,
        getHostContext = hostContext.getHostContext,
        popHostContainer = hostContext.popHostContainer,
        popLegacyContextProvider = legacyContext.popContextProvider,
        popTopLevelLegacyContextObject = legacyContext.popTopLevelContextObject,
        popProvider = newContext.popProvider,
        prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
        popHydrationState = hydrationContext.popHydrationState,
        updateHostContainer = void 0,
        updateHostComponent = void 0,
        updateHostText = void 0;
    config.mutation ? (updateHostContainer = function updateHostContainer() {}, updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload) {
      (workInProgress.updateQueue = updatePayload) && markUpdate(workInProgress);
    }, updateHostText = function updateHostText(current, workInProgress, oldText, newText) {
      oldText !== newText && markUpdate(workInProgress);
    }) : persistence ? invariant(!1, "Persistent reconciler is disabled.") : invariant(!1, "Noop reconciler is disabled.");
    return {
      completeWork: function completeWork(current, workInProgress, renderExpirationTime) {
        var newProps = workInProgress.pendingProps;

        switch (workInProgress.tag) {
          case 1:
            return null;

          case 2:
            return popLegacyContextProvider(workInProgress), current = workInProgress.stateNode, newProps = workInProgress.updateQueue, null !== newProps && null !== newProps.capturedValues && (workInProgress.effectTag &= -65, "function" === typeof current.componentDidCatch ? workInProgress.effectTag |= 256 : newProps.capturedValues = null), null;

          case 3:
            popHostContainer(workInProgress);
            popTopLevelLegacyContextObject(workInProgress);
            newProps = workInProgress.stateNode;
            newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
            if (null === current || null === current.child) popHydrationState(workInProgress), workInProgress.effectTag &= -3;
            updateHostContainer(workInProgress);
            current = workInProgress.updateQueue;
            null !== current && null !== current.capturedValues && (workInProgress.effectTag |= 256);
            return null;

          case 5:
            popHostContext(workInProgress);
            renderExpirationTime = getRootHostContainer();
            var type = workInProgress.type;

            if (null !== current && null != workInProgress.stateNode) {
              var oldProps = current.memoizedProps,
                  _instance = workInProgress.stateNode,
                  currentHostContext = getHostContext();
              _instance = prepareUpdate(_instance, type, oldProps, newProps, renderExpirationTime, currentHostContext);
              updateHostComponent(current, workInProgress, _instance, type, oldProps, newProps, renderExpirationTime, currentHostContext);
              current.ref !== workInProgress.ref && (workInProgress.effectTag |= 128);
            } else {
              if (!newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getHostContext();
              if (popHydrationState(workInProgress)) prepareToHydrateHostInstance(workInProgress, renderExpirationTime, current) && markUpdate(workInProgress);else {
                oldProps = createInstance(type, newProps, renderExpirationTime, current, workInProgress);

                a: for (currentHostContext = workInProgress.child; null !== currentHostContext;) {
                  if (5 === currentHostContext.tag || 6 === currentHostContext.tag) appendInitialChild(oldProps, currentHostContext.stateNode);else if (4 !== currentHostContext.tag && null !== currentHostContext.child) {
                    currentHostContext.child["return"] = currentHostContext;
                    currentHostContext = currentHostContext.child;
                    continue;
                  }
                  if (currentHostContext === workInProgress) break;

                  for (; null === currentHostContext.sibling;) {
                    if (null === currentHostContext["return"] || currentHostContext["return"] === workInProgress) break a;
                    currentHostContext = currentHostContext["return"];
                  }

                  currentHostContext.sibling["return"] = currentHostContext["return"];
                  currentHostContext = currentHostContext.sibling;
                }

                finalizeInitialChildren(oldProps, type, newProps, renderExpirationTime, current) && markUpdate(workInProgress);
                workInProgress.stateNode = oldProps;
              }
              null !== workInProgress.ref && (workInProgress.effectTag |= 128);
            }

            return null;

          case 6:
            if (current && null != workInProgress.stateNode) updateHostText(current, workInProgress, current.memoizedProps, newProps);else {
              if ("string" !== typeof newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), null;
              current = getRootHostContainer();
              renderExpirationTime = getHostContext();
              popHydrationState(workInProgress) ? prepareToHydrateHostTextInstance(workInProgress) && markUpdate(workInProgress) : workInProgress.stateNode = createTextInstance(newProps, current, renderExpirationTime, workInProgress);
            }
            return null;

          case 7:
            newProps = workInProgress.memoizedProps;
            invariant(newProps, "Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.");
            workInProgress.tag = 8;
            type = [];

            a: for ((oldProps = workInProgress.stateNode) && (oldProps["return"] = workInProgress); null !== oldProps;) {
              if (5 === oldProps.tag || 6 === oldProps.tag || 4 === oldProps.tag) invariant(!1, "A call cannot have host component children.");else if (9 === oldProps.tag) type.push(oldProps.pendingProps.value);else if (null !== oldProps.child) {
                oldProps.child["return"] = oldProps;
                oldProps = oldProps.child;
                continue;
              }

              for (; null === oldProps.sibling;) {
                if (null === oldProps["return"] || oldProps["return"] === workInProgress) break a;
                oldProps = oldProps["return"];
              }

              oldProps.sibling["return"] = oldProps["return"];
              oldProps = oldProps.sibling;
            }

            oldProps = newProps.handler;
            newProps = oldProps(newProps.props, type);
            workInProgress.child = reconcileChildFibers(workInProgress, null !== current ? current.child : null, newProps, renderExpirationTime);
            return workInProgress.child;

          case 8:
            return workInProgress.tag = 7, null;

          case 9:
            return null;

          case 14:
            return null;

          case 10:
            return null;

          case 11:
            return null;

          case 4:
            return popHostContainer(workInProgress), updateHostContainer(workInProgress), null;

          case 13:
            return popProvider(workInProgress), null;

          case 12:
            return null;

          case 0:
            invariant(!1, "An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.");

          default:
            invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    };
  }

  function ReactFiberUnwindWork(hostContext, legacyContext, newContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary) {
    var popHostContainer = hostContext.popHostContainer,
        popHostContext = hostContext.popHostContext,
        popLegacyContextProvider = legacyContext.popContextProvider,
        popTopLevelLegacyContextObject = legacyContext.popTopLevelContextObject,
        popProvider = newContext.popProvider;
    return {
      throwException: function throwException(returnFiber, sourceFiber, rawValue) {
        sourceFiber.effectTag |= 512;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        sourceFiber = {
          value: rawValue,
          source: sourceFiber,
          stack: getStackAddendumByWorkInProgressFiber(sourceFiber)
        };

        do {
          switch (returnFiber.tag) {
            case 3:
              ensureUpdateQueues(returnFiber);
              returnFiber.updateQueue.capturedValues = [sourceFiber];
              returnFiber.effectTag |= 1024;
              return;

            case 2:
              rawValue = returnFiber.type;
              var _instance = returnFiber.stateNode;

              if (0 === (returnFiber.effectTag & 64) && ("function" === typeof rawValue.getDerivedStateFromCatch && enableGetDerivedStateFromCatch || null !== _instance && "function" === typeof _instance.componentDidCatch && !isAlreadyFailedLegacyErrorBoundary(_instance))) {
                ensureUpdateQueues(returnFiber);
                rawValue = returnFiber.updateQueue;
                _instance = rawValue.capturedValues;
                null === _instance ? rawValue.capturedValues = [sourceFiber] : _instance.push(sourceFiber);
                returnFiber.effectTag |= 1024;
                return;
              }

          }

          returnFiber = returnFiber["return"];
        } while (null !== returnFiber);
      },
      unwindWork: function unwindWork(workInProgress) {
        switch (workInProgress.tag) {
          case 2:
            popLegacyContextProvider(workInProgress);
            var effectTag = workInProgress.effectTag;
            return effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

          case 3:
            return popHostContainer(workInProgress), popTopLevelLegacyContextObject(workInProgress), effectTag = workInProgress.effectTag, effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

          case 5:
            return popHostContext(workInProgress), null;

          case 4:
            return popHostContainer(workInProgress), null;

          case 13:
            return popProvider(workInProgress), null;

          default:
            return null;
        }
      },
      unwindInterruptedWork: function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
          case 2:
            popLegacyContextProvider(interruptedWork);
            break;

          case 3:
            popHostContainer(interruptedWork);
            popTopLevelLegacyContextObject(interruptedWork);
            break;

          case 5:
            popHostContext(interruptedWork);
            break;

          case 4:
            popHostContainer(interruptedWork);
            break;

          case 13:
            popProvider(interruptedWork);
        }
      }
    };
  }

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && (stack = getStackAddendumByWorkInProgressFiber(source));
    null !== source && getComponentName(source);
    source = null !== stack ? stack : "";
    errorInfo = errorInfo.value;
    null !== boundary && 2 === boundary.tag && getComponentName(boundary);

    try {
      if (errorInfo instanceof Error) {
        var message = errorInfo.message,
            name = errorInfo.name;
        var errorToHandle = errorInfo;

        try {
          errorToHandle.message = (message ? name + ": " + message : name) + "\n\nThis error is located at:" + source;
        } catch (e) {}
      } else errorToHandle = "string" === typeof errorInfo ? Error(errorInfo + "\n\nThis error is located at:" + source) : Error("Unspecified error at:" + source);

      ExceptionsManager.handleException(errorToHandle, !1);
    } catch (e) {
      e && e.suppressReactErrorLogging || console.error(e);
    }
  }

  function ReactFiberCommitWork(config, captureError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed) {
    function safelyDetachRef(current) {
      var ref = current.ref;
      if (null !== ref) if ("function" === typeof ref) try {
        ref(null);
      } catch (refError) {
        captureError(current, refError);
      } else ref.current = null;
    }

    function commitUnmount(current) {
      "function" === typeof onCommitUnmount && onCommitUnmount(current);

      switch (current.tag) {
        case 2:
          safelyDetachRef(current);
          var _instance7 = current.stateNode;
          if ("function" === typeof _instance7.componentWillUnmount) try {
            _instance7.props = current.memoizedProps, _instance7.state = current.memoizedState, _instance7.componentWillUnmount();
          } catch (unmountError) {
            captureError(current, unmountError);
          }
          break;

        case 5:
          safelyDetachRef(current);
          break;

        case 7:
          commitNestedUnmounts(current.stateNode);
          break;

        case 4:
          mutation && unmountHostComponents(current);
      }
    }

    function commitNestedUnmounts(root) {
      for (var node = root;;) {
        if (commitUnmount(node), null === node.child || mutation && 4 === node.tag) {
          if (node === root) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === root) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        } else node.child["return"] = node, node = node.child;
      }
    }

    function isHostParent(fiber) {
      return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
    }

    function unmountHostComponents(current) {
      for (var node = current, currentParentIsValid = !1, currentParent = void 0, currentParentIsContainer = void 0;;) {
        if (!currentParentIsValid) {
          currentParentIsValid = node["return"];

          a: for (;;) {
            invariant(null !== currentParentIsValid, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");

            switch (currentParentIsValid.tag) {
              case 5:
                currentParent = currentParentIsValid.stateNode;
                currentParentIsContainer = !1;
                break a;

              case 3:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = !0;
                break a;

              case 4:
                currentParent = currentParentIsValid.stateNode.containerInfo;
                currentParentIsContainer = !0;
                break a;
            }

            currentParentIsValid = currentParentIsValid["return"];
          }

          currentParentIsValid = !0;
        }

        if (5 === node.tag || 6 === node.tag) commitNestedUnmounts(node), currentParentIsContainer ? removeChildFromContainer(currentParent, node.stateNode) : removeChild(currentParent, node.stateNode);else if (4 === node.tag ? currentParent = node.stateNode.containerInfo : commitUnmount(node), null !== node.child) {
          node.child["return"] = node;
          node = node.child;
          continue;
        }
        if (node === current) break;

        for (; null === node.sibling;) {
          if (null === node["return"] || node["return"] === current) return;
          node = node["return"];
          4 === node.tag && (currentParentIsValid = !1);
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    var getPublicInstance = config.getPublicInstance,
        mutation = config.mutation;
    config = config.persistence;
    mutation || (config ? invariant(!1, "Persistent reconciler is disabled.") : invariant(!1, "Noop reconciler is disabled."));
    var commitMount = mutation.commitMount,
        commitUpdate = mutation.commitUpdate,
        resetTextContent = mutation.resetTextContent,
        commitTextUpdate = mutation.commitTextUpdate,
        appendChild = mutation.appendChild,
        appendChildToContainer = mutation.appendChildToContainer,
        insertBefore = mutation.insertBefore,
        insertInContainerBefore = mutation.insertInContainerBefore,
        removeChild = mutation.removeChild,
        removeChildFromContainer = mutation.removeChildFromContainer;
    return {
      commitBeforeMutationLifeCycles: function commitBeforeMutationLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            if (finishedWork.effectTag & 2048 && null !== current) {
              var prevProps = current.memoizedProps,
                  prevState = current.memoizedState;
              current = finishedWork.stateNode;
              current.props = finishedWork.memoizedProps;
              current.state = finishedWork.memoizedState;
              finishedWork = current.getSnapshotBeforeUpdate(prevProps, prevState);
              current.__reactInternalSnapshotBeforeUpdate = finishedWork;
            }

            break;

          case 3:
          case 5:
          case 6:
          case 4:
            break;

          default:
            invariant(!1, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitResetTextContent: function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
      },
      commitPlacement: function commitPlacement(finishedWork) {
        a: {
          for (var parent = finishedWork["return"]; null !== parent;) {
            if (isHostParent(parent)) {
              var parentFiber = parent;
              break a;
            }

            parent = parent["return"];
          }

          invariant(!1, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          parentFiber = void 0;
        }

        var isContainer = parent = void 0;

        switch (parentFiber.tag) {
          case 5:
            parent = parentFiber.stateNode;
            isContainer = !1;
            break;

          case 3:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = !0;
            break;

          case 4:
            parent = parentFiber.stateNode.containerInfo;
            isContainer = !0;
            break;

          default:
            invariant(!1, "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }

        parentFiber.effectTag & 16 && (resetTextContent(parent), parentFiber.effectTag &= -17);

        a: b: for (parentFiber = finishedWork;;) {
          for (; null === parentFiber.sibling;) {
            if (null === parentFiber["return"] || isHostParent(parentFiber["return"])) {
              parentFiber = null;
              break a;
            }

            parentFiber = parentFiber["return"];
          }

          parentFiber.sibling["return"] = parentFiber["return"];

          for (parentFiber = parentFiber.sibling; 5 !== parentFiber.tag && 6 !== parentFiber.tag;) {
            if (parentFiber.effectTag & 2) continue b;
            if (null === parentFiber.child || 4 === parentFiber.tag) continue b;else parentFiber.child["return"] = parentFiber, parentFiber = parentFiber.child;
          }

          if (!(parentFiber.effectTag & 2)) {
            parentFiber = parentFiber.stateNode;
            break a;
          }
        }

        for (var node = finishedWork;;) {
          if (5 === node.tag || 6 === node.tag) parentFiber ? isContainer ? insertInContainerBefore(parent, node.stateNode, parentFiber) : insertBefore(parent, node.stateNode, parentFiber) : isContainer ? appendChildToContainer(parent, node.stateNode) : appendChild(parent, node.stateNode);else if (4 !== node.tag && null !== node.child) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) break;

          for (; null === node.sibling;) {
            if (null === node["return"] || node["return"] === finishedWork) return;
            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }
      },
      commitDeletion: function commitDeletion(current) {
        unmountHostComponents(current);
        current["return"] = null;
        current.child = null;
        current.alternate && (current.alternate.child = null, current.alternate["return"] = null);
      },
      commitWork: function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            break;

          case 5:
            var _instance8 = finishedWork.stateNode;

            if (null != _instance8) {
              var newProps = finishedWork.memoizedProps;
              current = null !== current ? current.memoizedProps : newProps;
              var type = finishedWork.type,
                  updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;
              null !== updatePayload && commitUpdate(_instance8, updatePayload, type, current, newProps, finishedWork);
            }

            break;

          case 6:
            invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            _instance8 = finishedWork.memoizedProps;
            commitTextUpdate(finishedWork.stateNode, null !== current ? current.memoizedProps : _instance8, _instance8);
            break;

          case 3:
            break;

          default:
            invariant(!1, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitLifeCycles: function commitLifeCycles(finishedRoot, current, finishedWork) {
        switch (finishedWork.tag) {
          case 2:
            finishedRoot = finishedWork.stateNode;
            if (finishedWork.effectTag & 4) if (null === current) finishedRoot.props = finishedWork.memoizedProps, finishedRoot.state = finishedWork.memoizedState, finishedRoot.componentDidMount();else {
              var prevProps = current.memoizedProps;
              current = current.memoizedState;
              finishedRoot.props = finishedWork.memoizedProps;
              finishedRoot.state = finishedWork.memoizedState;
              finishedRoot.componentDidUpdate(prevProps, current, finishedRoot.__reactInternalSnapshotBeforeUpdate);
            }
            finishedWork = finishedWork.updateQueue;
            null !== finishedWork && commitCallbacks(finishedWork, finishedRoot);
            break;

          case 3:
            current = finishedWork.updateQueue;

            if (null !== current) {
              finishedRoot = null;
              if (null !== finishedWork.child) switch (finishedWork.child.tag) {
                case 5:
                  finishedRoot = getPublicInstance(finishedWork.child.stateNode);
                  break;

                case 2:
                  finishedRoot = finishedWork.child.stateNode;
              }
              commitCallbacks(current, finishedRoot);
            }

            break;

          case 5:
            finishedRoot = finishedWork.stateNode;
            null === current && finishedWork.effectTag & 4 && commitMount(finishedRoot, finishedWork.type, finishedWork.memoizedProps, finishedWork);
            break;

          case 6:
            break;

          case 4:
            break;

          default:
            invariant(!1, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitErrorLogging: function commitErrorLogging(finishedWork, onUncaughtError) {
        switch (finishedWork.tag) {
          case 2:
            var ctor = finishedWork.type;
            onUncaughtError = finishedWork.stateNode;
            var updateQueue = finishedWork.updateQueue;
            invariant(null !== updateQueue && null !== updateQueue.capturedValues, "An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");
            var capturedErrors = updateQueue.capturedValues;
            updateQueue.capturedValues = null;
            "function" !== typeof ctor.getDerivedStateFromCatch && markLegacyErrorBoundaryAsFailed(onUncaughtError);
            onUncaughtError.props = finishedWork.memoizedProps;
            onUncaughtError.state = finishedWork.memoizedState;

            for (ctor = 0; ctor < capturedErrors.length; ctor++) {
              updateQueue = capturedErrors[ctor];
              var _error = updateQueue.value,
                  stack = updateQueue.stack;
              logError(finishedWork, updateQueue);
              onUncaughtError.componentDidCatch(_error, {
                componentStack: null !== stack ? stack : ""
              });
            }

            break;

          case 3:
            ctor = finishedWork.updateQueue;
            invariant(null !== ctor && null !== ctor.capturedValues, "An error logging effect should not have been scheduled if no errors were captured. This error is likely caused by a bug in React. Please file an issue.");
            capturedErrors = ctor.capturedValues;
            ctor.capturedValues = null;

            for (ctor = 0; ctor < capturedErrors.length; ctor++) {
              updateQueue = capturedErrors[ctor], logError(finishedWork, updateQueue), onUncaughtError(updateQueue.value);
            }

            break;

          default:
            invariant(!1, "This unit of work tag cannot capture errors.  This error is likely caused by a bug in React. Please file an issue.");
        }
      },
      commitAttachRef: function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;

        if (null !== ref) {
          var _instance6 = finishedWork.stateNode;

          switch (finishedWork.tag) {
            case 5:
              finishedWork = getPublicInstance(_instance6);
              break;

            default:
              finishedWork = _instance6;
          }

          "function" === typeof ref ? ref(finishedWork) : ref.current = finishedWork;
        }
      },
      commitDetachRef: function commitDetachRef(current) {
        current = current.ref;
        null !== current && ("function" === typeof current ? current(null) : current.current = null);
      }
    };
  }

  var NO_CONTEXT = {};

  function ReactFiberHostContext(config, stack) {
    function requiredContext(c) {
      invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return c;
    }

    var getChildHostContext = config.getChildHostContext,
        getRootHostContext = config.getRootHostContext;
    config = stack.createCursor;
    var push = stack.push,
        pop = stack.pop,
        contextStackCursor = config(NO_CONTEXT),
        contextFiberStackCursor = config(NO_CONTEXT),
        rootInstanceStackCursor = config(NO_CONTEXT);
    return {
      getHostContext: function getHostContext() {
        return requiredContext(contextStackCursor.current);
      },
      getRootHostContainer: function getRootHostContainer() {
        return requiredContext(rootInstanceStackCursor.current);
      },
      popHostContainer: function popHostContainer(fiber) {
        pop(contextStackCursor, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      },
      popHostContext: function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
      },
      pushHostContainer: function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor, NO_CONTEXT, fiber);
        nextRootInstance = getRootHostContext(nextRootInstance);
        pop(contextStackCursor, fiber);
        push(contextStackCursor, nextRootInstance, fiber);
      },
      pushHostContext: function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current),
            context = requiredContext(contextStackCursor.current);
        rootInstance = getChildHostContext(context, fiber.type, rootInstance);
        context !== rootInstance && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, rootInstance, fiber));
      }
    };
  }

  function ReactFiberHydrationContext(config) {
    function deleteHydratableInstance(returnFiber, instance) {
      var fiber = new FiberNode(5, null, null, 0);
      fiber.type = "DELETED";
      fiber.stateNode = instance;
      fiber["return"] = returnFiber;
      fiber.effectTag = 8;
      null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case 5:
          return nextInstance = canHydrateInstance(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, !0) : !1;

        case 6:
          return nextInstance = canHydrateTextInstance(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, !0) : !1;

        default:
          return !1;
      }
    }

    function popToNextHostParent(fiber) {
      for (fiber = fiber["return"]; null !== fiber && 5 !== fiber.tag && 3 !== fiber.tag;) {
        fiber = fiber["return"];
      }

      hydrationParentFiber = fiber;
    }

    var shouldSetTextContent = config.shouldSetTextContent;
    config = config.hydration;
    if (!config) return {
      enterHydrationState: function enterHydrationState() {
        return !1;
      },
      resetHydrationState: function resetHydrationState() {},
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
        invariant(!1, "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
        invariant(!1, "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      },
      popHydrationState: function popHydrationState() {
        return !1;
      }
    };
    var canHydrateInstance = config.canHydrateInstance,
        canHydrateTextInstance = config.canHydrateTextInstance,
        getNextHydratableSibling = config.getNextHydratableSibling,
        getFirstHydratableChild = config.getFirstHydratableChild,
        hydrateInstance = config.hydrateInstance,
        hydrateTextInstance = config.hydrateTextInstance,
        hydrationParentFiber = null,
        nextHydratableInstance = null,
        isHydrating = !1;
    return {
      enterHydrationState: function enterHydrationState(fiber) {
        nextHydratableInstance = getFirstHydratableChild(fiber.stateNode.containerInfo);
        hydrationParentFiber = fiber;
        return isHydrating = !0;
      },
      resetHydrationState: function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null;
        isHydrating = !1;
      },
      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
          var nextInstance = nextHydratableInstance;

          if (nextInstance) {
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(nextInstance);

              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                fiber.effectTag |= 2;
                isHydrating = !1;
                hydrationParentFiber = fiber;
                return;
              }

              deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
            }

            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          } else fiber.effectTag |= 2, isHydrating = !1, hydrationParentFiber = fiber;
        }
      },
      prepareToHydrateHostInstance: function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        rootContainerInstance = hydrateInstance(fiber.stateNode, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
        fiber.updateQueue = rootContainerInstance;
        return null !== rootContainerInstance ? !0 : !1;
      },
      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance(fiber) {
        return hydrateTextInstance(fiber.stateNode, fiber.memoizedProps, fiber);
      },
      popHydrationState: function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return !1;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = !0, !1;
        var type = fiber.type;
        if (5 !== fiber.tag || "head" !== type && "body" !== type && !shouldSetTextContent(type, fiber.memoizedProps)) for (type = nextHydratableInstance; type;) {
          deleteHydratableInstance(fiber, type), type = getNextHydratableSibling(type);
        }
        popToNextHostParent(fiber);
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return !0;
      }
    };
  }

  function ReactFiberLegacyContext(stack) {
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      workInProgress = workInProgress.stateNode;
      workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
      workInProgress.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }

    function isContextProvider(fiber) {
      return 2 === fiber.tag && null != fiber.type.childContextTypes;
    }

    function processChildContext(fiber, parentContext) {
      var instance = fiber.stateNode,
          childContextTypes = fiber.type.childContextTypes;
      if ("function" !== typeof instance.getChildContext) return parentContext;
      instance = instance.getChildContext();

      for (var contextKey in instance) {
        invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || "Unknown", contextKey);
      }

      return _extends({}, parentContext, instance);
    }

    var createCursor = stack.createCursor,
        push = stack.push,
        pop = stack.pop,
        contextStackCursor = createCursor(emptyObject),
        didPerformWorkStackCursor = createCursor(!1),
        previousContext = emptyObject;
    return {
      getUnmaskedContext: function getUnmaskedContext(workInProgress) {
        return isContextProvider(workInProgress) ? previousContext : contextStackCursor.current;
      },
      cacheContext: cacheContext,
      getMaskedContext: function getMaskedContext(workInProgress, unmaskedContext) {
        var contextTypes = workInProgress.type.contextTypes;
        if (!contextTypes) return emptyObject;
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {},
            key;

        for (key in contextTypes) {
          context[key] = unmaskedContext[key];
        }

        instance && cacheContext(workInProgress, unmaskedContext, context);
        return context;
      },
      hasContextChanged: function hasContextChanged() {
        return didPerformWorkStackCursor.current;
      },
      isContextConsumer: function isContextConsumer(fiber) {
        return 2 === fiber.tag && null != fiber.type.contextTypes;
      },
      isContextProvider: isContextProvider,
      popContextProvider: function popContextProvider(fiber) {
        isContextProvider(fiber) && (pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber));
      },
      popTopLevelContextObject: function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      },
      pushTopLevelContextObject: function pushTopLevelContextObject(fiber, context, didChange) {
        invariant(null == contextStackCursor.cursor, "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      },
      processChildContext: processChildContext,
      pushContextProvider: function pushContextProvider(workInProgress) {
        if (!isContextProvider(workInProgress)) return !1;
        var instance = workInProgress.stateNode;
        instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, instance, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return !0;
      },
      invalidateContextProvider: function invalidateContextProvider(workInProgress, didChange) {
        var instance = workInProgress.stateNode;
        invariant(instance, "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");

        if (didChange) {
          var mergedContext = processChildContext(workInProgress, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext;
          pop(didPerformWorkStackCursor, workInProgress);
          pop(contextStackCursor, workInProgress);
          push(contextStackCursor, mergedContext, workInProgress);
        } else pop(didPerformWorkStackCursor, workInProgress);

        push(didPerformWorkStackCursor, didChange, workInProgress);
      },
      findCurrentUnmaskedContext: function findCurrentUnmaskedContext(fiber) {
        for (invariant(2 === isFiberMountedImpl(fiber) && 2 === fiber.tag, "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."); 3 !== fiber.tag;) {
          if (isContextProvider(fiber)) return fiber.stateNode.__reactInternalMemoizedMergedChildContext;
          fiber = fiber["return"];
          invariant(fiber, "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }

        return fiber.stateNode.context;
      }
    };
  }

  function ReactFiberNewContext(stack) {
    var createCursor = stack.createCursor,
        push = stack.push,
        pop = stack.pop,
        providerCursor = createCursor(null),
        valueCursor = createCursor(null),
        changedBitsCursor = createCursor(0);
    return {
      pushProvider: function pushProvider(providerFiber) {
        var context = providerFiber.type._context;
        push(changedBitsCursor, context._changedBits, providerFiber);
        push(valueCursor, context._currentValue, providerFiber);
        push(providerCursor, providerFiber, providerFiber);
        context._currentValue = providerFiber.pendingProps.value;
        context._changedBits = providerFiber.stateNode;
      },
      popProvider: function popProvider(providerFiber) {
        var changedBits = changedBitsCursor.current,
            currentValue = valueCursor.current;
        pop(providerCursor, providerFiber);
        pop(valueCursor, providerFiber);
        pop(changedBitsCursor, providerFiber);
        providerFiber = providerFiber.type._context;
        providerFiber._currentValue = currentValue;
        providerFiber._changedBits = changedBits;
      }
    };
  }

  function ReactFiberStack() {
    var valueStack = [],
        index = -1;
    return {
      createCursor: function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      },
      isEmpty: function isEmpty() {
        return -1 === index;
      },
      pop: function pop(cursor) {
        0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
      },
      push: function push(cursor, value) {
        index++;
        valueStack[index] = cursor.current;
        cursor.current = value;
      },
      checkThatStackIsEmpty: function checkThatStackIsEmpty() {},
      resetStackAfterFatalErrorInDev: function resetStackAfterFatalErrorInDev() {}
    };
  }

  function ReactFiberScheduler(config) {
    function resetStack() {
      if (null !== nextUnitOfWork) for (var interruptedWork = nextUnitOfWork["return"]; null !== interruptedWork;) {
        unwindInterruptedWork(interruptedWork), interruptedWork = interruptedWork["return"];
      }
      nextRoot = null;
      nextRenderExpirationTime = 0;
      nextUnitOfWork = null;
      isRootReadyForCommit = !1;
    }

    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return null !== legacyErrorBoundariesThatAlreadyFailed && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }

    function completeUnitOfWork(workInProgress$jscomp$0) {
      for (;;) {
        var current = workInProgress$jscomp$0.alternate,
            returnFiber = workInProgress$jscomp$0["return"],
            siblingFiber = workInProgress$jscomp$0.sibling;

        if (0 === (workInProgress$jscomp$0.effectTag & 512)) {
          current = completeWork(current, workInProgress$jscomp$0, nextRenderExpirationTime);
          var workInProgress = workInProgress$jscomp$0;

          if (1073741823 === nextRenderExpirationTime || 1073741823 !== workInProgress.expirationTime) {
            b: switch (workInProgress.tag) {
              case 3:
              case 2:
                var newExpirationTime = workInProgress.updateQueue;
                newExpirationTime = null === newExpirationTime ? 0 : newExpirationTime.expirationTime;
                break b;

              default:
                newExpirationTime = 0;
            }

            for (var child = workInProgress.child; null !== child;) {
              0 !== child.expirationTime && (0 === newExpirationTime || newExpirationTime > child.expirationTime) && (newExpirationTime = child.expirationTime), child = child.sibling;
            }

            workInProgress.expirationTime = newExpirationTime;
          }

          if (null !== current) return current;
          null !== returnFiber && 0 === (returnFiber.effectTag & 512) && (null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress$jscomp$0.firstEffect), null !== workInProgress$jscomp$0.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0.firstEffect), returnFiber.lastEffect = workInProgress$jscomp$0.lastEffect), 1 < workInProgress$jscomp$0.effectTag && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress$jscomp$0 : returnFiber.firstEffect = workInProgress$jscomp$0, returnFiber.lastEffect = workInProgress$jscomp$0));
          if (null !== siblingFiber) return siblingFiber;
          if (null !== returnFiber) workInProgress$jscomp$0 = returnFiber;else {
            isRootReadyForCommit = !0;
            break;
          }
        } else {
          workInProgress$jscomp$0 = unwindWork(workInProgress$jscomp$0);
          if (null !== workInProgress$jscomp$0) return workInProgress$jscomp$0.effectTag &= 2559, workInProgress$jscomp$0;
          null !== returnFiber && (returnFiber.firstEffect = returnFiber.lastEffect = null, returnFiber.effectTag |= 512);
          if (null !== siblingFiber) return siblingFiber;
          if (null !== returnFiber) workInProgress$jscomp$0 = returnFiber;else break;
        }
      }

      return null;
    }

    function performUnitOfWork(workInProgress) {
      var next = beginWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
      null === next && (next = completeUnitOfWork(workInProgress));
      ReactCurrentOwner.current = null;
      return next;
    }

    function renderRoot(root, expirationTime, isAsync) {
      invariant(!isWorking, "renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isWorking = !0;
      if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || null === nextUnitOfWork) resetStack(), nextRoot = root, nextRenderExpirationTime = expirationTime, nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime), root.pendingCommitExpirationTime = 0;
      var didFatal = !1;

      do {
        try {
          if (isAsync) for (; null !== nextUnitOfWork && !shouldYield();) {
            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
          } else for (; null !== nextUnitOfWork;) {
            nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
          }
        } catch (thrownValue) {
          if (null === nextUnitOfWork) {
            didFatal = !0;
            onUncaughtError(thrownValue);
            break;
          }

          isAsync = nextUnitOfWork;
          var returnFiber = isAsync["return"];

          if (null === returnFiber) {
            didFatal = !0;
            onUncaughtError(thrownValue);
            break;
          }

          throwException(returnFiber, isAsync, thrownValue);
          nextUnitOfWork = completeUnitOfWork(isAsync);
        }

        break;
      } while (1);

      isWorking = !1;
      if (didFatal || null !== nextUnitOfWork) return null;
      if (isRootReadyForCommit) return root.pendingCommitExpirationTime = expirationTime, root.current.alternate;
      invariant(!1, "Expired work should have completed. This error is likely caused by a bug in React. Please file an issue.");
    }

    function scheduleCapture(sourceFiber, boundaryFiber, value, expirationTime) {
      sourceFiber = {
        value: value,
        source: sourceFiber,
        stack: getStackAddendumByWorkInProgressFiber(sourceFiber)
      };
      insertUpdateIntoFiber(boundaryFiber, {
        expirationTime: expirationTime,
        partialState: null,
        callback: null,
        isReplace: !1,
        isForced: !1,
        capturedValue: sourceFiber,
        next: null
      });
      scheduleWork(boundaryFiber, expirationTime);
    }

    function onCommitPhaseError(fiber$jscomp$0, error) {
      a: {
        invariant(!isWorking || isCommitting, "dispatch: Cannot dispatch during the render phase.");

        for (var fiber = fiber$jscomp$0["return"]; null !== fiber;) {
          switch (fiber.tag) {
            case 2:
              var instance = fiber.stateNode;

              if ("function" === typeof fiber.type.getDerivedStateFromCatch || "function" === typeof instance.componentDidCatch && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                scheduleCapture(fiber$jscomp$0, fiber, error, 1);
                fiber$jscomp$0 = void 0;
                break a;
              }

              break;

            case 3:
              scheduleCapture(fiber$jscomp$0, fiber, error, 1);
              fiber$jscomp$0 = void 0;
              break a;
          }

          fiber = fiber["return"];
        }

        3 === fiber$jscomp$0.tag && scheduleCapture(fiber$jscomp$0, fiber$jscomp$0, error, 1);
        fiber$jscomp$0 = void 0;
      }

      return fiber$jscomp$0;
    }

    function computeExpirationForFiber(fiber) {
      fiber = 0 !== expirationContext ? expirationContext : isWorking ? isCommitting ? 1 : nextRenderExpirationTime : fiber.mode & 1 ? isBatchingInteractiveUpdates ? 10 * (((recalculateCurrentTime() + 50) / 10 | 0) + 1) : 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1) : 1;
      isBatchingInteractiveUpdates && (0 === lowestPendingInteractiveExpirationTime || fiber > lowestPendingInteractiveExpirationTime) && (lowestPendingInteractiveExpirationTime = fiber);
      return fiber;
    }

    function scheduleWork(fiber, expirationTime) {
      a: {
        for (; null !== fiber;) {
          if (0 === fiber.expirationTime || fiber.expirationTime > expirationTime) fiber.expirationTime = expirationTime;
          null !== fiber.alternate && (0 === fiber.alternate.expirationTime || fiber.alternate.expirationTime > expirationTime) && (fiber.alternate.expirationTime = expirationTime);
          if (null === fiber["return"]) if (3 === fiber.tag) {
            var root = fiber.stateNode;
            !isWorking && 0 !== nextRenderExpirationTime && expirationTime < nextRenderExpirationTime && resetStack();
            isWorking && !isCommitting && nextRoot === root || requestWork(root, expirationTime);
            nestedUpdateCount > NESTED_UPDATE_LIMIT && invariant(!1, "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          } else {
            expirationTime = void 0;
            break a;
          }
          fiber = fiber["return"];
        }

        expirationTime = void 0;
      }

      return expirationTime;
    }

    function recalculateCurrentTime() {
      mostRecentCurrentTimeMs = now() - originalStartTimeMs;
      return mostRecentCurrentTime = (mostRecentCurrentTimeMs / 10 | 0) + 2;
    }

    function syncUpdates(fn, a, b, c, d) {
      var previousExpirationContext = expirationContext;
      expirationContext = 1;

      try {
        return fn(a, b, c, d);
      } finally {
        expirationContext = previousExpirationContext;
      }
    }

    function scheduleCallbackWithExpiration(expirationTime) {
      if (0 !== callbackExpirationTime) {
        if (expirationTime > callbackExpirationTime) return;
        cancelDeferredCallback(callbackID);
      }

      var currentMs = now() - originalStartTimeMs;
      callbackExpirationTime = expirationTime;
      callbackID = scheduleDeferredCallback(performAsyncWork, {
        timeout: 10 * (expirationTime - 2) - currentMs
      });
    }

    function requestWork(root, expirationTime) {
      if (null === root.nextScheduledRoot) root.remainingExpirationTime = expirationTime, null === lastScheduledRoot ? (firstScheduledRoot = lastScheduledRoot = root, root.nextScheduledRoot = root) : (lastScheduledRoot = lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot.nextScheduledRoot = firstScheduledRoot);else {
        var remainingExpirationTime = root.remainingExpirationTime;
        if (0 === remainingExpirationTime || expirationTime < remainingExpirationTime) root.remainingExpirationTime = expirationTime;
      }
      isRendering || (isBatchingUpdates ? isUnbatchingUpdates && (nextFlushedRoot = root, nextFlushedExpirationTime = 1, performWorkOnRoot(root, 1, !1)) : 1 === expirationTime ? performSyncWork() : scheduleCallbackWithExpiration(expirationTime));
    }

    function findHighestPriorityRoot() {
      var highestPriorityWork = 0,
          highestPriorityRoot = null;
      if (null !== lastScheduledRoot) for (var previousScheduledRoot = lastScheduledRoot, root = firstScheduledRoot; null !== root;) {
        var remainingExpirationTime = root.remainingExpirationTime;

        if (0 === remainingExpirationTime) {
          invariant(null !== previousScheduledRoot && null !== lastScheduledRoot, "Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.");

          if (root === root.nextScheduledRoot) {
            firstScheduledRoot = lastScheduledRoot = root.nextScheduledRoot = null;
            break;
          } else if (root === firstScheduledRoot) firstScheduledRoot = remainingExpirationTime = root.nextScheduledRoot, lastScheduledRoot.nextScheduledRoot = remainingExpirationTime, root.nextScheduledRoot = null;else if (root === lastScheduledRoot) {
            lastScheduledRoot = previousScheduledRoot;
            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            root.nextScheduledRoot = null;
            break;
          } else previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot, root.nextScheduledRoot = null;

          root = previousScheduledRoot.nextScheduledRoot;
        } else {
          if (0 === highestPriorityWork || remainingExpirationTime < highestPriorityWork) highestPriorityWork = remainingExpirationTime, highestPriorityRoot = root;
          if (root === lastScheduledRoot) break;
          previousScheduledRoot = root;
          root = root.nextScheduledRoot;
        }
      }
      previousScheduledRoot = nextFlushedRoot;
      null !== previousScheduledRoot && previousScheduledRoot === highestPriorityRoot && 1 === highestPriorityWork ? nestedUpdateCount++ : nestedUpdateCount = 0;
      nextFlushedRoot = highestPriorityRoot;
      nextFlushedExpirationTime = highestPriorityWork;
    }

    function performAsyncWork(dl) {
      performWork(0, !0, dl);
    }

    function performSyncWork() {
      performWork(1, !1, null);
    }

    function performWork(minExpirationTime, isAsync, dl) {
      deadline = dl;
      findHighestPriorityRoot();
      if (isAsync) for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || recalculateCurrentTime() >= nextFlushedExpirationTime);) {
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !deadlineDidExpire), findHighestPriorityRoot();
      } else for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime);) {
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !1), findHighestPriorityRoot();
      }
      null !== deadline && (callbackExpirationTime = 0, callbackID = -1);
      0 !== nextFlushedExpirationTime && scheduleCallbackWithExpiration(nextFlushedExpirationTime);
      deadline = null;
      deadlineDidExpire = !1;
      finishRendering();
    }

    function finishRendering() {
      nestedUpdateCount = 0;

      if (null !== completedBatches) {
        var batches = completedBatches;
        completedBatches = null;

        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];

          try {
            batch._onComplete();
          } catch (error) {
            hasUnhandledError || (hasUnhandledError = !0, unhandledError = error);
          }
        }
      }

      if (hasUnhandledError) throw batches = unhandledError, unhandledError = null, hasUnhandledError = !1, batches;
    }

    function performWorkOnRoot(root, expirationTime, isAsync) {
      invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
      isRendering = !0;
      isAsync ? (isAsync = root.finishedWork, null !== isAsync ? completeRoot(root, isAsync, expirationTime) : (root.finishedWork = null, isAsync = renderRoot(root, expirationTime, !0), null !== isAsync && (shouldYield() ? root.finishedWork = isAsync : completeRoot(root, isAsync, expirationTime)))) : (isAsync = root.finishedWork, null !== isAsync ? completeRoot(root, isAsync, expirationTime) : (root.finishedWork = null, isAsync = renderRoot(root, expirationTime, !1), null !== isAsync && completeRoot(root, isAsync, expirationTime)));
      isRendering = !1;
    }

    function completeRoot(root, finishedWork, expirationTime) {
      var firstBatch = root.firstBatch;

      if (null !== firstBatch && firstBatch._expirationTime <= expirationTime && (null === completedBatches ? completedBatches = [firstBatch] : completedBatches.push(firstBatch), firstBatch._defer)) {
        root.finishedWork = finishedWork;
        root.remainingExpirationTime = 0;
        return;
      }

      root.finishedWork = null;
      isCommitting = isWorking = !0;
      expirationTime = finishedWork.stateNode;
      invariant(expirationTime.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");
      firstBatch = expirationTime.pendingCommitExpirationTime;
      invariant(0 !== firstBatch, "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      expirationTime.pendingCommitExpirationTime = 0;
      var currentTime = recalculateCurrentTime();
      ReactCurrentOwner.current = null;
      if (1 < finishedWork.effectTag) {
        if (null !== finishedWork.lastEffect) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          var firstEffect = finishedWork.firstEffect;
        } else firstEffect = finishedWork;
      } else firstEffect = finishedWork.firstEffect;
      prepareForCommit(expirationTime.containerInfo);

      for (nextEffect = firstEffect; null !== nextEffect;) {
        var didError = !1,
            error = void 0;

        try {
          for (; null !== nextEffect;) {
            nextEffect.effectTag & 2048 && commitBeforeMutationLifeCycles(nextEffect.alternate, nextEffect), nextEffect = nextEffect.nextEffect;
          }
        } catch (e) {
          didError = !0, error = e;
        }

        didError && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), onCommitPhaseError(nextEffect, error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      for (nextEffect = firstEffect; null !== nextEffect;) {
        didError = !1;
        error = void 0;

        try {
          for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            effectTag & 16 && commitResetTextContent(nextEffect);

            if (effectTag & 128) {
              var current = nextEffect.alternate;
              null !== current && commitDetachRef(current);
            }

            switch (effectTag & 14) {
              case 2:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                break;

              case 6:
                commitPlacement(nextEffect);
                nextEffect.effectTag &= -3;
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 4:
                commitWork(nextEffect.alternate, nextEffect);
                break;

              case 8:
                commitDeletion(nextEffect);
            }

            nextEffect = nextEffect.nextEffect;
          }
        } catch (e) {
          didError = !0, error = e;
        }

        didError && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), onCommitPhaseError(nextEffect, error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      resetAfterCommit(expirationTime.containerInfo);
      expirationTime.current = finishedWork;

      for (nextEffect = firstEffect; null !== nextEffect;) {
        effectTag = !1;
        current = void 0;

        try {
          for (firstEffect = expirationTime, didError = currentTime, error = firstBatch; null !== nextEffect;) {
            var effectTag$jscomp$0 = nextEffect.effectTag;
            effectTag$jscomp$0 & 36 && commitLifeCycles(firstEffect, nextEffect.alternate, nextEffect, didError, error);
            effectTag$jscomp$0 & 256 && commitErrorLogging(nextEffect, onUncaughtError);
            effectTag$jscomp$0 & 128 && commitAttachRef(nextEffect);
            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null;
            nextEffect = next;
          }
        } catch (e) {
          effectTag = !0, current = e;
        }

        effectTag && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), onCommitPhaseError(nextEffect, current), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
      }

      isWorking = isCommitting = !1;
      "function" === typeof onCommitRoot && onCommitRoot(finishedWork.stateNode);
      finishedWork = expirationTime.current.expirationTime;
      0 === finishedWork && (legacyErrorBoundariesThatAlreadyFailed = null);
      root.remainingExpirationTime = finishedWork;
    }

    function shouldYield() {
      return null === deadline || deadline.timeRemaining() > timeHeuristicForUnitOfWork ? !1 : deadlineDidExpire = !0;
    }

    function onUncaughtError(error) {
      invariant(null !== nextFlushedRoot, "Should be working on a root. This error is likely caused by a bug in React. Please file an issue.");
      nextFlushedRoot.remainingExpirationTime = 0;
      hasUnhandledError || (hasUnhandledError = !0, unhandledError = error);
    }

    var stack = ReactFiberStack(),
        hostContext = ReactFiberHostContext(config, stack),
        legacyContext = ReactFiberLegacyContext(stack);
    stack = ReactFiberNewContext(stack);
    var hydrationContext = ReactFiberHydrationContext(config),
        beginWork = ReactFiberBeginWork(config, hostContext, legacyContext, stack, hydrationContext, scheduleWork, computeExpirationForFiber).beginWork,
        completeWork = ReactFiberCompleteWork(config, hostContext, legacyContext, stack, hydrationContext).completeWork;
    hostContext = ReactFiberUnwindWork(hostContext, legacyContext, stack, scheduleWork, isAlreadyFailedLegacyErrorBoundary);
    var throwException = hostContext.throwException,
        unwindWork = hostContext.unwindWork,
        unwindInterruptedWork = hostContext.unwindInterruptedWork;
    hostContext = ReactFiberCommitWork(config, onCommitPhaseError, scheduleWork, computeExpirationForFiber, function (instance) {
      null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([instance]) : legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }, recalculateCurrentTime);
    var commitBeforeMutationLifeCycles = hostContext.commitBeforeMutationLifeCycles,
        commitResetTextContent = hostContext.commitResetTextContent,
        commitPlacement = hostContext.commitPlacement,
        commitDeletion = hostContext.commitDeletion,
        commitWork = hostContext.commitWork,
        commitLifeCycles = hostContext.commitLifeCycles,
        commitErrorLogging = hostContext.commitErrorLogging,
        commitAttachRef = hostContext.commitAttachRef,
        commitDetachRef = hostContext.commitDetachRef,
        now = config.now,
        scheduleDeferredCallback = config.scheduleDeferredCallback,
        cancelDeferredCallback = config.cancelDeferredCallback,
        prepareForCommit = config.prepareForCommit,
        resetAfterCommit = config.resetAfterCommit,
        originalStartTimeMs = now(),
        mostRecentCurrentTime = 2,
        mostRecentCurrentTimeMs = originalStartTimeMs,
        lastUniqueAsyncExpiration = 0,
        expirationContext = 0,
        isWorking = !1,
        nextUnitOfWork = null,
        nextRoot = null,
        nextRenderExpirationTime = 0,
        nextEffect = null,
        isCommitting = !1,
        isRootReadyForCommit = !1,
        legacyErrorBoundariesThatAlreadyFailed = null,
        firstScheduledRoot = null,
        lastScheduledRoot = null,
        callbackExpirationTime = 0,
        callbackID = -1,
        isRendering = !1,
        nextFlushedRoot = null,
        nextFlushedExpirationTime = 0,
        lowestPendingInteractiveExpirationTime = 0,
        deadlineDidExpire = !1,
        hasUnhandledError = !1,
        unhandledError = null,
        deadline = null,
        isBatchingUpdates = !1,
        isUnbatchingUpdates = !1,
        isBatchingInteractiveUpdates = !1,
        completedBatches = null,
        NESTED_UPDATE_LIMIT = 1e3,
        nestedUpdateCount = 0,
        timeHeuristicForUnitOfWork = 1;
    return {
      recalculateCurrentTime: recalculateCurrentTime,
      computeExpirationForFiber: computeExpirationForFiber,
      scheduleWork: scheduleWork,
      requestWork: requestWork,
      flushRoot: function flushRoot(root, expirationTime) {
        invariant(!isRendering, "work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.");
        nextFlushedRoot = root;
        nextFlushedExpirationTime = expirationTime;
        performWorkOnRoot(root, expirationTime, !1);
        performSyncWork();
        finishRendering();
      },
      batchedUpdates: function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          return fn(a);
        } finally {
          (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performSyncWork();
        }
      },
      unbatchedUpdates: function unbatchedUpdates(fn, a) {
        if (isBatchingUpdates && !isUnbatchingUpdates) {
          isUnbatchingUpdates = !0;

          try {
            return fn(a);
          } finally {
            isUnbatchingUpdates = !1;
          }
        }

        return fn(a);
      },
      flushSync: function flushSync(fn, a) {
        invariant(!isRendering, "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          return syncUpdates(fn, a);
        } finally {
          isBatchingUpdates = previousIsBatchingUpdates, performSyncWork();
        }
      },
      flushControlled: function flushControlled(fn) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;

        try {
          syncUpdates(fn);
        } finally {
          (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, !1, null);
        }
      },
      deferredUpdates: function deferredUpdates(fn) {
        var previousExpirationContext = expirationContext;
        expirationContext = 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1);

        try {
          return fn();
        } finally {
          expirationContext = previousExpirationContext;
        }
      },
      syncUpdates: syncUpdates,
      interactiveUpdates: function interactiveUpdates(fn, a, b) {
        if (isBatchingInteractiveUpdates) return fn(a, b);
        isBatchingUpdates || isRendering || 0 === lowestPendingInteractiveExpirationTime || (performWork(lowestPendingInteractiveExpirationTime, !1, null), lowestPendingInteractiveExpirationTime = 0);
        var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates,
            previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = isBatchingInteractiveUpdates = !0;

        try {
          return fn(a, b);
        } finally {
          isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates, (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performSyncWork();
        }
      },
      flushInteractiveUpdates: function flushInteractiveUpdates() {
        isRendering || 0 === lowestPendingInteractiveExpirationTime || (performWork(lowestPendingInteractiveExpirationTime, !1, null), lowestPendingInteractiveExpirationTime = 0);
      },
      computeUniqueAsyncExpiration: function computeUniqueAsyncExpiration() {
        var result = 25 * (((recalculateCurrentTime() + 500) / 25 | 0) + 1);
        result <= lastUniqueAsyncExpiration && (result = lastUniqueAsyncExpiration + 1);
        return lastUniqueAsyncExpiration = result;
      },
      legacyContext: legacyContext
    };
  }

  function ReactFiberReconciler$1(config) {
    function _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback) {
      currentTime = container.current;

      if (parentComponent) {
        parentComponent = parentComponent._reactInternalFiber;
        var parentContext = findCurrentUnmaskedContext(parentComponent);
        parentComponent = isContextProvider(parentComponent) ? processChildContext(parentComponent, parentContext) : parentContext;
      } else parentComponent = emptyObject;

      null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
      container = callback;
      insertUpdateIntoFiber(currentTime, {
        expirationTime: expirationTime,
        partialState: {
          element: element
        },
        callback: void 0 === container ? null : container,
        isReplace: !1,
        isForced: !1,
        capturedValue: null,
        next: null
      });
      scheduleWork(currentTime, expirationTime);
      return expirationTime;
    }

    function findHostInstance(fiber) {
      fiber = findCurrentHostFiber(fiber);
      return null === fiber ? null : fiber.stateNode;
    }

    var getPublicInstance = config.getPublicInstance;
    config = ReactFiberScheduler(config);
    var recalculateCurrentTime = config.recalculateCurrentTime,
        computeExpirationForFiber = config.computeExpirationForFiber,
        scheduleWork = config.scheduleWork,
        legacyContext = config.legacyContext,
        findCurrentUnmaskedContext = legacyContext.findCurrentUnmaskedContext,
        isContextProvider = legacyContext.isContextProvider,
        processChildContext = legacyContext.processChildContext;
    return {
      createContainer: function createContainer(containerInfo, isAsync, hydrate) {
        isAsync = new FiberNode(3, null, null, isAsync ? 3 : 0);
        containerInfo = {
          current: isAsync,
          containerInfo: containerInfo,
          pendingChildren: null,
          pendingCommitExpirationTime: 0,
          finishedWork: null,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          remainingExpirationTime: 0,
          firstBatch: null,
          nextScheduledRoot: null
        };
        return isAsync.stateNode = containerInfo;
      },
      updateContainer: function updateContainer(element, container, parentComponent, callback) {
        var current = container.current,
            currentTime = recalculateCurrentTime();
        current = computeExpirationForFiber(current);
        return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, current, callback);
      },
      updateContainerAtExpirationTime: function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
        var currentTime = recalculateCurrentTime();
        return _updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);
      },
      flushRoot: config.flushRoot,
      requestWork: config.requestWork,
      computeUniqueAsyncExpiration: config.computeUniqueAsyncExpiration,
      batchedUpdates: config.batchedUpdates,
      unbatchedUpdates: config.unbatchedUpdates,
      deferredUpdates: config.deferredUpdates,
      syncUpdates: config.syncUpdates,
      interactiveUpdates: config.interactiveUpdates,
      flushInteractiveUpdates: config.flushInteractiveUpdates,
      flushControlled: config.flushControlled,
      flushSync: config.flushSync,
      getPublicRootInstance: function getPublicRootInstance(container) {
        container = container.current;
        if (!container.child) return null;

        switch (container.child.tag) {
          case 5:
            return getPublicInstance(container.child.stateNode);

          default:
            return container.child.stateNode;
        }
      },
      findHostInstance: findHostInstance,
      findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {
        fiber = findCurrentHostFiberWithNoPortals(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {
        var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        return injectInternals(_extends({}, devToolsConfig, {
          findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
            return findHostInstance(fiber);
          },
          findFiberByHostInstance: function findFiberByHostInstance(instance) {
            return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
          }
        }));
      }
    };
  }

  var ReactFiberReconciler$2 = Object.freeze({
    default: ReactFiberReconciler$1
  }),
      ReactFiberReconciler$3 = ReactFiberReconciler$2 && ReactFiberReconciler$1 || ReactFiberReconciler$2,
      reactReconciler = ReactFiberReconciler$3["default"] ? ReactFiberReconciler$3["default"] : ReactFiberReconciler$3,
      viewConfigCallbacks = new Map(),
      viewConfigs = new Map(),
      ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      if (!(this instanceof ReactNativeFiberHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    ReactNativeFiberHostComponent.prototype.blur = function () {
      TextInputState.blurTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.focus = function () {
      TextInputState.focusTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.measure = function (callback) {
      UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    };

    ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject$1, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }(),
      now = "object" === (typeof performance === "undefined" ? "undefined" : _typeof(performance)) && "function" === typeof performance.now ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  },
      scheduledCallback = null,
      frameDeadline = 0,
      frameDeadlineObject = {
    timeRemaining: function timeRemaining() {
      return frameDeadline - now();
    },
    didTimeout: !1
  };

  function setTimeoutCallback() {
    frameDeadline = now() + 5;
    var callback = scheduledCallback;
    scheduledCallback = null;
    null !== callback && callback(frameDeadlineObject);
  }

  function recursivelyUncacheFiberNode(node) {
    "number" === typeof node ? uncacheFiberNode(node) : (uncacheFiberNode(node._nativeTag), node._children.forEach(recursivelyUncacheFiberNode));
  }

  var NativeRenderer = reactReconciler({
    appendInitialChild: function appendInitialChild(parentInstance, child) {
      parentInstance._children.push(child);
    },
    createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      if (viewConfigs.has(type)) var viewConfig = viewConfigs.get(type);else viewConfig = viewConfigCallbacks.get(type), invariant("function" === typeof viewConfig, "View config not found for name %s", type), viewConfigCallbacks.set(type, null), viewConfig = viewConfig(), viewConfigs.set(type, viewConfig);
      invariant(viewConfig, "View config not found for name %s", type);
      type = viewConfig;
      viewConfig = diffProperties(null, emptyObject$1, props, type.validAttributes);
      UIManager.createView(hostContext, type.uiViewClassName, rootContainerInstance, viewConfig);
      rootContainerInstance = new ReactNativeFiberHostComponent(hostContext, type);
      instanceCache[hostContext] = internalInstanceHandle;
      instanceProps[hostContext] = props;
      return rootContainerInstance;
    },
    createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      hostContext = ReactNativeTagHandles.allocateTag();
      UIManager.createView(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      });
      instanceCache[hostContext] = internalInstanceHandle;
      return hostContext;
    },
    finalizeInitialChildren: function finalizeInitialChildren(parentInstance) {
      if (0 === parentInstance._children.length) return !1;

      var nativeTags = parentInstance._children.map(function (child) {
        return "number" === typeof child ? child : child._nativeTag;
      });

      UIManager.setChildren(parentInstance._nativeTag, nativeTags);
      return !1;
    },
    getRootHostContext: function getRootHostContext() {
      return emptyObject;
    },
    getChildHostContext: function getChildHostContext() {
      return emptyObject;
    },
    getPublicInstance: function getPublicInstance(instance) {
      return instance;
    },
    now: now,
    prepareForCommit: function prepareForCommit() {},
    prepareUpdate: function prepareUpdate() {
      return emptyObject;
    },
    resetAfterCommit: function resetAfterCommit() {},
    scheduleDeferredCallback: function scheduleDeferredCallback(callback) {
      scheduledCallback = callback;
      return setTimeout(setTimeoutCallback, 1);
    },
    cancelDeferredCallback: function cancelDeferredCallback(callbackID) {
      scheduledCallback = null;
      clearTimeout(callbackID);
    },
    shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree() {
      return !1;
    },
    shouldSetTextContent: function shouldSetTextContent() {
      return !1;
    },
    mutation: {
      appendChild: function appendChild(parentInstance, child) {
        var childTag = "number" === typeof child ? child : child._nativeTag,
            children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], [])) : (children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []));
      },
      appendChildToContainer: function appendChildToContainer(parentInstance, child) {
        UIManager.setChildren(parentInstance, ["number" === typeof child ? child : child._nativeTag]);
      },
      commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
        UIManager.updateView(textInstance, "RCTRawText", {
          text: newText
        });
      },
      commitMount: function commitMount() {},
      commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps) {
        updatePayloadTODO = instance.viewConfig;
        instanceProps[instance._nativeTag] = newProps;
        oldProps = diffProperties(null, oldProps, newProps, updatePayloadTODO.validAttributes);
        null != oldProps && UIManager.updateView(instance._nativeTag, updatePayloadTODO.uiViewClassName, oldProps);
      },
      insertBefore: function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children,
            index = children.indexOf(child);
        0 <= index ? (children.splice(index, 1), beforeChild = children.indexOf(beforeChild), children.splice(beforeChild, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChild], [], [], [])) : (index = children.indexOf(beforeChild), children.splice(index, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [], [], ["number" === typeof child ? child : child._nativeTag], [index], []));
      },
      insertInContainerBefore: function insertInContainerBefore(parentInstance) {
        invariant("number" !== typeof parentInstance, "Container does not support insertBefore operation");
      },
      removeChild: function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children;
        child = children.indexOf(child);
        children.splice(child, 1);
        UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [child]);
      },
      removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
      },
      resetTextContent: function resetTextContent() {}
    }
  }),
      getInspectorDataForViewTag = void 0;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(!1, "getInspectorDataForViewTag() is not available in production");
  };

  findHostInstance = NativeRenderer.findHostInstance;
  _batchedUpdates = NativeRenderer.batchedUpdates;
  _flushInteractiveUpdates = NativeRenderer.flushInteractiveUpdates;
  var roots = new Map(),
      ReactNativeRenderer = {
    NativeComponent: ReactNativeComponent,
    findNodeHandle: findNumericNodeHandleFiber,
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);
      root || (root = NativeRenderer.createContainer(containerTag, !1, !1), roots.set(containerTag, root));
      NativeRenderer.updateContainer(element, root, null, callback);
      return NativeRenderer.getPublicRootInstance(root);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && NativeRenderer.updateContainer(null, root, null, function () {
        roots["delete"](containerTag);
      });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
      ReactNativeRenderer.unmountComponentAtNode(containerTag);
      UIManager.removeRootView(containerTag);
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
    },
    unstable_batchedUpdates: batchedUpdates,
    flushSync: NativeRenderer.flushSync,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: {
        measure: function measure(callback) {
          UIManager.measure(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureInWindow: function measureInWindow(callback) {
          UIManager.measureInWindow(findNumericNodeHandleFiber(this), mountSafeCallback(this, callback));
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNumericNodeHandleFiber(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findNodeHandle(this);
          } catch (error) {}

          if (null != maybeInstance) {
            var viewConfig = maybeInstance.viewConfig;
            nativeProps = diffProperties(null, emptyObject$1, nativeProps, viewConfig.validAttributes);
            null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
          }
        },
        focus: function focus() {
          TextInputState.focusTextInput(findNumericNodeHandleFiber(this));
        },
        blur: function blur() {
          TextInputState.blurTextInput(findNumericNodeHandleFiber(this));
        }
      },
      ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
      ReactNativeComponentTree: ReactNativeComponentTree,
      ReactNativePropRegistry: ReactNativePropRegistry,
      TouchHistoryMath: TouchHistoryMath,
      createReactNativeComponentClass: function createReactNativeComponentClass(name, callback) {
        invariant(!viewConfigCallbacks.has(name), "Tried to register two views with the same name %s", name);
        viewConfigCallbacks.set(name, callback);
        return name;
      },
      takeSnapshot: function takeSnapshot(view, options) {
        "number" !== typeof view && "window" !== view && (view = findNumericNodeHandleFiber(view) || "window");
        return UIManager.__takeSnapshot(view, options);
      }
    }
  };
  NativeRenderer.injectIntoDevTools({
    findFiberByHostInstance: getInstanceFromTag,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.3.1",
    rendererPackageName: "react-native-renderer"
  });
  var ReactNativeRenderer$2 = Object.freeze({
    default: ReactNativeRenderer
  }),
      ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
  module.exports = ReactNativeRenderer$3["default"] ? ReactNativeRenderer$3["default"] : ReactNativeRenderer$3;
},170,[94,19,17,164,165,166,167,159,13,16,168,102,169],"ReactNativeRenderer-prod");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var PropTypes = _require(_dependencyMap[1], 'prop-types');

  var React = _require(_dependencyMap[2], 'React');

  var ReactNative = _require(_dependencyMap[3], 'ReactNative');

  var ViewPropTypes = _require(_dependencyMap[4], 'ViewPropTypes');

  var requireNativeComponent = _require(_dependencyMap[5], 'requireNativeComponent');

  var STYLE_ATTRIBUTES = ['Horizontal', 'Normal', 'Small', 'Large', 'Inverse', 'SmallInverse', 'LargeInverse'];

  var indeterminateType = function indeterminateType(props, propName, componentName) {
    var checker = function checker() {
      var indeterminate = props[propName];
      var styleAttr = props.styleAttr;

      if (!indeterminate && styleAttr !== 'Horizontal') {
        return new Error('indeterminate=false is only valid for styleAttr=Horizontal');
      }
    };

    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    return PropTypes.bool.apply(PropTypes, [props, propName, componentName].concat(rest)) || checker();
  };

  var ProgressBarAndroid = function (_ReactNative$NativeCo) {
    _inherits(ProgressBarAndroid, _ReactNative$NativeCo);

    function ProgressBarAndroid() {
      _classCallCheck(this, ProgressBarAndroid);

      return _possibleConstructorReturn(this, (ProgressBarAndroid.__proto__ || Object.getPrototypeOf(ProgressBarAndroid)).apply(this, arguments));
    }

    _createClass(ProgressBarAndroid, [{
      key: "render",
      value: function render() {
        return React.createElement(AndroidProgressBar, _extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 110
          }
        }));
      }
    }]);

    return ProgressBarAndroid;
  }(ReactNative.NativeComponent);

  ProgressBarAndroid.propTypes = _extends({}, ViewPropTypes, {
    styleAttr: PropTypes.oneOf(STYLE_ATTRIBUTES),
    animating: PropTypes.bool,
    indeterminate: indeterminateType,
    progress: PropTypes.number,
    color: ColorPropType,
    testID: PropTypes.string
  });
  ProgressBarAndroid.defaultProps = {
    styleAttr: 'Normal',
    indeterminate: true,
    animating: true
  };
  var AndroidProgressBar = requireNativeComponent('AndroidProgressBar', ProgressBarAndroid, {
    nativeOnly: {
      animating: true
    }
  });
  module.exports = ProgressBarAndroid;
},171,[89,25,172,92,173,188],"ProgressBarAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'react');
},172,[13],"React");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var React = _require2(_dependencyMap[0], 'React');

  var EdgeInsetsPropType = _require2(_dependencyMap[1], 'EdgeInsetsPropType');

  var PlatformViewPropTypes = _require2(_dependencyMap[2], 'PlatformViewPropTypes');

  var PropTypes = _require2(_dependencyMap[3], 'prop-types');

  var StyleSheetPropType = _require2(_dependencyMap[4], 'StyleSheetPropType');

  var ViewStylePropTypes = _require2(_dependencyMap[5], 'ViewStylePropTypes');

  var _require = _require2(_dependencyMap[6], 'ViewAccessibility'),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var stylePropType = StyleSheetPropType(ViewStylePropTypes);
  module.exports = _extends({}, PlatformViewPropTypes, {
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityActions: PropTypes.arrayOf(PropTypes.string),
    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
    accessibilityViewIsModal: PropTypes.bool,
    accessibilityElementsHidden: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onMagicTap: PropTypes.func,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    hitSlop: EdgeInsetsPropType,
    onLayout: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    shouldRasterizeIOS: PropTypes.bool,
    collapsable: PropTypes.bool,
    needsOffscreenAlphaCompositing: PropTypes.bool
  });
},173,[172,174,179,25,181,182,187],"ViewPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var createStrictShapeTypeChecker = _require(_dependencyMap[1], 'createStrictShapeTypeChecker');

  var EdgeInsetsPropType = createStrictShapeTypeChecker({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
  });
  module.exports = EdgeInsetsPropType;
},174,[25,175],"EdgeInsetsPropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var merge = _require(_dependencyMap[1], 'merge');

  function createStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue === "undefined" ? "undefined" : _typeof(propValue);
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = merge(props[propName], shapeTypes);

      for (var _len = arguments.length, rest = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          invariant(false, "Invalid props." + propName + " key `" + key + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(undefined, [propValue, key, componentName, location].concat(rest));

        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
        rest[_key2 - 4] = arguments[_key2];
      }

      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = createStrictShapeTypeChecker;
},175,[19,176],"createStrictShapeTypeChecker");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var mergeInto = _require(_dependencyMap[0], 'mergeInto');

  var merge = function merge(one, two) {
    var result = {};
    mergeInto(result, one);
    mergeInto(result, two);
    return result;
  };

  module.exports = merge;
},176,[177],"merge");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var mergeHelpers = _require(_dependencyMap[0], 'mergeHelpers');

  var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
  var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

  function mergeInto(one, two) {
    checkMergeIntoObjectArg(one);

    if (two != null) {
      checkMergeObjectArg(two);

      for (var key in two) {
        if (!two.hasOwnProperty(key)) {
          continue;
        }

        one[key] = two[key];
      }
    }
  }

  module.exports = mergeInto;
},177,[178],"mergeInto");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var MAX_MERGE_DEPTH = 36;

  var isTerminal = function isTerminal(o) {
    return (typeof o === "undefined" ? "undefined" : _typeof(o)) !== 'object' || o instanceof Date || o === null;
  };

  var mergeHelpers = {
    MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,
    isTerminal: isTerminal,
    normalizeMergeArg: function normalizeMergeArg(arg) {
      return arg === undefined || arg === null ? {} : arg;
    },
    checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
      invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
    },
    checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
      mergeHelpers.checkMergeObjectArg(one);
      mergeHelpers.checkMergeObjectArg(two);
    },
    checkMergeObjectArg: function checkMergeObjectArg(arg) {
      invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
    },
    checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
      invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
    },
    checkMergeLevel: function checkMergeLevel(level) {
      invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.');
    },
    checkArrayStrategy: function checkArrayStrategy(strategy) {
      invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.');
    },
    ArrayStrategies: {
      Clobber: 'Clobber',
      Concat: 'Concat',
      IndexByIndex: 'IndexByIndex'
    }
  };
  module.exports = mergeHelpers;
},178,[19],"mergeHelpers");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var Platform = _require(_dependencyMap[0], 'Platform');

  var TVViewPropTypes = {};

  if (Platform.isTV || Platform.OS === 'android') {
    TVViewPropTypes = _require(_dependencyMap[1], 'TVViewPropTypes');
  }

  module.exports = TVViewPropTypes;
},179,[75,180],"PlatformViewPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var TVViewPropTypes = {
    isTVSelectable: PropTypes.bool,
    hasTVPreferredFocus: PropTypes.bool,
    tvParallaxProperties: PropTypes.object,
    tvParallaxShiftDistanceX: PropTypes.number,
    tvParallaxShiftDistanceY: PropTypes.number,
    tvParallaxTiltAngle: PropTypes.number,
    tvParallaxMagnification: PropTypes.number
  };
  module.exports = TVViewPropTypes;
},180,[25],"TVViewPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var createStrictShapeTypeChecker = _require(_dependencyMap[0], 'createStrictShapeTypeChecker');

  var flattenStyle = _require(_dependencyMap[1], 'flattenStyle');

  function StyleSheetPropType(shape) {
    var shapePropType = createStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }

      for (var _len = arguments.length, rest = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = StyleSheetPropType;
},181,[175,159],"StyleSheetPropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var LayoutPropTypes = _require(_dependencyMap[1], 'LayoutPropTypes');

  var ReactPropTypes = _require(_dependencyMap[2], 'prop-types');

  var ShadowPropTypesIOS = _require(_dependencyMap[3], 'ShadowPropTypesIOS');

  var TransformPropTypes = _require(_dependencyMap[4], 'TransformPropTypes');

  var ViewStylePropTypes = _extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderTopColor: ColorPropType,
    borderRightColor: ColorPropType,
    borderBottomColor: ColorPropType,
    borderLeftColor: ColorPropType,
    borderStartColor: ColorPropType,
    borderEndColor: ColorPropType,
    borderRadius: ReactPropTypes.number,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderTopStartRadius: ReactPropTypes.number,
    borderTopEndRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number,
    borderBottomStartRadius: ReactPropTypes.number,
    borderBottomEndRadius: ReactPropTypes.number,
    borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    opacity: ReactPropTypes.number,
    elevation: ReactPropTypes.number
  });

  module.exports = ViewStylePropTypes;
},182,[89,183,25,184,185],"ViewStylePropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _require(_dependencyMap[0], 'prop-types');

  var LayoutPropTypes = {
    display: ReactPropTypes.oneOf(['none', 'flex']),
    width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    start: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderStartWidth: ReactPropTypes.number,
    borderEndWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    position: ReactPropTypes.oneOf(['absolute', 'relative']),
    flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap']),
    justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly']),
    alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),
    flex: ReactPropTypes.number,
    flexGrow: ReactPropTypes.number,
    flexShrink: ReactPropTypes.number,
    flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    aspectRatio: ReactPropTypes.number,
    zIndex: ReactPropTypes.number,
    direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},183,[25],"LayoutPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var ReactPropTypes = _require(_dependencyMap[1], 'prop-types');

  var ShadowPropTypesIOS = {
    shadowColor: ColorPropType,
    shadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    shadowOpacity: ReactPropTypes.number,
    shadowRadius: ReactPropTypes.number
  };
  module.exports = ShadowPropTypesIOS;
},184,[89,25],"ShadowPropTypesIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _require(_dependencyMap[0], 'prop-types');

  var deprecatedPropType = _require(_dependencyMap[1], 'deprecatedPropType');

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
    }
  };

  var TransformPropTypes = {
    transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
      perspective: ReactPropTypes.number
    }), ReactPropTypes.shape({
      rotate: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateY: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateZ: ReactPropTypes.string
    }), ReactPropTypes.shape({
      scale: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      skewX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      skewY: ReactPropTypes.string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
  };
  module.exports = TransformPropTypes;
},185,[25,186],"TransformPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var UIManager = _require(_dependencyMap[0], 'UIManager');

  function deprecatedPropType(propType, explanation) {
    return function validate(props, propName, componentName) {
      if (!UIManager[componentName] && props[propName] !== undefined) {
        console.warn("`" + propName + "` supplied to `" + componentName + "` has been deprecated. " + explanation);
      }

      for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rest[_key - 3] = arguments[_key];
      }

      return propType.apply(undefined, [props, propName, componentName].concat(rest));
    };
  }

  module.exports = deprecatedPropType;
},186,[164],"deprecatedPropType");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    AccessibilityTraits: ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'],
    AccessibilityComponentTypes: ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked']
  };
},187,[],"ViewAccessibility");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var Platform = _require(_dependencyMap[0], 'Platform');

  var ReactNativeBridgeEventPlugin = _require(_dependencyMap[1], 'ReactNativeBridgeEventPlugin');

  var ReactNativeStyleAttributes = _require(_dependencyMap[2], 'ReactNativeStyleAttributes');

  var UIManager = _require(_dependencyMap[3], 'UIManager');

  var createReactNativeComponentClass = _require(_dependencyMap[4], 'createReactNativeComponentClass');

  var insetsDiffer = _require(_dependencyMap[5], 'insetsDiffer');

  var matricesDiffer = _require(_dependencyMap[6], 'matricesDiffer');

  var pointsDiffer = _require(_dependencyMap[7], 'pointsDiffer');

  var processColor = _require(_dependencyMap[8], 'processColor');

  var resolveAssetSource = _require(_dependencyMap[9], 'resolveAssetSource');

  var sizesDiffer = _require(_dependencyMap[10], 'sizesDiffer');

  var verifyPropTypes = _require(_dependencyMap[11], 'verifyPropTypes');

  var invariant = _require(_dependencyMap[12], 'fbjs/lib/invariant');

  var warning = _require(_dependencyMap[13], 'fbjs/lib/warning');

  var hasAttachedDefaultEventTypes = false;

  function requireNativeComponent(viewName, componentInterface, extraConfig) {
    function attachDefaultEventTypes(viewConfig) {
      if (Platform.OS === 'android') {
        if (UIManager.ViewManagerNames) {
          viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
        } else {
          viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, UIManager.genericBubblingEventTypes);
          viewConfig.directEventTypes = merge(viewConfig.directEventTypes, UIManager.genericDirectEventTypes);
        }
      }
    }

    function merge(destination, source) {
      if (!source) {
        return destination;
      }

      if (!destination) {
        return source;
      }

      for (var key in source) {
        if (!source.hasOwnProperty(key)) {
          continue;
        }

        var sourceValue = source[key];

        if (destination.hasOwnProperty(key)) {
          var destinationValue = destination[key];

          if ((typeof sourceValue === "undefined" ? "undefined" : _typeof(sourceValue)) === 'object' && (typeof destinationValue === "undefined" ? "undefined" : _typeof(destinationValue)) === 'object') {
            sourceValue = merge(destinationValue, sourceValue);
          }
        }

        destination[key] = sourceValue;
      }

      return destination;
    }

    function getViewConfig() {
      var viewConfig = UIManager[viewName];
      invariant(viewConfig != null && !viewConfig.NativeProps != null, 'Native component for "%s" does not exist', viewName);
      viewConfig.uiViewClassName = viewName;
      viewConfig.validAttributes = {};

      if (componentInterface) {
        viewConfig.propTypes = _typeof(componentInterface.__propTypesSecretDontUseThesePlease) === 'object' ? componentInterface.__propTypesSecretDontUseThesePlease : componentInterface.propTypes;
      } else {
        viewConfig.propTypes = null;
      }

      var baseModuleName = viewConfig.baseModuleName;
      var bubblingEventTypes = viewConfig.bubblingEventTypes;
      var directEventTypes = viewConfig.directEventTypes;
      var nativeProps = viewConfig.NativeProps;

      while (baseModuleName) {
        var baseModule = UIManager[baseModuleName];

        if (!baseModule) {
          warning(false, 'Base module "%s" does not exist', baseModuleName);
          baseModuleName = null;
        } else {
          bubblingEventTypes = _extends({}, baseModule.bubblingEventTypes, bubblingEventTypes);
          directEventTypes = _extends({}, baseModule.directEventTypes, directEventTypes);
          nativeProps = _extends({}, baseModule.NativeProps, nativeProps);
          baseModuleName = baseModule.baseModuleName;
        }
      }

      viewConfig.bubblingEventTypes = bubblingEventTypes;
      viewConfig.directEventTypes = directEventTypes;

      for (var key in nativeProps) {
        var useAttribute = false;
        var attribute = {};
        var differ = TypeToDifferMap[nativeProps[key]];

        if (differ) {
          attribute.diff = differ;
          useAttribute = true;
        }

        var processor = TypeToProcessorMap[nativeProps[key]];

        if (processor) {
          attribute.process = processor;
          useAttribute = true;
        }

        viewConfig.validAttributes[key] = useAttribute ? attribute : true;
      }

      viewConfig.validAttributes.style = ReactNativeStyleAttributes;

      if (__DEV__) {
        componentInterface && verifyPropTypes(componentInterface, viewConfig, extraConfig && extraConfig.nativeOnly);
      }

      if (!hasAttachedDefaultEventTypes) {
        attachDefaultEventTypes(viewConfig);
        hasAttachedDefaultEventTypes = true;
      }

      ReactNativeBridgeEventPlugin.processEventTypes(viewConfig);
      return viewConfig;
    }

    return createReactNativeComponentClass(viewName, getViewConfig);
  }

  var TypeToDifferMap = {
    CATransform3D: matricesDiffer,
    CGPoint: pointsDiffer,
    CGSize: sizesDiffer,
    UIEdgeInsets: insetsDiffer
  };

  function processColorArray(colors) {
    return colors && colors.map(processColor);
  }

  var TypeToProcessorMap = {
    CGColor: processColor,
    CGColorArray: processColorArray,
    UIColor: processColor,
    UIColorArray: processColorArray,
    CGImage: resolveAssetSource,
    UIImage: resolveAssetSource,
    RCTImageSource: resolveAssetSource,
    Color: processColor,
    ColorArray: processColorArray
  };
  module.exports = requireNativeComponent;
},188,[75,189,190,164,199,200,201,202,195,203,198,210,19,20],"requireNativeComponent");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeBridgeEventPlugin;
},189,[92],"ReactNativeBridgeEventPlugin");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ImageStylePropTypes = _require(_dependencyMap[0], 'ImageStylePropTypes');

  var TextStylePropTypes = _require(_dependencyMap[1], 'TextStylePropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[2], 'ViewStylePropTypes');

  var keyMirror = _require(_dependencyMap[3], 'fbjs/lib/keyMirror');

  var processColor = _require(_dependencyMap[4], 'processColor');

  var processTransform = _require(_dependencyMap[5], 'processTransform');

  var sizesDiffer = _require(_dependencyMap[6], 'sizesDiffer');

  var ReactNativeStyleAttributes = _extends({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));

  ReactNativeStyleAttributes.transform = {
    process: processTransform
  };
  ReactNativeStyleAttributes.shadowOffset = {
    diff: sizesDiffer
  };
  var colorAttributes = {
    process: processColor
  };
  ReactNativeStyleAttributes.backgroundColor = colorAttributes;
  ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
  ReactNativeStyleAttributes.borderColor = colorAttributes;
  ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
  ReactNativeStyleAttributes.borderRightColor = colorAttributes;
  ReactNativeStyleAttributes.borderTopColor = colorAttributes;
  ReactNativeStyleAttributes.borderStartColor = colorAttributes;
  ReactNativeStyleAttributes.borderEndColor = colorAttributes;
  ReactNativeStyleAttributes.color = colorAttributes;
  ReactNativeStyleAttributes.shadowColor = colorAttributes;
  ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
  ReactNativeStyleAttributes.tintColor = colorAttributes;
  ReactNativeStyleAttributes.textShadowColor = colorAttributes;
  ReactNativeStyleAttributes.overlayColor = colorAttributes;
  module.exports = ReactNativeStyleAttributes;
},190,[191,194,182,193,195,196,198],"ReactNativeStyleAttributes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var ImageResizeMode = _require(_dependencyMap[1], 'ImageResizeMode');

  var LayoutPropTypes = _require(_dependencyMap[2], 'LayoutPropTypes');

  var ReactPropTypes = _require(_dependencyMap[3], 'prop-types');

  var ShadowPropTypesIOS = _require(_dependencyMap[4], 'ShadowPropTypesIOS');

  var TransformPropTypes = _require(_dependencyMap[5], 'TransformPropTypes');

  var ImageStylePropTypes = _extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderWidth: ReactPropTypes.number,
    borderRadius: ReactPropTypes.number,
    overflow: ReactPropTypes.oneOf(['visible', 'hidden']),
    tintColor: ColorPropType,
    opacity: ReactPropTypes.number,
    overlayColor: ReactPropTypes.string,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number
  });

  module.exports = ImageStylePropTypes;
},191,[89,192,183,25,184,185],"ImageStylePropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var keyMirror = _require(_dependencyMap[0], 'fbjs/lib/keyMirror');

  var ImageResizeMode = keyMirror({
    contain: null,
    cover: null,
    stretch: null,
    center: null,
    repeat: null
  });
  module.exports = ImageResizeMode;
},192,[193],"ImageResizeMode");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], './invariant');

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},193,[19],"node_modules/fbjs/lib/keyMirror.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var ReactPropTypes = _require(_dependencyMap[1], 'prop-types');

  var ViewStylePropTypes = _require(_dependencyMap[2], 'ViewStylePropTypes');

  var TextStylePropTypes = _extends({}, ViewStylePropTypes, {
    color: ColorPropType,
    fontFamily: ReactPropTypes.string,
    fontSize: ReactPropTypes.number,
    fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
    fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    textShadowRadius: ReactPropTypes.number,
    textShadowColor: ColorPropType,
    letterSpacing: ReactPropTypes.number,
    lineHeight: ReactPropTypes.number,
    textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: ReactPropTypes.bool,
    textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: ColorPropType,
    writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
  });

  module.exports = TextStylePropTypes;
},194,[89,25,182],"TextStylePropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var normalizeColor = _require(_dependencyMap[1], 'normalizeColor');

  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }

    var int32Color = normalizeColor(color);

    if (int32Color === null || int32Color === undefined) {
      return undefined;
    }

    int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;

    if (Platform.OS === 'android') {
      int32Color = int32Color | 0x0;
    }

    return int32Color;
  }

  module.exports = processColor;
},195,[75,90],"processColor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var MatrixMath = _require(_dependencyMap[0], 'MatrixMath');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var stringifySafe = _require(_dependencyMap[3], 'stringifySafe');

  function processTransform(transform) {
    if (__DEV__) {
      _validateTransforms(transform);
    }

    if (Platform.OS === 'android' || Platform.OS === 'ios') {
      return transform;
    }

    var result = MatrixMath.createIdentityMatrix();
    transform.forEach(function (transformation) {
      var key = Object.keys(transformation)[0];
      var value = transformation[key];

      switch (key) {
        case 'matrix':
          MatrixMath.multiplyInto(result, result, value);
          break;

        case 'perspective':
          _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);

          break;

        case 'rotateX':
          _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);

          break;

        case 'rotateY':
          _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);

          break;

        case 'rotate':
        case 'rotateZ':
          _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);

          break;

        case 'scale':
          _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);

          break;

        case 'scaleX':
          _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);

          break;

        case 'scaleY':
          _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);

          break;

        case 'translate':
          _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);

          break;

        case 'translateX':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);

          break;

        case 'translateY':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);

          break;

        case 'skewX':
          _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);

          break;

        case 'skewY':
          _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);

          break;

        default:
          throw new Error('Invalid transform name: ' + key);
      }
    });
    return result;
  }

  function _multiplyTransform(result, matrixMathFunction, args) {
    var matrixToApply = MatrixMath.createIdentityMatrix();
    var argsWithIdentity = [matrixToApply].concat(args);
    matrixMathFunction.apply(this, argsWithIdentity);
    MatrixMath.multiplyInto(result, result, matrixToApply);
  }

  function _convertToRadians(value) {
    var floatValue = parseFloat(value);
    return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
  }

  function _validateTransforms(transform) {
    transform.forEach(function (transformation) {
      var keys = Object.keys(transformation);
      invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
      var key = keys[0];
      var value = transformation[key];

      _validateTransform(key, value, transformation);
    });
  }

  function _validateTransform(key, value, transformation) {
    invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');
    var multivalueTransforms = ['matrix', 'translate'];

    if (multivalueTransforms.indexOf(key) !== -1) {
      invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
    }

    switch (key) {
      case 'matrix':
        invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));
        break;

      case 'translate':
        invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
        break;

      case 'rotateX':
      case 'rotateY':
      case 'rotateZ':
      case 'rotate':
      case 'skewX':
      case 'skewY':
        invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
        invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
        break;

      case 'perspective':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
        break;

      case 'translateX':
      case 'translateY':
      case 'scale':
      case 'scaleX':
      case 'scaleY':
        invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
        break;

      default:
        invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
    }
  }

  module.exports = processTransform;
},196,[197,75,19,73],"processTransform");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var MatrixMath = {
    createIdentityMatrix: function createIdentityMatrix() {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    createCopy: function createCopy(m) {
      return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
    },
    createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
      var a = 2 / (right - left);
      var b = 2 / (top - bottom);
      var c = -2 / (far - near);
      var tx = -(right + left) / (right - left);
      var ty = -(top + bottom) / (top - bottom);
      var tz = -(far + near) / (far - near);
      return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
    },
    createFrustum: function createFrustum(left, right, bottom, top, near, far) {
      var r_width = 1 / (right - left);
      var r_height = 1 / (top - bottom);
      var r_depth = 1 / (near - far);
      var x = 2 * (near * r_width);
      var y = 2 * (near * r_height);
      var A = (right + left) * r_width;
      var B = (top + bottom) * r_height;
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
    },
    createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
      var h = 1 / Math.tan(fovInRadians / 2);
      var r_depth = 1 / (near - far);
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
    },
    createTranslate2d: function createTranslate2d(x, y) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseTranslate2dCommand(mat, x, y);
      return mat;
    },
    reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
    },
    reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
      matrixCommand[14] = z;
    },
    createScale: function createScale(factor) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseScaleCommand(mat, factor);
      return mat;
    },
    reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
      matrixCommand[5] = factor;
    },
    reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
      matrixCommand[0] = x;
      matrixCommand[5] = y;
      matrixCommand[10] = z;
    },
    reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
      matrixCommand[11] = -1 / p;
    },
    reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
    },
    reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
      matrixCommand[5] = factor;
    },
    reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
      matrixCommand[10] = factor;
    },
    reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
      matrixCommand[5] = Math.cos(radians);
      matrixCommand[6] = Math.sin(radians);
      matrixCommand[9] = -Math.sin(radians);
      matrixCommand[10] = Math.cos(radians);
    },
    reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
      matrixCommand[0] = Math.cos(amount);
      matrixCommand[2] = -Math.sin(amount);
      matrixCommand[8] = Math.sin(amount);
      matrixCommand[10] = Math.cos(amount);
    },
    reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
      matrixCommand[0] = Math.cos(radians);
      matrixCommand[1] = Math.sin(radians);
      matrixCommand[4] = -Math.sin(radians);
      matrixCommand[5] = Math.cos(radians);
    },
    createRotateZ: function createRotateZ(radians) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseRotateZCommand(mat, radians);
      return mat;
    },
    reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
      matrixCommand[4] = Math.tan(radians);
    },
    reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
      matrixCommand[1] = Math.tan(radians);
    },
    multiplyInto: function multiplyInto(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11],
          a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    },
    determinant: function determinant(matrix) {
      var _matrix = _slicedToArray(matrix, 16),
          m00 = _matrix[0],
          m01 = _matrix[1],
          m02 = _matrix[2],
          m03 = _matrix[3],
          m10 = _matrix[4],
          m11 = _matrix[5],
          m12 = _matrix[6],
          m13 = _matrix[7],
          m20 = _matrix[8],
          m21 = _matrix[9],
          m22 = _matrix[10],
          m23 = _matrix[11],
          m30 = _matrix[12],
          m31 = _matrix[13],
          m32 = _matrix[14],
          m33 = _matrix[15];

      return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
    },
    inverse: function inverse(matrix) {
      var det = MatrixMath.determinant(matrix);

      if (!det) {
        return matrix;
      }

      var _matrix2 = _slicedToArray(matrix, 16),
          m00 = _matrix2[0],
          m01 = _matrix2[1],
          m02 = _matrix2[2],
          m03 = _matrix2[3],
          m10 = _matrix2[4],
          m11 = _matrix2[5],
          m12 = _matrix2[6],
          m13 = _matrix2[7],
          m20 = _matrix2[8],
          m21 = _matrix2[9],
          m22 = _matrix2[10],
          m23 = _matrix2[11],
          m30 = _matrix2[12],
          m31 = _matrix2[13],
          m32 = _matrix2[14],
          m33 = _matrix2[15];

      return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
    },
    transpose: function transpose(m) {
      return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
    },
    multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
      var _v = _slicedToArray(v, 4),
          vx = _v[0],
          vy = _v[1],
          vz = _v[2],
          vw = _v[3];

      return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
    },
    v3Length: function v3Length(a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    },
    v3Normalize: function v3Normalize(vector, v3Length) {
      var im = 1 / (v3Length || MatrixMath.v3Length(vector));
      return [vector[0] * im, vector[1] * im, vector[2] * im];
    },
    v3Dot: function v3Dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    },
    v3Combine: function v3Combine(a, b, aScale, bScale) {
      return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
    },
    v3Cross: function v3Cross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    },
    quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
      var _q = _slicedToArray(q, 4),
          qx = _q[0],
          qy = _q[1],
          qz = _q[2],
          qw = _q[3];

      var qw2 = qw * qw;
      var qx2 = qx * qx;
      var qy2 = qy * qy;
      var qz2 = qz * qz;
      var test = qx * qy + qz * qw;
      var unit = qw2 + qx2 + qy2 + qz2;
      var conv = 180 / Math.PI;

      if (test > 0.49999 * unit) {
        return [0, 2 * Math.atan2(qx, qw) * conv, 90];
      }

      if (test < -0.49999 * unit) {
        return [0, -2 * Math.atan2(qx, qw) * conv, -90];
      }

      return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
    },
    roundTo3Places: function roundTo3Places(n) {
      var arr = n.toString().split('e');
      return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
    },
    decomposeMatrix: function decomposeMatrix(transformMatrix) {
      invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);
      var perspective = [];
      var quaternion = [];
      var scale = [];
      var skew = [];
      var translation = [];

      if (!transformMatrix[15]) {
        return;
      }

      var matrix = [];
      var perspectiveMatrix = [];

      for (var i = 0; i < 4; i++) {
        matrix.push([]);

        for (var j = 0; j < 4; j++) {
          var value = transformMatrix[i * 4 + j] / transformMatrix[15];
          matrix[i].push(value);
          perspectiveMatrix.push(j === 3 ? 0 : value);
        }
      }

      perspectiveMatrix[15] = 1;

      if (!MatrixMath.determinant(perspectiveMatrix)) {
        return;
      }

      if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
        var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];
        var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
        var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
        var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
      } else {
        perspective[0] = perspective[1] = perspective[2] = 0;
        perspective[3] = 1;
      }

      for (var i = 0; i < 3; i++) {
        translation[i] = matrix[3][i];
      }

      var row = [];

      for (i = 0; i < 3; i++) {
        row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
      }

      scale[0] = MatrixMath.v3Length(row[0]);
      row[0] = MatrixMath.v3Normalize(row[0], scale[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      scale[1] = MatrixMath.v3Length(row[1]);
      row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
      skew[0] /= scale[1];
      skew[1] = MatrixMath.v3Dot(row[0], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
      skew[2] = MatrixMath.v3Dot(row[1], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);
      scale[2] = MatrixMath.v3Length(row[2]);
      row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
      skew[1] /= scale[2];
      skew[2] /= scale[2];
      var pdum3 = MatrixMath.v3Cross(row[1], row[2]);

      if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
        for (i = 0; i < 3; i++) {
          scale[i] *= -1;
          row[i][0] *= -1;
          row[i][1] *= -1;
          row[i][2] *= -1;
        }
      }

      quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
      quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
      quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
      quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

      if (row[2][1] > row[1][2]) {
        quaternion[0] = -quaternion[0];
      }

      if (row[0][2] > row[2][0]) {
        quaternion[1] = -quaternion[1];
      }

      if (row[1][0] > row[0][1]) {
        quaternion[2] = -quaternion[2];
      }

      var rotationDegrees;

      if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
        rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
      } else {
        rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
      }

      return {
        rotationDegrees: rotationDegrees,
        perspective: perspective,
        quaternion: quaternion,
        scale: scale,
        skew: skew,
        translation: translation,
        rotate: rotationDegrees[2],
        rotateX: rotationDegrees[0],
        rotateY: rotationDegrees[1],
        scaleX: scale[0],
        scaleY: scale[1],
        translateX: translation[0],
        translateY: translation[1]
      };
    }
  };
  module.exports = MatrixMath;
},197,[19],"MatrixMath");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummySize = {
    width: undefined,
    height: undefined
  };

  var sizesDiffer = function sizesDiffer(one, two) {
    one = one || dummySize;
    two = two || dummySize;
    return one !== two && (one.width !== two.width || one.height !== two.height);
  };

  module.exports = sizesDiffer;
},198,[],"sizesDiffer");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.createReactNativeComponentClass;
},199,[92],"createReactNativeComponentClass");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };

  var insetsDiffer = function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  };

  module.exports = insetsDiffer;
},200,[],"insetsDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var matricesDiffer = function matricesDiffer(one, two) {
    if (one === two) {
      return false;
    }

    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  };

  module.exports = matricesDiffer;
},201,[],"matricesDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var dummyPoint = {
    x: undefined,
    y: undefined
  };

  var pointsDiffer = function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  };

  module.exports = pointsDiffer;
},202,[],"pointsDiffer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var AssetRegistry = _require(_dependencyMap[0], 'AssetRegistry');

  var AssetSourceResolver = _require(_dependencyMap[1], 'AssetSourceResolver');

  var _customSourceTransformer = void 0,
      _serverURL = void 0,
      _scriptURL = void 0;

  var _sourceCodeScriptURL = void 0;

  function getDevServerURL() {
    if (_serverURL === undefined) {
      var match = _sourceCodeScriptURL && _sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

      if (match) {
        _serverURL = match[0];
      } else {
        _serverURL = null;
      }
    }

    return _serverURL;
  }

  function _coerceLocalScriptURL(scriptURL) {
    if (scriptURL) {
      if (scriptURL.startsWith('assets://')) {
        return null;
      }

      scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

      if (!scriptURL.includes('://')) {
        scriptURL = 'file://' + scriptURL;
      }
    }

    return scriptURL;
  }

  function getScriptURL() {
    if (_scriptURL === undefined) {
      _scriptURL = _coerceLocalScriptURL(_sourceCodeScriptURL);
    }

    return _scriptURL;
  }

  function setCustomSourceTransformer(transformer) {
    _customSourceTransformer = transformer;
  }

  function resolveAssetSource(source) {
    if ((typeof source === "undefined" ? "undefined" : _typeof(source)) === 'object') {
      return source;
    }

    var asset = AssetRegistry.getAssetByID(source);

    if (!asset) {
      return null;
    }

    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);

    if (_customSourceTransformer) {
      return _customSourceTransformer(resolver);
    }

    return resolver.defaultAsset();
  }

  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;

  if (!sourceCode) {
    var NativeModules = _require(_dependencyMap[2], 'NativeModules');

    sourceCode = NativeModules && NativeModules.SourceCode;
  }

  _sourceCodeScriptURL = sourceCode && sourceCode.scriptURL;
  module.exports = resolveAssetSource;
  module.exports.pickScale = AssetSourceResolver.pickScale;
  module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
},203,[204,205,67],"resolveAssetSource");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var assets = [];

  function registerAsset(asset) {
    return assets.push(asset);
  }

  function getAssetByID(assetId) {
    return assets[assetId - 1];
  }

  module.exports = {
    registerAsset: registerAsset,
    getAssetByID: getAssetByID
  };
},204,[],"AssetRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var PixelRatio = _require(_dependencyMap[0], 'PixelRatio');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var assetPathUtils = _require(_dependencyMap[2], '../../local-cli/bundle/assetPathUtils');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  function getScaledAssetPath(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = assetPathUtils.getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }

  function getAssetPathInDrawableFolder(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);
    var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
    return drawbleFolder + '/' + fileName + '.' + asset.type;
  }

  var AssetSourceResolver = function () {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
      _classCallCheck(this, AssetSourceResolver);

      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.asset = asset;
    }

    _createClass(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return !!this.serverUrl;
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }

        if (Platform.OS === 'android') {
          return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
        } else {
          return this.scaledAssetURLNearBundle();
        }
      }
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        invariant(!!this.serverUrl, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
      }
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset));
      }
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        invariant(Platform.OS === 'android', 'resource identifiers work on Android');
        return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
      }
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
        };
      }
    }], [{
      key: "pickScale",
      value: function pickScale(scales, deviceScale) {
        for (var i = 0; i < scales.length; i++) {
          if (scales[i] >= deviceScale) {
            return scales[i];
          }
        }

        return scales[scales.length - 1] || 1;
      }
    }]);

    return AssetSourceResolver;
  }();

  module.exports = AssetSourceResolver;
},205,[206,75,209,19],"AssetSourceResolver");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Dimensions = _require(_dependencyMap[0], 'Dimensions');

  var PixelRatio = function () {
    function PixelRatio() {
      _classCallCheck(this, PixelRatio);
    }

    _createClass(PixelRatio, null, [{
      key: "get",
      value: function get() {
        return Dimensions.get('window').scale;
      }
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return Dimensions.get('window').fontScale || PixelRatio.get();
      }
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);

    return PixelRatio;
  }();

  module.exports = PixelRatio;
},206,[207],"PixelRatio");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var RCTDeviceEventEmitter = _require(_dependencyMap[2], 'RCTDeviceEventEmitter');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var eventEmitter = new EventEmitter();
  var dimensionsInitialized = false;
  var dimensions = {};

  var Dimensions = function () {
    function Dimensions() {
      _classCallCheck(this, Dimensions);
    }

    _createClass(Dimensions, null, [{
      key: "set",
      value: function set(dims) {
        if (dims && dims.windowPhysicalPixels) {
          dims = JSON.parse(JSON.stringify(dims));
          var windowPhysicalPixels = dims.windowPhysicalPixels;
          dims.window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };

          if (Platform.OS === 'android') {
            var screenPhysicalPixels = dims.screenPhysicalPixels;
            dims.screen = {
              width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
              height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
              scale: screenPhysicalPixels.scale,
              fontScale: screenPhysicalPixels.fontScale
            };
            delete dims.screenPhysicalPixels;
          } else {
            dims.screen = dims.window;
          }

          delete dims.windowPhysicalPixels;
        }

        _extends(dimensions, dims);

        if (dimensionsInitialized) {
          eventEmitter.emit('change', {
            window: dimensions.window,
            screen: dimensions.screen
          });
        } else {
          dimensionsInitialized = true;
        }
      }
    }, {
      key: "get",
      value: function get(dim) {
        invariant(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        eventEmitter.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'change', 'Trying to remove listener for unknown event: "%s"', type);
        eventEmitter.removeListener(type, handler);
      }
    }]);

    return Dimensions;
  }();

  var dims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;
  var nativeExtensionsEnabled = true;

  if (!dims) {
    var DeviceInfo = _require(_dependencyMap[4], 'DeviceInfo');

    dims = DeviceInfo.Dimensions;
    nativeExtensionsEnabled = false;
  }

  invariant(dims, 'Either DeviceInfo native extension or DeviceInfo Native Module must be registered');
  Dimensions.set(dims);

  if (!nativeExtensionsEnabled) {
    RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
      Dimensions.set(update);
    });
  }

  module.exports = Dimensions;
},207,[84,75,83,19,208],"Dimensions");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceInfo = _require(_dependencyMap[0], 'NativeModules').DeviceInfo;

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  invariant(DeviceInfo, 'DeviceInfo native module is not installed correctly');
  module.exports = DeviceInfo;
},208,[67,19],"DeviceInfo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function getAndroidAssetSuffix(scale) {
    switch (scale) {
      case 0.75:
        return 'ldpi';

      case 1:
        return 'mdpi';

      case 1.5:
        return 'hdpi';

      case 2:
        return 'xhdpi';

      case 3:
        return 'xxhdpi';

      case 4:
        return 'xxxhdpi';
    }

    throw new Error('no such scale');
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error('Don\'t know which android drawable suffix to use for asset: ' + JSON.stringify(asset));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},209,[],"node_modules/react-native/local-cli/bundle/assetPathUtils.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ReactNativeStyleAttributes = _require(_dependencyMap[0], 'ReactNativeStyleAttributes');

  function verifyPropTypes(componentInterface, viewConfig, nativePropsToIgnore) {
    if (!viewConfig) {
      return;
    }

    var componentName = componentInterface.displayName || componentInterface.name || 'unknown';
    var propTypes = componentInterface.__propTypesSecretDontUseThesePlease || componentInterface.propTypes;

    if (!propTypes) {
      return;
    }

    var nativeProps = viewConfig.NativeProps;

    for (var prop in nativeProps) {
      if (!propTypes[prop] && !ReactNativeStyleAttributes[prop] && (!nativePropsToIgnore || !nativePropsToIgnore[prop])) {
        var message;

        if (propTypes.hasOwnProperty(prop)) {
          message = '`' + componentName + '` has incorrectly defined propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop];
        } else {
          message = '`' + componentName + '` has no propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop] + '`';
        }

        message += "\nIf you haven't changed this prop yourself, this usually means that " + 'your versions of the native code and JavaScript code are out of sync. Updating both ' + 'should make this error go away.';
        throw new Error(message);
      }
    }
  }

  module.exports = verifyPropTypes;
},210,[190],"verifyPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var PixelRatio = _require(_dependencyMap[0], 'PixelRatio');

  var ReactNativePropRegistry = _require(_dependencyMap[1], 'ReactNativePropRegistry');

  var ReactNativeStyleAttributes = _require(_dependencyMap[2], 'ReactNativeStyleAttributes');

  var StyleSheetValidation = _require(_dependencyMap[3], 'StyleSheetValidation');

  var flatten = _require(_dependencyMap[4], 'flattenStyle');

  var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);

  if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
  }

  var absoluteFillObject = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  var absoluteFill = ReactNativePropRegistry.register(absoluteFillObject);
  module.exports = {
    hairlineWidth: hairlineWidth,
    absoluteFill: absoluteFill,
    absoluteFillObject: absoluteFillObject,
    compose: function compose(style1, style2) {
      if (style1 != null && style2 != null) {
        return [style1, style2];
      } else {
        return style1 != null ? style1 : style2;
      }
    },
    flatten: flatten,
    setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
      var value = void 0;

      if (typeof ReactNativeStyleAttributes[property] === 'string') {
        value = {};
      } else if (_typeof(ReactNativeStyleAttributes[property]) === 'object') {
        value = ReactNativeStyleAttributes[property];
      } else {
        console.error(property + " is not a valid style attribute");
        return;
      }

      if (__DEV__ && typeof value.process === 'function') {
        console.warn("Overwriting " + property + " style attribute preprocessor");
      }

      ReactNativeStyleAttributes[property] = _extends({}, value, {
        process: process
      });
    },
    create: function create(obj) {
      var result = {};

      for (var key in obj) {
        StyleSheetValidation.validateStyle(key, obj);
        result[key] = obj[key] && ReactNativePropRegistry.register(obj[key]);
      }

      return result;
    }
  };
},211,[206,160,190,212,159],"StyleSheet");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ImageStylePropTypes = _require(_dependencyMap[0], 'ImageStylePropTypes');

  var TextStylePropTypes = _require(_dependencyMap[1], 'TextStylePropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[2], 'ViewStylePropTypes');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var StyleSheetValidation = function () {
    function StyleSheetValidation() {
      _classCallCheck(this, StyleSheetValidation);
    }

    _createClass(StyleSheetValidation, null, [{
      key: "validateStyleProp",
      value: function validateStyleProp(prop, style, caller) {
        if (!__DEV__) {
          return;
        }

        if (allStylePropTypes[prop] === undefined) {
          var message1 = '"' + prop + '" is not a valid style property.';
          var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
          styleError(message1, style, caller, message2);
        }

        var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

        if (error) {
          styleError(error.message, style, caller);
        }
      }
    }, {
      key: "validateStyle",
      value: function validateStyle(name, styles) {
        if (!__DEV__) {
          return;
        }

        for (var prop in styles[name]) {
          StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
        }
      }
    }, {
      key: "addValidStylePropTypes",
      value: function addValidStylePropTypes(stylePropTypes) {
        for (var key in stylePropTypes) {
          allStylePropTypes[key] = stylePropTypes[key];
        }
      }
    }]);

    return StyleSheetValidation;
  }();

  var styleError = function styleError(message1, style, caller, message2) {
    invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
  };

  var allStylePropTypes = {};
  StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);
  module.exports = StyleSheetValidation;
},212,[191,194,182,19],"StyleSheetValidation");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/View/View.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Platform = _require2(_dependencyMap[0], 'Platform');

  var React = _require2(_dependencyMap[1], 'React');

  var ReactNative = _require2(_dependencyMap[2], 'ReactNative');

  var ReactNativeStyleAttributes = _require2(_dependencyMap[3], 'ReactNativeStyleAttributes');

  var ReactNativeViewAttributes = _require2(_dependencyMap[4], 'ReactNativeViewAttributes');

  var ViewPropTypes = _require2(_dependencyMap[5], 'ViewPropTypes');

  var _require = _require2(_dependencyMap[6], 'ViewContext'),
      ViewContextTypes = _require.ViewContextTypes;

  var invariant = _require2(_dependencyMap[7], 'fbjs/lib/invariant');

  var requireNativeComponent = _require2(_dependencyMap[8], 'requireNativeComponent');

  var View = function (_ReactNative$NativeCo) {
    _inherits(View, _ReactNative$NativeCo);

    function View() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, View);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = View.__proto__ || Object.getPrototypeOf(View)).call.apply(_ref, [this].concat(args))), _this), _this.viewConfig = {
        uiViewClassName: 'RCTView',
        validAttributes: ReactNativeViewAttributes.RCTView
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(View, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          isInAParentText: false
        };
      }
    }, {
      key: "render",
      value: function render() {
        invariant(!(this.context.isInAParentText && Platform.OS === 'android'), 'Nesting of <View> within <Text> is not supported on Android.');
        return React.createElement(RCTView, _extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 60
          }
        }));
      }
    }]);

    return View;
  }(ReactNative.NativeComponent);

  View.propTypes = ViewPropTypes;
  View.childContextTypes = ViewContextTypes;
  var RCTView = requireNativeComponent('RCTView', View, {
    nativeOnly: {
      nativeBackgroundAndroid: true,
      nativeForegroundAndroid: true
    }
  });

  if (__DEV__) {
    var UIManager = _require2(_dependencyMap[9], 'UIManager');

    var viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};

    for (var prop in viewConfig.nativeProps) {
      var viewAny = View;

      if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {
        throw new Error('View is missing propType for native prop `' + prop + '`');
      }
    }
  }

  var ViewToExport = RCTView;

  if (__DEV__) {
    ViewToExport = View;
  }

  module.exports = ViewToExport;
},213,[75,172,92,190,214,173,215,19,188,164],"View");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ReactNativeStyleAttributes = _require(_dependencyMap[0], 'ReactNativeStyleAttributes');

  var ReactNativeViewAttributes = {};
  ReactNativeViewAttributes.UIView = {
    pointerEvents: true,
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityComponentType: true,
    accessibilityLiveRegion: true,
    accessibilityTraits: true,
    importantForAccessibility: true,
    nativeID: true,
    testID: true,
    renderToHardwareTextureAndroid: true,
    shouldRasterizeIOS: true,
    onLayout: true,
    onAccessibilityAction: true,
    onAccessibilityTap: true,
    onMagicTap: true,
    collapsable: true,
    needsOffscreenAlphaCompositing: true,
    style: ReactNativeStyleAttributes
  };
  ReactNativeViewAttributes.RCTView = _extends({}, ReactNativeViewAttributes.UIView, {
    removeClippedSubviews: true
  });
  module.exports = ReactNativeViewAttributes;
},214,[190],"ReactNativeViewAttributes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var ViewContextTypes = exports.ViewContextTypes = {
    isInAParentText: PropTypes.bool
  };
},215,[25],"ViewContext");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var React = _require(_dependencyMap[0], 'react');

  var factory = _require(_dependencyMap[1], './factory');

  if (typeof React === 'undefined') {
    throw Error('create-react-class could not find the React object. If you are using script tags, ' + 'make sure that React is being loaded before create-react-class.');
  }

  var ReactNoopUpdateQueue = new React.Component().updater;
  module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);
},216,[13,217],"node_modules/create-react-class/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _assign = _require(_dependencyMap[0], 'object-assign');

  var emptyObject = _require(_dependencyMap[1], 'fbjs/lib/emptyObject');

  var _invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  if (process.env.NODE_ENV !== 'production') {
    var warning = _require(_dependencyMap[3], 'fbjs/lib/warning');
  }

  var MIXINS_KEY = 'mixins';

  function identity(fn) {
    return fn;
  }

  var ReactPropTypeLocationNames;

  if (process.env.NODE_ENV !== 'production') {
    ReactPropTypeLocationNames = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  } else {
    ReactPropTypeLocationNames = {};
  }

  function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
    var injectedMixins = [];
    var ReactClassInterface = {
      mixins: 'DEFINE_MANY',
      statics: 'DEFINE_MANY',
      propTypes: 'DEFINE_MANY',
      contextTypes: 'DEFINE_MANY',
      childContextTypes: 'DEFINE_MANY',
      getDefaultProps: 'DEFINE_MANY_MERGED',
      getInitialState: 'DEFINE_MANY_MERGED',
      getChildContext: 'DEFINE_MANY_MERGED',
      render: 'DEFINE_ONCE',
      componentWillMount: 'DEFINE_MANY',
      componentDidMount: 'DEFINE_MANY',
      componentWillReceiveProps: 'DEFINE_MANY',
      shouldComponentUpdate: 'DEFINE_ONCE',
      componentWillUpdate: 'DEFINE_MANY',
      componentDidUpdate: 'DEFINE_MANY',
      componentWillUnmount: 'DEFINE_MANY',
      UNSAFE_componentWillMount: 'DEFINE_MANY',
      UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',
      UNSAFE_componentWillUpdate: 'DEFINE_MANY',
      updateComponent: 'OVERRIDE_BASE'
    };
    var ReactClassStaticInterface = {
      getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
    };
    var RESERVED_SPEC_KEYS = {
      displayName: function displayName(Constructor, _displayName) {
        Constructor.displayName = _displayName;
      },
      mixins: function mixins(Constructor, _mixins) {
        if (_mixins) {
          for (var i = 0; i < _mixins.length; i++) {
            mixSpecIntoComponent(Constructor, _mixins[i]);
          }
        }
      },
      childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _childContextTypes, 'childContext');
        }

        Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
      },
      contextTypes: function contextTypes(Constructor, _contextTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _contextTypes, 'context');
        }

        Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
      },
      getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
        } else {
          Constructor.getDefaultProps = _getDefaultProps;
        }
      },
      propTypes: function propTypes(Constructor, _propTypes) {
        if (process.env.NODE_ENV !== 'production') {
          validateTypeDef(Constructor, _propTypes, 'prop');
        }

        Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
      },
      statics: function statics(Constructor, _statics) {
        mixStaticSpecIntoComponent(Constructor, _statics);
      },
      autobind: function autobind() {}
    };

    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {
          if (process.env.NODE_ENV !== 'production') {
            warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);
          }
        }
      }
    }

    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

      if (ReactClassMixin.hasOwnProperty(name)) {
        _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
      }

      if (isAlreadyDefined) {
        _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
      }
    }

    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        if (process.env.NODE_ENV !== 'production') {
          var typeofSpec = typeof spec === "undefined" ? "undefined" : _typeof(spec);
          var isMixinValid = typeofSpec === 'object' && spec !== null;

          if (process.env.NODE_ENV !== 'production') {
            warning(isMixinValid, "%s: You're attempting to include a mixin that is either null " + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);
          }
        }

        return;
      }

      _invariant(typeof spec !== 'function', "ReactClass: You're attempting to " + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');

      _invariant(!isValidElement(spec), "ReactClass: You're attempting to " + 'use a component as a mixin. Instead, just use a regular object.');

      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;

      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }

      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }

        if (name === MIXINS_KEY) {
          continue;
        }

        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);

        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];

              _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);

              if (specPolicy === 'DEFINE_MANY_MERGED') {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === 'DEFINE_MANY') {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;

              if (process.env.NODE_ENV !== 'production') {
                if (typeof property === 'function' && spec.displayName) {
                  proto[name].displayName = spec.displayName + '_' + name;
                }
              }
            }
          }
        }
      }
    }

    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }

      for (var name in statics) {
        var property = statics[name];

        if (!statics.hasOwnProperty(name)) {
          continue;
        }

        var isReserved = name in RESERVED_SPEC_KEYS;

        _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

        var isAlreadyDefined = name in Constructor;

        if (isAlreadyDefined) {
          var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;

          _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);

          Constructor[name] = createMergedResultFunction(Constructor[name], property);
          return;
        }

        Constructor[name] = property;
      }
    }

    function mergeIntoWithNoDuplicateKeys(one, two) {
      _invariant(one && two && (typeof one === "undefined" ? "undefined" : _typeof(one)) === 'object' && (typeof two === "undefined" ? "undefined" : _typeof(two)) === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);

          one[key] = two[key];
        }
      }

      return one;
    }

    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);

        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }

        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }

    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }

    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);

      if (process.env.NODE_ENV !== 'production') {
        boundMethod.__reactBoundContext = component;
        boundMethod.__reactBoundMethod = method;
        boundMethod.__reactBoundArguments = null;
        var componentName = component.constructor.displayName;
        var _bind = boundMethod.bind;

        boundMethod.bind = function (newThis) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (newThis !== component && newThis !== null) {
            if (process.env.NODE_ENV !== 'production') {
              warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);
            }
          } else if (!args.length) {
            if (process.env.NODE_ENV !== 'production') {
              warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);
            }

            return boundMethod;
          }

          var reboundMethod = _bind.apply(boundMethod, arguments);

          reboundMethod.__reactBoundContext = component;
          reboundMethod.__reactBoundMethod = method;
          reboundMethod.__reactBoundArguments = args;
          return reboundMethod;
        };
      }

      return boundMethod;
    }

    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;

      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }

    var IsMountedPreMixin = {
      componentDidMount: function componentDidMount() {
        this.__isMounted = true;
      }
    };
    var IsMountedPostMixin = {
      componentWillUnmount: function componentWillUnmount() {
        this.__isMounted = false;
      }
    };
    var ReactClassMixin = {
      replaceState: function replaceState(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
      isMounted: function isMounted() {
        if (process.env.NODE_ENV !== 'production') {
          warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');
          this.__didWarnIsMounted = true;
        }

        return !!this.__isMounted;
      }
    };

    var ReactClassComponent = function ReactClassComponent() {};

    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

    function createClass(spec) {
      var Constructor = identity(function (props, context, updater) {
        if (process.env.NODE_ENV !== 'production') {
          warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');
        }

        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }

        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
        this.state = null;
        var initialState = this.getInitialState ? this.getInitialState() : null;

        if (process.env.NODE_ENV !== 'production') {
          if (initialState === undefined && this.getInitialState._isMockFunction) {
            initialState = null;
          }
        }

        _invariant((typeof initialState === "undefined" ? "undefined" : _typeof(initialState)) === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

        this.state = initialState;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);

      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }

      if (process.env.NODE_ENV !== 'production') {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps.isReactClassApproved = {};
        }

        if (Constructor.prototype.getInitialState) {
          Constructor.prototype.getInitialState.isReactClassApproved = {};
        }
      }

      _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

      if (process.env.NODE_ENV !== 'production') {
        warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');
        warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');
        warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, '%s has a method called UNSAFE_componentWillRecieveProps(). ' + 'Did you mean UNSAFE_componentWillReceiveProps()?', spec.displayName || 'A component');
      }

      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }

      return Constructor;
    }

    return createClass;
  }

  module.exports = factory;
},217,[15,16,19,20],"node_modules/create-react-class/factory.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/ART/ReactNativeART.js",
      _class2,
      _temp2;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Surface: {
      displayName: "Surface"
    },
    Group: {
      displayName: "Group"
    },
    ClippingRectangle: {
      displayName: "ClippingRectangle"
    },
    Shape: {
      displayName: "Shape"
    },
    Text: {
      displayName: "Text"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/ART/ReactNativeART.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Color = _require(_dependencyMap[2], 'art/core/color');

  var Path = _require(_dependencyMap[3], 'ARTSerializablePath');

  var Transform = _require(_dependencyMap[4], 'art/core/transform');

  var React = _require(_dependencyMap[5], 'React');

  var PropTypes = _require(_dependencyMap[6], 'prop-types');

  var ReactNativeViewAttributes = _require(_dependencyMap[7], 'ReactNativeViewAttributes');

  var createReactNativeComponentClass = _require(_dependencyMap[8], 'createReactNativeComponentClass');

  var merge = _require(_dependencyMap[9], 'merge');

  var invariant = _require(_dependencyMap[10], 'fbjs/lib/invariant');

  function arrayDiffer(a, b) {
    if (a == null || b == null) {
      return true;
    }

    if (a.length !== b.length) {
      return true;
    }

    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return true;
      }
    }

    return false;
  }

  function fontAndLinesDiffer(a, b) {
    if (a === b) {
      return false;
    }

    if (a.font !== b.font) {
      if (a.font === null) {
        return true;
      }

      if (b.font === null) {
        return true;
      }

      if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
        return true;
      }
    }

    return arrayDiffer(a.lines, b.lines);
  }

  var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});
  var NodeAttributes = {
    transform: {
      diff: arrayDiffer
    },
    opacity: true
  };
  var GroupAttributes = merge(NodeAttributes, {
    clipping: {
      diff: arrayDiffer
    }
  });
  var RenderableAttributes = merge(NodeAttributes, {
    fill: {
      diff: arrayDiffer
    },
    stroke: {
      diff: arrayDiffer
    },
    strokeWidth: true,
    strokeCap: true,
    strokeJoin: true,
    strokeDash: {
      diff: arrayDiffer
    }
  });
  var ShapeAttributes = merge(RenderableAttributes, {
    d: {
      diff: arrayDiffer
    }
  });
  var TextAttributes = merge(RenderableAttributes, {
    alignment: true,
    frame: {
      diff: fontAndLinesDiffer
    },
    path: {
      diff: arrayDiffer
    }
  });
  var NativeSurfaceView = createReactNativeComponentClass('ARTSurfaceView', function () {
    return {
      validAttributes: SurfaceViewAttributes,
      uiViewClassName: 'ARTSurfaceView'
    };
  });
  var NativeGroup = createReactNativeComponentClass('ARTGroup', function () {
    return {
      validAttributes: GroupAttributes,
      uiViewClassName: 'ARTGroup'
    };
  });
  var NativeShape = createReactNativeComponentClass('ARTShape', function () {
    return {
      validAttributes: ShapeAttributes,
      uiViewClassName: 'ARTShape'
    };
  });
  var NativeText = createReactNativeComponentClass('ARTText', function () {
    return {
      validAttributes: TextAttributes,
      uiViewClassName: 'ARTText'
    };
  });

  function childrenAsString(children) {
    if (!children) {
      return '';
    }

    if (typeof children === 'string') {
      return children;
    }

    if (children.length) {
      return children.join('\n');
    }

    return '';
  }

  var Surface = _wrapComponent("Surface")((_temp = _class = function (_React$Component) {
    _inherits(Surface, _React$Component);

    function Surface() {
      _classCallCheck(this, Surface);

      return _possibleConstructorReturn(this, (Surface.__proto__ || Object.getPrototypeOf(Surface)).apply(this, arguments));
    }

    _createClass(Surface, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          isInSurface: true
        };
      }
    }, {
      key: "render",
      value: function render() {
        var props = this.props;
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        return React.createElement(
          NativeSurfaceView,
          {
            style: [props.style, {
              width: w,
              height: h
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 157
            }
          },
          this.props.children
        );
      }
    }]);

    return Surface;
  }(React.Component), _class.childContextTypes = {
    isInSurface: PropTypes.bool
  }, _temp));

  function extractNumber(value, defaultValue) {
    if (value == null) {
      return defaultValue;
    }

    return +value;
  }

  var pooledTransform = new Transform();

  function extractTransform(props) {
    var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
    var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;
    pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

    if (props.transform != null) {
      pooledTransform.transform(props.transform);
    }

    return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
  }

  function extractOpacity(props) {
    if (props.visible === false) {
      return 0;
    }

    if (props.opacity == null) {
      return 1;
    }

    return +props.opacity;
  }

  var Group = _wrapComponent("Group")((_temp2 = _class2 = function (_React$Component2) {
    _inherits(Group, _React$Component2);

    function Group() {
      _classCallCheck(this, Group);

      return _possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).apply(this, arguments));
    }

    _createClass(Group, [{
      key: "render",
      value: function render() {
        var props = this.props;
        invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
        return React.createElement(
          NativeGroup,
          {
            opacity: extractOpacity(props),
            transform: extractTransform(props),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 229
            }
          },
          this.props.children
        );
      }
    }]);

    return Group;
  }(React.Component), _class2.contextTypes = {
    isInSurface: PropTypes.bool.isRequired
  }, _temp2));

  var ClippingRectangle = _wrapComponent("ClippingRectangle")(function (_React$Component3) {
    _inherits(ClippingRectangle, _React$Component3);

    function ClippingRectangle() {
      _classCallCheck(this, ClippingRectangle);

      return _possibleConstructorReturn(this, (ClippingRectangle.__proto__ || Object.getPrototypeOf(ClippingRectangle)).apply(this, arguments));
    }

    _createClass(ClippingRectangle, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var x = extractNumber(props.x, 0);
        var y = extractNumber(props.y, 0);
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        var clipping = [x, y, w, h];
        var propsExcludingXAndY = merge(props);
        delete propsExcludingXAndY.x;
        delete propsExcludingXAndY.y;
        return React.createElement(
          NativeGroup,
          {
            clipping: clipping,
            opacity: extractOpacity(props),
            transform: extractTransform(propsExcludingXAndY),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 251
            }
          },
          this.props.children
        );
      }
    }]);

    return ClippingRectangle;
  }(React.Component));

  var SOLID_COLOR = 0;
  var LINEAR_GRADIENT = 1;
  var RADIAL_GRADIENT = 2;
  var PATTERN = 3;

  function insertColorIntoArray(color, targetArray, atIndex) {
    var c = new Color(color);
    targetArray[atIndex + 0] = c.red / 255;
    targetArray[atIndex + 1] = c.green / 255;
    targetArray[atIndex + 2] = c.blue / 255;
    targetArray[atIndex + 3] = c.alpha;
  }

  function insertColorsIntoArray(stops, targetArray, atIndex) {
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
        i++;
      }
    } else {
      for (var offset in stops) {
        insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
        i++;
      }
    }

    return atIndex + i * 4;
  }

  function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
    var offsetNumber;
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        offsetNumber = i / (stops.length - 1) * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    } else {
      for (var offsetString in stops) {
        offsetNumber = +offsetString * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    }

    return atIndex + i;
  }

  function insertColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
  }

  function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
    lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
  }

  function applyBoundingBoxToBrushData(brushData, props) {
    var type = brushData[0];
    var width = +props.width;
    var height = +props.height;

    if (type === LINEAR_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
    } else if (type === RADIAL_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
      brushData[5] *= width;
      brushData[6] *= height;
    } else if (type === PATTERN) {}
  }

  function extractBrush(colorOrBrush, props) {
    if (colorOrBrush == null) {
      return null;
    }

    if (colorOrBrush._brush) {
      if (colorOrBrush._bb) {
        applyBoundingBoxToBrushData(colorOrBrush._brush, props);
        colorOrBrush._bb = false;
      }

      return colorOrBrush._brush;
    }

    var c = new Color(colorOrBrush);
    return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractColor(color) {
    if (color == null) {
      return null;
    }

    var c = new Color(color);
    return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractStrokeCap(strokeCap) {
    switch (strokeCap) {
      case 'butt':
        return 0;

      case 'square':
        return 2;

      default:
        return 1;
    }
  }

  function extractStrokeJoin(strokeJoin) {
    switch (strokeJoin) {
      case 'miter':
        return 0;

      case 'bevel':
        return 2;

      default:
        return 1;
    }
  }

  var Shape = _wrapComponent("Shape")(function (_React$Component4) {
    _inherits(Shape, _React$Component4);

    function Shape() {
      _classCallCheck(this, Shape);

      return _possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).apply(this, arguments));
    }

    _createClass(Shape, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.d || childrenAsString(props.children);
        var d = (path instanceof Path ? path : new Path(path)).toJSON();
        return React.createElement(NativeShape, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          d: d,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 399
          }
        });
      }
    }]);

    return Shape;
  }(React.Component));

  var cachedFontObjectsFromString = {};
  var fontFamilyPrefix = /^[\s"']*/;
  var fontFamilySuffix = /[\s"']*$/;

  function extractSingleFontFamily(fontFamilyString) {
    return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
  }

  function parseFontString(font) {
    if (cachedFontObjectsFromString.hasOwnProperty(font)) {
      return cachedFontObjectsFromString[font];
    }

    var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
    var match = regexp.exec(font);

    if (!match) {
      return null;
    }

    var fontFamily = extractSingleFontFamily(match[3]);
    var fontSize = +match[2] || 12;
    var isBold = /bold/.exec(match[1]);
    var isItalic = /italic/.exec(match[1]);
    cachedFontObjectsFromString[font] = {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: isBold ? 'bold' : 'normal',
      fontStyle: isItalic ? 'italic' : 'normal'
    };
    return cachedFontObjectsFromString[font];
  }

  function extractFont(font) {
    if (font == null) {
      return null;
    }

    if (typeof font === 'string') {
      return parseFontString(font);
    }

    var fontFamily = extractSingleFontFamily(font.fontFamily);
    var fontSize = +font.fontSize || 12;
    var fontWeight = font.fontWeight != null ? font.fontWeight.toString() : '400';
    return {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: font.fontStyle
    };
  }

  var newLine = /\n/g;

  function extractFontAndLines(font, text) {
    return {
      font: extractFont(font),
      lines: text.split(newLine)
    };
  }

  function extractAlignment(alignment) {
    switch (alignment) {
      case 'right':
        return 1;

      case 'center':
        return 2;

      default:
        return 0;
    }
  }

  var Text = _wrapComponent("Text")(function (_React$Component5) {
    _inherits(Text, _React$Component5);

    function Text() {
      _classCallCheck(this, Text);

      return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
    }

    _createClass(Text, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.path;
        var textPath = path ? (path instanceof Path ? path : new Path(path)).toJSON() : null;
        var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
        return React.createElement(NativeText, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          alignment: extractAlignment(props.alignment),
          frame: textFrame,
          path: textPath,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 498
          }
        });
      }
    }]);

    return Text;
  }(React.Component));

  function LinearGradient(stops, x1, y1, x2, y2) {
    var type = LINEAR_GRADIENT;

    if (arguments.length < 5) {
      var angle = (x1 == null ? 270 : x1) * Math.PI / 180;
      var x = Math.cos(angle);
      var y = -Math.sin(angle);
      var l = (Math.abs(x) + Math.abs(y)) / 2;
      x *= l;
      y *= l;
      x1 = 0.5 - x;
      x2 = 0.5 + x;
      y1 = 0.5 - y;
      y2 = 0.5 + y;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [type, +x1, +y1, +x2, +y2];
    insertColorStopsIntoArray(stops, brushData, 5);
    this._brush = brushData;
  }

  function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
    if (ry == null) {
      ry = rx;
    }

    if (cx == null) {
      cx = fx;
    }

    if (cy == null) {
      cy = fy;
    }

    if (fx == null) {
      fx = fy = rx = ry = cx = cy = 0.5;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
    insertDoubleColorStopsIntoArray(stops, brushData, 7);
    this._brush = brushData;
  }

  function Pattern(url, width, height, left, top) {
    this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
  }

  var ReactART = {
    LinearGradient: LinearGradient,
    RadialGradient: RadialGradient,
    Pattern: Pattern,
    Transform: Transform,
    Path: Path,
    Surface: Surface,
    Group: Group,
    ClippingRectangle: ClippingRectangle,
    Shape: Shape,
    Text: Text
  };
  module.exports = ReactART;
},218,[13,219,365,366,369,172,25,214,199,176,19],"ReactNativeART");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i['return']) _i['return']();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError('Invalid attempt to destructure non-iterable instance');
      }
    };
  }();

  exports['default'] = proxyReactComponents;

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      'default': obj
    };
  }

  var _reactProxy = _require(_dependencyMap[0], 'react-proxy');

  var _globalWindow = _require(_dependencyMap[1], 'global/window');

  var _globalWindow2 = _interopRequireDefault(_globalWindow);

  var componentProxies = undefined;

  if (_globalWindow2['default'].__reactComponentProxies) {
    componentProxies = _globalWindow2['default'].__reactComponentProxies;
  } else {
    componentProxies = {};
    Object.defineProperty(_globalWindow2['default'], '__reactComponentProxies', {
      configurable: true,
      enumerable: false,
      writable: false,
      value: componentProxies
    });
  }

  function proxyReactComponents(_ref) {
    var filename = _ref.filename;
    var components = _ref.components;
    var imports = _ref.imports;
    var locals = _ref.locals;

    var _imports = _slicedToArray(imports, 1);

    var React = _imports[0];

    var _locals = _slicedToArray(locals, 1);

    var hot = _locals[0].hot;

    if (!React.Component) {
      throw new Error('imports[0] for react-transform-hmr does not look like React.');
    }

    if (!hot || typeof hot.accept !== 'function') {
      throw new Error('locals[0] does not appear to be a `module` object with Hot Module ' + 'replacement API enabled. You should disable react-transform-hmr in ' + 'production by using `env` section in Babel configuration. See the ' + 'example in README: https://github.com/gaearon/react-transform-hmr');
    }

    if (Object.keys(components).some(function (key) {
      return !components[key].isInFunction;
    })) {
      hot.accept(function (err) {
        if (err) {
          console.warn('[React Transform HMR] There was an error updating ' + filename + ':');
          console.error(err);
        }
      });
    }

    var forceUpdate = (0, _reactProxy.getForceUpdate)(React);
    return function wrapWithProxy(ReactClass, uniqueId) {
      var _components$uniqueId = components[uniqueId];
      var _components$uniqueId$isInFunction = _components$uniqueId.isInFunction;
      var isInFunction = _components$uniqueId$isInFunction === undefined ? false : _components$uniqueId$isInFunction;
      var _components$uniqueId$displayName = _components$uniqueId.displayName;
      var displayName = _components$uniqueId$displayName === undefined ? uniqueId : _components$uniqueId$displayName;

      if (isInFunction) {
        return ReactClass;
      }

      var globalUniqueId = filename + '$' + uniqueId;

      if (componentProxies[globalUniqueId]) {
        (function () {
          console.info('[React Transform HMR] Patching ' + displayName);
          var instances = componentProxies[globalUniqueId].update(ReactClass);
          setTimeout(function () {
            return instances.forEach(forceUpdate);
          });
        })();
      } else {
        componentProxies[globalUniqueId] = (0, _reactProxy.createProxy)(ReactClass);
      }

      return componentProxies[globalUniqueId].get();
    };
  }

  module.exports = exports['default'];
},219,[220,364],"node_modules/react-transform-hmr/lib/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getForceUpdate = exports.createProxy = undefined;

  var _supportsProtoAssignment = _require(_dependencyMap[0], './supportsProtoAssignment');

  var _supportsProtoAssignment2 = _interopRequireDefault(_supportsProtoAssignment);

  var _createClassProxy = _require(_dependencyMap[1], './createClassProxy');

  var _createClassProxy2 = _interopRequireDefault(_createClassProxy);

  var _reactDeepForceUpdate = _require(_dependencyMap[2], 'react-deep-force-update');

  var _reactDeepForceUpdate2 = _interopRequireDefault(_reactDeepForceUpdate);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  if (!(0, _supportsProtoAssignment2.default)()) {
    console.warn('This JavaScript environment does not support __proto__. ' + 'This means that react-proxy is unable to proxy React components. ' + 'Features that rely on react-proxy, such as react-transform-hmr, ' + 'will not function as expected.');
  }

  exports.createProxy = _createClassProxy2.default;
  exports.getForceUpdate = _reactDeepForceUpdate2.default;
},220,[221,222,363],"node_modules/react-proxy/modules/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = supportsProtoAssignment;
  var x = {};
  var y = {
    supports: true
  };

  try {
    x.__proto__ = y;
  } catch (err) {}

  function supportsProtoAssignment() {
    return x.supports || false;
  }

  ;
},221,[],"node_modules/react-proxy/modules/supportsProtoAssignment.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  exports.default = proxyClass;
  exports.default = createClassProxy;

  var _find = _require(_dependencyMap[0], 'lodash/find');

  var _find2 = _interopRequireDefault(_find);

  var _createPrototypeProxy = _require(_dependencyMap[1], './createPrototypeProxy');

  var _createPrototypeProxy2 = _interopRequireDefault(_createPrototypeProxy);

  var _bindAutoBindMethods = _require(_dependencyMap[2], './bindAutoBindMethods');

  var _bindAutoBindMethods2 = _interopRequireDefault(_bindAutoBindMethods);

  var _deleteUnknownAutoBindMethods = _require(_dependencyMap[3], './deleteUnknownAutoBindMethods');

  var _deleteUnknownAutoBindMethods2 = _interopRequireDefault(_deleteUnknownAutoBindMethods);

  var _supportsProtoAssignment = _require(_dependencyMap[4], './supportsProtoAssignment');

  var _supportsProtoAssignment2 = _interopRequireDefault(_supportsProtoAssignment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  var RESERVED_STATICS = ['length', 'name', 'arguments', 'caller', 'prototype', 'toString'];

  function isEqualDescriptor(a, b) {
    if (!a && !b) {
      return true;
    }

    if (!a || !b) {
      return false;
    }

    for (var key in a) {
      if (a[key] !== b[key]) {
        return false;
      }
    }

    return true;
  }

  var allProxies = [];

  function findProxy(Component) {
    var pair = (0, _find2.default)(allProxies, function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1);

      var key = _ref2[0];
      return key === Component;
    });
    return pair ? pair[1] : null;
  }

  function addProxy(Component, proxy) {
    allProxies.push([Component, proxy]);
  }

  function proxyClass(InitialComponent) {
    var existingProxy = findProxy(InitialComponent);

    if (existingProxy) {
      return existingProxy;
    }

    var prototypeProxy = (0, _createPrototypeProxy2.default)();
    var CurrentComponent = undefined;
    var ProxyComponent = undefined;
    var staticDescriptors = {};

    function wasStaticModifiedByUser(key) {
      var currentDescriptor = Object.getOwnPropertyDescriptor(ProxyComponent, key);
      return !isEqualDescriptor(staticDescriptors[key], currentDescriptor);
    }

    function instantiate(factory, context, params) {
      var component = factory();

      try {
        return component.apply(context, params);
      } catch (err) {
        (function () {
          var instance = new (Function.prototype.bind.apply(component, [null].concat(_toConsumableArray(params))))();
          Object.keys(instance).forEach(function (key) {
            if (RESERVED_STATICS.indexOf(key) > -1) {
              return;
            }

            context[key] = instance[key];
          });
        })();
      }
    }

    try {
      ProxyComponent = new Function('factory', 'instantiate', 'return function ' + (InitialComponent.name || 'ProxyComponent') + '() {\n         return instantiate(factory, this, arguments);\n      }')(function () {
        return CurrentComponent;
      }, instantiate);
    } catch (err) {
      ProxyComponent = function ProxyComponent() {
        return instantiate(function () {
          return CurrentComponent;
        }, this, arguments);
      };
    }

    ProxyComponent.prototype = prototypeProxy.get();

    ProxyComponent.toString = function toString() {
      return CurrentComponent.toString();
    };

    function update(NextComponent) {
      if (typeof NextComponent !== 'function') {
        throw new Error('Expected a constructor.');
      }

      var existingProxy = findProxy(NextComponent);

      if (existingProxy) {
        return update(existingProxy.__getCurrent());
      }

      CurrentComponent = NextComponent;
      var mountedInstances = prototypeProxy.update(NextComponent.prototype);
      ProxyComponent.prototype.constructor = ProxyComponent;
      ProxyComponent.__proto__ = NextComponent.__proto__;
      Object.getOwnPropertyNames(NextComponent).forEach(function (key) {
        if (RESERVED_STATICS.indexOf(key) > -1) {
          return;
        }

        var staticDescriptor = _extends({}, Object.getOwnPropertyDescriptor(NextComponent, key), {
          configurable: true
        });

        if (!wasStaticModifiedByUser(key)) {
          Object.defineProperty(ProxyComponent, key, staticDescriptor);
          staticDescriptors[key] = staticDescriptor;
        }
      });
      Object.getOwnPropertyNames(ProxyComponent).forEach(function (key) {
        if (RESERVED_STATICS.indexOf(key) > -1) {
          return;
        }

        if (NextComponent.hasOwnProperty(key)) {
          return;
        }

        var descriptor = Object.getOwnPropertyDescriptor(ProxyComponent, key);

        if (descriptor && !descriptor.configurable) {
          return;
        }

        if (!wasStaticModifiedByUser(key)) {
          delete ProxyComponent[key];
          delete staticDescriptors[key];
        }
      });
      ProxyComponent.displayName = NextComponent.displayName || NextComponent.name;
      mountedInstances.forEach(_bindAutoBindMethods2.default);
      mountedInstances.forEach(_deleteUnknownAutoBindMethods2.default);
      return mountedInstances;
    }

    ;

    function get() {
      return ProxyComponent;
    }

    function getCurrent() {
      return CurrentComponent;
    }

    update(InitialComponent);
    var proxy = {
      get: get,
      update: update
    };
    addProxy(ProxyComponent, proxy);
    Object.defineProperty(proxy, '__getCurrent', {
      configurable: false,
      writable: false,
      enumerable: false,
      value: getCurrent
    });
    return proxy;
  }

  function createFallback(Component) {
    var CurrentComponent = Component;
    return {
      get: function get() {
        return CurrentComponent;
      },
      update: function update(NextComponent) {
        CurrentComponent = NextComponent;
      }
    };
  }

  function createClassProxy(Component) {
    return Component.__proto__ && (0, _supportsProtoAssignment2.default)() ? proxyClass(Component) : createFallback(Component);
  }
},222,[223,336,361,362,221],"node_modules/react-proxy/modules/createClassProxy.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var createFind = _require(_dependencyMap[0], './_createFind'),
      findIndex = _require(_dependencyMap[1], './findIndex');

  var find = createFind(findIndex);
  module.exports = find;
},223,[224,331],"node_modules/lodash/find.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseIteratee = _require(_dependencyMap[0], './_baseIteratee'),
      isArrayLike = _require(_dependencyMap[1], './isArrayLike'),
      keys = _require(_dependencyMap[2], './keys');

  function createFind(findIndexFunc) {
    return function (collection, predicate, fromIndex) {
      var iterable = Object(collection);

      if (!isArrayLike(collection)) {
        var iteratee = baseIteratee(predicate, 3);
        collection = keys(collection);

        predicate = function predicate(key) {
          return iteratee(iterable[key], key, iterable);
        };
      }

      var index = findIndexFunc(collection, predicate, fromIndex);
      return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
    };
  }

  module.exports = createFind;
},224,[225,302,286],"node_modules/lodash/_createFind.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var baseMatches = _require(_dependencyMap[0], './_baseMatches'),
      baseMatchesProperty = _require(_dependencyMap[1], './_baseMatchesProperty'),
      identity = _require(_dependencyMap[2], './identity'),
      isArray = _require(_dependencyMap[3], './isArray'),
      property = _require(_dependencyMap[4], './property');

  function baseIteratee(value) {
    if (typeof value == 'function') {
      return value;
    }

    if (value == null) {
      return identity;
    }

    if ((typeof value === "undefined" ? "undefined" : _typeof(value)) == 'object') {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }

    return property(value);
  }

  module.exports = baseIteratee;
},225,[226,311,327,282,328],"node_modules/lodash/_baseIteratee.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseIsMatch = _require(_dependencyMap[0], './_baseIsMatch'),
      getMatchData = _require(_dependencyMap[1], './_getMatchData'),
      matchesStrictComparable = _require(_dependencyMap[2], './_matchesStrictComparable');

  function baseMatches(source) {
    var matchData = getMatchData(source);

    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }

    return function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  module.exports = baseMatches;
},226,[227,308,310],"node_modules/lodash/_baseMatches.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var Stack = _require(_dependencyMap[0], './_Stack'),
      baseIsEqual = _require(_dependencyMap[1], './_baseIsEqual');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }

    object = Object(object);

    while (index--) {
      var data = matchData[index];

      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }

    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();

        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }

        if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
          return false;
        }
      }
    }

    return true;
  }

  module.exports = baseIsMatch;
},227,[228,266],"node_modules/lodash/_baseIsMatch.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var ListCache = _require(_dependencyMap[0], './_ListCache'),
      stackClear = _require(_dependencyMap[1], './_stackClear'),
      stackDelete = _require(_dependencyMap[2], './_stackDelete'),
      stackGet = _require(_dependencyMap[3], './_stackGet'),
      stackHas = _require(_dependencyMap[4], './_stackHas'),
      stackSet = _require(_dependencyMap[5], './_stackSet');

  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  module.exports = Stack;
},228,[229,237,238,239,240,241],"node_modules/lodash/_Stack.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var listCacheClear = _require(_dependencyMap[0], './_listCacheClear'),
        listCacheDelete = _require(_dependencyMap[1], './_listCacheDelete'),
        listCacheGet = _require(_dependencyMap[2], './_listCacheGet'),
        listCacheHas = _require(_dependencyMap[3], './_listCacheHas'),
        listCacheSet = _require(_dependencyMap[4], './_listCacheSet');

    function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
},229,[230,231,234,235,236],"node_modules/lodash/_ListCache.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  module.exports = listCacheClear;
},230,[],"node_modules/lodash/_listCacheClear.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var assocIndexOf = _require(_dependencyMap[0], './_assocIndexOf');

  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  module.exports = listCacheDelete;
},231,[232],"node_modules/lodash/_listCacheDelete.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var eq = _require(_dependencyMap[0], './eq');

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  module.exports = assocIndexOf;
},232,[233],"node_modules/lodash/_assocIndexOf.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  module.exports = eq;
},233,[],"node_modules/lodash/eq.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var assocIndexOf = _require(_dependencyMap[0], './_assocIndexOf');

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  module.exports = listCacheGet;
},234,[232],"node_modules/lodash/_listCacheGet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var assocIndexOf = _require(_dependencyMap[0], './_assocIndexOf');

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  module.exports = listCacheHas;
},235,[232],"node_modules/lodash/_listCacheHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var assocIndexOf = _require(_dependencyMap[0], './_assocIndexOf');

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  module.exports = listCacheSet;
},236,[232],"node_modules/lodash/_listCacheSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var ListCache = _require(_dependencyMap[0], './_ListCache');

  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }

  module.exports = stackClear;
},237,[229],"node_modules/lodash/_stackClear.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  module.exports = stackDelete;
},238,[],"node_modules/lodash/_stackDelete.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function stackGet(key) {
    return this.__data__.get(key);
  }

  module.exports = stackGet;
},239,[],"node_modules/lodash/_stackGet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function stackHas(key) {
    return this.__data__.has(key);
  }

  module.exports = stackHas;
},240,[],"node_modules/lodash/_stackHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var ListCache = _require(_dependencyMap[0], './_ListCache'),
      Map = _require(_dependencyMap[1], './_Map'),
      MapCache = _require(_dependencyMap[2], './_MapCache');

  var LARGE_ARRAY_SIZE = 200;

  function stackSet(key, value) {
    var data = this.__data__;

    if (data instanceof ListCache) {
      var pairs = data.__data__;

      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new MapCache(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  module.exports = stackSet;
},241,[229,242,251],"node_modules/lodash/_stackSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var getNative = _require(_dependencyMap[0], './_getNative'),
        root = _require(_dependencyMap[1], './_root');

    var Map = getNative(root, 'Map');
    module.exports = Map;
},242,[243,42],"node_modules/lodash/_Map.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseIsNative = _require(_dependencyMap[0], './_baseIsNative'),
      getValue = _require(_dependencyMap[1], './_getValue');

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  module.exports = getNative;
},243,[244,250],"node_modules/lodash/_getNative.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isFunction = _require(_dependencyMap[0], './isFunction'),
      isMasked = _require(_dependencyMap[1], './_isMasked'),
      isObject = _require(_dependencyMap[2], './isObject'),
      toSource = _require(_dependencyMap[3], './_toSource');

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  module.exports = baseIsNative;
},244,[245,247,246,249],"node_modules/lodash/_baseIsNative.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var baseGetTag = _require(_dependencyMap[0], './_baseGetTag'),
        isObject = _require(_dependencyMap[1], './isObject');

    var asyncTag = '[object AsyncFunction]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    function isFunction(value) {
        if (!isObject(value)) {
            return false;
        }

        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    module.exports = isFunction;
},245,[40,246],"node_modules/lodash/isFunction.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  function isObject(value) {
    var type = typeof value === "undefined" ? "undefined" : _typeof(value);
    return value != null && (type == 'object' || type == 'function');
  }

  module.exports = isObject;
},246,[],"node_modules/lodash/isObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var coreJsData = _require(_dependencyMap[0], './_coreJsData');

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  module.exports = isMasked;
},247,[248],"node_modules/lodash/_isMasked.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var root = _require(_dependencyMap[0], './_root');

  var coreJsData = root['__core-js_shared__'];
  module.exports = coreJsData;
},248,[42],"node_modules/lodash/_coreJsData.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  module.exports = toSource;
},249,[],"node_modules/lodash/_toSource.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  module.exports = getValue;
},250,[],"node_modules/lodash/_getValue.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var mapCacheClear = _require(_dependencyMap[0], './_mapCacheClear'),
        mapCacheDelete = _require(_dependencyMap[1], './_mapCacheDelete'),
        mapCacheGet = _require(_dependencyMap[2], './_mapCacheGet'),
        mapCacheHas = _require(_dependencyMap[3], './_mapCacheHas'),
        mapCacheSet = _require(_dependencyMap[4], './_mapCacheSet');

    function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
},251,[252,260,263,264,265],"node_modules/lodash/_MapCache.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var Hash = _require(_dependencyMap[0], './_Hash'),
      ListCache = _require(_dependencyMap[1], './_ListCache'),
      Map = _require(_dependencyMap[2], './_Map');

  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  module.exports = mapCacheClear;
},252,[253,229,242],"node_modules/lodash/_mapCacheClear.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var hashClear = _require(_dependencyMap[0], './_hashClear'),
        hashDelete = _require(_dependencyMap[1], './_hashDelete'),
        hashGet = _require(_dependencyMap[2], './_hashGet'),
        hashHas = _require(_dependencyMap[3], './_hashHas'),
        hashSet = _require(_dependencyMap[4], './_hashSet');

    function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
},253,[254,256,257,258,259],"node_modules/lodash/_Hash.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var nativeCreate = _require(_dependencyMap[0], './_nativeCreate');

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  module.exports = hashClear;
},254,[255],"node_modules/lodash/_hashClear.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var getNative = _require(_dependencyMap[0], './_getNative');

  var nativeCreate = getNative(Object, 'create');
  module.exports = nativeCreate;
},255,[243],"node_modules/lodash/_nativeCreate.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = hashDelete;
},256,[],"node_modules/lodash/_hashDelete.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var nativeCreate = _require(_dependencyMap[0], './_nativeCreate');

  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  module.exports = hashGet;
},257,[255],"node_modules/lodash/_hashGet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var nativeCreate = _require(_dependencyMap[0], './_nativeCreate');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  module.exports = hashHas;
},258,[255],"node_modules/lodash/_hashHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var nativeCreate = _require(_dependencyMap[0], './_nativeCreate');

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  module.exports = hashSet;
},259,[255],"node_modules/lodash/_hashSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var getMapData = _require(_dependencyMap[0], './_getMapData');

  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = mapCacheDelete;
},260,[261],"node_modules/lodash/_mapCacheDelete.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isKeyable = _require(_dependencyMap[0], './_isKeyable');

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  module.exports = getMapData;
},261,[262],"node_modules/lodash/_getMapData.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  function isKeyable(value) {
    var type = typeof value === "undefined" ? "undefined" : _typeof(value);
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  module.exports = isKeyable;
},262,[],"node_modules/lodash/_isKeyable.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var getMapData = _require(_dependencyMap[0], './_getMapData');

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  module.exports = mapCacheGet;
},263,[261],"node_modules/lodash/_mapCacheGet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var getMapData = _require(_dependencyMap[0], './_getMapData');

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  module.exports = mapCacheHas;
},264,[261],"node_modules/lodash/_mapCacheHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var getMapData = _require(_dependencyMap[0], './_getMapData');

  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  module.exports = mapCacheSet;
},265,[261],"node_modules/lodash/_mapCacheSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseIsEqualDeep = _require(_dependencyMap[0], './_baseIsEqualDeep'),
      isObjectLike = _require(_dependencyMap[1], './isObjectLike');

  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  module.exports = baseIsEqual;
},266,[267,48],"node_modules/lodash/_baseIsEqual.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var Stack = _require(_dependencyMap[0], './_Stack'),
      equalArrays = _require(_dependencyMap[1], './_equalArrays'),
      equalByTag = _require(_dependencyMap[2], './_equalByTag'),
      equalObjects = _require(_dependencyMap[3], './_equalObjects'),
      getTag = _require(_dependencyMap[4], './_getTag'),
      isArray = _require(_dependencyMap[5], './isArray'),
      isBuffer = _require(_dependencyMap[6], './isBuffer'),
      isTypedArray = _require(_dependencyMap[7], './isTypedArray');

  var COMPARE_PARTIAL_FLAG = 1;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  module.exports = baseIsEqualDeep;
},267,[228,268,274,278,303,282,291,294],"node_modules/lodash/_baseIsEqualDeep.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var SetCache = _require(_dependencyMap[0], './_SetCache'),
      arraySome = _require(_dependencyMap[1], './_arraySome'),
      cacheHas = _require(_dependencyMap[2], './_cacheHas');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  module.exports = equalArrays;
},268,[269,272,273],"node_modules/lodash/_equalArrays.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var MapCache = _require(_dependencyMap[0], './_MapCache'),
        setCacheAdd = _require(_dependencyMap[1], './_setCacheAdd'),
        setCacheHas = _require(_dependencyMap[2], './_setCacheHas');

    function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
            this.add(values[index]);
        }
    }

    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
},269,[251,270,271],"node_modules/lodash/_SetCache.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  module.exports = setCacheAdd;
},270,[],"node_modules/lodash/_setCacheAdd.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  module.exports = setCacheHas;
},271,[],"node_modules/lodash/_setCacheHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  module.exports = arraySome;
},272,[],"node_modules/lodash/_arraySome.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function cacheHas(cache, key) {
    return cache.has(key);
  }

  module.exports = cacheHas;
},273,[],"node_modules/lodash/_cacheHas.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _Symbol = _require(_dependencyMap[0], './_Symbol'),
      Uint8Array = _require(_dependencyMap[1], './_Uint8Array'),
      eq = _require(_dependencyMap[2], './eq'),
      equalArrays = _require(_dependencyMap[3], './_equalArrays'),
      mapToArray = _require(_dependencyMap[4], './_mapToArray'),
      setToArray = _require(_dependencyMap[5], './_setToArray');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  module.exports = equalByTag;
},274,[41,275,233,268,276,277],"node_modules/lodash/_equalByTag.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var root = _require(_dependencyMap[0], './_root');

  var Uint8Array = root.Uint8Array;
  module.exports = Uint8Array;
},275,[42],"node_modules/lodash/_Uint8Array.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  module.exports = mapToArray;
},276,[],"node_modules/lodash/_mapToArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  module.exports = setToArray;
},277,[],"node_modules/lodash/_setToArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var getAllKeys = _require(_dependencyMap[0], './_getAllKeys');

  var COMPARE_PARTIAL_FLAG = 1;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  module.exports = equalObjects;
},278,[279],"node_modules/lodash/_equalObjects.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseGetAllKeys = _require(_dependencyMap[0], './_baseGetAllKeys'),
      getSymbols = _require(_dependencyMap[1], './_getSymbols'),
      keys = _require(_dependencyMap[2], './keys');

  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  module.exports = getAllKeys;
},279,[280,283,286],"node_modules/lodash/_getAllKeys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrayPush = _require(_dependencyMap[0], './_arrayPush'),
      isArray = _require(_dependencyMap[1], './isArray');

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  module.exports = baseGetAllKeys;
},280,[281,282],"node_modules/lodash/_baseGetAllKeys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  module.exports = arrayPush;
},281,[],"node_modules/lodash/_arrayPush.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isArray = Array.isArray;
  module.exports = isArray;
},282,[],"node_modules/lodash/isArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrayFilter = _require(_dependencyMap[0], './_arrayFilter'),
      stubArray = _require(_dependencyMap[1], './stubArray');

  var objectProto = Object.prototype;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  module.exports = getSymbols;
},283,[284,285],"node_modules/lodash/_getSymbols.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  module.exports = arrayFilter;
},284,[],"node_modules/lodash/_arrayFilter.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function stubArray() {
    return [];
  }

  module.exports = stubArray;
},285,[],"node_modules/lodash/stubArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrayLikeKeys = _require(_dependencyMap[0], './_arrayLikeKeys'),
      baseKeys = _require(_dependencyMap[1], './_baseKeys'),
      isArrayLike = _require(_dependencyMap[2], './isArrayLike');

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  module.exports = keys;
},286,[287,299,302],"node_modules/lodash/keys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseTimes = _require(_dependencyMap[0], './_baseTimes'),
      isArguments = _require(_dependencyMap[1], './isArguments'),
      isArray = _require(_dependencyMap[2], './isArray'),
      isBuffer = _require(_dependencyMap[3], './isBuffer'),
      isIndex = _require(_dependencyMap[4], './_isIndex'),
      isTypedArray = _require(_dependencyMap[5], './isTypedArray');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = arrayLikeKeys;
},287,[288,289,282,291,293,294],"node_modules/lodash/_arrayLikeKeys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  module.exports = baseTimes;
},288,[],"node_modules/lodash/_baseTimes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var baseIsArguments = _require(_dependencyMap[0], './_baseIsArguments'),
        isObjectLike = _require(_dependencyMap[1], './isObjectLike');

    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function () {
        return arguments;
    }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };
    module.exports = isArguments;
},289,[290,48],"node_modules/lodash/isArguments.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseGetTag = _require(_dependencyMap[0], './_baseGetTag'),
      isObjectLike = _require(_dependencyMap[1], './isObjectLike');

  var argsTag = '[object Arguments]';

  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  module.exports = baseIsArguments;
},290,[40,48],"node_modules/lodash/_baseIsArguments.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var root = _require(_dependencyMap[0], './_root'),
      stubFalse = _require(_dependencyMap[1], './stubFalse');

  var freeExports = (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && (typeof module === "undefined" ? "undefined" : _typeof(module)) == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root.Buffer : undefined;
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  var isBuffer = nativeIsBuffer || stubFalse;
  module.exports = isBuffer;
},291,[42,292],"node_modules/lodash/isBuffer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function stubFalse() {
    return false;
  }

  module.exports = stubFalse;
},292,[],"node_modules/lodash/stubFalse.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  function isIndex(value, length) {
    var type = typeof value === "undefined" ? "undefined" : _typeof(value);
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  module.exports = isIndex;
},293,[],"node_modules/lodash/_isIndex.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseIsTypedArray = _require(_dependencyMap[0], './_baseIsTypedArray'),
      baseUnary = _require(_dependencyMap[1], './_baseUnary'),
      nodeUtil = _require(_dependencyMap[2], './_nodeUtil');

  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  module.exports = isTypedArray;
},294,[295,297,298],"node_modules/lodash/isTypedArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var baseGetTag = _require(_dependencyMap[0], './_baseGetTag'),
        isLength = _require(_dependencyMap[1], './isLength'),
        isObjectLike = _require(_dependencyMap[2], './isObjectLike');

    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

    function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    module.exports = baseIsTypedArray;
},295,[40,296,48],"node_modules/lodash/_baseIsTypedArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var MAX_SAFE_INTEGER = 9007199254740991;

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;
},296,[],"node_modules/lodash/isLength.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  module.exports = baseUnary;
},297,[],"node_modules/lodash/_baseUnary.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var freeGlobal = _require(_dependencyMap[0], './_freeGlobal');

  var freeExports = (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && (typeof module === "undefined" ? "undefined" : _typeof(module)) == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  module.exports = nodeUtil;
},298,[43],"node_modules/lodash/_nodeUtil.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isPrototype = _require(_dependencyMap[0], './_isPrototype'),
      nativeKeys = _require(_dependencyMap[1], './_nativeKeys');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = baseKeys;
},299,[300,301],"node_modules/lodash/_baseKeys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var objectProto = Object.prototype;

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  module.exports = isPrototype;
},300,[],"node_modules/lodash/_isPrototype.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var overArg = _require(_dependencyMap[0], './_overArg');

  var nativeKeys = overArg(Object.keys, Object);
  module.exports = nativeKeys;
},301,[47],"node_modules/lodash/_nativeKeys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isFunction = _require(_dependencyMap[0], './isFunction'),
      isLength = _require(_dependencyMap[1], './isLength');

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  module.exports = isArrayLike;
},302,[245,296],"node_modules/lodash/isArrayLike.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var DataView = _require(_dependencyMap[0], './_DataView'),
        Map = _require(_dependencyMap[1], './_Map'),
        Promise = _require(_dependencyMap[2], './_Promise'),
        Set = _require(_dependencyMap[3], './_Set'),
        WeakMap = _require(_dependencyMap[4], './_WeakMap'),
        baseGetTag = _require(_dependencyMap[5], './_baseGetTag'),
        toSource = _require(_dependencyMap[6], './_toSource');

    var mapTag = '[object Map]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        setTag = '[object Set]',
        weakMapTag = '[object WeakMap]';
    var dataViewTag = '[object DataView]';
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;

    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
            var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : '';

            if (ctorString) {
                switch (ctorString) {
                    case dataViewCtorString:
                        return dataViewTag;

                    case mapCtorString:
                        return mapTag;

                    case promiseCtorString:
                        return promiseTag;

                    case setCtorString:
                        return setTag;

                    case weakMapCtorString:
                        return weakMapTag;
                }
            }

            return result;
        };
    }

    module.exports = getTag;
},303,[304,242,305,306,307,40,249],"node_modules/lodash/_getTag.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var getNative = _require(_dependencyMap[0], './_getNative'),
        root = _require(_dependencyMap[1], './_root');

    var DataView = getNative(root, 'DataView');
    module.exports = DataView;
},304,[243,42],"node_modules/lodash/_DataView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var getNative = _require(_dependencyMap[0], './_getNative'),
        root = _require(_dependencyMap[1], './_root');

    var Promise = getNative(root, 'Promise');
    module.exports = Promise;
},305,[243,42],"node_modules/lodash/_Promise.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var getNative = _require(_dependencyMap[0], './_getNative'),
        root = _require(_dependencyMap[1], './_root');

    var Set = getNative(root, 'Set');
    module.exports = Set;
},306,[243,42],"node_modules/lodash/_Set.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var getNative = _require(_dependencyMap[0], './_getNative'),
        root = _require(_dependencyMap[1], './_root');

    var WeakMap = getNative(root, 'WeakMap');
    module.exports = WeakMap;
},307,[243,42],"node_modules/lodash/_WeakMap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var isStrictComparable = _require(_dependencyMap[0], './_isStrictComparable'),
        keys = _require(_dependencyMap[1], './keys');

    function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
            var key = result[length],
                value = object[key];
            result[length] = [key, value, isStrictComparable(value)];
        }

        return result;
    }

    module.exports = getMatchData;
},308,[309,286],"node_modules/lodash/_getMatchData.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isObject = _require(_dependencyMap[0], './isObject');

  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  module.exports = isStrictComparable;
},309,[246],"node_modules/lodash/_isStrictComparable.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }

      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  module.exports = matchesStrictComparable;
},310,[],"node_modules/lodash/_matchesStrictComparable.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseIsEqual = _require(_dependencyMap[0], './_baseIsEqual'),
      get = _require(_dependencyMap[1], './get'),
      hasIn = _require(_dependencyMap[2], './hasIn'),
      isKey = _require(_dependencyMap[3], './_isKey'),
      isStrictComparable = _require(_dependencyMap[4], './_isStrictComparable'),
      matchesStrictComparable = _require(_dependencyMap[5], './_matchesStrictComparable'),
      toKey = _require(_dependencyMap[6], './_toKey');

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }

    return function (object) {
      var objValue = get(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }

  module.exports = baseMatchesProperty;
},311,[266,312,324,315,309,310,323],"node_modules/lodash/_baseMatchesProperty.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseGet = _require(_dependencyMap[0], './_baseGet');

  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  module.exports = get;
},312,[313],"node_modules/lodash/get.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var castPath = _require(_dependencyMap[0], './_castPath'),
      toKey = _require(_dependencyMap[1], './_toKey');

  function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  module.exports = baseGet;
},313,[314,323],"node_modules/lodash/_baseGet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isArray = _require(_dependencyMap[0], './isArray'),
      isKey = _require(_dependencyMap[1], './_isKey'),
      stringToPath = _require(_dependencyMap[2], './_stringToPath'),
      toString = _require(_dependencyMap[3], './toString');

  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }

    return isKey(value, object) ? [value] : stringToPath(toString(value));
  }

  module.exports = castPath;
},314,[282,315,317,320],"node_modules/lodash/_castPath.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var isArray = _require(_dependencyMap[0], './isArray'),
      isSymbol = _require(_dependencyMap[1], './isSymbol');

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }

    var type = typeof value === "undefined" ? "undefined" : _typeof(value);

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  module.exports = isKey;
},315,[282,316],"node_modules/lodash/_isKey.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

    var baseGetTag = _require(_dependencyMap[0], './_baseGetTag'),
        isObjectLike = _require(_dependencyMap[1], './isObjectLike');

    var symbolTag = '[object Symbol]';

    function isSymbol(value) {
        return (typeof value === "undefined" ? "undefined" : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }

    module.exports = isSymbol;
},316,[40,48],"node_modules/lodash/isSymbol.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var memoizeCapped = _require(_dependencyMap[0], './_memoizeCapped');

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46) {
        result.push('');
      }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  module.exports = stringToPath;
},317,[318],"node_modules/lodash/_stringToPath.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var memoize = _require(_dependencyMap[0], './memoize');

  var MAX_MEMOIZE_SIZE = 500;

  function memoizeCapped(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  module.exports = memoizeCapped;
},318,[319],"node_modules/lodash/_memoizeCapped.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var MapCache = _require(_dependencyMap[0], './_MapCache');

  var FUNC_ERROR_TEXT = 'Expected a function';

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;
  module.exports = memoize;
},319,[251],"node_modules/lodash/memoize.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseToString = _require(_dependencyMap[0], './_baseToString');

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  module.exports = toString;
},320,[321],"node_modules/lodash/toString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _Symbol = _require(_dependencyMap[0], './_Symbol'),
      arrayMap = _require(_dependencyMap[1], './_arrayMap'),
      isArray = _require(_dependencyMap[2], './isArray'),
      isSymbol = _require(_dependencyMap[3], './isSymbol');

  var INFINITY = 1 / 0;
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isArray(value)) {
      return arrayMap(value, baseToString) + '';
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = baseToString;
},321,[41,322,282,316],"node_modules/lodash/_baseToString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  module.exports = arrayMap;
},322,[],"node_modules/lodash/_arrayMap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isSymbol = _require(_dependencyMap[0], './isSymbol');

  var INFINITY = 1 / 0;

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = toKey;
},323,[316],"node_modules/lodash/_toKey.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseHasIn = _require(_dependencyMap[0], './_baseHasIn'),
      hasPath = _require(_dependencyMap[1], './_hasPath');

  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  module.exports = hasIn;
},324,[325,326],"node_modules/lodash/hasIn.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  module.exports = baseHasIn;
},325,[],"node_modules/lodash/_baseHasIn.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var castPath = _require(_dependencyMap[0], './_castPath'),
      isArguments = _require(_dependencyMap[1], './isArguments'),
      isArray = _require(_dependencyMap[2], './isArray'),
      isIndex = _require(_dependencyMap[3], './_isIndex'),
      isLength = _require(_dependencyMap[4], './isLength'),
      toKey = _require(_dependencyMap[5], './_toKey');

  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }

  module.exports = hasPath;
},326,[314,289,282,293,296,323],"node_modules/lodash/_hasPath.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function identity(value) {
    return value;
  }

  module.exports = identity;
},327,[],"node_modules/lodash/identity.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseProperty = _require(_dependencyMap[0], './_baseProperty'),
      basePropertyDeep = _require(_dependencyMap[1], './_basePropertyDeep'),
      isKey = _require(_dependencyMap[2], './_isKey'),
      toKey = _require(_dependencyMap[3], './_toKey');

  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  module.exports = property;
},328,[329,330,315,323],"node_modules/lodash/property.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  module.exports = baseProperty;
},329,[],"node_modules/lodash/_baseProperty.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseGet = _require(_dependencyMap[0], './_baseGet');

  function basePropertyDeep(path) {
    return function (object) {
      return baseGet(object, path);
    };
  }

  module.exports = basePropertyDeep;
},330,[313],"node_modules/lodash/_basePropertyDeep.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseFindIndex = _require(_dependencyMap[0], './_baseFindIndex'),
      baseIteratee = _require(_dependencyMap[1], './_baseIteratee'),
      toInteger = _require(_dependencyMap[2], './toInteger');

  var nativeMax = Math.max;

  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;

    if (!length) {
      return -1;
    }

    var index = fromIndex == null ? 0 : toInteger(fromIndex);

    if (index < 0) {
      index = nativeMax(length + index, 0);
    }

    return baseFindIndex(array, baseIteratee(predicate, 3), index);
  }

  module.exports = findIndex;
},331,[332,225,333],"node_modules/lodash/findIndex.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }

  module.exports = baseFindIndex;
},332,[],"node_modules/lodash/_baseFindIndex.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var toFinite = _require(_dependencyMap[0], './toFinite');

  function toInteger(value) {
    var result = toFinite(value),
        remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }

  module.exports = toInteger;
},333,[334],"node_modules/lodash/toInteger.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var toNumber = _require(_dependencyMap[0], './toNumber');

  var INFINITY = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;

  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }

    value = toNumber(value);

    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }

    return value === value ? value : 0;
  }

  module.exports = toFinite;
},334,[335],"node_modules/lodash/toFinite.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isObject = _require(_dependencyMap[0], './isObject'),
      isSymbol = _require(_dependencyMap[1], './isSymbol');

  var NAN = 0 / 0;
  var reTrim = /^\s+|\s+$/g;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;

  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }

    if (isSymbol(value)) {
      return NAN;
    }

    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? other + '' : other;
    }

    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }

    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  module.exports = toNumber;
},335,[246,316],"node_modules/lodash/toNumber.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createPrototypeProxy;

  var _assign = _require(_dependencyMap[0], 'lodash/assign');

  var _assign2 = _interopRequireDefault(_assign);

  var _difference = _require(_dependencyMap[1], 'lodash/difference');

  var _difference2 = _interopRequireDefault(_difference);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function createPrototypeProxy() {
    var proxy = {};
    var current = null;
    var mountedInstances = [];

    function proxyToString(name) {
      return function toString() {
        if (typeof current[name] === 'function') {
          return current[name].toString();
        } else {
          return '<method was deleted>';
        }
      };
    }

    function proxyMethod(name) {
      var proxiedMethod = function proxiedMethod() {
        if (typeof current[name] === 'function') {
          return current[name].apply(this, arguments);
        }
      };

      (0, _assign2.default)(proxiedMethod, current[name]);
      proxiedMethod.toString = proxyToString(name);
      return proxiedMethod;
    }

    function proxiedComponentDidMount() {
      mountedInstances.push(this);

      if (typeof current.componentDidMount === 'function') {
        return current.componentDidMount.apply(this, arguments);
      }
    }

    proxiedComponentDidMount.toString = proxyToString('componentDidMount');

    function proxiedComponentWillUnmount() {
      var index = mountedInstances.indexOf(this);

      if (index !== -1) {
        mountedInstances.splice(index, 1);
      }

      if (typeof current.componentWillUnmount === 'function') {
        return current.componentWillUnmount.apply(this, arguments);
      }
    }

    proxiedComponentWillUnmount.toString = proxyToString('componentWillUnmount');

    function defineProxyProperty(name, descriptor) {
      Object.defineProperty(proxy, name, descriptor);
    }

    function defineProxyPropertyWithValue(name, value) {
      var _ref = Object.getOwnPropertyDescriptor(current, name) || {};

      var _ref$enumerable = _ref.enumerable;
      var enumerable = _ref$enumerable === undefined ? false : _ref$enumerable;
      var _ref$writable = _ref.writable;
      var writable = _ref$writable === undefined ? true : _ref$writable;
      defineProxyProperty(name, {
        configurable: true,
        enumerable: enumerable,
        writable: writable,
        value: value
      });
    }

    function createAutoBindMap() {
      if (!current.__reactAutoBindMap) {
        return;
      }

      var __reactAutoBindMap = {};

      for (var name in current.__reactAutoBindMap) {
        if (typeof proxy[name] === 'function' && current.__reactAutoBindMap.hasOwnProperty(name)) {
          __reactAutoBindMap[name] = proxy[name];
        }
      }

      return __reactAutoBindMap;
    }

    function createAutoBindPairs() {
      var __reactAutoBindPairs = [];

      for (var i = 0; i < current.__reactAutoBindPairs.length; i += 2) {
        var name = current.__reactAutoBindPairs[i];
        var method = proxy[name];

        if (typeof method === 'function') {
          __reactAutoBindPairs.push(name, method);
        }
      }

      return __reactAutoBindPairs;
    }

    function update(next) {
      current = next;
      var currentNames = Object.getOwnPropertyNames(current);
      var previousName = Object.getOwnPropertyNames(proxy);
      var removedNames = (0, _difference2.default)(previousName, currentNames);
      removedNames.forEach(function (name) {
        delete proxy[name];
      });
      currentNames.forEach(function (name) {
        var descriptor = Object.getOwnPropertyDescriptor(current, name);

        if (typeof descriptor.value === 'function') {
          defineProxyPropertyWithValue(name, proxyMethod(name));
        } else {
          defineProxyProperty(name, descriptor);
        }
      });
      defineProxyPropertyWithValue('componentDidMount', proxiedComponentDidMount);
      defineProxyPropertyWithValue('componentWillUnmount', proxiedComponentWillUnmount);

      if (current.hasOwnProperty('__reactAutoBindMap')) {
        defineProxyPropertyWithValue('__reactAutoBindMap', createAutoBindMap());
      }

      if (current.hasOwnProperty('__reactAutoBindPairs')) {
        defineProxyPropertyWithValue('__reactAutoBindPairs', createAutoBindPairs());
      }

      proxy.__proto__ = next;
      return mountedInstances;
    }

    function get() {
      return proxy;
    }

    return {
      update: update,
      get: get
    };
  }

  ;
},336,[337,351],"node_modules/react-proxy/modules/createPrototypeProxy.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var assignValue = _require(_dependencyMap[0], './_assignValue'),
      copyObject = _require(_dependencyMap[1], './_copyObject'),
      createAssigner = _require(_dependencyMap[2], './_createAssigner'),
      isArrayLike = _require(_dependencyMap[3], './isArrayLike'),
      isPrototype = _require(_dependencyMap[4], './_isPrototype'),
      keys = _require(_dependencyMap[5], './keys');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var assign = createAssigner(function (object, source) {
    if (isPrototype(source) || isArrayLike(source)) {
      copyObject(source, keys(source), object);
      return;
    }

    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        assignValue(object, key, source[key]);
      }
    }
  });
  module.exports = assign;
},337,[338,341,342,302,300,286],"node_modules/lodash/assign.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseAssignValue = _require(_dependencyMap[0], './_baseAssignValue'),
      eq = _require(_dependencyMap[1], './eq');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  module.exports = assignValue;
},338,[339,233],"node_modules/lodash/_assignValue.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var defineProperty = _require(_dependencyMap[0], './_defineProperty');

  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  module.exports = baseAssignValue;
},339,[340],"node_modules/lodash/_baseAssignValue.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var getNative = _require(_dependencyMap[0], './_getNative');

  var defineProperty = function () {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  module.exports = defineProperty;
},340,[243],"node_modules/lodash/_defineProperty.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var assignValue = _require(_dependencyMap[0], './_assignValue'),
      baseAssignValue = _require(_dependencyMap[1], './_baseAssignValue');

  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }

    return object;
  }

  module.exports = copyObject;
},341,[338,339],"node_modules/lodash/_copyObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseRest = _require(_dependencyMap[0], './_baseRest'),
      isIterateeCall = _require(_dependencyMap[1], './_isIterateeCall');

  function createAssigner(assigner) {
    return baseRest(function (object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;
      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }

      object = Object(object);

      while (++index < length) {
        var source = sources[index];

        if (source) {
          assigner(object, source, index, customizer);
        }
      }

      return object;
    });
  }

  module.exports = createAssigner;
},342,[343,350],"node_modules/lodash/_createAssigner.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var identity = _require(_dependencyMap[0], './identity'),
      overRest = _require(_dependencyMap[1], './_overRest'),
      setToString = _require(_dependencyMap[2], './_setToString');

  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
  }

  module.exports = baseRest;
},343,[327,344,346],"node_modules/lodash/_baseRest.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var apply = _require(_dependencyMap[0], './_apply');

  var nativeMax = Math.max;

  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  module.exports = overRest;
},344,[345],"node_modules/lodash/_overRest.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  module.exports = apply;
},345,[],"node_modules/lodash/_apply.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseSetToString = _require(_dependencyMap[0], './_baseSetToString'),
      shortOut = _require(_dependencyMap[1], './_shortOut');

  var setToString = shortOut(baseSetToString);
  module.exports = setToString;
},346,[347,349],"node_modules/lodash/_setToString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var constant = _require(_dependencyMap[0], './constant'),
      defineProperty = _require(_dependencyMap[1], './_defineProperty'),
      identity = _require(_dependencyMap[2], './identity');

  var baseSetToString = !defineProperty ? identity : function (func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };
  module.exports = baseSetToString;
},347,[348,340,327],"node_modules/lodash/_baseSetToString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function constant(value) {
    return function () {
      return value;
    };
  }

  module.exports = constant;
},348,[],"node_modules/lodash/constant.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  var nativeNow = Date.now;

  function shortOut(func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;

      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }

      return func.apply(undefined, arguments);
    };
  }

  module.exports = shortOut;
},349,[],"node_modules/lodash/_shortOut.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var eq = _require(_dependencyMap[0], './eq'),
      isArrayLike = _require(_dependencyMap[1], './isArrayLike'),
      isIndex = _require(_dependencyMap[2], './_isIndex'),
      isObject = _require(_dependencyMap[3], './isObject');

  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }

    var type = typeof index === "undefined" ? "undefined" : _typeof(index);

    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
      return eq(object[index], value);
    }

    return false;
  }

  module.exports = isIterateeCall;
},350,[233,302,293,246],"node_modules/lodash/_isIterateeCall.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var baseDifference = _require(_dependencyMap[0], './_baseDifference'),
        baseFlatten = _require(_dependencyMap[1], './_baseFlatten'),
        baseRest = _require(_dependencyMap[2], './_baseRest'),
        isArrayLikeObject = _require(_dependencyMap[3], './isArrayLikeObject');

    var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });
    module.exports = difference;
},351,[352,358,343,360],"node_modules/lodash/difference.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var SetCache = _require(_dependencyMap[0], './_SetCache'),
      arrayIncludes = _require(_dependencyMap[1], './_arrayIncludes'),
      arrayIncludesWith = _require(_dependencyMap[2], './_arrayIncludesWith'),
      arrayMap = _require(_dependencyMap[3], './_arrayMap'),
      baseUnary = _require(_dependencyMap[4], './_baseUnary'),
      cacheHas = _require(_dependencyMap[5], './_cacheHas');

  var LARGE_ARRAY_SIZE = 200;

  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }

    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  module.exports = baseDifference;
},352,[269,353,357,322,297,273],"node_modules/lodash/_baseDifference.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseIndexOf = _require(_dependencyMap[0], './_baseIndexOf');

  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  module.exports = arrayIncludes;
},353,[354],"node_modules/lodash/_arrayIncludes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var baseFindIndex = _require(_dependencyMap[0], './_baseFindIndex'),
        baseIsNaN = _require(_dependencyMap[1], './_baseIsNaN'),
        strictIndexOf = _require(_dependencyMap[2], './_strictIndexOf');

    function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    module.exports = baseIndexOf;
},354,[332,355,356],"node_modules/lodash/_baseIndexOf.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function baseIsNaN(value) {
    return value !== value;
  }

  module.exports = baseIsNaN;
},355,[],"node_modules/lodash/_baseIsNaN.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  module.exports = strictIndexOf;
},356,[],"node_modules/lodash/_strictIndexOf.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  module.exports = arrayIncludesWith;
},357,[],"node_modules/lodash/_arrayIncludesWith.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrayPush = _require(_dependencyMap[0], './_arrayPush'),
      isFlattenable = _require(_dependencyMap[1], './_isFlattenable');

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  module.exports = baseFlatten;
},358,[281,359],"node_modules/lodash/_baseFlatten.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var _Symbol = _require(_dependencyMap[0], './_Symbol'),
        isArguments = _require(_dependencyMap[1], './isArguments'),
        isArray = _require(_dependencyMap[2], './isArray');

    var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

    function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    module.exports = isFlattenable;
},359,[41,289,282],"node_modules/lodash/_isFlattenable.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isArrayLike = _require(_dependencyMap[0], './isArrayLike'),
      isObjectLike = _require(_dependencyMap[1], './isObjectLike');

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  module.exports = isArrayLikeObject;
},360,[302,48],"node_modules/lodash/isArrayLikeObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = bindAutoBindMethods;

  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName,
        _bind = boundMethod.bind;

    boundMethod.bind = function (newThis) {
      var args = Array.prototype.slice.call(arguments, 1);

      if (newThis !== component && newThis !== null) {
        console.warn('bind(): React component methods may only be bound to the ' + 'component instance. See ' + componentName);
      } else if (!args.length) {
        console.warn('bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See ' + componentName);
        return boundMethod;
      }

      var reboundMethod = _bind.apply(boundMethod, arguments);

      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };

    return boundMethod;
  }

  function bindAutoBindMethodsFromMap(component) {
    for (var autoBindKey in component.__reactAutoBindMap) {
      if (!component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        return;
      }

      if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
        continue;
      }

      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  function bindAutoBindMethods(component) {
    if (component.__reactAutoBindPairs) {
      bindAutoBindMethodsFromArray(component);
    } else if (component.__reactAutoBindMap) {
      bindAutoBindMethodsFromMap(component);
    }
  }

  function bindAutoBindMethodsFromArray(component) {
    var pairs = component.__reactAutoBindPairs;

    if (!pairs) {
      return;
    }

    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];

      if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
        continue;
      }

      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }
},361,[],"node_modules/react-proxy/modules/bindAutoBindMethods.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = deleteUnknownAutoBindMethods;

  function shouldDeleteClassicInstanceMethod(component, name) {
    if (component.__reactAutoBindMap && component.__reactAutoBindMap.hasOwnProperty(name)) {
      return false;
    }

    if (component.__reactAutoBindPairs && component.__reactAutoBindPairs.indexOf(name) >= 0) {
      return false;
    }

    if (component[name].__reactBoundArguments !== null) {
      return false;
    }

    return true;
  }

  function shouldDeleteModernInstanceMethod(component, name) {
    var prototype = component.constructor.prototype;
    var prototypeDescriptor = Object.getOwnPropertyDescriptor(prototype, name);

    if (!prototypeDescriptor || !prototypeDescriptor.get) {
      return false;
    }

    if (prototypeDescriptor.get().length !== component[name].length) {
      return false;
    }

    return true;
  }

  function shouldDeleteInstanceMethod(component, name) {
    var descriptor = Object.getOwnPropertyDescriptor(component, name);

    if (typeof descriptor.value !== 'function') {
      return;
    }

    if (component.__reactAutoBindMap || component.__reactAutoBindPairs) {
      return shouldDeleteClassicInstanceMethod(component, name);
    } else {
      return shouldDeleteModernInstanceMethod(component, name);
    }
  }

  function deleteUnknownAutoBindMethods(component) {
    var names = Object.getOwnPropertyNames(component);
    names.forEach(function (name) {
      if (shouldDeleteInstanceMethod(component, name)) {
        delete component[name];
      }
    });
  }
},362,[],"node_modules/react-proxy/modules/deleteUnknownAutoBindMethods.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;
  exports['default'] = getForceUpdate;
  var ReactClassComponent = 2;

  function traverseRenderedChildren(internalInstance, callback, argument) {
    callback(internalInstance, argument);

    if (internalInstance._renderedComponent) {
      traverseRenderedChildren(internalInstance._renderedComponent, callback, argument);
    } else {
      for (var key in internalInstance._renderedChildren) {
        if (internalInstance._renderedChildren.hasOwnProperty(key)) {
          traverseRenderedChildren(internalInstance._renderedChildren[key], callback, argument);
        }
      }
    }
  }

  function setPendingForceUpdate(internalInstance) {
    if (internalInstance._pendingForceUpdate === false) {
      internalInstance._pendingForceUpdate = true;
    }
  }

  function forceUpdateIfPending(internalInstance, React) {
    if (internalInstance._pendingForceUpdate === true) {
      var publicInstance = internalInstance._instance;
      React.Component.prototype.forceUpdate.call(publicInstance);
    }
  }

  function deepForceUpdateStack(instance, React) {
    var internalInstance = instance._reactInternalInstance;
    traverseRenderedChildren(internalInstance, setPendingForceUpdate);
    traverseRenderedChildren(internalInstance, forceUpdateIfPending, React);
  }

  function deepForceUpdate(instance, React) {
    var root = instance._reactInternalFiber || instance._reactInternalInstance;

    if (typeof root.tag !== 'number') {
      return deepForceUpdateStack(instance, React);
    }

    var node = root;

    while (true) {
      if (node.tag === ReactClassComponent) {
        var publicInstance = node.stateNode;
        var updater = publicInstance.updater;

        if (typeof publicInstance.forceUpdate === 'function') {
          publicInstance.forceUpdate();
        } else if (updater && typeof updater.enqueueForceUpdate === 'function') {
          updater.enqueueForceUpdate(publicInstance);
        }
      }

      if (node.child) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }

      if (node === root) {
        return undefined;
      }

      while (!node.sibling) {
        if (!node['return'] || node['return'] === root) {
          return undefined;
        }

        node = node['return'];
      }

      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function getForceUpdate(React) {
    return function (instance) {
      deepForceUpdate(instance, React);
    };
  }

  module.exports = exports['default'];
},363,[],"node_modules/react-deep-force-update/lib/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var win;

    if (typeof window !== "undefined") {
        win = window;
    } else if (typeof global !== "undefined") {
        win = global;
    } else if (typeof self !== "undefined") {
        win = self;
    } else {
        win = {};
    }

    module.exports = win;
},364,[],"node_modules/global/window.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	"use strict";

	var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

	var colors = {
		maroon: '#800000',
		red: '#ff0000',
		orange: '#ffA500',
		yellow: '#ffff00',
		olive: '#808000',
		purple: '#800080',
		fuchsia: "#ff00ff",
		white: '#ffffff',
		lime: '#00ff00',
		green: '#008000',
		navy: '#000080',
		blue: '#0000ff',
		aqua: '#00ffff',
		teal: '#008080',
		black: '#000000',
		silver: '#c0c0c0',
		gray: '#808080'
	};

	var map = function map(array, fn) {
		var results = [];

		for (var i = 0, l = array.length; i < l; i++) {
			results[i] = fn(array[i], i);
		}

		return results;
	};

	var Color = function Color(color, type) {
		if (color.isColor) {
			this.red = color.red;
			this.green = color.green;
			this.blue = color.blue;
			this.alpha = color.alpha;
		} else {
			var namedColor = colors[color];

			if (namedColor) {
				color = namedColor;
				type = 'hex';
			}

			switch (typeof color === "undefined" ? "undefined" : _typeof(color)) {
				case 'string':
					if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';
					break;

				case 'object':
					type = type || 'rgb';
					color = color.toString();
					break;

				case 'number':
					type = 'hex';
					color = color.toString(16);
					break;
			}

			color = Color['parse' + type.toUpperCase()](color);
			this.red = color[0];
			this.green = color[1];
			this.blue = color[2];
			this.alpha = color[3];
		}

		this.isColor = true;
	};

	var limit = function limit(number, min, max) {
		return Math.min(max, Math.max(min, number));
	};

	var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
	var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

	Color.parseRGB = function (color) {
		return map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
			return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
	};

	Color.parseHEX = function (color) {
		if (color.length == 1) color = color + color + color;
		return map(color.match(hexMatch).slice(1), function (bit, i) {
			if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
			return parseInt(bit.length == 1 ? bit + bit : bit, 16);
		});
	};

	Color.parseHSB = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var a = hsb[3];
		var br = Math.round(hsb[2] / 100 * 255);
		if (hsb[1] == 0) return [br, br, br, a];
		var hue = hsb[0];
		var f = hue % 60;
		var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
		var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
		var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

		switch (Math.floor(hue / 60)) {
			case 0:
				return [br, t, p, a];

			case 1:
				return [q, br, p, a];

			case 2:
				return [p, br, t, a];

			case 3:
				return [p, q, br, a];

			case 4:
				return [t, p, br, a];

			default:
				return [br, p, q, a];
		}
	};

	Color.parseHSL = function (color) {
		var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
			if (bit) bit = parseFloat(bit);
			if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
		});
		var h = hsb[0] / 60;
		var s = hsb[1] / 100;
		var l = hsb[2] / 100;
		var a = hsb[3];
		var c = (1 - Math.abs(2 * l - 1)) * s;
		var x = c * (1 - Math.abs(h % 2 - 1));
		var m = l - c / 2;
		var p = Math.round((c + m) * 255);
		var q = Math.round((x + m) * 255);
		var t = Math.round(m * 255);

		switch (Math.floor(h)) {
			case 0:
				return [p, q, t, a];

			case 1:
				return [q, p, t, a];

			case 2:
				return [t, p, q, a];

			case 3:
				return [t, q, p, a];

			case 4:
				return [q, t, p, a];

			default:
				return [p, t, q, a];
		}
	};

	var toString = function toString(type, array) {
		if (array[3] != 1) type += 'a';else array.pop();
		return type + '(' + array.join(', ') + ')';
	};

	Color.prototype = {
		toHSB: function toHSB(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / max : 0,
			    brightness = max / 255;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];
			return array ? hsb : toString('hsb', hsb);
		},
		toHSL: function toHSL(array) {
			var red = this.red,
			    green = this.green,
			    blue = this.blue,
			    alpha = this.alpha;
			var max = Math.max(red, green, blue),
			    min = Math.min(red, green, blue),
			    delta = max - min;
			var hue = 0,
			    saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
			    lightness = (max + min) / 512;

			if (saturation) {
				var rr = (max - red) / delta,
				    gr = (max - green) / delta,
				    br = (max - blue) / delta;
				hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
				if ((hue /= 6) < 0) hue++;
			}

			var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];
			return array ? hsl : toString('hsl', hsl);
		},
		toHEX: function toHEX(array) {
			var a = this.alpha;
			var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;
			var hex = map([this.red, this.green, this.blue], function (bit) {
				bit = bit.toString(16);
				return bit.length == 1 ? '0' + bit : bit;
			});
			return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
		},
		toRGB: function toRGB(array) {
			var rgb = [this.red, this.green, this.blue, this.alpha];
			return array ? rgb : toString('rgb', rgb);
		}
	};
	Color.prototype.toString = Color.prototype.toRGB;

	Color.hex = function (hex) {
		return new Color(hex, 'hex');
	};

	if (undefined.hex == null) undefined.hex = Color.hex;

	Color.hsb = function (h, s, b, a) {
		return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
	};

	if (undefined.hsb == null) undefined.hsb = Color.hsb;

	Color.hsl = function (h, s, l, a) {
		return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
	};

	if (undefined.hsl == null) undefined.hsl = Color.hsl;

	Color.rgb = function (r, g, b, a) {
		return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
	};

	if (undefined.rgb == null) undefined.rgb = Color.rgb;

	Color.detach = function (color) {
		color = new Color(color);
		return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
	};

	module.exports = Color;
},365,[],"node_modules/art/core/color.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Class = _require(_dependencyMap[0], 'art/core/class.js');

  var Path = _require(_dependencyMap[1], 'art/core/path.js');

  var MOVE_TO = 0;
  var CLOSE = 1;
  var LINE_TO = 2;
  var CURVE_TO = 3;
  var ARC = 4;
  var SerializablePath = Class(Path, {
    initialize: function initialize(path) {
      this.reset();

      if (path instanceof SerializablePath) {
        this.path = path.path.slice(0);
      } else if (path) {
        if (path.applyToPath) {
          path.applyToPath(this);
        } else {
          this.push(path);
        }
      }
    },
    onReset: function onReset() {
      this.path = [];
    },
    onMove: function onMove(sx, sy, x, y) {
      this.path.push(MOVE_TO, x, y);
    },
    onLine: function onLine(sx, sy, x, y) {
      this.path.push(LINE_TO, x, y);
    },
    onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
      this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
    },
    _arcToBezier: Path.prototype.onArc,
    onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
      if (rx !== ry || rotation) {
        return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
      }

      this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
    },
    onClose: function onClose() {
      this.path.push(CLOSE);
    },
    toJSON: function toJSON() {
      return this.path;
    }
  });
  module.exports = SerializablePath;
},366,[367,368],"ARTSerializablePath");
__d(function (global, _require, module, exports, _dependencyMap) {
	"use strict";

	module.exports = function (mixins) {
		var proto = {};

		for (var i = 0, l = arguments.length; i < l; i++) {
			var mixin = arguments[i];
			if (typeof mixin == 'function') mixin = mixin.prototype;

			for (var key in mixin) {
				proto[key] = mixin[key];
			}
		}

		if (!proto.initialize) proto.initialize = function () {};

		proto.constructor = function (a, b, c, d, e, f, g, h) {
			return new proto.initialize(a, b, c, d, e, f, g, h);
		};

		proto.constructor.prototype = proto.initialize.prototype = proto;
		return proto.constructor;
	};
},367,[],"node_modules/art/core/class.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	"use strict";

	var Class = _require(_dependencyMap[0], './class');

	module.exports = Class({
		initialize: function initialize(path) {
			this.reset().push(path);
		},
		push: function push() {
			var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
			if (!p) return this;
			var last,
			    cmd = p[0],
			    i = 1;

			while (cmd) {
				switch (cmd) {
					case 'm':
						this.move(p[i++], p[i++]);
						break;

					case 'l':
						this.line(p[i++], p[i++]);
						break;

					case 'c':
						this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 's':
						this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'q':
						this.curve(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 't':
						this.curve(p[i++], p[i++]);
						break;

					case 'a':
						this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'h':
						this.line(p[i++], 0);
						break;

					case 'v':
						this.line(0, p[i++]);
						break;

					case 'M':
						this.moveTo(p[i++], p[i++]);
						break;

					case 'L':
						this.lineTo(p[i++], p[i++]);
						break;

					case 'C':
						this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'S':
						this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);
						break;

					case 'Q':
						this.curveTo(p[i++], p[i++], p[i++], p[i++]);
						break;

					case 'T':
						this.curveTo(p[i++], p[i++]);
						break;

					case 'A':
						this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
						i += 7;
						break;

					case 'H':
						this.lineTo(p[i++], this.penY);
						break;

					case 'V':
						this.lineTo(this.penX, p[i++]);
						break;

					case 'Z':
					case 'z':
						this.close();
						break;

					default:
						cmd = last;
						i--;
						continue;
				}

				last = cmd;
				if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
				cmd = p[i++];
			}

			return this;
		},
		reset: function reset() {
			this.penX = this.penY = 0;
			this.penDownX = this.penDownY = null;
			this._pivotX = this._pivotY = 0;
			this.onReset();
			return this;
		},
		move: function move(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
			return this;
		},
		moveTo: function moveTo(x, y) {
			this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		line: function line(x, y) {
			return this.lineTo(this.penX + +x, this.penY + +y);
		},
		lineTo: function lineTo(x, y) {
			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
			return this;
		},
		curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;
			return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
		},
		curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
			var x = this.penX,
			    y = this.penY;

			if (c2x == null) {
				c2x = +c1x;
				c2y = +c1y;
				c1x = x * 2 - (this._pivotX || 0);
				c1y = y * 2 - (this._pivotY || 0);
			}

			if (ex == null) {
				this._pivotX = +c1x;
				this._pivotY = +c1y;
				ex = +c2x;
				ey = +c2y;
				c2x = (ex + +c1x * 2) / 3;
				c2y = (ey + +c1y * 2) / 3;
				c1x = (x + +c1x * 2) / 3;
				c1y = (y + +c1y * 2) / 3;
			} else {
				this._pivotX = +c2x;
				this._pivotY = +c2y;
			}

			if (this.penDownX == null) {
				this.penDownX = x;
				this.penDownY = y;
			}

			this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
			return this;
		},
		arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
			return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
		},
		arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
			ry = Math.abs(+ry || +rx || +y - this.penY);
			rx = Math.abs(+rx || +x - this.penX);
			if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);
			var tX = this.penX,
			    tY = this.penY,
			    clockwise = !+counterClockwise,
			    large = !!+outer;
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad);
			x -= tX;
			y -= tY;
			var cx = cos * x / 2 + sin * y / 2,
			    cy = -sin * x / 2 + cos * y / 2,
			    rxry = rx * rx * ry * ry,
			    rycx = ry * ry * cx * cx,
			    rxcy = rx * rx * cy * cy,
			    a = rxry - rxcy - rycx;

			if (a < 0) {
				a = Math.sqrt(1 - a / rxry);
				rx *= a;
				ry *= a;
				cx = x / 2;
				cy = y / 2;
			} else {
				a = Math.sqrt(a / (rxcy + rycx));
				if (large == clockwise) a = -a;
				var cxd = -a * cy * rx / ry,
				    cyd = a * cx * ry / rx;
				cx = cos * cxd - sin * cyd + x / 2;
				cy = sin * cxd + cos * cyd + y / 2;
			}

			var xx = cos / rx,
			    yx = sin / rx,
			    xy = -sin / ry,
			    yy = cos / ry;
			var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
			    ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));
			cx += tX;
			cy += tY;
			x += tX;
			y += tY;

			if (this.penDownX == null) {
				this.penDownX = this.penX;
				this.penDownY = this.penY;
			}

			this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
			return this;
		},
		counterArc: function counterArc(x, y, rx, ry, outer) {
			return this.arc(x, y, rx, ry, outer, true);
		},
		counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
			return this.arcTo(x, y, rx, ry, outer, true);
		},
		close: function close() {
			if (this.penDownX != null) {
				this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
				this.penDownX = null;
			}

			return this;
		},
		onReset: function onReset() {},
		onMove: function onMove(sx, sy, ex, ey) {},
		onLine: function onLine(sx, sy, ex, ey) {
			this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
		},
		onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
			var gx = ex - sx,
			    gy = ey - sy,
			    g = gx * gx + gy * gy,
			    v1,
			    v2,
			    cx,
			    cy,
			    u;
			cx = c1x - sx;
			cy = c1y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v1 = cx * cx + cy * cy;
			cx = c2x - sx;
			cy = c2y - sy;
			u = cx * gx + cy * gy;

			if (u > g) {
				cx -= gx;
				cy -= gy;
			} else if (u > 0 && g != 0) {
				cx -= u / g * gx;
				cy -= u / g * gy;
			}

			v2 = cx * cx + cy * cy;

			if (v1 < 0.01 && v2 < 0.01) {
				this.onLine(sx, sy, ex, ey);
				return;
			}

			if (isNaN(v1) || isNaN(v2)) {
				throw new Error('Bad input');
			}

			var s1x = (c1x + c2x) * 0.5,
			    s1y = (c1y + c2y) * 0.5,
			    l1x = (c1x + sx) * 0.5,
			    l1y = (c1y + sy) * 0.5,
			    l2x = (l1x + s1x) * 0.5,
			    l2y = (l1y + s1y) * 0.5,
			    r2x = (ex + c2x) * 0.5,
			    r2y = (ey + c2y) * 0.5,
			    r1x = (r2x + s1x) * 0.5,
			    r1y = (r2y + s1y) * 0.5,
			    l2r1x = (l2x + r1x) * 0.5,
			    l2r1y = (l2y + r1y) * 0.5;
			this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
			this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
		},
		onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
			var rad = rotation ? rotation * Math.PI / 180 : 0,
			    cos = Math.cos(rad),
			    sin = Math.sin(rad),
			    xx = cos * rx,
			    yx = -sin * ry,
			    xy = sin * rx,
			    yy = cos * ry;
			var arc = ea - sa;
			if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;
			var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
			    step = arc / n,
			    k = 4 / 3 * Math.tan(step / 4);
			var x = Math.cos(sa),
			    y = Math.sin(sa);

			for (var i = 0; i < n; i++) {
				var cp1x = x - k * y,
				    cp1y = y + k * x;
				sa += step;
				x = Math.cos(sa);
				y = Math.sin(sa);
				var cp2x = x + k * y,
				    cp2y = y - k * x;
				this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
			}
		},
		onClose: function onClose(sx, sy, ex, ey) {
			this.onLine(sx, sy, ex, ey);
		}
	});
},368,[367],"node_modules/art/core/path.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	"use strict";

	var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

	var Class = _require(_dependencyMap[0], './class');

	function Transform(xx, yx, xy, yy, x, y) {
		if (xx && (typeof xx === "undefined" ? "undefined" : _typeof(xx)) == 'object') {
			yx = xx.yx;
			yy = xx.yy;
			y = xx.y;
			xy = xx.xy;
			x = xx.x;
			xx = xx.xx;
		}

		this.xx = xx == null ? 1 : xx;
		this.yx = yx || 0;
		this.xy = xy || 0;
		this.yy = yy == null ? 1 : yy;
		this.x = (x == null ? this.x : x) || 0;
		this.y = (y == null ? this.y : y) || 0;

		this._transform();

		return this;
	}

	;
	module.exports = Class({
		initialize: Transform,
		_transform: function _transform() {},
		xx: 1,
		yx: 0,
		x: 0,
		xy: 0,
		yy: 1,
		y: 0,
		transform: function transform(xx, yx, xy, yy, x, y) {
			var m = this;

			if (xx && (typeof xx === "undefined" ? "undefined" : _typeof(xx)) == 'object') {
				yx = xx.yx;
				yy = xx.yy;
				y = xx.y;
				xy = xx.xy;
				x = xx.x;
				xx = xx.xx;
			}

			if (!x) x = 0;
			if (!y) y = 0;
			return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
		},
		transformTo: Transform,
		translate: function translate(x, y) {
			return this.transform(1, 0, 0, 1, x, y);
		},
		move: function move(x, y) {
			this.x += x || 0;
			this.y += y || 0;

			this._transform();

			return this;
		},
		scale: function scale(x, y) {
			if (y == null) y = x;
			return this.transform(x, 0, 0, y, 0, 0);
		},
		rotate: function rotate(deg, x, y) {
			if (x == null || y == null) {
				x = (this.left || 0) + (this.width || 0) / 2;
				y = (this.top || 0) + (this.height || 0) / 2;
			}

			var rad = deg * Math.PI / 180,
			    sin = Math.sin(rad),
			    cos = Math.cos(rad);
			this.transform(1, 0, 0, 1, x, y);
			var m = this;
			return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
		},
		moveTo: function moveTo(x, y) {
			var m = this;
			return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
		},
		rotateTo: function rotateTo(deg, x, y) {
			var m = this;
			var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
			if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
			return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
		},
		scaleTo: function scaleTo(x, y) {
			var m = this;
			var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
			m.xx /= h;
			m.yx /= h;
			h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
			m.yy /= h;
			m.xy /= h;
			return this.scale(x, y);
		},
		resizeTo: function resizeTo(width, height) {
			var w = this.width,
			    h = this.height;
			if (!w || !h) return this;
			return this.scaleTo(width / w, height / h);
		},
		inversePoint: function inversePoint(x, y) {
			var a = this.xx,
			    b = this.yx,
			    c = this.xy,
			    d = this.yy,
			    e = this.x,
			    f = this.y;
			var det = b * c - a * d;
			if (det == 0) return null;
			return {
				x: (d * (e - x) + c * (y - f)) / det,
				y: (a * (f - y) + b * (x - e)) / det
			};
		},
		point: function point(x, y) {
			var m = this;
			return {
				x: m.xx * x + m.xy * y + m.x,
				y: m.yx * x + m.yy * y + m.y
			};
		}
	});
},369,[367],"node_modules/art/core/transform.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Button.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Button: {
      displayName: "Button"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Button.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ColorPropType = _require(_dependencyMap[2], 'ColorPropType');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var React = _require(_dependencyMap[4], 'React');

  var PropTypes = _require(_dependencyMap[5], 'prop-types');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var Text = _require(_dependencyMap[7], 'Text');

  var TouchableNativeFeedback = _require(_dependencyMap[8], 'TouchableNativeFeedback');

  var TouchableOpacity = _require(_dependencyMap[9], 'TouchableOpacity');

  var View = _require(_dependencyMap[10], 'View');

  var invariant = _require(_dependencyMap[11], 'fbjs/lib/invariant');

  var Button = _wrapComponent("Button")((_temp = _class = function (_React$Component) {
    _inherits(Button, _React$Component);

    function Button() {
      _classCallCheck(this, Button);

      return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    _createClass(Button, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            accessibilityLabel = _props.accessibilityLabel,
            color = _props.color,
            onPress = _props.onPress,
            title = _props.title,
            hasTVPreferredFocus = _props.hasTVPreferredFocus,
            disabled = _props.disabled,
            testID = _props.testID;
        var buttonStyles = [styles.button];
        var textStyles = [styles.text];

        if (color) {
          if (Platform.OS === 'ios') {
            textStyles.push({
              color: color
            });
          } else {
            buttonStyles.push({
              backgroundColor: color
            });
          }
        }

        var accessibilityTraits = ['button'];

        if (disabled) {
          buttonStyles.push(styles.buttonDisabled);
          textStyles.push(styles.textDisabled);
          accessibilityTraits.push('disabled');
        }

        invariant(typeof title === 'string', 'The title prop of a Button must be a string');
        var formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;
        var Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;
        return React.createElement(
          Touchable,
          {
            accessibilityComponentType: "button",
            accessibilityLabel: accessibilityLabel,
            accessibilityTraits: accessibilityTraits,
            hasTVPreferredFocus: hasTVPreferredFocus,
            testID: testID,
            disabled: disabled,
            onPress: onPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 125
            }
          },
          React.createElement(
            View,
            {
              style: buttonStyles,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 133
              }
            },
            React.createElement(
              Text,
              {
                style: textStyles,
                disabled: disabled,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 134
                }
              },
              formattedTitle
            )
          )
        );
      }
    }]);

    return Button;
  }(React.Component), _class.propTypes = {
    title: PropTypes.string.isRequired,
    accessibilityLabel: PropTypes.string,
    color: ColorPropType,
    disabled: PropTypes.bool,
    hasTVPreferredFocus: PropTypes.bool,
    onPress: PropTypes.func.isRequired,
    testID: PropTypes.string
  }, _temp));

  var styles = StyleSheet.create({
    button: Platform.select({
      ios: {},
      android: {
        elevation: 4,
        backgroundColor: '#2196F3',
        borderRadius: 2
      }
    }),
    text: Platform.select({
      ios: {
        color: '#007AFF',
        textAlign: 'center',
        padding: 8,
        fontSize: 18
      },
      android: {
        color: 'white',
        textAlign: 'center',
        padding: 8,
        fontWeight: '500'
      }
    }),
    buttonDisabled: Platform.select({
      ios: {},
      android: {
        elevation: 0,
        backgroundColor: '#dfdfdf'
      }
    }),
    textDisabled: Platform.select({
      ios: {
        color: '#cdcdcd'
      },
      android: {
        color: '#a1a1a1'
      }
    })
  });
  module.exports = Button;
},370,[13,219,89,75,172,25,211,371,380,384,213,19],"Button");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Text/Text.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var NativeMethodsMixin = _require2(_dependencyMap[0], 'NativeMethodsMixin');

  var React = _require2(_dependencyMap[1], 'React');

  var ReactNativeViewAttributes = _require2(_dependencyMap[2], 'ReactNativeViewAttributes');

  var TextPropTypes = _require2(_dependencyMap[3], 'TextPropTypes');

  var Touchable = _require2(_dependencyMap[4], 'Touchable');

  var UIManager = _require2(_dependencyMap[5], 'UIManager');

  var createReactClass = _require2(_dependencyMap[6], 'create-react-class');

  var createReactNativeComponentClass = _require2(_dependencyMap[7], 'createReactNativeComponentClass');

  var mergeFast = _require2(_dependencyMap[8], 'mergeFast');

  var processColor = _require2(_dependencyMap[9], 'processColor');

  var _require = _require2(_dependencyMap[10], 'ViewContext'),
      ViewContextTypes = _require.ViewContextTypes;

  var viewConfig = {
    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true
    }),
    uiViewClassName: 'RCTText'
  };
  var Text = createReactClass({
    displayName: 'Text',
    propTypes: TextPropTypes,
    getDefaultProps: function getDefaultProps() {
      return {
        accessible: true,
        allowFontScaling: true,
        ellipsizeMode: 'tail'
      };
    },
    getInitialState: function getInitialState() {
      return mergeFast(Touchable.Mixin.touchableGetInitialState(), {
        isHighlighted: false
      });
    },
    mixins: [NativeMethodsMixin],
    viewConfig: viewConfig,
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: ViewContextTypes,
    contextTypes: ViewContextTypes,
    _handlers: null,
    _hasPressHandler: function _hasPressHandler() {
      return !!this.props.onPress || !!this.props.onLongPress;
    },
    touchableHandleActivePressIn: null,
    touchableHandleActivePressOut: null,
    touchableHandlePress: null,
    touchableHandleLongPress: null,
    touchableGetPressRectOffset: null,
    render: function render() {
      var _this = this;

      var newProps = this.props;

      if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {
        if (!this._handlers) {
          this._handlers = {
            onStartShouldSetResponder: function onStartShouldSetResponder() {
              var shouldSetFromProps = _this.props.onStartShouldSetResponder && _this.props.onStartShouldSetResponder();

              var setResponder = shouldSetFromProps || _this._hasPressHandler();

              if (setResponder && !_this.touchableHandleActivePressIn) {
                for (var key in Touchable.Mixin) {
                  if (typeof Touchable.Mixin[key] === 'function') {
                    _this[key] = Touchable.Mixin[key].bind(_this);
                  }
                }

                _this.touchableHandleActivePressIn = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: true
                  });
                };

                _this.touchableHandleActivePressOut = function () {
                  if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                    return;
                  }

                  _this.setState({
                    isHighlighted: false
                  });
                };

                _this.touchableHandlePress = function (e) {
                  _this.props.onPress && _this.props.onPress(e);
                };

                _this.touchableHandleLongPress = function (e) {
                  _this.props.onLongPress && _this.props.onLongPress(e);
                };

                _this.touchableGetPressRectOffset = function () {
                  return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;
                };
              }

              return setResponder;
            },
            onResponderGrant: function (e, dispatchID) {
              this.touchableHandleResponderGrant(e, dispatchID);
              this.props.onResponderGrant && this.props.onResponderGrant.apply(this, arguments);
            }.bind(this),
            onResponderMove: function (e) {
              this.touchableHandleResponderMove(e);
              this.props.onResponderMove && this.props.onResponderMove.apply(this, arguments);
            }.bind(this),
            onResponderRelease: function (e) {
              this.touchableHandleResponderRelease(e);
              this.props.onResponderRelease && this.props.onResponderRelease.apply(this, arguments);
            }.bind(this),
            onResponderTerminate: function (e) {
              this.touchableHandleResponderTerminate(e);
              this.props.onResponderTerminate && this.props.onResponderTerminate.apply(this, arguments);
            }.bind(this),
            onResponderTerminationRequest: function () {
              var allowTermination = this.touchableHandleResponderTerminationRequest();

              if (allowTermination && this.props.onResponderTerminationRequest) {
                allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);
              }

              return allowTermination;
            }.bind(this)
          };
        }

        newProps = _extends({}, this.props, this._handlers, {
          isHighlighted: this.state.isHighlighted
        });
      }

      if (newProps.selectionColor != null) {
        newProps = _extends({}, newProps, {
          selectionColor: processColor(newProps.selectionColor)
        });
      }

      if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {
        newProps = _extends({}, newProps, {
          style: [this.props.style, {
            color: 'magenta'
          }]
        });
      }

      if (this.context.isInAParentText) {
        return React.createElement(RCTVirtualText, _extends({}, newProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 200
          }
        }));
      } else {
        return React.createElement(RCTText, _extends({}, newProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 202
          }
        }));
      }
    }
  });
  var PRESS_RECT_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var RCTText = createReactNativeComponentClass(viewConfig.uiViewClassName, function () {
    return viewConfig;
  });
  var RCTVirtualText = RCTText;

  if (UIManager.RCTVirtualText) {
    RCTVirtualText = createReactNativeComponentClass('RCTVirtualText', function () {
      return {
        validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
          isHighlighted: true
        }),
        uiViewClassName: 'RCTVirtualText'
      };
    });
  }

  module.exports = Text;
},371,[91,172,214,372,373,164,216,199,379,195,215],"Text");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var EdgeInsetsPropType = _require(_dependencyMap[1], 'EdgeInsetsPropType');

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var StyleSheetPropType = _require(_dependencyMap[3], 'StyleSheetPropType');

  var TextStylePropTypes = _require(_dependencyMap[4], 'TextStylePropTypes');

  var stylePropType = StyleSheetPropType(TextStylePropTypes);
  module.exports = {
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
    numberOfLines: PropTypes.number,
    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
    onLayout: PropTypes.func,
    onPress: PropTypes.func,
    onLongPress: PropTypes.func,
    pressRetentionOffset: EdgeInsetsPropType,
    selectable: PropTypes.bool,
    selectionColor: ColorPropType,
    suppressHighlighting: PropTypes.bool,
    style: stylePropType,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    allowFontScaling: PropTypes.bool,
    accessible: PropTypes.bool,
    adjustsFontSizeToFit: PropTypes.bool,
    minimumFontScale: PropTypes.number,
    disabled: PropTypes.bool
  };
},372,[89,174,25,181,194],"TextPropTypes");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Touchable/Touchable.js";

  var BoundingDimensions = _require(_dependencyMap[0], 'BoundingDimensions');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var Position = _require(_dependencyMap[2], 'Position');

  var React = _require(_dependencyMap[3], 'React');

  var ReactNative = _require(_dependencyMap[4], 'ReactNative');

  var TVEventHandler = _require(_dependencyMap[5], 'TVEventHandler');

  var TouchEventUtils = _require(_dependencyMap[6], 'fbjs/lib/TouchEventUtils');

  var UIManager = _require(_dependencyMap[7], 'UIManager');

  var View = _require(_dependencyMap[8], 'View');

  var keyMirror = _require(_dependencyMap[9], 'fbjs/lib/keyMirror');

  var normalizeColor = _require(_dependencyMap[10], 'normalizeColor');

  var States = keyMirror({
    NOT_RESPONDER: null,
    RESPONDER_INACTIVE_PRESS_IN: null,
    RESPONDER_INACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_PRESS_IN: null,
    RESPONDER_ACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_LONG_PRESS_IN: null,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
    ERROR: null
  });
  var IsActive = {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  };
  var IsPressingIn = {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var IsLongPressingIn = {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var Signals = keyMirror({
    DELAY: null,
    RESPONDER_GRANT: null,
    RESPONDER_RELEASE: null,
    RESPONDER_TERMINATED: null,
    ENTER_PRESS_RECT: null,
    LEAVE_PRESS_RECT: null,
    LONG_PRESS_DETECTED: null
  });
  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;
  var TouchableMixin = {
    componentDidMount: function componentDidMount() {
      if (!Platform.isTV) {
        return;
      }

      this._tvEventHandler = new TVEventHandler();

      this._tvEventHandler.enable(this, function (cmp, evt) {
        var myTag = ReactNative.findNodeHandle(cmp);
        evt.dispatchConfig = {};

        if (myTag === evt.tag) {
          if (evt.eventType === 'focus') {
            cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);
          } else if (evt.eventType === 'blur') {
            cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);
          } else if (evt.eventType === 'select') {
            cmp.touchableHandlePress && !cmp.props.disabled && cmp.touchableHandlePress(evt);
          }
        }
      });
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();

        delete this._tvEventHandler;
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    touchableGetInitialState: function touchableGetInitialState() {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
      return !this.props.rejectResponderTermination;
    },
    touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
      return !this.props.disabled;
    },
    touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
      return true;
    },
    touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
      var dispatchID = e.currentTarget;
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;

      this._receiveSignal(Signals.RESPONDER_GRANT, e);

      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;

      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }

      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    touchableHandleResponderMove: function touchableHandleResponderMove(e) {
      if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
        return;
      }

      if (!this.state.touchable.positionOnActivate) {
        return;
      }

      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

      if (hitSlop) {
        pressExpandLeft += hitSlop.left;
        pressExpandTop += hitSlop.top;
        pressExpandRight += hitSlop.right;
        pressExpandBottom += hitSlop.bottom;
      }

      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;

      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);

        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }

      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;

      if (isTouchWithinActive) {
        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);

        var curState = this.state.touchable.touchState;

        if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();

        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
      var tag = this.state.touchable.responderID;

      if (tag == null) {
        return;
      }

      UIManager.measure(tag, this._handleQueryLayout);
    },
    _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }

      this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
    },
    _handleDelay: function _handleDelay(e) {
      this.touchableDelayTimeout = null;

      this._receiveSignal(Signals.DELAY, e);
    },
    _handleLongDelay: function _handleLongDelay(e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;

      if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
      } else {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    _receiveSignal: function _receiveSignal(signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];

      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }

      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
      }

      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
      }

      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);

        this.state.touchable.touchState = nextState;
      }
    },
    _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function _isHighlight(state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    _savePressInLocation: function _savePressInLocation(e) {
      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX: pageX,
        pageY: pageY,
        locationX: locationX,
        locationY: locationY
      };
    },
    _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);

      var newIsHighlight = this._isHighlight(nextState);

      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }

      if (!IsActive[curState] && IsActive[nextState]) {
        this._remeasureMetricsOnActivation();
      }

      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }

      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }

      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;

        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);

            this._endHighlight(e);
          }

          this.touchableHandlePress(e);
        }
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    _startHighlight: function _startHighlight(e) {
      this._savePressInLocation(e);

      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    _endHighlight: function _endHighlight(e) {
      var _this = this;

      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(function () {
            _this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    }
  };
  var Touchable = {
    Mixin: TouchableMixin,
    TOUCH_TARGET_DEBUG: false,
    renderDebugView: function renderDebugView(_ref) {
      var color = _ref.color,
          hitSlop = _ref.hitSlop;

      if (!Touchable.TOUCH_TARGET_DEBUG) {
        return null;
      }

      if (!__DEV__) {
        throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
      }

      var debugHitSlopStyle = {};
      hitSlop = hitSlop || {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };

      for (var key in hitSlop) {
        debugHitSlopStyle[key] = -hitSlop[key];
      }

      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
      return React.createElement(View, {
        pointerEvents: "none",
        style: _extends({
          position: 'absolute',
          borderColor: hexColor.slice(0, -2) + '55',
          borderWidth: 1,
          borderStyle: 'dashed',
          backgroundColor: hexColor.slice(0, -2) + '0F'
        }, debugHitSlopStyle),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 791
        }
      });
    }
  };
  module.exports = Touchable;
},373,[374,75,376,172,92,377,378,164,213,193,90],"Touchable");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _require(_dependencyMap[0], 'PooledClass');

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }

  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };

  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };

  PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);
  module.exports = BoundingDimensions;
},374,[375],"BoundingDimensions");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance = Klass.instancePool.pop();

      Klass.call(_instance, copyFieldsFrom);
      return _instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance2 = Klass.instancePool.pop();

      Klass.call(_instance2, a1, a2);
      return _instance2;
    } else {
      return new Klass(a1, a2);
    }
  };

  var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance3 = Klass.instancePool.pop();

      Klass.call(_instance3, a1, a2, a3);
      return _instance3;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance4 = Klass.instancePool.pop();

      Klass.call(_instance4, a1, a2, a3, a4);
      return _instance4;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };

  var standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();

    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };

  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;

  var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;

    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }

    NewKlass.release = standardReleaser;
    return NewKlass;
  };

  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  module.exports = PooledClass;
},375,[19],"PooledClass");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _require(_dependencyMap[0], 'PooledClass');

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function Position(left, top) {
    this.left = left;
    this.top = top;
  }

  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };

  PooledClass.addPoolingTo(Position, twoArgumentPooler);
  module.exports = Position;
},376,[375],"Position");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _require(_dependencyMap[0], 'Platform');

  var TVNavigationEventEmitter = _require(_dependencyMap[1], 'NativeModules').TVNavigationEventEmitter;

  var NativeEventEmitter = _require(_dependencyMap[2], 'NativeEventEmitter');

  function TVEventHandler() {
    this.__nativeTVNavigationEventListener = null;
    this.__nativeTVNavigationEventEmitter = null;
  }

  TVEventHandler.prototype.enable = function (component, callback) {
    if (Platform.OS === 'ios' && !TVNavigationEventEmitter) {
      return;
    }

    this.__nativeTVNavigationEventEmitter = new NativeEventEmitter(TVNavigationEventEmitter);
    this.__nativeTVNavigationEventListener = this.__nativeTVNavigationEventEmitter.addListener('onHWKeyEvent', function (data) {
      if (callback) {
        callback(component, data);
      }
    });
  };

  TVEventHandler.prototype.disable = function () {
    if (this.__nativeTVNavigationEventListener) {
      this.__nativeTVNavigationEventListener.remove();

      delete this.__nativeTVNavigationEventListener;
    }

    if (this.__nativeTVNavigationEventEmitter) {
      delete this.__nativeTVNavigationEventEmitter;
    }
  };

  module.exports = TVEventHandler;
},377,[75,67,125],"TVEventHandler");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var TouchEventUtils = {
    extractSingleTouch: function extractSingleTouch(nativeEvent) {
      var touches = nativeEvent.touches;
      var changedTouches = nativeEvent.changedTouches;
      var hasTouches = touches && touches.length > 0;
      var hasChangedTouches = changedTouches && changedTouches.length > 0;
      return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
    }
  };
  module.exports = TouchEventUtils;
},378,[],"node_modules/fbjs/lib/TouchEventUtils.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var mergeFast = function mergeFast(one, two) {
    var ret = {};

    for (var keyOne in one) {
      ret[keyOne] = one[keyOne];
    }

    for (var keyTwo in two) {
      ret[keyTwo] = two[keyTwo];
    }

    return ret;
  };

  module.exports = mergeFast;
},379,[],"mergeFast");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var Platform = _require(_dependencyMap[0], 'Platform');

  var React = _require(_dependencyMap[1], 'React');

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var ReactNative = _require(_dependencyMap[3], 'ReactNative');

  var Touchable = _require(_dependencyMap[4], 'Touchable');

  var TouchableWithoutFeedback = _require(_dependencyMap[5], 'TouchableWithoutFeedback');

  var UIManager = _require(_dependencyMap[6], 'UIManager');

  var createReactClass = _require(_dependencyMap[7], 'create-react-class');

  var ensurePositiveDelayProps = _require(_dependencyMap[8], 'ensurePositiveDelayProps');

  var processColor = _require(_dependencyMap[9], 'processColor');

  var rippleBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['RippleAndroid']),
    color: PropTypes.number,
    borderless: PropTypes.bool
  });
  var themeAttributeBackgroundPropType = PropTypes.shape({
    type: PropTypes.oneOf(['ThemeAttrAndroid']),
    attribute: PropTypes.string.isRequired
  });
  var backgroundPropType = PropTypes.oneOfType([rippleBackgroundPropType, themeAttributeBackgroundPropType]);
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableNativeFeedback = createReactClass({
    displayName: 'TouchableNativeFeedback',
    propTypes: _extends({}, TouchableWithoutFeedback.propTypes, {
      background: backgroundPropType,
      hasTVPreferredFocus: PropTypes.bool,
      useForeground: PropTypes.bool
    }),
    statics: {
      SelectableBackground: function SelectableBackground() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackground'
        };
      },
      SelectableBackgroundBorderless: function SelectableBackgroundBorderless() {
        return {
          type: 'ThemeAttrAndroid',
          attribute: 'selectableItemBackgroundBorderless'
        };
      },
      Ripple: function Ripple(color, borderless) {
        return {
          type: 'RippleAndroid',
          color: processColor(color),
          borderless: borderless
        };
      },
      canUseNativeForeground: function canUseNativeForeground() {
        return Platform.OS === 'android' && Platform.Version >= 23;
      }
    },
    mixins: [Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return {
        background: this.SelectableBackground()
      };
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);

      this._dispatchPressedStateChange(true);

      if (this.pressInLocation) {
        this._dispatchHotspotUpdate(this.pressInLocation.locationX, this.pressInLocation.locationY);
      }
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);

      this._dispatchPressedStateChange(false);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _handleResponderMove: function _handleResponderMove(e) {
      this.touchableHandleResponderMove(e);

      this._dispatchHotspotUpdate(e.nativeEvent.locationX, e.nativeEvent.locationY);
    },
    _dispatchHotspotUpdate: function _dispatchHotspotUpdate(destX, destY) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.hotspotUpdate, [destX || 0, destY || 0]);
    },
    _dispatchPressedStateChange: function _dispatchPressedStateChange(pressed) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.setPressed, [pressed]);
    },
    render: function render() {
      var _extends2;

      var child = React.Children.only(this.props.children);
      var children = child.props.children;

      if (Touchable.TOUCH_TARGET_DEBUG && child.type.displayName === 'View') {
        if (!Array.isArray(children)) {
          children = [children];
        }

        children.push(Touchable.renderDebugView({
          color: 'brown',
          hitSlop: this.props.hitSlop
        }));
      }

      if (this.props.useForeground && !TouchableNativeFeedback.canUseNativeForeground()) {
        console.warn('Requested foreground ripple, but it is not available on this version of Android. ' + 'Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different ' + 'Touchable if the result is false.');
      }

      var drawableProp = this.props.useForeground && TouchableNativeFeedback.canUseNativeForeground() ? 'nativeForegroundAndroid' : 'nativeBackgroundAndroid';

      var childProps = _extends({}, child.props, (_extends2 = {}, _defineProperty(_extends2, drawableProp, this.props.background), _defineProperty(_extends2, "accessible", this.props.accessible !== false), _defineProperty(_extends2, "accessibilityLabel", this.props.accessibilityLabel), _defineProperty(_extends2, "accessibilityComponentType", this.props.accessibilityComponentType), _defineProperty(_extends2, "accessibilityTraits", this.props.accessibilityTraits), _defineProperty(_extends2, "children", children), _defineProperty(_extends2, "testID", this.props.testID), _defineProperty(_extends2, "onLayout", this.props.onLayout), _defineProperty(_extends2, "hitSlop", this.props.hitSlop), _defineProperty(_extends2, "isTVSelectable", true), _defineProperty(_extends2, "hasTVPreferredFocus", this.props.hasTVPreferredFocus), _defineProperty(_extends2, "onStartShouldSetResponder", this.touchableHandleStartShouldSetResponder), _defineProperty(_extends2, "onResponderTerminationRequest", this.touchableHandleResponderTerminationRequest), _defineProperty(_extends2, "onResponderGrant", this.touchableHandleResponderGrant), _defineProperty(_extends2, "onResponderMove", this._handleResponderMove), _defineProperty(_extends2, "onResponderRelease", this.touchableHandleResponderRelease), _defineProperty(_extends2, "onResponderTerminate", this.touchableHandleResponderTerminate), _extends2));

      return React.cloneElement(child, childProps);
    }
  });
  module.exports = TouchableNativeFeedback;
},380,[75,172,25,92,373,381,164,216,383,195],"TouchableNativeFeedback");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = _require2(_dependencyMap[0], 'EdgeInsetsPropType');

  var React = _require2(_dependencyMap[1], 'React');

  var PropTypes = _require2(_dependencyMap[2], 'prop-types');

  var TimerMixin = _require2(_dependencyMap[3], 'react-timer-mixin');

  var Touchable = _require2(_dependencyMap[4], 'Touchable');

  var createReactClass = _require2(_dependencyMap[5], 'create-react-class');

  var ensurePositiveDelayProps = _require2(_dependencyMap[6], 'ensurePositiveDelayProps');

  var warning = _require2(_dependencyMap[7], 'fbjs/lib/warning');

  var _require = _require2(_dependencyMap[8], 'ViewAccessibility'),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits;

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableWithoutFeedback = createReactClass({
    displayName: 'TouchableWithoutFeedback',
    mixins: [TimerMixin, Touchable.Mixin],
    propTypes: {
      accessible: PropTypes.bool,
      accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
      accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
      disabled: PropTypes.bool,
      onPress: PropTypes.func,
      onPressIn: PropTypes.func,
      onPressOut: PropTypes.func,
      onLayout: PropTypes.func,
      onLongPress: PropTypes.func,
      delayPressIn: PropTypes.number,
      delayPressOut: PropTypes.number,
      delayLongPress: PropTypes.number,
      pressRetentionOffset: EdgeInsetsPropType,
      hitSlop: EdgeInsetsPropType
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut || 0;
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      var children = child.props.children;
      warning(!child.type || child.type.displayName !== 'Text', 'TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See ' + (child._owner && child._owner.getName && child._owner.getName() || '<unknown>'));

      if (Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'View') {
        children = React.Children.toArray(children);
        children.push(Touchable.renderDebugView({
          color: 'red',
          hitSlop: this.props.hitSlop
        }));
      }

      var style = Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'Text' ? [child.props.style, {
        color: 'red'
      }] : child.props.style;
      return React.cloneElement(child, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        style: style,
        children: children
      });
    }
  });
  module.exports = TouchableWithoutFeedback;
},381,[174,172,25,382,373,216,383,20,187],"TouchableWithoutFeedback");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var GLOBAL = typeof window === 'undefined' ? global : window;

  var setter = function setter(_setter, _clearer, array) {
    return function (callback, delta) {
      var id = _setter(function () {
        _clearer.call(this, id);

        callback.apply(this, arguments);
      }.bind(this), delta);

      if (!this[array]) {
        this[array] = [id];
      } else {
        this[array].push(id);
      }

      return id;
    };
  };

  var clearer = function clearer(_clearer, array) {
    return function (id) {
      if (this[array]) {
        var index = this[array].indexOf(id);

        if (index !== -1) {
          this[array].splice(index, 1);
        }
      }

      _clearer(id);
    };
  };

  var _timeouts = 'TimerMixin_timeouts';

  var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);

  var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

  var _intervals = 'TimerMixin_intervals';

  var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);

  var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

  var _immediates = 'TimerMixin_immediates';

  var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);

  var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

  var _rafs = 'TimerMixin_rafs';

  var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);

  var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

  var TimerMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this[_timeouts] && this[_timeouts].forEach(function (id) {
        GLOBAL.clearTimeout(id);
      });
      this[_timeouts] = null;
      this[_intervals] && this[_intervals].forEach(function (id) {
        GLOBAL.clearInterval(id);
      });
      this[_intervals] = null;
      this[_immediates] && this[_immediates].forEach(function (id) {
        GLOBAL.clearImmediate(id);
      });
      this[_immediates] = null;
      this[_rafs] && this[_rafs].forEach(function (id) {
        GLOBAL.cancelAnimationFrame(id);
      });
      this[_rafs] = null;
    },
    setTimeout: _setTimeout,
    clearTimeout: _clearTimeout,
    setInterval: _setInterval,
    clearInterval: _clearInterval,
    setImmediate: _setImmediate,
    clearImmediate: _clearImmediate,
    requestAnimationFrame: _requestAnimationFrame,
    cancelAnimationFrame: _cancelAnimationFrame
  };
  module.exports = TimerMixin;
},382,[],"node_modules/react-timer-mixin/TimerMixin.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
    invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
  };

  module.exports = ensurePositiveDelayProps;
},383,[19],"ensurePositiveDelayProps");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var Animated = _require(_dependencyMap[0], 'Animated');

  var Easing = _require(_dependencyMap[1], 'Easing');

  var NativeMethodsMixin = _require(_dependencyMap[2], 'NativeMethodsMixin');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var TimerMixin = _require(_dependencyMap[5], 'react-timer-mixin');

  var Touchable = _require(_dependencyMap[6], 'Touchable');

  var TouchableWithoutFeedback = _require(_dependencyMap[7], 'TouchableWithoutFeedback');

  var createReactClass = _require(_dependencyMap[8], 'create-react-class');

  var ensurePositiveDelayProps = _require(_dependencyMap[9], 'ensurePositiveDelayProps');

  var flattenStyle = _require(_dependencyMap[10], 'flattenStyle');

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableOpacity = createReactClass({
    displayName: 'TouchableOpacity',
    mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],
    propTypes: _extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        activeOpacity: 0.2
      };
    },
    getInitialState: function getInitialState() {
      return _extends({}, this.touchableGetInitialState(), {
        anim: new Animated.Value(this._getChildStyleOpacityWithDefault())
      });
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
      if (this.props.disabled !== prevProps.disabled) {
        this._opacityInactive(250);
      }
    },
    setOpacityTo: function setOpacityTo(value, duration) {
      Animated.timing(this.state.anim, {
        toValue: value,
        duration: duration,
        easing: Easing.inOut(Easing.quad),
        useNativeDriver: true
      }).start();
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      if (e.dispatchConfig.registrationName === 'onResponderGrant') {
        this._opacityActive(0);
      } else {
        this._opacityActive(150);
      }

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this._opacityInactive(250);

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _opacityActive: function _opacityActive(duration) {
      this.setOpacityTo(this.props.activeOpacity, duration);
    },
    _opacityInactive: function _opacityInactive(duration) {
      this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
    },
    _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
      var childStyle = flattenStyle(this.props.style) || {};
      return childStyle.opacity == undefined ? 1 : childStyle.opacity;
    },
    render: function render() {
      return React.createElement(
        Animated.View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: [this.props.style, {
            opacity: this.state.anim
          }],
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          isTVSelectable: true,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hitSlop: this.props.hitSlop,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 247
          }
        },
        this.props.children,
        Touchable.renderDebugView({
          color: 'cyan',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableOpacity;
},384,[385,410,91,172,25,382,373,381,216,383,159],"TouchableOpacity");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var AnimatedImplementation = _require(_dependencyMap[0], 'AnimatedImplementation');

  var Image = _require(_dependencyMap[1], 'Image');

  var ScrollView = _require(_dependencyMap[2], 'ScrollView');

  var Text = _require(_dependencyMap[3], 'Text');

  var View = _require(_dependencyMap[4], 'View');

  var Animated = {
    View: AnimatedImplementation.createAnimatedComponent(View),
    Text: AnimatedImplementation.createAnimatedComponent(Text),
    Image: AnimatedImplementation.createAnimatedComponent(Image),
    ScrollView: AnimatedImplementation.createAnimatedComponent(ScrollView)
  };

  _extends(Animated, AnimatedImplementation);

  module.exports = Animated;
},385,[386,413,414,371,213],"Animated");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _require = _require2(_dependencyMap[0], './AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

  var AnimatedAddition = _require2(_dependencyMap[1], './nodes/AnimatedAddition');

  var AnimatedDiffClamp = _require2(_dependencyMap[2], './nodes/AnimatedDiffClamp');

  var AnimatedDivision = _require2(_dependencyMap[3], './nodes/AnimatedDivision');

  var AnimatedInterpolation = _require2(_dependencyMap[4], './nodes/AnimatedInterpolation');

  var AnimatedModulo = _require2(_dependencyMap[5], './nodes/AnimatedModulo');

  var AnimatedMultiplication = _require2(_dependencyMap[6], './nodes/AnimatedMultiplication');

  var AnimatedNode = _require2(_dependencyMap[7], './nodes/AnimatedNode');

  var AnimatedProps = _require2(_dependencyMap[8], './nodes/AnimatedProps');

  var AnimatedTracking = _require2(_dependencyMap[9], './nodes/AnimatedTracking');

  var AnimatedValue = _require2(_dependencyMap[10], './nodes/AnimatedValue');

  var AnimatedValueXY = _require2(_dependencyMap[11], './nodes/AnimatedValueXY');

  var DecayAnimation = _require2(_dependencyMap[12], './animations/DecayAnimation');

  var SpringAnimation = _require2(_dependencyMap[13], './animations/SpringAnimation');

  var TimingAnimation = _require2(_dependencyMap[14], './animations/TimingAnimation');

  var createAnimatedComponent = _require2(_dependencyMap[15], './createAnimatedComponent');

  var add = function add(a, b) {
    return new AnimatedAddition(a, b);
  };

  var divide = function divide(a, b) {
    return new AnimatedDivision(a, b);
  };

  var multiply = function multiply(a, b) {
    return new AnimatedMultiplication(a, b);
  };

  var modulo = function modulo(a, modulus) {
    return new AnimatedModulo(a, modulus);
  };

  var diffClamp = function diffClamp(a, min, max) {
    return new AnimatedDiffClamp(a, min, max);
  };

  var _combineCallbacks = function _combineCallbacks(callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete.apply(config, arguments);
        callback && callback.apply(undefined, arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };

  var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
    if (value instanceof AnimatedValueXY) {
      var configX = _extends({}, config);

      var configY = _extends({}, config);

      for (var key in config) {
        var _config$key = config[key],
            x = _config$key.x,
            y = _config$key.y;

        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }

      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      return parallel([aX, aY], {
        stopTogether: false
      });
    }

    return null;
  };

  var spring = function spring(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new SpringAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, spring) || {
      start: function (_start) {
        function start(_x) {
          return _start.apply(this, arguments);
        }

        start.toString = function () {
          return _start.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _extends({}, config, {
          iterations: iterations
        });

        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var timing = function timing(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new TimingAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, timing) || {
      start: function (_start2) {
        function start(_x2) {
          return _start2.apply(this, arguments);
        }

        start.toString = function () {
          return _start2.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _extends({}, config, {
          iterations: iterations
        });

        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var decay = function decay(value, config) {
    var start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new DecayAnimation(singleConfig), callback);
    };

    return maybeVectorAnim(value, config, decay) || {
      start: function (_start3) {
        function start(_x3) {
          return _start3.apply(this, arguments);
        }

        start.toString = function () {
          return _start3.toString();
        };

        return start;
      }(function (callback) {
        start(value, config, callback);
      }),
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _extends({}, config, {
          iterations: iterations
        });

        start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var sequence = function sequence(animations) {
    var current = 0;
    return {
      start: function start(callback) {
        var onComplete = function onComplete(result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }

          current++;

          if (current === animations.length) {
            callback && callback(result);
            return;
          }

          animations[current].start(onComplete);
        };

        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete);
        }
      },
      stop: function stop() {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
  };

  var parallel = function parallel(animations, config) {
    var doneCount = 0;
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function start(callback) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }

        animations.forEach(function (animation, idx) {
          var cb = function cb(endResult) {
            hasEnded[idx] = true;
            doneCount++;

            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }

            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };

          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb);
          }
        });
      },
      stop: function stop() {
        animations.forEach(function (animation, idx) {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
    return result;
  };

  var delay = function delay(time) {
    return timing(new AnimatedValue(0), {
      toValue: 0,
      delay: time,
      duration: 0
    });
  };

  var stagger = function stagger(time, animations) {
    return parallel(animations.map(function (animation, i) {
      return sequence([delay(time * i), animation]);
    }));
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function start(callback) {
        var restart = function restart() {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };

          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            animation.reset();
            animation.start(restart);
          }
        };

        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart();
          }
        }
      },
      stop: function stop() {
        isFinished = true;
        animation.stop();
      },
      reset: function reset() {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return animation._isUsingNativeDriver();
      }
    };
  };

  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof AnimatedEvent) {
      event.__addListener(listener);

      return event;
    } else {
      return function () {
        typeof event === 'function' && event.apply(undefined, arguments);
        listener.apply(undefined, arguments);
      };
    }
  }

  function unforkEvent(event, listener) {
    if (event && event instanceof AnimatedEvent) {
      event.__removeListener(listener);
    }
  }

  var event = function event(argMapping, config) {
    var animatedEvent = new AnimatedEvent(argMapping, config);

    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };

  module.exports = {
    Value: AnimatedValue,
    ValueXY: AnimatedValueXY,
    Interpolation: AnimatedInterpolation,
    Node: AnimatedNode,
    decay: decay,
    timing: timing,
    spring: spring,
    add: add,
    divide: divide,
    multiply: multiply,
    modulo: modulo,
    diffClamp: diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: createAnimatedComponent,
    attachNativeEvent: attachNativeEvent,
    forkEvent: forkEvent,
    unforkEvent: unforkEvent,
    __PropsOnlyForTests: AnimatedProps
  };
},386,[387,395,396,397,389,398,399,390,400,403,388,404,405,407,409,412],"AnimatedImplementation");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var AnimatedValue = _require2(_dependencyMap[0], './nodes/AnimatedValue');

  var NativeAnimatedHelper = _require2(_dependencyMap[1], './NativeAnimatedHelper');

  var ReactNative = _require2(_dependencyMap[2], 'ReactNative');

  var invariant = _require2(_dependencyMap[3], 'fbjs/lib/invariant');

  var _require = _require2(_dependencyMap[1], './NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function attachNativeEvent(viewRef, eventName, argMapping) {
    var eventMappings = [];

    var traverse = function traverse(value, path) {
      if (value instanceof AnimatedValue) {
        value.__makeNative();

        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };

    invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = ReactNative.findNodeHandle(viewRef);
    eventMappings.forEach(function (mapping) {
      NativeAnimatedHelper.API.addAnimatedEventToView(viewTag, eventName, mapping);
    });
    return {
      detach: function detach() {
        eventMappings.forEach(function (mapping) {
          NativeAnimatedHelper.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
        });
      }
    };
  }

  var AnimatedEvent = function () {
    function AnimatedEvent(argMapping) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AnimatedEvent);

      this._listeners = [];
      this._argMapping = argMapping;

      if (config.listener) {
        this.__addListener(config.listener);
      }

      this._callListeners = this._callListeners.bind(this);
      this._attachedEvent = null;
      this.__isNative = shouldUseNativeDriver(config);

      if (__DEV__) {
        this._validateMapping();
      }
    }

    _createClass(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(function (listener) {
          return listener !== callback;
        });
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this = this;

        if (this.__isNative) {
          return this._callListeners;
        }

        return function () {
          for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var traverse = function traverse(recMapping, recEvt, key) {
            if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
              recMapping.setValue(recEvt);
            } else if ((typeof recMapping === "undefined" ? "undefined" : _typeof(recMapping)) === 'object') {
              for (var mappingKey in recMapping) {
                traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
              }
            }
          };

          if (!_this.__isNative) {
            _this._argMapping.forEach(function (mapping, idx) {
              traverse(mapping, args[idx], 'arg' + idx);
            });
          }

          _this._callListeners.apply(_this, _toConsumableArray(args));
        };
      }
    }, {
      key: "_callListeners",
      value: function _callListeners() {
        for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._listeners.forEach(function (listener) {
          return listener.apply(undefined, args);
        });
      }
    }, {
      key: "_validateMapping",
      value: function _validateMapping() {
        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number') {
            invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + (typeof recMapping === "undefined" ? "undefined" : _typeof(recMapping)) + ' for key ' + key + ', event value must map to AnimatedValue');
            return;
          }

          invariant((typeof recMapping === "undefined" ? "undefined" : _typeof(recMapping)) === 'object', 'Bad mapping of type ' + (typeof recMapping === "undefined" ? "undefined" : _typeof(recMapping)) + ' for key ' + key);
          invariant((typeof recEvt === "undefined" ? "undefined" : _typeof(recEvt)) === 'object', 'Bad event of type ' + (typeof recEvt === "undefined" ? "undefined" : _typeof(recEvt)) + ' for key ' + key);

          for (var mappingKey in recMapping) {
            traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
          }
        };
      }
    }]);

    return AnimatedEvent;
  }();

  module.exports = {
    AnimatedEvent: AnimatedEvent,
    attachNativeEvent: attachNativeEvent
  };
},387,[388,391,92,19],"AnimatedEvent");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var InteractionManager = _require(_dependencyMap[3], 'InteractionManager');

  var NativeAnimatedHelper = _require(_dependencyMap[4], '../NativeAnimatedHelper');

  var NativeAnimatedAPI = NativeAnimatedHelper.API;
  var _uniqueId = 1;

  function _flush(rootNode) {
    var animatedStyles = new Set();

    function findAnimatedStyles(node) {
      if (typeof node.update === 'function') {
        animatedStyles.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }

    findAnimatedStyles(rootNode);
    animatedStyles.forEach(function (animatedStyle) {
      return animatedStyle.update();
    });
  }

  var AnimatedValue = function (_AnimatedWithChildren) {
    _inherits(AnimatedValue, _AnimatedWithChildren);

    function AnimatedValue(value) {
      _classCallCheck(this, AnimatedValue);

      var _this = _possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this));

      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      _this._listeners = {};
      return _this;
    }

    _createClass(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        this.stopAnimation();

        _get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        _get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__makeNative", this).call(this);

        if (Object.keys(this._listeners).length) {
          this._startListeningToNativeValueUpdates();
        }
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (this._animation) {
          this._animation.stop();

          this._animation = null;
        }

        this._updateValue(value, !this.__isNative);

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
        }
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        this._listeners[id] = callback;

        if (this.__isNative) {
          this._startListeningToNativeValueUpdates();
        }

        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        delete this._listeners[id];

        if (this.__isNative && Object.keys(this._listeners).length === 0) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listeners = {};

        if (this.__isNative) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "_startListeningToNativeValueUpdates",
      value: function _startListeningToNativeValueUpdates() {
        var _this2 = this;

        if (this.__nativeAnimatedValueListener) {
          return;
        }

        NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
        this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
          if (data.tag !== _this2.__getNativeTag()) {
            return;
          }

          _this2._updateValue(data.value, false);
        });
      }
    }, {
      key: "_stopListeningForNativeValueUpdates",
      value: function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
          return;
        }

        this.__nativeAnimatedValueListener.remove();

        this.__nativeAnimatedValueListener = null;
        NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        callback && callback(this.__getValue());
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var _this3 = this;

        var handle = null;

        if (animation.__isInteraction) {
          handle = InteractionManager.createInteractionHandle();
        }

        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, function (value) {
          _this3._updateValue(value, true);
        }, function (result) {
          _this3._animation = null;

          if (handle !== null) {
            InteractionManager.clearInteractionHandle(handle);
          }

          callback && callback(result);
        }, previousAnimation, this);
      }
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        this._value = value;

        if (flush) {
          _flush(this);
        }

        for (var _key in this._listeners) {
          this._listeners[_key]({
            value: this.__getValue()
          });
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset
        };
      }
    }]);

    return AnimatedValue;
  }(AnimatedWithChildren);

  module.exports = AnimatedValue;
},388,[389,390,392,393,391],"AnimatedValue");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[1], './AnimatedWithChildren');

  var NativeAnimatedHelper = _require(_dependencyMap[2], '../NativeAnimatedHelper');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var normalizeColor = _require(_dependencyMap[4], 'normalizeColor');

  var linear = function linear(t) {
    return t;
  };

  function createInterpolation(config) {
    if (config.outputRange && typeof config.outputRange[0] === 'string') {
      return createInterpolationFromStringOutputRange(config);
    }

    var outputRange = config.outputRange;
    checkInfiniteRange('outputRange', outputRange);
    var inputRange = config.inputRange;
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);
    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
    var easing = config.easing || linear;
    var extrapolateLeft = 'extend';

    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }

    var extrapolateRight = 'extend';

    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }

    return function (input) {
      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');
      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }

  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;

    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {}
    }

    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {}
    }

    if (outputMin === outputMax) {
      return outputMin;
    }

    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }

      return outputMax;
    }

    if (inputMin === -Infinity) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }

    result = easing(result);

    if (outputMin === -Infinity) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }

    return result;
  }

  function colorToRgba(input) {
    var int32Color = normalizeColor(input);

    if (int32Color === null) {
      return input;
    }

    int32Color = int32Color || 0;
    var r = (int32Color & 0xff000000) >>> 24;
    var g = (int32Color & 0x00ff0000) >>> 16;
    var b = (int32Color & 0x0000ff00) >>> 8;
    var a = (int32Color & 0x000000ff) / 255;
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
  }

  var stringShapeRegex = /[0-9\.-]+/g;

  function createInterpolationFromStringOutputRange(config) {
    var outputRange = config.outputRange;
    invariant(outputRange.length >= 2, 'Bad output range');
    outputRange = outputRange.map(colorToRgba);
    checkPattern(outputRange);
    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
      return [];
    });
    outputRange.forEach(function (value) {
      value.match(stringShapeRegex).forEach(function (number, i) {
        outputRanges[i].push(+number);
      });
    });
    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
      return createInterpolation(_extends({}, config, {
        outputRange: outputRanges[i]
      }));
    });
    var shouldRound = isRgbOrRgba(outputRange[0]);
    return function (input) {
      var i = 0;
      return outputRange[0].replace(stringShapeRegex, function () {
        var val = +interpolations[i++](input);
        var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
        return String(rounded);
      });
    };
  }

  function isRgbOrRgba(range) {
    return typeof range === 'string' && range.startsWith('rgb');
  }

  function checkPattern(arr) {
    var pattern = arr[0].replace(stringShapeRegex, '');

    for (var i = 1; i < arr.length; ++i) {
      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
    }
  }

  function findRange(input, inputRange) {
    var i = void 0;

    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }

    return i - 1;
  }

  function checkValidInputRange(arr) {
    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');

    for (var i = 1; i < arr.length; ++i) {
      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);
    }
  }

  function checkInfiniteRange(name, arr) {
    invariant(arr.length >= 2, name + ' must have at least 2 elements');
    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
  }

  var AnimatedInterpolation = function (_AnimatedWithChildren) {
    _inherits(AnimatedInterpolation, _AnimatedWithChildren);

    function AnimatedInterpolation(parent, config) {
      _classCallCheck(this, AnimatedInterpolation);

      var _this = _possibleConstructorReturn(this, (AnimatedInterpolation.__proto__ || Object.getPrototypeOf(AnimatedInterpolation)).call(this));

      _this._parent = parent;
      _this._config = config;
      _this._interpolation = createInterpolation(config);
      return _this;
    }

    _createClass(AnimatedInterpolation, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._parent.__makeNative();

        _get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();

        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._interpolation(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        _get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__transformDataType",
      value: function __transformDataType(range) {
        return range.map(function (value) {
          if (typeof value !== 'string') {
            return value;
          }

          if (/deg$/.test(value)) {
            var degrees = parseFloat(value) || 0;
            var radians = degrees * Math.PI / 180.0;
            return radians;
          } else {
            return parseFloat(value) || 0;
          }
        });
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        if (__DEV__) {
          NativeAnimatedHelper.validateInterpolation(this._config);
        }

        return {
          inputRange: this._config.inputRange,
          outputRange: this.__transformDataType(this._config.outputRange),
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation'
        };
      }
    }]);

    return AnimatedInterpolation;
  }(AnimatedWithChildren);

  AnimatedInterpolation.__createInterpolation = createInterpolation;
  module.exports = AnimatedInterpolation;
},389,[390,392,391,19,90],"AnimatedInterpolation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var NativeAnimatedHelper = _require(_dependencyMap[0], '../NativeAnimatedHelper');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var AnimatedNode = function () {
    function AnimatedNode() {
      _classCallCheck(this, AnimatedNode);
    }

    _createClass(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this.__nativeTag != null) {
          NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);
          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          throw new Error('This node cannot be made a "native" animated node');
        }
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        NativeAnimatedHelper.assertNativeAnimatedModule();
        invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');

        if (this.__nativeTag == null) {
          var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
          NativeAnimatedHelper.API.createAnimatedNode(nativeTag, this.__getNativeConfig());
          this.__nativeTag = nativeTag;
        }

        return this.__nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }]);

    return AnimatedNode;
  }();

  module.exports = AnimatedNode;
},390,[391,19],"AnimatedNode");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedModule = _require(_dependencyMap[0], 'NativeModules').NativeAnimatedModule;

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var __nativeAnimatedNodeTagCount = 1;
  var __nativeAnimationIdCount = 1;
  var nativeEventEmitter = void 0;
  var API = {
    createAnimatedNode: function createAnimatedNode(tag, config) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.createAnimatedNode(tag, config);
    },
    startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation: function stopAnimation(animationId) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopAnimation(animationId);
    },
    setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    dropAnimatedNode: function dropAnimatedNode(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.dropAnimatedNode(tag);
    },
    addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
  };
  var STYLES_WHITELIST = {
    opacity: true,
    transform: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var TRANSFORM_WHITELIST = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    perspective: true
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };

  function addWhitelistedStyleProp(prop) {
    STYLES_WHITELIST[prop] = true;
  }

  function addWhitelistedTransformProp(prop) {
    TRANSFORM_WHITELIST[prop] = true;
  }

  function addWhitelistedInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }

  function validateTransform(configs) {
    configs.forEach(function (config) {
      if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
        throw new Error("Property '" + config.property + "' is not supported by native animated module");
      }
    });
  }

  function validateStyles(styles) {
    for (var key in styles) {
      if (!STYLES_WHITELIST.hasOwnProperty(key)) {
        throw new Error("Style property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function validateInterpolation(config) {
    for (var key in config) {
      if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
        throw new Error("Interpolation property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }

  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }

  function assertNativeAnimatedModule() {
    invariant(NativeAnimatedModule, 'Native animated module is not available');
  }

  var _warnedMissingNativeAnimated = false;

  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver && !NativeAnimatedModule) {
      if (!_warnedMissingNativeAnimated) {
        console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');
        _warnedMissingNativeAnimated = true;
      }

      return false;
    }

    return config.useNativeDriver || false;
  }

  module.exports = {
    API: API,
    addWhitelistedStyleProp: addWhitelistedStyleProp,
    addWhitelistedTransformProp: addWhitelistedTransformProp,
    addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
    validateStyles: validateStyles,
    validateTransform: validateTransform,
    validateInterpolation: validateInterpolation,
    generateNewNodeTag: generateNewNodeTag,
    generateNewAnimationId: generateNewAnimationId,
    assertNativeAnimatedModule: assertNativeAnimatedModule,
    shouldUseNativeDriver: shouldUseNativeDriver,

    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
      }

      return nativeEventEmitter;
    }

  };
},391,[67,125,19],"NativeAnimatedHelper");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var NativeAnimatedHelper = _require(_dependencyMap[1], '../NativeAnimatedHelper');

  var AnimatedWithChildren = function (_AnimatedNode) {
    _inherits(AnimatedWithChildren, _AnimatedNode);

    function AnimatedWithChildren() {
      _classCallCheck(this, AnimatedWithChildren);

      var _this = _possibleConstructorReturn(this, (AnimatedWithChildren.__proto__ || Object.getPrototypeOf(AnimatedWithChildren)).call(this));

      _this._children = [];
      return _this;
    }

    _createClass(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var child = _ref;

            child.__makeNative();

            NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
          }
        }
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }

        this._children.push(child);

        if (this.__isNative) {
          child.__makeNative();

          NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);

        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }

        if (this.__isNative && child.__isNative) {
          NativeAnimatedHelper.API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }

        this._children.splice(index, 1);

        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }]);

    return AnimatedWithChildren;
  }(AnimatedNode);

  module.exports = AnimatedWithChildren;
},392,[390,391],"AnimatedWithChildren");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var EventEmitter = _require(_dependencyMap[1], 'EventEmitter');

  var Set = _require(_dependencyMap[2], 'Set');

  var TaskQueue = _require(_dependencyMap[3], 'TaskQueue');

  var infoLog = _require(_dependencyMap[4], 'infoLog');

  var invariant = _require(_dependencyMap[5], 'fbjs/lib/invariant');

  var keyMirror = _require(_dependencyMap[6], 'fbjs/lib/keyMirror');

  var _emitter = new EventEmitter();

  var DEBUG_DELAY = 0;
  var DEBUG = false;
  var InteractionManager = {
    Events: keyMirror({
      interactionStart: true,
      interactionComplete: true
    }),
    runAfterInteractions: function runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(function (resolve) {
        _scheduleUpdate();

        if (task) {
          tasks.push(task);
        }

        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });

        _taskQueue.enqueueTasks(tasks);
      });
      return {
        then: promise.then.bind(promise),
        done: function done() {
          if (promise.done) {
            return promise.done.apply(promise, arguments);
          } else {
            console.warn('Tried to call done when not supported by current Promise implementation.');
          }
        },
        cancel: function cancel() {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    createInteractionHandle: function createInteractionHandle() {
      DEBUG && infoLog('create interaction handle');

      _scheduleUpdate();

      var handle = ++_inc;

      _addInteractionSet.add(handle);

      return handle;
    },
    clearInteractionHandle: function clearInteractionHandle(handle) {
      DEBUG && infoLog('clear interaction handle');
      invariant(!!handle, 'Must provide a handle to clear.');

      _scheduleUpdate();

      _addInteractionSet.delete(handle);

      _deleteInteractionSet.add(handle);
    },
    addListener: _emitter.addListener.bind(_emitter),
    setDeadline: function setDeadline(deadline) {
      _deadline = deadline;
    }
  };

  var _interactionSet = new Set();

  var _addInteractionSet = new Set();

  var _deleteInteractionSet = new Set();

  var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
  });

  var _nextUpdateHandle = 0;
  var _inc = 0;

  var _deadline = -1;

  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }

  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;

    _addInteractionSet.forEach(function (handle) {
      return _interactionSet.add(handle);
    });

    _deleteInteractionSet.forEach(function (handle) {
      return _interactionSet.delete(handle);
    });

    var nextInteractionCount = _interactionSet.size;

    if (interactionCount !== 0 && nextInteractionCount === 0) {
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      _emitter.emit(InteractionManager.Events.interactionStart);
    }

    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();

        if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
          _scheduleUpdate();

          break;
        }
      }
    }

    _addInteractionSet.clear();

    _deleteInteractionSet.clear();
  }

  module.exports = InteractionManager;
},393,[68,84,101,394,148,19,193],"InteractionManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var infoLog = _require(_dependencyMap[0], 'infoLog');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var DEBUG = false;

  var TaskQueue = function () {
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;

      _classCallCheck(this, TaskQueue);

      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }

    _createClass(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        var _this = this;

        tasks.forEach(function (task) {
          return _this.enqueue(task);
        });
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        this._queueStack = this._queueStack.map(function (queue) {
          return _extends({}, queue, {
            tasks: queue.tasks.filter(function (task) {
              return tasksToCancel.indexOf(task) === -1;
            })
          });
        }).filter(function (queue, idx) {
          return queue.tasks.length > 0 || idx === 0;
        });
      }
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();

        if (queue.length) {
          var task = queue.shift();

          try {
            if (task.gen) {
              DEBUG && infoLog('genPromise for task ' + task.name);

              this._genPromise(task);
            } else if (task.run) {
              DEBUG && infoLog('run task ' + task.name);
              task.run();
            } else {
              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
              DEBUG && infoLog('run anonymous task');
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];

        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();

          DEBUG && infoLog('popped queue: ', {
            stackIdx: stackIdx,
            queueStackSize: this._queueStack.length
          });
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        var _this2 = this;

        this._queueStack.push({
          tasks: [],
          popable: false
        });

        var stackIdx = this._queueStack.length - 1;
        DEBUG && infoLog('push new queue: ', {
          stackIdx: stackIdx
        });
        DEBUG && infoLog('exec gen task ' + task.name);
        task.gen().then(function () {
          DEBUG && infoLog('onThen for gen task ' + task.name, {
            stackIdx: stackIdx,
            queueStackSize: _this2._queueStack.length
          });
          _this2._queueStack[stackIdx].popable = true;
          _this2.hasTasksToProcess() && _this2._onMoreTasks();
        }).catch(function (ex) {
          ex.message = "TaskQueue: Error resolving Promise in task " + task.name + ": " + ex.message;
          throw ex;
        }).done();
      }
    }]);

    return TaskQueue;
  }();

  module.exports = TaskQueue;
},394,[148,19],"TaskQueue");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = _require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedAddition = function (_AnimatedWithChildren) {
    _inherits(AnimatedAddition, _AnimatedWithChildren);

    function AnimatedAddition(a, b) {
      _classCallCheck(this, AnimatedAddition);

      var _this = _possibleConstructorReturn(this, (AnimatedAddition.__proto__ || Object.getPrototypeOf(AnimatedAddition)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedAddition;
  }(AnimatedWithChildren);

  module.exports = AnimatedAddition;
},395,[389,390,388,392],"AnimatedAddition");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var AnimatedDiffClamp = function (_AnimatedWithChildren) {
    _inherits(AnimatedDiffClamp, _AnimatedWithChildren);

    function AnimatedDiffClamp(a, min, max) {
      _classCallCheck(this, AnimatedDiffClamp);

      var _this = _possibleConstructorReturn(this, (AnimatedDiffClamp.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp)).call(this));

      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }

    _createClass(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        _get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();

        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        _get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max
        };
      }
    }]);

    return AnimatedDiffClamp;
  }(AnimatedWithChildren);

  module.exports = AnimatedDiffClamp;
},396,[389,390,392],"AnimatedDiffClamp");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = _require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedDivision = function (_AnimatedWithChildren) {
    _inherits(AnimatedDivision, _AnimatedWithChildren);

    function AnimatedDivision(a, b) {
      _classCallCheck(this, AnimatedDivision);

      var _this = _possibleConstructorReturn(this, (AnimatedDivision.__proto__ || Object.getPrototypeOf(AnimatedDivision)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();

        var b = this._b.__getValue();

        if (b === 0) {
          console.error('Detected division by zero in AnimatedDivision');
        }

        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedDivision;
  }(AnimatedWithChildren);

  module.exports = AnimatedDivision;
},397,[389,390,388,392],"AnimatedDivision");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var AnimatedModulo = function (_AnimatedWithChildren) {
    _inherits(AnimatedModulo, _AnimatedWithChildren);

    function AnimatedModulo(a, modulus) {
      _classCallCheck(this, AnimatedModulo);

      var _this = _possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));

      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }

    _createClass(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        _get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        _get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus
        };
      }
    }]);

    return AnimatedModulo;
  }(AnimatedWithChildren);

  module.exports = AnimatedModulo;
},398,[389,390,392],"AnimatedModulo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedInterpolation = _require(_dependencyMap[0], './AnimatedInterpolation');

  var AnimatedNode = _require(_dependencyMap[1], './AnimatedNode');

  var AnimatedValue = _require(_dependencyMap[2], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[3], './AnimatedWithChildren');

  var AnimatedMultiplication = function (_AnimatedWithChildren) {
    _inherits(AnimatedMultiplication, _AnimatedWithChildren);

    function AnimatedMultiplication(a, b) {
      _classCallCheck(this, AnimatedMultiplication);

      var _this = _possibleConstructorReturn(this, (AnimatedMultiplication.__proto__ || Object.getPrototypeOf(AnimatedMultiplication)).call(this));

      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedMultiplication;
  }(AnimatedWithChildren);

  module.exports = AnimatedMultiplication;
},399,[389,390,388,392],"AnimatedMultiplication");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _require = _require2(_dependencyMap[0], '../AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedNode = _require2(_dependencyMap[1], './AnimatedNode');

  var AnimatedStyle = _require2(_dependencyMap[2], './AnimatedStyle');

  var NativeAnimatedHelper = _require2(_dependencyMap[3], '../NativeAnimatedHelper');

  var ReactNative = _require2(_dependencyMap[4], 'ReactNative');

  var invariant = _require2(_dependencyMap[5], 'fbjs/lib/invariant');

  var AnimatedProps = function (_AnimatedNode) {
    _inherits(AnimatedProps, _AnimatedNode);

    function AnimatedProps(props, callback) {
      _classCallCheck(this, AnimatedProps);

      var _this = _possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

      if (props.style) {
        props = _extends({}, props, {
          style: new AnimatedStyle(props.style)
        });
      }

      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    _createClass(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative || value instanceof AnimatedStyle) {
              props[key] = value.__getValue();
            }
          } else if (value instanceof AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }

        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            props[key] = value.__getAnimatedValue();
          }
        }

        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this._animatedView) {
          this.__disconnectAnimatedView();
        }

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        _get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var key in this._props) {
            var value = this._props[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }

          if (this._animatedView) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;

        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var propsConfig = {};

        for (var propKey in this._props) {
          var value = this._props[propKey];

          if (value instanceof AnimatedNode) {
            propsConfig[propKey] = value.__getNativeTag();
          }
        }

        return {
          type: 'props',
          props: propsConfig
        };
      }
    }]);

    return AnimatedProps;
  }(AnimatedNode);

  module.exports = AnimatedProps;
},400,[387,390,401,391,92,19],"AnimatedProps");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var AnimatedTransform = _require(_dependencyMap[1], './AnimatedTransform');

  var AnimatedWithChildren = _require(_dependencyMap[2], './AnimatedWithChildren');

  var NativeAnimatedHelper = _require(_dependencyMap[3], '../NativeAnimatedHelper');

  var flattenStyle = _require(_dependencyMap[4], 'flattenStyle');

  var AnimatedStyle = function (_AnimatedWithChildren) {
    _inherits(AnimatedStyle, _AnimatedWithChildren);

    function AnimatedStyle(style) {
      _classCallCheck(this, AnimatedStyle);

      var _this = _possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

      style = flattenStyle(style) || {};

      if (style.transform) {
        style = _extends({}, style, {
          transform: new AnimatedTransform(style.transform)
        });
      }

      _this._style = style;
      return _this;
    }

    _createClass(AnimatedStyle, [{
      key: "_walkStyleAndGetValues",
      value: function _walkStyleAndGetValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative) {
              updatedStyle[key] = value.__getValue();
            }
          } else if (value && !Array.isArray(value) && (typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
            updatedStyle[key] = this._walkStyleAndGetValues(value);
          } else {
            updatedStyle[key] = value;
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._walkStyleAndGetValues(this._style);
      }
    }, {
      key: "_walkStyleAndGetAnimatedValues",
      value: function _walkStyleAndGetAnimatedValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            updatedStyle[key] = value.__getAnimatedValue();
          } else if (value && !Array.isArray(value) && (typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
            updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._walkStyleAndGetAnimatedValues(this._style);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        _get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        _get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), "__makeNative", this).call(this);

        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var styleConfig = {};

        for (var styleKey in this._style) {
          if (this._style[styleKey] instanceof AnimatedNode) {
            styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
          }
        }

        NativeAnimatedHelper.validateStyles(styleConfig);
        return {
          type: 'style',
          style: styleConfig
        };
      }
    }]);

    return AnimatedStyle;
  }(AnimatedWithChildren);

  module.exports = AnimatedStyle;
},401,[390,402,392,391,159],"AnimatedStyle");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedNode = _require(_dependencyMap[0], './AnimatedNode');

  var AnimatedWithChildren = _require(_dependencyMap[1], './AnimatedWithChildren');

  var NativeAnimatedHelper = _require(_dependencyMap[2], '../NativeAnimatedHelper');

  var AnimatedTransform = function (_AnimatedWithChildren) {
    _inherits(AnimatedTransform, _AnimatedWithChildren);

    function AnimatedTransform(transforms) {
      _classCallCheck(this, AnimatedTransform);

      var _this = _possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

      _this._transforms = transforms;
      return _this;
    }

    _createClass(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative() {
        _get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__makeNative", this).call(this);

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }
        });
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getAnimatedValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var _this2 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__addChild(_this2);
            }
          }
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this3 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__removeChild(_this3);
            }
          }
        });

        _get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transConfigs = [];

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              transConfigs.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transConfigs.push({
                type: 'static',
                property: key,
                value: value
              });
            }
          }
        });

        NativeAnimatedHelper.validateTransform(transConfigs);
        return {
          type: 'transform',
          transforms: transConfigs
        };
      }
    }]);

    return AnimatedTransform;
  }(AnimatedWithChildren);

  module.exports = AnimatedTransform;
},402,[390,392,391],"AnimatedTransform");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedValue = _require2(_dependencyMap[0], './AnimatedValue');

  var AnimatedNode = _require2(_dependencyMap[1], './AnimatedNode');

  var _require = _require2(_dependencyMap[2], '../NativeAnimatedHelper'),
      generateNewAnimationId = _require.generateNewAnimationId,
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var AnimatedTracking = function (_AnimatedNode) {
    _inherits(AnimatedTracking, _AnimatedNode);

    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
      _classCallCheck(this, AnimatedTracking);

      var _this = _possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._useNativeDriver = shouldUseNativeDriver(animationConfig);
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    _createClass(AnimatedTracking, [{
      key: "__makeNative",
      value: function __makeNative() {
        this.__isNative = true;

        this._parent.__makeNative();

        _get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), "__makeNative", this).call(this);

        this._value.__makeNative();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);

        if (this._useNativeDriver) {
          this.__makeNative();
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        _get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass(_extends({}, this._animationConfig, {
          toValue: this._animationConfig.toValue.__getValue()
        })), this._callback);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var animation = new this._animationClass(_extends({}, this._animationConfig, {
          toValue: undefined
        }));

        var animationConfig = animation.__getNativeAnimationConfig();

        return {
          type: 'tracking',
          animationId: generateNewAnimationId(),
          animationConfig: animationConfig,
          toValue: this._parent.__getNativeTag(),
          value: this._value.__getNativeTag()
        };
      }
    }]);

    return AnimatedTracking;
  }(AnimatedNode);

  module.exports = AnimatedTracking;
},403,[388,390,391],"AnimatedTracking");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedValue = _require(_dependencyMap[0], './AnimatedValue');

  var AnimatedWithChildren = _require(_dependencyMap[1], './AnimatedWithChildren');

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var _uniqueId = 1;

  var AnimatedValueXY = function (_AnimatedWithChildren) {
    _inherits(AnimatedValueXY, _AnimatedWithChildren);

    function AnimatedValueXY(valueIn) {
      _classCallCheck(this, AnimatedValueXY);

      var _this = _possibleConstructorReturn(this, (AnimatedValueXY.__proto__ || Object.getPrototypeOf(AnimatedValueXY)).call(this));

      var value = valueIn || {
        x: 0,
        y: 0
      };

      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new AnimatedValue(value.x);
        _this.y = new AnimatedValue(value.y);
      } else {
        invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, 'AnimatedValueXY must be initialized with an object of numbers or ' + 'AnimatedValues.');
        _this.x = value.x;
        _this.y = value.y;
      }

      _this._listeners = {};
      return _this;
    }

    _createClass(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback(_ref) {
          var number = _ref.value;
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }]);

    return AnimatedValueXY;
  }(AnimatedWithChildren);

  module.exports = AnimatedValueXY;
},404,[388,392,19],"AnimatedValueXY");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Animation = _require2(_dependencyMap[0], './Animation');

  var _require = _require2(_dependencyMap[1], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var DecayAnimation = function (_Animation) {
    _inherits(DecayAnimation, _Animation);

    function DecayAnimation(config) {
      _classCallCheck(this, DecayAnimation);

      var _this = _possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

      _this._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
      _this._velocity = config.velocity;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      return _this;
    }

    _createClass(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();

        if (this._useNativeDriver) {
          this.__startNativeAnimation(animatedValue);
        } else {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

        this._onUpdate(value);

        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._lastValue = value;

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(DecayAnimation.prototype.__proto__ || Object.getPrototypeOf(DecayAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return DecayAnimation;
  }(Animation);

  module.exports = DecayAnimation;
},405,[406,391],"DecayAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var NativeAnimatedHelper = _require(_dependencyMap[0], 'NativeAnimatedHelper');

  var Animation = function () {
    function Animation() {
      _classCallCheck(this, Animation);
    }

    _createClass(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {
        if (this.__nativeId) {
          NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
        }
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        throw new Error('This animation type cannot be offloaded to native');
      }
    }, {
      key: "__debouncedOnEnd",
      value: function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
      }
    }, {
      key: "__startNativeAnimation",
      value: function __startNativeAnimation(animatedValue) {
        animatedValue.__makeNative();

        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
      }
    }]);

    return Animation;
  }();

  module.exports = Animation;
},406,[391],"Animation");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedValue = _require2(_dependencyMap[0], '../nodes/AnimatedValue');

  var AnimatedValueXY = _require2(_dependencyMap[1], '../nodes/AnimatedValueXY');

  var Animation = _require2(_dependencyMap[2], './Animation');

  var SpringConfig = _require2(_dependencyMap[3], '../SpringConfig');

  var invariant = _require2(_dependencyMap[4], 'fbjs/lib/invariant');

  var _require = _require2(_dependencyMap[5], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function withDefault(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    }

    return value;
  }

  var SpringAnimation = function (_Animation) {
    _inherits(SpringAnimation, _Animation);

    function SpringAnimation(config) {
      _classCallCheck(this, SpringAnimation);

      var _this = _possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));

      _this._overshootClamping = withDefault(config.overshootClamping, false);
      _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
      _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
      _this._initialVelocity = withDefault(config.velocity, 0);
      _this._lastVelocity = withDefault(config.velocity, 0);
      _this._toValue = config.toValue;
      _this._delay = withDefault(config.delay, 0);
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;

      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = withDefault(config.stiffness, 100);
        _this._damping = withDefault(config.damping, 10);
        _this._mass = withDefault(config.mass, 1);
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        var springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));

        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }

      invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      invariant(_this._damping > 0, 'Damping value must be greater than 0');
      invariant(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }

    _createClass(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;

        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }

        var start = function start() {
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2.onUpdate();
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var MAX_STEPS = 64;
        var now = Date.now();

        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }

        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m));
        var omega0 = Math.sqrt(k / m);
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
        var x0 = this._toValue - this._startPosition;
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;

        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);

          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }

        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;

        this._onUpdate(position);

        if (!this.__active) {
          return;
        }

        var isOvershooting = false;

        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }

        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;

        var isDisplacement = true;

        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }

        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;

            this._onUpdate(this._toValue);
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(SpringAnimation.prototype.__proto__ || Object.getPrototypeOf(SpringAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return SpringAnimation;
  }(Animation);

  module.exports = SpringAnimation;
},407,[388,404,406,408,19,391],"SpringAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }

  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }

  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }

  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }

    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }

    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }

    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }

    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }

    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }

    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }

    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }

    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }

  module.exports = {
    fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
    fromBouncinessAndSpeed: fromBouncinessAndSpeed
  };
},408,[],"SpringConfig");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedValue = _require2(_dependencyMap[0], '../nodes/AnimatedValue');

  var AnimatedValueXY = _require2(_dependencyMap[1], '../nodes/AnimatedValueXY');

  var Animation = _require2(_dependencyMap[2], './Animation');

  var _require = _require2(_dependencyMap[3], '../NativeAnimatedHelper'),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var _easeInOut = void 0;

  function easeInOut() {
    if (!_easeInOut) {
      var Easing = _require2(_dependencyMap[4], 'Easing');

      _easeInOut = Easing.inOut(Easing.ease);
    }

    return _easeInOut;
  }

  var TimingAnimation = function (_Animation) {
    _inherits(TimingAnimation, _Animation);

    function TimingAnimation(config) {
      _classCallCheck(this, TimingAnimation);

      var _this = _possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

      _this._toValue = config.toValue;
      _this._easing = config.easing !== undefined ? config.easing : easeInOut();
      _this._duration = config.duration !== undefined ? config.duration : 500;
      _this._delay = config.delay !== undefined ? config.delay : 0;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      return _this;
    }

    _createClass(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 1000.0 / 60.0;
        var frames = [];

        for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
          frames.push(this._easing(dt / this._duration));
        }

        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames: frames,
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;

        var start = function start() {
          if (_this2._duration === 0 && !_this2._useNativeDriver) {
            _this2._onUpdate(_this2._toValue);

            _this2.__debouncedOnEnd({
              finished: true
            });
          } else {
            _this2._startTime = Date.now();

            if (_this2._useNativeDriver) {
              _this2.__startNativeAnimation(animatedValue);
            } else {
              _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));
            }
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();

        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(TimingAnimation.prototype.__proto__ || Object.getPrototypeOf(TimingAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return TimingAnimation;
  }(Animation);

  module.exports = TimingAnimation;
},409,[388,404,406,391,410],"TimingAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var _ease = void 0;

  var Easing = function () {
    function Easing() {
      _classCallCheck(this, Easing);
    }

    _createClass(Easing, null, [{
      key: "step0",
      value: function step0(n) {
        return n > 0 ? 1 : 0;
      }
    }, {
      key: "step1",
      value: function step1(n) {
        return n >= 1 ? 1 : 0;
      }
    }, {
      key: "linear",
      value: function linear(t) {
        return t;
      }
    }, {
      key: "ease",
      value: function ease(t) {
        if (!_ease) {
          _ease = Easing.bezier(0.42, 0, 1, 1);
        }

        return _ease(t);
      }
    }, {
      key: "quad",
      value: function quad(t) {
        return t * t;
      }
    }, {
      key: "cubic",
      value: function cubic(t) {
        return t * t * t;
      }
    }, {
      key: "poly",
      value: function poly(n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }
    }, {
      key: "sin",
      value: function sin(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
    }, {
      key: "circle",
      value: function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      }
    }, {
      key: "exp",
      value: function exp(t) {
        return Math.pow(2, 10 * (t - 1));
      }
    }, {
      key: "elastic",
      value: function elastic() {
        var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var p = bounciness * Math.PI;
        return function (t) {
          return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
        };
      }
    }, {
      key: "back",
      value: function back(s) {
        if (s === undefined) {
          s = 1.70158;
        }

        return function (t) {
          return t * t * ((s + 1) * t - s);
        };
      }
    }, {
      key: "bounce",
      value: function bounce(t) {
        if (t < 1 / 2.75) {
          return 7.5625 * t * t;
        }

        if (t < 2 / 2.75) {
          t -= 1.5 / 2.75;
          return 7.5625 * t * t + 0.75;
        }

        if (t < 2.5 / 2.75) {
          t -= 2.25 / 2.75;
          return 7.5625 * t * t + 0.9375;
        }

        t -= 2.625 / 2.75;
        return 7.5625 * t * t + 0.984375;
      }
    }, {
      key: "bezier",
      value: function bezier(x1, y1, x2, y2) {
        var _bezier = _require(_dependencyMap[0], 'bezier');

        return _bezier(x1, y1, x2, y2);
      }
    }, {
      key: "in",
      value: function _in(easing) {
        return easing;
      }
    }, {
      key: "out",
      value: function out(easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }
    }, {
      key: "inOut",
      value: function inOut(easing) {
        return function (t) {
          if (t < 0.5) {
            return easing(t * 2) / 2;
          }

          return 1 - easing((1 - t) * 2) / 2;
        };
      }
    }]);

    return Easing;
  }();

  module.exports = Easing;
},410,[411],"Easing");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
  var float32ArraySupported = typeof Float32Array === 'function';

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX,
        currentT,
        i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  module.exports = function bezier(mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }

      if (x === 0) {
        return 0;
      }

      if (x === 1) {
        return 1;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  };
},411,[],"bezier");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require2(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require2(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Animated/src/createAnimatedComponent.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    AnimatedComponent: {
      displayName: "AnimatedComponent",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Animated/src/createAnimatedComponent.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var _require = _require2(_dependencyMap[2], './AnimatedEvent'),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedProps = _require2(_dependencyMap[3], './nodes/AnimatedProps');

  var React = _require2(_dependencyMap[4], 'React');

  var ViewStylePropTypes = _require2(_dependencyMap[5], 'ViewStylePropTypes');

  var invariant = _require2(_dependencyMap[6], 'fbjs/lib/invariant');

  function createAnimatedComponent(Component) {
    var _class, _temp;

    invariant(typeof Component === 'string' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');

    var AnimatedComponent = _wrapComponent("AnimatedComponent")((_temp = _class = function (_React$Component) {
      _inherits(AnimatedComponent, _React$Component);

      function AnimatedComponent(props) {
        _classCallCheck(this, AnimatedComponent);

        var _this = _possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this, props));

        _this._invokeAnimatedPropsCallbackOnMount = false;
        _this._eventDetachers = [];

        _this._animatedPropsCallback = function () {
          if (_this._component == null) {
            _this._invokeAnimatedPropsCallbackOnMount = true;
          } else if (AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY || typeof _this._component.setNativeProps !== 'function') {
            _this.forceUpdate();
          } else if (!_this._propsAnimated.__isNative) {
            _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
          } else {
            throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
          }
        };

        _this._setComponentRef = _this._setComponentRef.bind(_this);
        return _this;
      }

      _createClass(AnimatedComponent, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._propsAnimated && this._propsAnimated.__detach();

          this._detachNativeEvents();
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          this._component.setNativeProps(props);
        }
      }, {
        key: "UNSAFE_componentWillMount",
        value: function UNSAFE_componentWillMount() {
          this._attachProps(this.props);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this._invokeAnimatedPropsCallbackOnMount) {
            this._invokeAnimatedPropsCallbackOnMount = false;

            this._animatedPropsCallback();
          }

          this._propsAnimated.setNativeView(this._component);

          this._attachNativeEvents();
        }
      }, {
        key: "_attachNativeEvents",
        value: function _attachNativeEvents() {
          var _this2 = this;

          var scrollableNode = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

          var _loop = function _loop(key) {
            var prop = _this2.props[key];

            if (prop instanceof AnimatedEvent && prop.__isNative) {
              prop.__attach(scrollableNode, key);

              _this2._eventDetachers.push(function () {
                return prop.__detach(scrollableNode, key);
              });
            }
          };

          for (var key in this.props) {
            _loop(key);
          }
        }
      }, {
        key: "_detachNativeEvents",
        value: function _detachNativeEvents() {
          this._eventDetachers.forEach(function (remove) {
            return remove();
          });

          this._eventDetachers = [];
        }
      }, {
        key: "_attachProps",
        value: function _attachProps(nextProps) {
          var oldPropsAnimated = this._propsAnimated;
          this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);
          oldPropsAnimated && oldPropsAnimated.__detach();
        }
      }, {
        key: "UNSAFE_componentWillReceiveProps",
        value: function UNSAFE_componentWillReceiveProps(newProps) {
          this._attachProps(newProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this._component !== this._prevComponent) {
            this._propsAnimated.setNativeView(this._component);
          }

          if (this._component !== this._prevComponent || prevProps !== this.props) {
            this._detachNativeEvents();

            this._attachNativeEvents();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props = this._propsAnimated.__getValue();

          return React.createElement(Component, _extends({}, props, {
            ref: this._setComponentRef,
            collapsable: this._propsAnimated.__isNative ? false : props.collapsable,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 154
            }
          }));
        }
      }, {
        key: "_setComponentRef",
        value: function _setComponentRef(c) {
          this._prevComponent = this._component;
          this._component = c;
        }
      }, {
        key: "getNode",
        value: function getNode() {
          return this._component;
        }
      }]);

      return AnimatedComponent;
    }(React.Component), _class.__skipSetNativeProps_FOR_TESTS_ONLY = false, _temp));

    var propTypes = Component.propTypes;
    AnimatedComponent.propTypes = {
      style: function style(props, propName, componentName) {
        if (!propTypes) {
          return;
        }

        for (var key in ViewStylePropTypes) {
          if (!propTypes[key] && props[key] !== undefined) {
            console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
          }
        }
      }
    };
    return AnimatedComponent;
  }

  module.exports = createAnimatedComponent;
},412,[13,219,387,400,172,182,19],"createAnimatedComponent");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Image/Image.android.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

  var ImageResizeMode = _require2(_dependencyMap[0], 'ImageResizeMode');

  var ImageStylePropTypes = _require2(_dependencyMap[1], 'ImageStylePropTypes');

  var NativeMethodsMixin = _require2(_dependencyMap[2], 'NativeMethodsMixin');

  var NativeModules = _require2(_dependencyMap[3], 'NativeModules');

  var React = _require2(_dependencyMap[4], 'React');

  var PropTypes = _require2(_dependencyMap[5], 'prop-types');

  var ReactNativeViewAttributes = _require2(_dependencyMap[6], 'ReactNativeViewAttributes');

  var StyleSheet = _require2(_dependencyMap[7], 'StyleSheet');

  var StyleSheetPropType = _require2(_dependencyMap[8], 'StyleSheetPropType');

  var ViewPropTypes = _require2(_dependencyMap[9], 'ViewPropTypes');

  var createReactClass = _require2(_dependencyMap[10], 'create-react-class');

  var flattenStyle = _require2(_dependencyMap[11], 'flattenStyle');

  var merge = _require2(_dependencyMap[12], 'merge');

  var requireNativeComponent = _require2(_dependencyMap[13], 'requireNativeComponent');

  var resolveAssetSource = _require2(_dependencyMap[14], 'resolveAssetSource');

  var _require = _require2(_dependencyMap[15], 'ViewContext'),
      ViewContextTypes = _require.ViewContextTypes;

  var ImageLoader = NativeModules.ImageLoader;
  var _requestId = 1;

  function generateRequestId() {
    return _requestId++;
  }

  var Image = createReactClass({
    displayName: 'Image',
    propTypes: _extends({}, ViewPropTypes, {
      style: StyleSheetPropType(ImageStylePropTypes),
      source: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string,
        headers: PropTypes.objectOf(PropTypes.string)
      }), PropTypes.number, PropTypes.arrayOf(PropTypes.shape({
        uri: PropTypes.string,
        width: PropTypes.number,
        height: PropTypes.number,
        headers: PropTypes.objectOf(PropTypes.string)
      }))]),
      blurRadius: PropTypes.number,
      loadingIndicatorSource: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string
      }), PropTypes.number]),
      progressiveRenderingEnabled: PropTypes.bool,
      fadeDuration: PropTypes.number,
      onLoadStart: PropTypes.func,
      onError: PropTypes.func,
      onLoad: PropTypes.func,
      onLoadEnd: PropTypes.func,
      testID: PropTypes.string,
      resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),
      resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'center'])
    }),
    statics: {
      resizeMode: ImageResizeMode,
      getSize: function getSize(url, success, failure) {
        return ImageLoader.getSize(url).then(function (sizes) {
          success(sizes.width, sizes.height);
        }).catch(failure || function () {
          console.warn('Failed to get size for image: ' + url);
        });
      },
      prefetch: function prefetch(url, callback) {
        var requestId = generateRequestId();
        callback && callback(requestId);
        return ImageLoader.prefetchImage(url, requestId);
      },
      abortPrefetch: function abortPrefetch(requestId) {
        ImageLoader.abortRequest(requestId);
      },
      queryCache: function () {
        var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(urls) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return ImageLoader.queryCache(urls);

                case 2:
                  return _context.abrupt("return", _context.sent);

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function queryCache(_x) {
          return _ref.apply(this, arguments);
        }

        return queryCache;
      }(),
      resolveAssetSource: resolveAssetSource
    },
    mixins: [NativeMethodsMixin],
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    contextTypes: ViewContextTypes,
    render: function render() {
      var source = resolveAssetSource(this.props.source);
      var loadingIndicatorSource = resolveAssetSource(this.props.loadingIndicatorSource);

      if (source && source.uri === '') {
        console.warn('source.uri should not be an empty string');
      }

      if (this.props.src) {
        console.warn('The <Image> component requires a `source` property rather than `src`.');
      }

      if (this.props.children) {
        throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
      }

      if (source && (source.uri || Array.isArray(source))) {
        var style = void 0;
        var sources = void 0;

        if (source.uri) {
          var _width = source.width,
              _height = source.height;
          style = flattenStyle([{
            width: _width,
            height: _height
          }, styles.base, this.props.style]);
          sources = [{
            uri: source.uri
          }];
        } else {
          style = flattenStyle([styles.base, this.props.style]);
          sources = source;
        }

        var _props = this.props,
            onLoadStart = _props.onLoadStart,
            onLoad = _props.onLoad,
            onLoadEnd = _props.onLoadEnd,
            onError = _props.onError;
        var nativeProps = merge(this.props, {
          style: style,
          shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
          src: sources,
          headers: source.headers,
          loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null
        });

        if (this.context.isInAParentText) {
          return React.createElement(RCTTextInlineImage, _extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 252
            }
          }));
        } else {
          return React.createElement(RKImage, _extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 254
            }
          }));
        }
      }

      return null;
    }
  });
  var styles = StyleSheet.create({
    base: {
      overflow: 'hidden'
    }
  });
  var cfg = {
    nativeOnly: {
      src: true,
      headers: true,
      loadingIndicatorSrc: true,
      shouldNotifyLoadEvents: true
    }
  };
  var RKImage = requireNativeComponent('RCTImageView', Image, cfg);
  var RCTTextInlineImage = requireNativeComponent('RCTTextInlineImage', Image, cfg);
  module.exports = Image;
},413,[192,191,91,67,172,25,214,211,181,173,216,159,176,188,203,215],"Image");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var AnimatedImplementation = _require(_dependencyMap[0], 'AnimatedImplementation');

  var ColorPropType = _require(_dependencyMap[1], 'ColorPropType');

  var EdgeInsetsPropType = _require(_dependencyMap[2], 'EdgeInsetsPropType');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var PointPropType = _require(_dependencyMap[4], 'PointPropType');

  var PropTypes = _require(_dependencyMap[5], 'prop-types');

  var React = _require(_dependencyMap[6], 'React');

  var ReactNative = _require(_dependencyMap[7], 'ReactNative');

  var ScrollResponder = _require(_dependencyMap[8], 'ScrollResponder');

  var ScrollViewStickyHeader = _require(_dependencyMap[9], 'ScrollViewStickyHeader');

  var StyleSheet = _require(_dependencyMap[10], 'StyleSheet');

  var StyleSheetPropType = _require(_dependencyMap[11], 'StyleSheetPropType');

  var View = _require(_dependencyMap[12], 'View');

  var ViewPropTypes = _require(_dependencyMap[13], 'ViewPropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[14], 'ViewStylePropTypes');

  var createReactClass = _require(_dependencyMap[15], 'create-react-class');

  var dismissKeyboard = _require(_dependencyMap[16], 'dismissKeyboard');

  var flattenStyle = _require(_dependencyMap[17], 'flattenStyle');

  var invariant = _require(_dependencyMap[18], 'fbjs/lib/invariant');

  var processDecelerationRate = _require(_dependencyMap[19], 'processDecelerationRate');

  var requireNativeComponent = _require(_dependencyMap[20], 'requireNativeComponent');

  var warning = _require(_dependencyMap[21], 'fbjs/lib/warning');

  var resolveAssetSource = _require(_dependencyMap[22], 'resolveAssetSource');

  var ScrollView = createReactClass({
    displayName: 'ScrollView',
    propTypes: _extends({}, ViewPropTypes, {
      automaticallyAdjustContentInsets: PropTypes.bool,
      contentInset: EdgeInsetsPropType,
      contentOffset: PointPropType,
      bounces: PropTypes.bool,
      bouncesZoom: PropTypes.bool,
      alwaysBounceHorizontal: PropTypes.bool,
      alwaysBounceVertical: PropTypes.bool,
      centerContent: PropTypes.bool,
      contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),
      decelerationRate: PropTypes.oneOfType([PropTypes.oneOf(['fast', 'normal']), PropTypes.number]),
      horizontal: PropTypes.bool,
      indicatorStyle: PropTypes.oneOf(['default', 'black', 'white']),
      invertStickyHeaders: PropTypes.bool,
      directionalLockEnabled: PropTypes.bool,
      canCancelContentTouches: PropTypes.bool,
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag', 'interactive']),
      keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),
      maintainVisibleContentPosition: PropTypes.shape({
        minIndexForVisible: PropTypes.number.isRequired,
        autoscrollToTopThreshold: PropTypes.number
      }),
      maximumZoomScale: PropTypes.number,
      minimumZoomScale: PropTypes.number,
      onMomentumScrollBegin: PropTypes.func,
      onMomentumScrollEnd: PropTypes.func,
      onScroll: PropTypes.func,
      onScrollBeginDrag: PropTypes.func,
      onScrollEndDrag: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      pagingEnabled: PropTypes.bool,
      pinchGestureEnabled: PropTypes.bool,
      scrollEnabled: PropTypes.bool,
      scrollEventThrottle: PropTypes.number,
      scrollIndicatorInsets: EdgeInsetsPropType,
      scrollsToTop: PropTypes.bool,
      showsHorizontalScrollIndicator: PropTypes.bool,
      showsVerticalScrollIndicator: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),
      snapToInterval: PropTypes.number,
      snapToAlignment: PropTypes.oneOf(['start', 'center', 'end']),
      removeClippedSubviews: PropTypes.bool,
      zoomScale: PropTypes.number,
      contentInsetAdjustmentBehavior: PropTypes.oneOf(['automatic', 'scrollableAxes', 'never', 'always']),
      refreshControl: PropTypes.element,
      endFillColor: ColorPropType,
      scrollPerfTag: PropTypes.string,
      overScrollMode: PropTypes.oneOf(['auto', 'always', 'never']),
      DEPRECATED_sendUpdatedChildFrames: PropTypes.bool,
      scrollBarThumbImage: PropTypes.oneOfType([PropTypes.shape({
        uri: PropTypes.string
      }), PropTypes.number])
    }),
    mixins: [ScrollResponder.Mixin],
    _scrollAnimatedValue: new AnimatedImplementation.Value(0),
    _scrollAnimatedValueAttachment: null,
    _stickyHeaderRefs: new Map(),
    _headerLayoutYs: new Map(),
    getInitialState: function getInitialState() {
      return _extends({}, this.scrollResponderMixinGetInitialState(), {
        layoutHeight: null
      });
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._scrollAnimatedValue = new AnimatedImplementation.Value(this.props.contentOffset ? this.props.contentOffset.y : 0);

      this._scrollAnimatedValue.setOffset(this.props.contentInset ? this.props.contentInset.top : 0);

      this._stickyHeaderRefs = new Map();
      this._headerLayoutYs = new Map();
    },
    componentDidMount: function componentDidMount() {
      this._updateAnimatedNodeAttachment();
    },
    componentDidUpdate: function componentDidUpdate() {
      this._updateAnimatedNodeAttachment();
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
    },
    setNativeProps: function setNativeProps(props) {
      this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
    },
    getScrollResponder: function getScrollResponder() {
      return this;
    },
    getScrollableNode: function getScrollableNode() {
      return ReactNative.findNodeHandle(this._scrollViewRef);
    },
    getInnerViewNode: function getInnerViewNode() {
      return ReactNative.findNodeHandle(this._innerViewRef);
    },
    scrollTo: function scrollTo(y, x, animated) {
      if (typeof y === 'number') {
        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
      } else {
        var _ref = y || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      this.getScrollResponder().scrollResponderScrollTo({
        x: x || 0,
        y: y || 0,
        animated: animated !== false
      });
    },
    scrollToEnd: function scrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      this.getScrollResponder().scrollResponderScrollToEnd({
        animated: animated
      });
    },
    scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
      var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
      this.scrollTo({
        x: x,
        y: y,
        animated: false
      });
    },
    flashScrollIndicators: function flashScrollIndicators() {
      this.getScrollResponder().scrollResponderFlashScrollIndicators();
    },
    _getKeyForIndex: function _getKeyForIndex(index, childArray) {
      var child = childArray[index];
      return child && child.key;
    },
    _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }

      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
        this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(this._scrollViewRef, 'onScroll', [{
          nativeEvent: {
            contentOffset: {
              y: this._scrollAnimatedValue
            }
          }
        }]);
      }
    },
    _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
      if (ref) {
        this._stickyHeaderRefs.set(key, ref);
      } else {
        this._stickyHeaderRefs.delete(key);
      }
    },
    _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
      if (!this.props.stickyHeaderIndices) {
        return;
      }

      var childArray = React.Children.toArray(this.props.children);

      if (key !== this._getKeyForIndex(index, childArray)) {
        return;
      }

      var layoutY = event.nativeEvent.layout.y;

      this._headerLayoutYs.set(key, layoutY);

      var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
      var previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];

      if (previousHeaderIndex != null) {
        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

        previousHeader && previousHeader.setNextHeaderY(layoutY);
      }
    },
    _handleScroll: function _handleScroll(e) {
      if (__DEV__) {
        if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {
          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + 'cause frame drops, use a bigger number if you don\'t need as ' + 'much precision.');
        }
      }

      if (Platform.OS === 'android') {
        if (this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      }

      this.scrollResponderHandleScroll(e);
    },
    _handleLayout: function _handleLayout(e) {
      if (this.props.invertStickyHeaders) {
        this.setState({
          layoutHeight: e.nativeEvent.layout.height
        });
      }

      if (this.props.onLayout) {
        this.props.onLayout(e);
      }
    },
    _handleContentOnLayout: function _handleContentOnLayout(e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _scrollViewRef: null,
    _setScrollViewRef: function _setScrollViewRef(ref) {
      this._scrollViewRef = ref;
    },
    _innerViewRef: null,
    _setInnerViewRef: function _setInnerViewRef(ref) {
      this._innerViewRef = ref;
    },
    render: function render() {
      var _this = this;

      var ScrollViewClass = void 0;
      var ScrollContentContainerViewClass = void 0;

      if (Platform.OS === 'android') {
        if (this.props.horizontal) {
          ScrollViewClass = AndroidHorizontalScrollView;
          ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
        } else {
          ScrollViewClass = AndroidScrollView;
          ScrollContentContainerViewClass = View;
        }
      } else {
        ScrollViewClass = RCTScrollView;
        ScrollContentContainerViewClass = RCTScrollContentView;
        warning(!this.props.snapToInterval || !this.props.pagingEnabled, 'snapToInterval is currently ignored when pagingEnabled is true.');
      }

      invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');
      invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');
      var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
      var style = void 0,
          childLayoutProps = void 0;

      if (__DEV__ && this.props.style) {
        style = flattenStyle(this.props.style);
        childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
          return style && style[prop] !== undefined;
        });
        invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
      }

      var contentSizeChangeProps = {};

      if (this.props.onContentSizeChange) {
        contentSizeChangeProps = {
          onLayout: this._handleContentOnLayout
        };
      }

      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      var hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;
      var childArray = hasStickyHeaders && React.Children.toArray(this.props.children);
      var children = hasStickyHeaders ? childArray.map(function (child, index) {
        var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;

        if (indexOfIndex > -1) {
          var key = child.key;
          var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
          return React.createElement(
            ScrollViewStickyHeader,
            {
              key: key,
              ref: function ref(_ref2) {
                return _this._setStickyHeaderRef(key, _ref2);
              },
              nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, childArray)),
              onLayout: function onLayout(event) {
                return _this._onStickyHeaderLayout(index, event, key);
              },
              scrollAnimatedValue: _this._scrollAnimatedValue,
              inverted: _this.props.invertStickyHeaders,
              scrollViewHeight: _this.state.layoutHeight,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 772
              }
            },
            child
          );
        } else {
          return child;
        }
      }) : this.props.children;
      var contentContainer = React.createElement(
        ScrollContentContainerViewClass,
        _extends({}, contentSizeChangeProps, {
          ref: this._setInnerViewRef,
          style: contentContainerStyle,
          removeClippedSubviews: Platform.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 791
          }
        }),
        children
      );
      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
      var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;
      var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;

      var props = _extends({}, this.props, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: [baseStyle, this.props.style],
        onContentSizeChange: null,
        onLayout: this._handleLayout,
        onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
        onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
        onResponderGrant: this.scrollResponderHandleResponderGrant,
        onResponderReject: this.scrollResponderHandleResponderReject,
        onResponderRelease: this.scrollResponderHandleResponderRelease,
        onResponderTerminate: this.scrollResponderHandleTerminate,
        onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
        onScroll: this._handleScroll,
        onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
        onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
        onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
        onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
        onTouchEnd: this.scrollResponderHandleTouchEnd,
        onTouchMove: this.scrollResponderHandleTouchMove,
        onTouchStart: this.scrollResponderHandleTouchStart,
        onTouchCancel: this.scrollResponderHandleTouchCancel,
        scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),
        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
        DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames
      });

      var decelerationRate = this.props.decelerationRate;

      if (decelerationRate) {
        props.decelerationRate = processDecelerationRate(decelerationRate);
      }

      var refreshControl = this.props.refreshControl;

      if (refreshControl) {
        if (Platform.OS === 'ios') {
          return React.createElement(
            ScrollViewClass,
            _extends({}, props, {
              ref: this._setScrollViewRef,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 865
              }
            }),
            Platform.isTVOS ? null : refreshControl,
            contentContainer
          );
        } else if (Platform.OS === 'android') {
          return React.cloneElement(refreshControl, {
            style: props.style
          }, React.createElement(
            ScrollViewClass,
            _extends({}, props, {
              style: baseStyle,
              ref: this._setScrollViewRef,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 880
              }
            }),
            contentContainer
          ));
        }
      }

      return React.createElement(
        ScrollViewClass,
        _extends({}, props, {
          ref: this._setScrollViewRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 887
          }
        }),
        contentContainer
      );
    }
  });
  var styles = StyleSheet.create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });
  var nativeOnlyProps = void 0,
      AndroidScrollView = void 0,
      AndroidHorizontalScrollContentView = void 0,
      AndroidHorizontalScrollView = void 0,
      RCTScrollView = void 0,
      RCTScrollContentView = void 0;

  if (Platform.OS === 'android') {
    nativeOnlyProps = {
      nativeOnly: {
        sendMomentumEvents: true
      }
    };
    AndroidScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollView = requireNativeComponent('AndroidHorizontalScrollView', ScrollView, nativeOnlyProps);
    AndroidHorizontalScrollContentView = requireNativeComponent('AndroidHorizontalScrollContentView');
  } else if (Platform.OS === 'ios') {
    nativeOnlyProps = {
      nativeOnly: {
        onMomentumScrollBegin: true,
        onMomentumScrollEnd: true,
        onScrollBeginDrag: true,
        onScrollEndDrag: true
      }
    };
    RCTScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
    RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);
  } else {
    nativeOnlyProps = {
      nativeOnly: {}
    };
    RCTScrollView = requireNativeComponent('RCTScrollView', null, nativeOnlyProps);
    RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);
  }

  module.exports = ScrollView;
},414,[386,89,174,75,415,25,172,92,416,424,211,181,213,173,182,216,420,159,19,425,188,20,203],"ScrollView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var createStrictShapeTypeChecker = _require(_dependencyMap[1], 'createStrictShapeTypeChecker');

  var PointPropType = createStrictShapeTypeChecker({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},415,[25,175],"PointPropType");
__d(function (global, _require3, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = _require3(_dependencyMap[0], 'Dimensions');

  var FrameRateLogger = _require3(_dependencyMap[1], 'FrameRateLogger');

  var Keyboard = _require3(_dependencyMap[2], 'Keyboard');

  var ReactNative = _require3(_dependencyMap[3], 'ReactNative');

  var Subscribable = _require3(_dependencyMap[4], 'Subscribable');

  var TextInputState = _require3(_dependencyMap[5], 'TextInputState');

  var UIManager = _require3(_dependencyMap[6], 'UIManager');

  var invariant = _require3(_dependencyMap[7], 'fbjs/lib/invariant');

  var nullthrows = _require3(_dependencyMap[8], 'fbjs/lib/nullthrows');

  var performanceNow = _require3(_dependencyMap[9], 'fbjs/lib/performanceNow');

  var warning = _require3(_dependencyMap[10], 'fbjs/lib/warning');

  var _require = _require3(_dependencyMap[11], 'NativeModules'),
      ScrollViewManager = _require.ScrollViewManager;

  var _require2 = _require3(_dependencyMap[12], 'ReactNativeComponentTree'),
      getInstanceFromNode = _require2.getInstanceFromNode;

  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;

  function isTagInstanceOfTextInput(tag) {
    var instance = getInstanceFromNode(tag);
    return instance && instance.viewConfig && (instance.viewConfig.uiViewClassName === 'AndroidTextInput' || instance.viewConfig.uiViewClassName === 'RCTMultilineTextInputView' || instance.viewConfig.uiViewClassName === 'RCTSinglelineTextInputView');
  }

  var ScrollResponderMixin = {
    mixins: [Subscribable.Mixin],
    scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
      return {
        isTouching: false,
        lastMomentumScrollBeginTime: 0,
        lastMomentumScrollEndTime: 0,
        observedScrollSinceBecomingResponder: false,
        becameResponderWhileAnimating: false
      };
    },
    scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
      return this.state.isTouching;
    },
    scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
        return true;
      }

      return false;
    },
    scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

      if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !isTagInstanceOfTextInput(e.target)) {
        return true;
      }

      return this.scrollResponderIsAnimating();
    },
    scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},
    scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
      return !this.state.observedScrollSinceBecomingResponder;
    },
    scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
      var nativeEvent = e.nativeEvent;
      this.state.isTouching = nativeEvent.touches.length !== 0;
      this.props.onTouchEnd && this.props.onTouchEnd(e);
    },
    scrollResponderHandleTouchCancel: function scrollResponderHandleTouchCancel(e) {
      this.state.isTouching = false;
      this.props.onTouchCancel && this.props.onTouchCancel(e);
    },
    scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
      this.props.onResponderRelease && this.props.onResponderRelease(e);
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
        this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
        TextInputState.blurTextInput(currentlyFocusedTextInput);
      }
    },
    scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
      this.state.observedScrollSinceBecomingResponder = true;
      this.props.onScroll && this.props.onScroll(e);
    },
    scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
      this.state.observedScrollSinceBecomingResponder = false;
      this.props.onResponderGrant && this.props.onResponderGrant(e);
      this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
    },
    scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
      FrameRateLogger.beginScroll();
      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
    },
    scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
      var velocity = e.nativeEvent.velocity;

      if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
        FrameRateLogger.endScroll();
      }

      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
    },
    scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
      this.state.lastMomentumScrollBeginTime = performanceNow();
      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
    },
    scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
      FrameRateLogger.endScroll();
      this.state.lastMomentumScrollEndTime = performanceNow();
      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
    },
    scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
      this.state.isTouching = true;
      this.props.onTouchStart && this.props.onTouchStart(e);
    },
    scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
      this.props.onTouchMove && this.props.onTouchMove(e);
    },
    scrollResponderIsAnimating: function scrollResponderIsAnimating() {
      var now = performanceNow();
      var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
      return isAnimating;
    },
    scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
      return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
    },
    scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
      if (typeof x === 'number') {
        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
      } else {
        var _ref = x || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
    },
    scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
    },
    scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
      console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
      this.scrollResponderScrollTo({
        x: offsetX,
        y: offsetY,
        animated: false
      });
    },
    scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
      invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');

      if ('animated' in rect) {
        animated = rect.animated;
        delete rect.animated;
      } else if (typeof animated !== 'undefined') {
        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
      }

      ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
    },
    scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.flashScrollIndicators, []);
    },
    scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
      this.additionalScrollOffset = additionalOffset || 0;
      this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
      UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
    },
    scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
      var keyboardScreenY = Dimensions.get('window').height;

      if (this.keyboardWillOpenTo) {
        keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
      }

      var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

      if (this.preventNegativeScrollOffset) {
        scrollOffsetY = Math.max(0, scrollOffsetY);
      }

      this.scrollResponderScrollTo({
        x: 0,
        y: scrollOffsetY,
        animated: true
      });
      this.additionalOffset = 0;
      this.preventNegativeScrollOffset = false;
    },
    scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
      console.error('Error measuring text field: ', e);
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      warning(typeof keyboardShouldPersistTaps !== 'boolean', "'keyboardShouldPersistTaps={" + keyboardShouldPersistTaps + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
      this.keyboardWillOpenTo = null;
      this.additionalScrollOffset = 0;
      this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
      this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
      this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
      this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
    },
    scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
      this.keyboardWillOpenTo = e;
      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
    },
    scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
    },
    scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
      if (e) {
        this.keyboardWillOpenTo = e;
      }

      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
    },
    scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
    }
  };
  var ScrollResponder = {
    Mixin: ScrollResponderMixin
  };
  module.exports = ScrollResponder;
},416,[207,417,418,92,421,166,164,19,422,76,20,67,423],"ScrollResponder");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var FrameRateLogger = {
    setGlobalOptions: function setGlobalOptions(options) {
      if (options.debug !== undefined) {
        invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
      }

      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setGlobalOptions(options);
    },
    setContext: function setContext(context) {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
    },
    beginScroll: function beginScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
    },
    endScroll: function endScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
    }
  };
  module.exports = FrameRateLogger;
},417,[67,19],"FrameRateLogger");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var LayoutAnimation = _require(_dependencyMap[0], 'LayoutAnimation');

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var NativeEventEmitter = _require(_dependencyMap[2], 'NativeEventEmitter');

  var KeyboardObserver = _require(_dependencyMap[3], 'NativeModules').KeyboardObserver;

  var dismissKeyboard = _require(_dependencyMap[4], 'dismissKeyboard');

  var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);
  var Keyboard = {
    addListener: function addListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeListener: function removeListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeAllListeners: function removeAllListeners(eventName) {
      invariant(false, 'Dummy method used for documentation');
    },
    dismiss: function dismiss() {
      invariant(false, 'Dummy method used for documentation');
    },
    scheduleLayoutAnimation: function scheduleLayoutAnimation(event) {
      invariant(false, 'Dummy method used for documentation');
    }
  };
  Keyboard = KeyboardEventEmitter;
  Keyboard.dismiss = dismissKeyboard;

  Keyboard.scheduleLayoutAnimation = function (event) {
    var duration = event.duration,
        easing = event.easing;

    if (duration) {
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: easing && LayoutAnimation.Types[easing] || 'keyboard'
        }
      });
    }
  };

  module.exports = Keyboard;
},418,[419,19,125,67,420],"Keyboard");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var UIManager = _require(_dependencyMap[1], 'UIManager');

  var keyMirror = _require(_dependencyMap[2], 'fbjs/lib/keyMirror');

  var checkPropTypes = PropTypes.checkPropTypes;
  var TypesEnum = {
    spring: true,
    linear: true,
    easeInEaseOut: true,
    easeIn: true,
    easeOut: true,
    keyboard: true
  };
  var Types = keyMirror(TypesEnum);
  var PropertiesEnum = {
    opacity: true,
    scaleXY: true
  };
  var Properties = keyMirror(PropertiesEnum);
  var animType = PropTypes.shape({
    duration: PropTypes.number,
    delay: PropTypes.number,
    springDamping: PropTypes.number,
    initialVelocity: PropTypes.number,
    type: PropTypes.oneOf(Object.keys(Types)).isRequired,
    property: PropTypes.oneOf(Object.keys(Properties))
  });
  var configType = PropTypes.shape({
    duration: PropTypes.number.isRequired,
    create: animType,
    update: animType,
    delete: animType
  });

  function checkConfig(config, location, name) {
    checkPropTypes({
      config: configType
    }, {
      config: config
    }, location, name);
  }

  function configureNext(config, onAnimationDidEnd) {
    if (__DEV__) {
      checkConfig(config, 'config', 'LayoutAnimation.configureNext');
    }

    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
  }

  function create(duration, type, creationProp) {
    return {
      duration: duration,
      create: {
        type: type,
        property: creationProp
      },
      update: {
        type: type
      },
      delete: {
        type: type,
        property: creationProp
      }
    };
  }

  var Presets = {
    easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
    linear: create(500, Types.linear, Properties.opacity),
    spring: {
      duration: 700,
      create: {
        type: Types.linear,
        property: Properties.opacity
      },
      update: {
        type: Types.spring,
        springDamping: 0.4
      },
      delete: {
        type: Types.linear,
        property: Properties.opacity
      }
    }
  };
  var LayoutAnimation = {
    configureNext: configureNext,
    create: create,
    Types: Types,
    Properties: Properties,
    checkConfig: checkConfig,
    Presets: Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring)
  };
  module.exports = LayoutAnimation;
},419,[25,164,193],"LayoutAnimation");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var TextInputState = _require(_dependencyMap[0], 'TextInputState');

  function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
  }

  module.exports = dismissKeyboard;
},420,[166],"dismissKeyboard");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Subscribable = {};
  Subscribable.Mixin = {
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._subscribableSubscriptions = [];
    },
    componentWillUnmount: function componentWillUnmount() {
      this._subscribableSubscriptions && this._subscribableSubscriptions.forEach(function (subscription) {
        return subscription.remove();
      });
      this._subscribableSubscriptions = null;
    },
    addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
      this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
    }
  };
  module.exports = Subscribable;
},421,[],"Subscribable");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var nullthrows = function nullthrows(x) {
    if (x != null) {
      return x;
    }

    throw new Error("Got unexpected null or undefined");
  };

  module.exports = nullthrows;
},422,[],"node_modules/fbjs/lib/nullthrows.js");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeComponentTree;
},423,[92],"ReactNativeComponentTree");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ScrollViewStickyHeader: {
      displayName: "ScrollViewStickyHeader"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var AnimatedImplementation = _require(_dependencyMap[2], 'AnimatedImplementation');

  var React = _require(_dependencyMap[3], 'React');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var View = _require(_dependencyMap[5], 'View');

  var AnimatedView = AnimatedImplementation.createAnimatedComponent(View);

  var ScrollViewStickyHeader = _wrapComponent("ScrollViewStickyHeader")(function (_React$Component) {
    _inherits(ScrollViewStickyHeader, _React$Component);

    function ScrollViewStickyHeader() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ScrollViewStickyHeader);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ScrollViewStickyHeader.__proto__ || Object.getPrototypeOf(ScrollViewStickyHeader)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        measured: false,
        layoutY: 0,
        layoutHeight: 0,
        nextHeaderLayoutY: _this.props.nextHeaderLayoutY
      }, _this._onLayout = function (event) {
        _this.setState({
          measured: true,
          layoutY: event.nativeEvent.layout.y,
          layoutHeight: event.nativeEvent.layout.height
        });

        _this.props.onLayout(event);

        var child = React.Children.only(_this.props.children);

        if (child.props.onLayout) {
          child.props.onLayout(event);
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ScrollViewStickyHeader, [{
      key: "setNextHeaderY",
      value: function setNextHeaderY(y) {
        this.setState({
          nextHeaderLayoutY: y
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            inverted = _props.inverted,
            scrollViewHeight = _props.scrollViewHeight;
        var _state = this.state,
            measured = _state.measured,
            layoutHeight = _state.layoutHeight,
            layoutY = _state.layoutY,
            nextHeaderLayoutY = _state.nextHeaderLayoutY;
        var inputRange = [-1, 0];
        var outputRange = [0, 0];

        if (measured) {
          if (inverted) {
            if (scrollViewHeight != null) {
              var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;

              if (stickStartPoint > 0) {
                inputRange.push(stickStartPoint);
                outputRange.push(0);
                inputRange.push(stickStartPoint + 1);
                outputRange.push(1);
                var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;

                if (collisionPoint > stickStartPoint) {
                  inputRange.push(collisionPoint, collisionPoint + 1);
                  outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
                }
              }
            }
          } else {
            inputRange.push(layoutY);
            outputRange.push(0);

            var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;

            if (_collisionPoint >= layoutY) {
              inputRange.push(_collisionPoint, _collisionPoint + 1);
              outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
            } else {
              inputRange.push(layoutY + 1);
              outputRange.push(1);
            }
          }
        }

        var translateY = this.props.scrollAnimatedValue.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var child = React.Children.only(this.props.children);
        return React.createElement(
          AnimatedView,
          {
            collapsable: false,
            onLayout: this._onLayout,
            style: [child.props.style, styles.header, {
              transform: [{
                translateY: translateY
              }]
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 142
            }
          },
          React.cloneElement(child, {
            style: styles.fill,
            onLayout: undefined
          })
        );
      }
    }]);

    return ScrollViewStickyHeader;
  }(React.Component));

  var styles = StyleSheet.create({
    header: {
      zIndex: 10
    },
    fill: {
      flex: 1
    }
  });
  module.exports = ScrollViewStickyHeader;
},424,[13,219,386,172,211,213],"ScrollViewStickyHeader");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      decelerationRate = 0.998;
    } else if (decelerationRate === 'fast') {
      decelerationRate = 0.99;
    }

    return decelerationRate;
  }

  module.exports = processDecelerationRate;
},425,[],"processDecelerationRate");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/CheckBox/CheckBox.android.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var NativeMethodsMixin = _require(_dependencyMap[0], 'NativeMethodsMixin');

  var PropTypes = _require(_dependencyMap[1], 'prop-types');

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var ViewPropTypes = _require(_dependencyMap[4], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[5], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[6], 'requireNativeComponent');

  var CheckBox = createReactClass({
    displayName: 'CheckBox',
    propTypes: _extends({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onChange: PropTypes.func,
      onValueChange: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctCheckBox: {},
    _onChange: function _onChange(event) {
      this._rctCheckBox.setNativeProps({
        value: this.props.value
      });

      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = _extends({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      props.enabled = !this.props.disabled;
      props.on = this.props.value;
      props.style = [styles.rctCheckBox, this.props.style];
      return React.createElement(RCTCheckBox, _extends({}, props, {
        ref: function ref(_ref) {
          _this._rctCheckBox = _ref;
        },
        onChange: this._onChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 138
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    rctCheckBox: {
      height: 32,
      width: 32
    }
  });
  var RCTCheckBox = requireNativeComponent('AndroidCheckBox', CheckBox, {
    nativeOnly: {
      onChange: true,
      on: true,
      enabled: true
    }
  });
  module.exports = CheckBox;
},426,[91,25,172,211,173,216,188],"CheckBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.android.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    DummyDatePickerIOS: {
      displayName: "DummyDatePickerIOS"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var Text = _require(_dependencyMap[4], 'Text');

  var View = _require(_dependencyMap[5], 'View');

  var DummyDatePickerIOS = _wrapComponent("DummyDatePickerIOS")(function (_React$Component) {
    _inherits(DummyDatePickerIOS, _React$Component);

    function DummyDatePickerIOS() {
      _classCallCheck(this, DummyDatePickerIOS);

      return _possibleConstructorReturn(this, (DummyDatePickerIOS.__proto__ || Object.getPrototypeOf(DummyDatePickerIOS)).apply(this, arguments));
    }

    _createClass(DummyDatePickerIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummyDatePickerIOS, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 20
            }
          },
          React.createElement(
            Text,
            {
              style: styles.datePickerText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 21
              }
            },
            "DatePickerIOS is not supported on this platform!"
          )
        );
      }
    }]);

    return DummyDatePickerIOS;
  }(React.Component));

  var styles = StyleSheet.create({
    dummyDatePickerIOS: {
      height: 100,
      width: 300,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center',
      margin: 10
    },
    datePickerText: {
      color: '#333333',
      margin: 20
    }
  });
  module.exports = DummyDatePickerIOS;
},427,[13,219,172,211,371,213],"DatePickerIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var ReactNative = _require(_dependencyMap[5], 'ReactNative');

  var StatusBar = _require(_dependencyMap[6], 'StatusBar');

  var StyleSheet = _require(_dependencyMap[7], 'StyleSheet');

  var UIManager = _require(_dependencyMap[8], 'UIManager');

  var View = _require(_dependencyMap[9], 'View');

  var ViewPropTypes = _require(_dependencyMap[10], 'ViewPropTypes');

  var DrawerConsts = UIManager.AndroidDrawerLayout.Constants;

  var createReactClass = _require(_dependencyMap[11], 'create-react-class');

  var dismissKeyboard = _require(_dependencyMap[12], 'dismissKeyboard');

  var requireNativeComponent = _require(_dependencyMap[13], 'requireNativeComponent');

  var RK_DRAWER_REF = 'drawerlayout';
  var INNERVIEW_REF = 'innerView';
  var DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];
  var DrawerLayoutAndroid = createReactClass({
    displayName: 'DrawerLayoutAndroid',
    statics: {
      positions: DrawerConsts.DrawerPosition
    },
    propTypes: _extends({}, ViewPropTypes, {
      keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
      drawerBackgroundColor: ColorPropType,
      drawerPosition: PropTypes.oneOf([DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right]),
      drawerWidth: PropTypes.number,
      drawerLockMode: PropTypes.oneOf(['unlocked', 'locked-closed', 'locked-open']),
      onDrawerSlide: PropTypes.func,
      onDrawerStateChanged: PropTypes.func,
      onDrawerOpen: PropTypes.func,
      onDrawerClose: PropTypes.func,
      renderNavigationView: PropTypes.func.isRequired,
      statusBarBackgroundColor: ColorPropType
    }),
    mixins: [NativeMethodsMixin],
    getDefaultProps: function getDefaultProps() {
      return {
        drawerBackgroundColor: 'white'
      };
    },
    getInitialState: function getInitialState() {
      return {
        statusBarBackgroundColor: undefined
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this.refs[INNERVIEW_REF].getInnerViewNode();
    },
    render: function render() {
      var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor;
      var drawerViewWrapper = React.createElement(
        View,
        {
          style: [styles.drawerSubview, {
            width: this.props.drawerWidth,
            backgroundColor: this.props.drawerBackgroundColor
          }],
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 174
          }
        },
        this.props.renderNavigationView(),
        drawStatusBar && React.createElement(View, {
          style: styles.drawerStatusBar,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 181
          }
        })
      );
      var childrenWrapper = React.createElement(
        View,
        {
          ref: INNERVIEW_REF,
          style: styles.mainSubview,
          collapsable: false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 184
          }
        },
        drawStatusBar && React.createElement(StatusBar, {
          translucent: true,
          backgroundColor: this.props.statusBarBackgroundColor,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 186
          }
        }),
        drawStatusBar && React.createElement(View, {
          style: [styles.statusBar, {
            backgroundColor: this.props.statusBarBackgroundColor
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 191
          }
        }),
        this.props.children
      );
      return React.createElement(
        AndroidDrawerLayout,
        _extends({}, this.props, {
          ref: RK_DRAWER_REF,
          drawerWidth: this.props.drawerWidth,
          drawerPosition: this.props.drawerPosition,
          drawerLockMode: this.props.drawerLockMode,
          style: [styles.base, this.props.style],
          onDrawerSlide: this._onDrawerSlide,
          onDrawerOpen: this._onDrawerOpen,
          onDrawerClose: this._onDrawerClose,
          onDrawerStateChanged: this._onDrawerStateChanged,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 198
          }
        }),
        childrenWrapper,
        drawerViewWrapper
      );
    },
    _onDrawerSlide: function _onDrawerSlide(event) {
      if (this.props.onDrawerSlide) {
        this.props.onDrawerSlide(event);
      }

      if (this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    },
    _onDrawerOpen: function _onDrawerOpen() {
      if (this.props.onDrawerOpen) {
        this.props.onDrawerOpen();
      }
    },
    _onDrawerClose: function _onDrawerClose() {
      if (this.props.onDrawerClose) {
        this.props.onDrawerClose();
      }
    },
    _onDrawerStateChanged: function _onDrawerStateChanged(event) {
      if (this.props.onDrawerStateChanged) {
        this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
      }
    },
    openDrawer: function openDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.openDrawer, null);
    },
    closeDrawer: function closeDrawer() {
      UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.closeDrawer, null);
    },
    _getDrawerLayoutHandle: function _getDrawerLayoutHandle() {
      return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);
    }
  });
  var styles = StyleSheet.create({
    base: {
      flex: 1,
      elevation: 16
    },
    mainSubview: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    drawerSubview: {
      position: 'absolute',
      top: 0,
      bottom: 0
    },
    statusBar: {
      height: StatusBar.currentHeight
    },
    drawerStatusBar: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      height: StatusBar.currentHeight,
      backgroundColor: 'rgba(0, 0, 0, 0.251)'
    }
  });
  var AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout', DrawerLayoutAndroid);
  module.exports = DrawerLayoutAndroid;
},428,[89,91,75,172,25,92,429,211,164,213,173,216,420,188],"DrawerLayoutAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class, _temp2;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    StatusBar: {
      displayName: "StatusBar"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var ColorPropType = _require(_dependencyMap[4], 'ColorPropType');

  var Platform = _require(_dependencyMap[5], 'Platform');

  var processColor = _require(_dependencyMap[6], 'processColor');

  var StatusBarManager = _require(_dependencyMap[7], 'NativeModules').StatusBarManager;

  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce(function (prev, cur) {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }

      return prev;
    }, _extends({}, defaultValues));
  }

  function createStackEntry(props) {
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated: props.animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated: props.animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated: props.animated,
        transition: props.showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }

  var StatusBar = _wrapComponent("StatusBar")((_temp2 = _class = function (_React$Component) {
    _inherits(StatusBar, _React$Component);

    function StatusBar() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, StatusBar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = StatusBar.__proto__ || Object.getPrototypeOf(StatusBar)).call.apply(_ref, [this].concat(args))), _this), _this._stackEntry = null, _this._updatePropsStack = function () {
        clearImmediate(StatusBar._updateImmediate);
        StatusBar._updateImmediate = setImmediate(function () {
          var oldProps = StatusBar._currentValues;
          var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);

          if (Platform.OS === 'ios') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
            }

            if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
              StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
            }
          } else if (Platform.OS === 'android') {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value);
            }

            if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
              StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value);
            }

            if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
              StatusBarManager.setTranslucent(mergedProps.translucent);
            }
          }

          StatusBar._currentValues = mergedProps;
        });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._stackEntry = createStackEntry(this.props);

        StatusBar._propsStack.push(this._stackEntry);

        this._updatePropsStack();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        StatusBar._propsStack.splice(index, 1);

        this._updatePropsStack();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        this._stackEntry = createStackEntry(this.props);
        StatusBar._propsStack[index] = this._stackEntry;

        this._updatePropsStack();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value: function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;

        if (Platform.OS === 'ios') {
          StatusBarManager.setHidden(hidden, animation);
        } else if (Platform.OS === 'android') {
          StatusBarManager.setHidden(hidden);
        }
      }
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;

        if (Platform.OS === 'ios') {
          StatusBarManager.setStyle(style, animated);
        } else if (Platform.OS === 'android') {
          StatusBarManager.setStyle(style);
        }
      }
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        if (Platform.OS !== 'ios') {
          console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
          return;
        }

        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        StatusBarManager.setNetworkActivityIndicatorVisible(visible);
      }
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        if (Platform.OS !== 'android') {
          console.warn('`setBackgroundColor` is only available on Android');
          return;
        }

        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        StatusBarManager.setColor(processColor(color), animated);
      }
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        if (Platform.OS !== 'android') {
          console.warn('`setTranslucent` is only available on Android');
          return;
        }

        StatusBar._defaultProps.translucent = translucent;
        StatusBarManager.setTranslucent(translucent);
      }
    }]);

    return StatusBar;
  }(React.Component), _class._propsStack = [], _class._defaultProps = createStackEntry({
    animated: false,
    showHideTransition: 'fade',
    backgroundColor: 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  }), _class._updateImmediate = null, _class._currentValues = null, _class.currentHeight = StatusBarManager.HEIGHT, _class.propTypes = {
    hidden: PropTypes.bool,
    animated: PropTypes.bool,
    backgroundColor: ColorPropType,
    translucent: PropTypes.bool,
    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),
    networkActivityIndicatorVisible: PropTypes.bool,
    showHideTransition: PropTypes.oneOf(['fade', 'slide'])
  }, _class.defaultProps = {
    animated: false,
    showHideTransition: 'fade'
  }, _temp2));

  module.exports = StatusBar;
},429,[13,219,172,25,89,75,195,67],"StatusBar");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index2 = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index3 = _interopRequireDefault(_index2);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Lists/FlatList.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    FlatList: {
      displayName: "FlatList"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index3.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Lists/FlatList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var MetroListView = _require(_dependencyMap[2], 'MetroListView');

  var React = _require(_dependencyMap[3], 'React');

  var View = _require(_dependencyMap[4], 'View');

  var VirtualizedList = _require(_dependencyMap[5], 'VirtualizedList');

  var ListView = _require(_dependencyMap[6], 'ListView');

  var invariant = _require(_dependencyMap[7], 'fbjs/lib/invariant');

  var defaultProps = _extends({}, VirtualizedList.defaultProps, {
    numColumns: 1
  });

  var FlatList = _wrapComponent("FlatList")((_temp = _class = function (_React$PureComponent) {
    _inherits(FlatList, _React$PureComponent);

    _createClass(FlatList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        this._checkProps(this.props);
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        invariant(nextProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');
        invariant(nextProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');
        invariant(nextProps.viewabilityConfig === this.props.viewabilityConfig, 'Changing viewabilityConfig on the fly is not supported');
        invariant(nextProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');

        this._checkProps(nextProps);
      }
    }]);

    function FlatList(props) {
      _classCallCheck(this, FlatList);

      var _this = _possibleConstructorReturn(this, (FlatList.__proto__ || Object.getPrototypeOf(FlatList)).call(this, props));

      _this._hasWarnedLegacy = false;
      _this._virtualizedListPairs = [];

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this._getItem = function (data, index) {
        var numColumns = _this.props.numColumns;

        if (numColumns > 1) {
          var ret = [];

          for (var kk = 0; kk < numColumns; kk++) {
            var _item = data[index * numColumns + kk];
            _item && ret.push(_item);
          }

          return ret;
        } else {
          return data[index];
        }
      };

      _this._getItemCount = function (data) {
        return data ? Math.ceil(data.length / _this.props.numColumns) : 0;
      };

      _this._keyExtractor = function (items, index) {
        var _this$props = _this.props,
            keyExtractor = _this$props.keyExtractor,
            numColumns = _this$props.numColumns;

        if (numColumns > 1) {
          invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);
          return items.map(function (it, kk) {
            return keyExtractor(it, index * numColumns + kk);
          }).join(':');
        } else {
          return keyExtractor(items, index);
        }
      };

      _this._renderItem = function (info) {
        var _this$props2 = _this.props,
            renderItem = _this$props2.renderItem,
            numColumns = _this$props2.numColumns,
            columnWrapperStyle = _this$props2.columnWrapperStyle;

        if (numColumns > 1) {
          var _item2 = info.item,
              _index = info.index;
          invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
          return React.createElement(
            View,
            {
              style: [{
                flexDirection: 'row'
              }, columnWrapperStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 611
              }
            },
            _item2.map(function (it, kk) {
              var element = renderItem({
                item: it,
                index: _index * numColumns + kk,
                separators: info.separators
              });
              return element && React.cloneElement(element, {
                key: kk
              });
            })
          );
        } else {
          return renderItem(info);
        }
      };

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityConfig: pair.viewabilityConfig,
            onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)
        });
      }

      return _this;
    }

    _createClass(FlatList, [{
      key: "_checkProps",
      value: function _checkProps(props) {
        var getItem = props.getItem,
            getItemCount = props.getItemCount,
            horizontal = props.horizontal,
            legacyImplementation = props.legacyImplementation,
            numColumns = props.numColumns,
            columnWrapperStyle = props.columnWrapperStyle,
            onViewableItemsChanged = props.onViewableItemsChanged,
            viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');

        if (numColumns > 1) {
          invariant(!horizontal, 'numColumns does not support horizontal.');
        } else {
          invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }

        if (legacyImplementation) {
          invariant(numColumns === 1, 'Legacy list does not support multiple columns.');

          if (!this._hasWarnedLegacy) {
            console.warn('FlatList: Using legacyImplementation - some features not supported and performance ' + 'may suffer');
            this._hasWarnedLegacy = true;
          }
        }

        invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var _props = this.props,
            numColumns = _props.numColumns,
            keyExtractor = _props.keyExtractor;
        v.item.forEach(function (item, ii) {
          invariant(v.index != null, 'Missing index!');
          var index = v.index * numColumns + ii;
          arr.push(_extends({}, v, {
            item: item,
            key: keyExtractor(item, index),
            index: index
          }));
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
        var _this2 = this;

        return function (info) {
          var numColumns = _this2.props.numColumns;

          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var _changed = [];
              var _viewableItems = [];
              info.viewableItems.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_viewableItems, v);
              });
              info.changed.forEach(function (v) {
                return _this2._pushMultiColumnViewable(_changed, v);
              });
              onViewableItemsChanged({
                viewableItems: _viewableItems,
                changed: _changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.legacyImplementation) {
          return React.createElement(MetroListView, _extends({}, this.props, {
            items: this.props.data,
            ref: this._captureRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 633
            }
          }));
        } else {
          return React.createElement(VirtualizedList, _extends({}, this.props, {
            renderItem: this._renderItem,
            getItem: this._getItem,
            getItemCount: this._getItemCount,
            keyExtractor: this._keyExtractor,
            ref: this._captureRef,
            viewabilityConfigCallbackPairs: this._virtualizedListPairs,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 644
            }
          }));
        }
      }
    }]);

    return FlatList;
  }(React.PureComponent), _class.defaultProps = defaultProps, _temp));

  module.exports = FlatList;
},430,[13,219,431,172,213,438,432,19],"FlatList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Lists/MetroListView.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MetroListView: {
      displayName: "MetroListView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Lists/MetroListView.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ListView = _require(_dependencyMap[2], 'ListView');

  var React = _require(_dependencyMap[3], 'React');

  var RefreshControl = _require(_dependencyMap[4], 'RefreshControl');

  var ScrollView = _require(_dependencyMap[5], 'ScrollView');

  var invariant = _require(_dependencyMap[6], 'fbjs/lib/invariant');

  var MetroListView = _wrapComponent("MetroListView")((_temp2 = _class = function (_React$Component) {
    _inherits(MetroListView, _React$Component);

    function MetroListView() {
      var _ref,
          _this2 = this;

      var _temp, _this, _ret;

      _classCallCheck(this, MetroListView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MetroListView.__proto__ || Object.getPrototypeOf(MetroListView)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this._computeState(_this.props, {
        ds: new ListView.DataSource({
          rowHasChanged: function rowHasChanged(itemA, itemB) {
            return true;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged() {
            return true;
          },
          getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {
            return _this.state.sectionHeaderData[sectionID];
          }
        }),
        sectionHeaderData: {}
      }), _this._captureRef = function (ref) {
        _this._listRef = ref;
      }, _this._renderFooter = function () {
        return React.createElement(_this2.props.FooterComponent, {
          key: "$footer",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 179
          }
        });
      }, _this._renderRow = function (item, sectionID, rowID, highlightRow) {
        return _this.props.renderItem({
          item: item,
          index: rowID
        });
      }, _this._renderSectionHeader = function (section, sectionID) {
        var renderSectionHeader = _this.props.renderSectionHeader;
        invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');
        return renderSectionHeader({
          section: section
        });
      }, _this._renderSeparator = function (sID, rID) {
        return React.createElement(_this2.props.SeparatorComponent, {
          key: sID + rID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 195
          }
        });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(MetroListView, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        throw new Error('scrollToEnd not supported in legacy ListView.');
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        throw new Error('scrollToIndex not supported in legacy ListView.');
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        throw new Error('scrollToItem not supported in legacy ListView.');
      }
    }, {
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        throw new Error('scrollToLocation not supported in legacy ListView.');
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._listRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        var _this3 = this;

        this.setState(function (state) {
          return _this3._computeState(newProps, state);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(ListView, _extends({}, this.props, {
          dataSource: this.state.ds,
          ref: this._captureRef,
          renderRow: this._renderRow,
          renderFooter: this.props.FooterComponent && this._renderFooter,
          renderSectionHeader: this.props.sections && this._renderSectionHeader,
          renderSeparator: this.props.SeparatorComponent && this._renderSeparator,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 139
          }
        }));
      }
    }, {
      key: "_computeState",
      value: function _computeState(props, state) {
        var sectionHeaderData = {};

        if (props.sections) {
          invariant(!props.items, 'Cannot have both sections and items props.');
          var _sections = {};
          props.sections.forEach(function (sectionIn, ii) {
            var sectionID = 's' + ii;
            _sections[sectionID] = sectionIn.data;
            sectionHeaderData[sectionID] = sectionIn;
          });
          return {
            ds: state.ds.cloneWithRowsAndSections(_sections),
            sectionHeaderData: sectionHeaderData
          };
        } else {
          invariant(!props.sections, 'Cannot have both sections and items props.');
          return {
            ds: state.ds.cloneWithRows(props.items),
            sectionHeaderData: sectionHeaderData
          };
        }
      }
    }]);

    return MetroListView;
  }(React.Component), _class.defaultProps = {
    keyExtractor: function keyExtractor(item, index) {
      return item.key || String(index);
    },
    renderScrollComponent: function renderScrollComponent(props) {
      if (props.onRefresh) {
        return React.createElement(ScrollView, _extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 113
            }
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 106
          }
        }));
      } else {
        return React.createElement(ScrollView, _extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 121
          }
        }));
      }
    }
  }, _temp2));

  module.exports = MetroListView;
},431,[13,219,432,172,437,414,19],"MetroListView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Lists/ListView/ListView.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var ListViewDataSource = _require(_dependencyMap[0], 'ListViewDataSource');

  var Platform = _require(_dependencyMap[1], 'Platform');

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var ReactNative = _require(_dependencyMap[4], 'ReactNative');

  var RCTScrollViewManager = _require(_dependencyMap[5], 'NativeModules').ScrollViewManager;

  var ScrollView = _require(_dependencyMap[6], 'ScrollView');

  var ScrollResponder = _require(_dependencyMap[7], 'ScrollResponder');

  var StaticRenderer = _require(_dependencyMap[8], 'StaticRenderer');

  var TimerMixin = _require(_dependencyMap[9], 'react-timer-mixin');

  var View = _require(_dependencyMap[10], 'View');

  var cloneReferencedElement = _require(_dependencyMap[11], 'react-clone-referenced-element');

  var createReactClass = _require(_dependencyMap[12], 'create-react-class');

  var isEmpty = _require(_dependencyMap[13], 'isEmpty');

  var merge = _require(_dependencyMap[14], 'merge');

  var DEFAULT_PAGE_SIZE = 1;
  var DEFAULT_INITIAL_ROWS = 10;
  var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
  var DEFAULT_END_REACHED_THRESHOLD = 1000;
  var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
  var ListView = createReactClass({
    displayName: 'ListView',
    _childFrames: [],
    _sentEndForContentLength: null,
    _scrollComponent: null,
    _prevRenderedRowsCount: 0,
    _visibleRows: {},
    scrollProperties: {},
    mixins: [ScrollResponder.Mixin, TimerMixin],
    statics: {
      DataSource: ListViewDataSource
    },
    propTypes: _extends({}, ScrollView.propTypes, {
      dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,
      renderSeparator: PropTypes.func,
      renderRow: PropTypes.func.isRequired,
      initialListSize: PropTypes.number.isRequired,
      onEndReached: PropTypes.func,
      onEndReachedThreshold: PropTypes.number.isRequired,
      pageSize: PropTypes.number.isRequired,
      renderFooter: PropTypes.func,
      renderHeader: PropTypes.func,
      renderSectionHeader: PropTypes.func,
      renderScrollComponent: PropTypes.func.isRequired,
      scrollRenderAheadDistance: PropTypes.number.isRequired,
      onChangeVisibleRows: PropTypes.func,
      removeClippedSubviews: PropTypes.bool,
      stickySectionHeadersEnabled: PropTypes.bool,
      stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,
      enableEmptySections: PropTypes.bool
    }),
    getMetrics: function getMetrics() {
      return {
        contentLength: this.scrollProperties.contentLength,
        totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
        renderedRows: this.state.curRenderedRowsCount,
        visibleRows: Object.keys(this._visibleRows).length
      };
    },
    getScrollResponder: function getScrollResponder() {
      if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
        return this._scrollComponent.getScrollResponder();
      }
    },
    getScrollableNode: function getScrollableNode() {
      if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
        return this._scrollComponent.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollComponent);
      }
    },
    scrollTo: function scrollTo() {
      if (this._scrollComponent && this._scrollComponent.scrollTo) {
        var _scrollComponent;

        (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);
      }
    },
    scrollToEnd: function scrollToEnd(options) {
      if (this._scrollComponent) {
        if (this._scrollComponent.scrollToEnd) {
          this._scrollComponent.scrollToEnd(options);
        } else {
          console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');
        }
      }
    },
    flashScrollIndicators: function flashScrollIndicators() {
      if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
        this._scrollComponent.flashScrollIndicators();
      }
    },
    setNativeProps: function setNativeProps(props) {
      if (this._scrollComponent) {
        this._scrollComponent.setNativeProps(props);
      }
    },
    getDefaultProps: function getDefaultProps() {
      return {
        initialListSize: DEFAULT_INITIAL_ROWS,
        pageSize: DEFAULT_PAGE_SIZE,
        renderScrollComponent: function renderScrollComponent(props) {
          return React.createElement(ScrollView, _extends({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 336
            }
          }));
        },
        scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
        onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
        stickySectionHeadersEnabled: Platform.OS === 'ios',
        stickyHeaderIndices: []
      };
    },
    getInitialState: function getInitialState() {
      return {
        curRenderedRowsCount: this.props.initialListSize,
        highlightedRow: {}
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this._scrollComponent.getInnerViewNode();
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this.scrollProperties = {
        visibleLength: null,
        contentLength: null,
        offset: 0
      };
      this._childFrames = [];
      this._visibleRows = {};
      this._prevRenderedRowsCount = 0;
      this._sentEndForContentLength = null;
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      this.requestAnimationFrame(function () {
        _this._measureAndUpdateScrollProps();
      });
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
        this.setState(function (state, props) {
          _this2._prevRenderedRowsCount = 0;
          return {
            curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
          };
        }, function () {
          return _this2._renderMoreRowsIfNeeded();
        });
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var _this3 = this;

      this.requestAnimationFrame(function () {
        _this3._measureAndUpdateScrollProps();
      });
    },
    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
      this.setState({
        highlightedRow: {
          sectionID: sectionID,
          rowID: rowID
        }
      });
    },
    render: function render() {
      var bodyComponents = [];
      var dataSource = this.props.dataSource;
      var allRowIDs = dataSource.rowIdentities;
      var rowCount = 0;
      var stickySectionHeaderIndices = [];
      var renderSectionHeader = this.props.renderSectionHeader;
      var header = this.props.renderHeader && this.props.renderHeader();
      var footer = this.props.renderFooter && this.props.renderFooter();
      var totalIndex = header ? 1 : 0;

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          if (this.props.enableEmptySections === undefined) {
            var warning = _require(_dependencyMap[15], 'fbjs/lib/warning');

            warning(false, 'In next release empty section headers will be rendered.' + " In this release you can use 'enableEmptySections' flag to render empty section headers.");
            continue;
          } else {
            var invariant = _require(_dependencyMap[16], 'fbjs/lib/invariant');

            invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered." + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + " In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
          }
        }

        if (renderSectionHeader) {
          var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);

          if (element) {
            bodyComponents.push(React.cloneElement(element, {
              key: 's_' + sectionID
            }));

            if (this.props.stickySectionHeadersEnabled) {
              stickySectionHeaderIndices.push(totalIndex);
            }

            totalIndex++;
          }
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var comboID = sectionID + '_' + rowID;
          var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
          var row = React.createElement(StaticRenderer, {
            key: 'r_' + comboID,
            shouldUpdate: !!shouldUpdateRow,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 471
            }
          });
          bodyComponents.push(row);
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
            var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);

            if (separator) {
              bodyComponents.push(React.createElement(
                View,
                {
                  key: 's_' + comboID,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 500
                  }
                },
                separator
              ));
              totalIndex++;
            }
          }

          if (++rowCount === this.state.curRenderedRowsCount) {
            break;
          }
        }

        if (rowCount >= this.state.curRenderedRowsCount) {
          break;
        }
      }

      var _props = this.props,
          renderScrollComponent = _props.renderScrollComponent,
          props = _objectWithoutProperties(_props, ["renderScrollComponent"]);

      if (!props.scrollEventThrottle) {
        props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
      }

      if (props.removeClippedSubviews === undefined) {
        props.removeClippedSubviews = true;
      }

      _extends(props, {
        onScroll: this._onScroll,
        stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),
        onKeyboardWillShow: undefined,
        onKeyboardWillHide: undefined,
        onKeyboardDidShow: undefined,
        onKeyboardDidHide: undefined
      });

      return cloneReferencedElement(renderScrollComponent(props), {
        ref: this._setScrollComponentRef,
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        DEPRECATED_sendUpdatedChildFrames: _typeof(props.onChangeVisibleRows) !== undefined
      }, header, bodyComponents, footer);
    },
    _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
      var scrollComponent = this.getScrollResponder();

      if (!scrollComponent || !scrollComponent.getInnerViewNode) {
        return;
      }

      RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
    },
    _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
      this._scrollComponent = scrollComponent;
    },
    _onContentSizeChange: function _onContentSizeChange(width, height) {
      var contentLength = !this.props.horizontal ? height : width;

      if (contentLength !== this.scrollProperties.contentLength) {
        this.scrollProperties.contentLength = contentLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _onLayout: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var visibleLength = !this.props.horizontal ? height : width;

      if (visibleLength !== this.scrollProperties.visibleLength) {
        this.scrollProperties.visibleLength = visibleLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onLayout && this.props.onLayout(event);
    },
    _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
      if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._sentEndForContentLength = this.scrollProperties.contentLength;
        this.props.onEndReached(event);
        return true;
      }

      return false;
    },
    _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
      if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._maybeCallOnEndReached();

        return;
      }

      var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);

      if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
        this._pageInNewRows();
      }
    },
    _pageInNewRows: function _pageInNewRows() {
      var _this4 = this;

      this.setState(function (state, props) {
        var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
        _this4._prevRenderedRowsCount = state.curRenderedRowsCount;
        return {
          curRenderedRowsCount: rowsToRender
        };
      }, function () {
        _this4._measureAndUpdateScrollProps();

        _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;
      });
    },
    _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
      return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
    },
    _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
      var _this5 = this;

      if (!this.props.onChangeVisibleRows) {
        return;
      }

      if (updatedFrames) {
        updatedFrames.forEach(function (newFrame) {
          _this5._childFrames[newFrame.index] = merge(newFrame);
        });
      }

      var isVertical = !this.props.horizontal;
      var dataSource = this.props.dataSource;
      var visibleMin = this.scrollProperties.offset;
      var visibleMax = visibleMin + this.scrollProperties.visibleLength;
      var allRowIDs = dataSource.rowIdentities;
      var header = this.props.renderHeader && this.props.renderHeader();
      var totalIndex = header ? 1 : 0;
      var visibilityChanged = false;
      var changedRows = {};

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          continue;
        }

        var sectionID = dataSource.sectionIdentities[sectionIdx];

        if (this.props.renderSectionHeader) {
          totalIndex++;
        }

        var visibleSection = this._visibleRows[sectionID];

        if (!visibleSection) {
          visibleSection = {};
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var frame = this._childFrames[totalIndex];
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            totalIndex++;
          }

          if (!frame) {
            break;
          }

          var rowVisible = visibleSection[rowID];
          var min = isVertical ? frame.y : frame.x;
          var max = min + (isVertical ? frame.height : frame.width);

          if (!min && !max || min === max) {
            break;
          }

          if (min > visibleMax || max < visibleMin) {
            if (rowVisible) {
              visibilityChanged = true;
              delete visibleSection[rowID];

              if (!changedRows[sectionID]) {
                changedRows[sectionID] = {};
              }

              changedRows[sectionID][rowID] = false;
            }
          } else if (!rowVisible) {
            visibilityChanged = true;
            visibleSection[rowID] = true;

            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }

            changedRows[sectionID][rowID] = true;
          }
        }

        if (!isEmpty(visibleSection)) {
          this._visibleRows[sectionID] = visibleSection;
        } else if (this._visibleRows[sectionID]) {
          delete this._visibleRows[sectionID];
        }
      }

      visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
    },
    _onScroll: function _onScroll(e) {
      var isVertical = !this.props.horizontal;
      this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
      this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
      this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];

      this._updateVisibleRows(e.nativeEvent.updatedChildFrames);

      if (!this._maybeCallOnEndReached(e)) {
        this._renderMoreRowsIfNeeded();
      }

      if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
        this._sentEndForContentLength = null;
      }

      this.props.onScroll && this.props.onScroll(e);
    }
  });
  module.exports = ListView;
},432,[433,75,172,25,92,67,414,416,435,382,213,436,216,434,176,20,19],"ListView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var isEmpty = _require(_dependencyMap[1], 'isEmpty');

  var warning = _require(_dependencyMap[2], 'fbjs/lib/warning');

  function defaultGetRowData(dataBlob, sectionID, rowID) {
    return dataBlob[sectionID][rowID];
  }

  function defaultGetSectionHeaderData(dataBlob, sectionID) {
    return dataBlob[sectionID];
  }

  var ListViewDataSource = function () {
    function ListViewDataSource(params) {
      _classCallCheck(this, ListViewDataSource);

      invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
      this._rowHasChanged = params.rowHasChanged;
      this._getRowData = params.getRowData || defaultGetRowData;
      this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
      this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;
      this._dataBlob = null;
      this._dirtyRows = [];
      this._dirtySections = [];
      this._cachedRowCount = 0;
      this.rowIdentities = [];
      this.sectionIdentities = [];
    }

    _createClass(ListViewDataSource, [{
      key: "cloneWithRows",
      value: function cloneWithRows(dataBlob, rowIdentities) {
        var rowIds = rowIdentities ? [[].concat(_toConsumableArray(rowIdentities))] : null;

        if (!this._sectionHeaderHasChanged) {
          this._sectionHeaderHasChanged = function () {
            return false;
          };
        }

        return this.cloneWithRowsAndSections({
          s1: dataBlob
        }, ['s1'], rowIds);
      }
    }, {
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
        invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');
        var newSource = new ListViewDataSource({
          getRowData: this._getRowData,
          getSectionHeaderData: this._getSectionHeaderData,
          rowHasChanged: this._rowHasChanged,
          sectionHeaderHasChanged: this._sectionHeaderHasChanged
        });
        newSource._dataBlob = dataBlob;

        if (sectionIdentities) {
          newSource.sectionIdentities = sectionIdentities;
        } else {
          newSource.sectionIdentities = Object.keys(dataBlob);
        }

        if (rowIdentities) {
          newSource.rowIdentities = rowIdentities;
        } else {
          newSource.rowIdentities = [];
          newSource.sectionIdentities.forEach(function (sectionID) {
            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
          });
        }

        newSource._cachedRowCount = countRows(newSource.rowIdentities);

        newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

        return newSource;
      }
    }, {
      key: "getRowCount",
      value: function getRowCount() {
        return this._cachedRowCount;
      }
    }, {
      key: "getRowAndSectionCount",
      value: function getRowAndSectionCount() {
        return this._cachedRowCount + this.sectionIdentities.length;
      }
    }, {
      key: "rowShouldUpdate",
      value: function rowShouldUpdate(sectionIndex, rowIndex) {
        var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
        return needsUpdate;
      }
    }, {
      key: "getRowData",
      value: function getRowData(sectionIndex, rowIndex) {
        var sectionID = this.sectionIdentities[sectionIndex];
        var rowID = this.rowIdentities[sectionIndex][rowIndex];
        warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
        return this._getRowData(this._dataBlob, sectionID, rowID);
      }
    }, {
      key: "getRowIDForFlatIndex",
      value: function getRowIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.rowIdentities[ii][accessIndex];
          }
        }

        return null;
      }
    }, {
      key: "getSectionIDForFlatIndex",
      value: function getSectionIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.sectionIdentities[ii];
          }
        }

        return null;
      }
    }, {
      key: "getSectionLengths",
      value: function getSectionLengths() {
        var results = [];

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          results.push(this.rowIdentities[ii].length);
        }

        return results;
      }
    }, {
      key: "sectionHeaderShouldUpdate",
      value: function sectionHeaderShouldUpdate(sectionIndex) {
        var needsUpdate = this._dirtySections[sectionIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
        return needsUpdate;
      }
    }, {
      key: "getSectionHeaderData",
      value: function getSectionHeaderData(sectionIndex) {
        if (!this._getSectionHeaderData) {
          return null;
        }

        var sectionID = this.sectionIdentities[sectionIndex];
        warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
        return this._getSectionHeaderData(this._dataBlob, sectionID);
      }
    }, {
      key: "_calculateDirtyArrays",
      value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
        var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
        var prevRowsHash = {};

        for (var ii = 0; ii < prevRowIDs.length; ii++) {
          var sectionID = prevSectionIDs[ii];
          warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
          prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
        }

        this._dirtySections = [];
        this._dirtyRows = [];
        var dirty;

        for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
          var sectionID = this.sectionIdentities[sIndex];
          dirty = !prevSectionsHash[sectionID];
          var sectionHeaderHasChanged = this._sectionHeaderHasChanged;

          if (!dirty && sectionHeaderHasChanged) {
            dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
          }

          this._dirtySections.push(!!dirty);

          this._dirtyRows[sIndex] = [];

          for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
            var rowID = this.rowIdentities[sIndex][rIndex];
            dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));

            this._dirtyRows[sIndex].push(!!dirty);
          }
        }
      }
    }]);

    return ListViewDataSource;
  }();

  function countRows(allRowIDs) {
    var totalRows = 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      totalRows += rowIDs.length;
    }

    return totalRows;
  }

  function keyedDictionaryFromArray(arr) {
    if (isEmpty(arr)) {
      return {};
    }

    var result = {};

    for (var ii = 0; ii < arr.length; ii++) {
      var key = arr[ii];
      warning(!result[key], 'Value appears more than once in array: ' + key);
      result[key] = true;
    }

    return result;
  }

  module.exports = ListViewDataSource;
},433,[19,434,20],"ListViewDataSource");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  function isEmpty(obj) {
    if (Array.isArray(obj)) {
      return obj.length === 0;
    } else if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) === 'object') {
      for (var i in obj) {
        return false;
      }

      return true;
    } else {
      return !obj;
    }
  }

  module.exports = isEmpty;
},434,[],"isEmpty");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class, _temp;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    StaticRenderer: {
      displayName: "StaticRenderer"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/StaticRenderer.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var StaticRenderer = _wrapComponent("StaticRenderer")((_temp = _class = function (_React$Component) {
    _inherits(StaticRenderer, _React$Component);

    function StaticRenderer() {
      _classCallCheck(this, StaticRenderer);

      return _possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
    }

    _createClass(StaticRenderer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.render();
      }
    }]);

    return StaticRenderer;
  }(React.Component), _class.propTypes = {
    shouldUpdate: PropTypes.bool.isRequired,
    render: PropTypes.func.isRequired
  }, _temp));

  module.exports = StaticRenderer;
},435,[13,219,172,25],"StaticRenderer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var React = _require(_dependencyMap[0], 'react');

  function cloneReferencedElement(element, config) {
    var cloneRef = config.ref;
    var originalRef = element.ref;

    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    if (originalRef == null || cloneRef == null) {
      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    if (typeof originalRef !== 'function') {
      if (__DEV__) {
        console.warn('Cloning an element with a ref that will be overwritten because it ' + 'is not a function. Use a composable callback-style ref instead. ' + 'Ignoring ref: ' + originalRef);
      }

      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    return React.cloneElement.apply(React, [element, _extends({}, config, {
      ref: function ref(component) {
        cloneRef(component);
        originalRef(component);
      }
    })].concat(children));
  }

  module.exports = cloneReferencedElement;
},436,[13],"node_modules/react-clone-referenced-element/cloneReferencedElement.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var ViewPropTypes = _require(_dependencyMap[5], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[6], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[7], 'requireNativeComponent');

  if (Platform.OS === 'android') {
    var AndroidSwipeRefreshLayout = _require(_dependencyMap[8], 'UIManager').AndroidSwipeRefreshLayout;

    var RefreshLayoutConsts = AndroidSwipeRefreshLayout ? AndroidSwipeRefreshLayout.Constants : {
      SIZE: {}
    };
  } else {
    var RefreshLayoutConsts = {
      SIZE: {}
    };
  }

  var RefreshControl = createReactClass({
    displayName: 'RefreshControl',
    statics: {
      SIZE: RefreshLayoutConsts.SIZE
    },
    mixins: [NativeMethodsMixin],
    propTypes: _extends({}, ViewPropTypes, {
      onRefresh: PropTypes.func,
      refreshing: PropTypes.bool.isRequired,
      tintColor: ColorPropType,
      titleColor: ColorPropType,
      title: PropTypes.string,
      enabled: PropTypes.bool,
      colors: PropTypes.arrayOf(ColorPropType),
      progressBackgroundColor: ColorPropType,
      size: PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE]),
      progressViewOffset: PropTypes.number
    }),
    _nativeRef: null,
    _lastNativeRefreshing: false,
    componentDidMount: function componentDidMount() {
      this._lastNativeRefreshing = this.props.refreshing;
    },
    componentDidUpdate: function componentDidUpdate(prevProps) {
      if (this.props.refreshing !== prevProps.refreshing) {
        this._lastNativeRefreshing = this.props.refreshing;
      } else if (this.props.refreshing !== this._lastNativeRefreshing) {
        this._nativeRef.setNativeProps({
          refreshing: this.props.refreshing
        });

        this._lastNativeRefreshing = this.props.refreshing;
      }
    },
    render: function render() {
      var _this = this;

      return React.createElement(NativeRefreshControl, _extends({}, this.props, {
        ref: function ref(_ref) {
          _this._nativeRef = _ref;
        },
        onRefresh: this._onRefresh,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 158
        }
      }));
    },
    _onRefresh: function _onRefresh() {
      this._lastNativeRefreshing = true;
      this.props.onRefresh && this.props.onRefresh();
      this.forceUpdate();
    }
  });

  if (Platform.OS === 'ios') {
    var NativeRefreshControl = requireNativeComponent('RCTRefreshControl', RefreshControl);
  } else if (Platform.OS === 'android') {
    var NativeRefreshControl = requireNativeComponent('AndroidSwipeRefreshLayout', RefreshControl);
  }

  module.exports = RefreshControl;
},437,[89,91,75,172,25,173,216,188,164],"RefreshControl");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require2(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index2 = _require2(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index3 = _interopRequireDefault(_index2);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Lists/VirtualizedList.js",
      _class2,
      _temp3,
      _class3,
      _temp4;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    VirtualizedList: {
      displayName: "VirtualizedList"
    },
    CellRenderer: {
      displayName: "CellRenderer"
    },
    VirtualizedCellWrapper: {
      displayName: "VirtualizedCellWrapper"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index3.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Lists/VirtualizedList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Batchinator = _require2(_dependencyMap[2], 'Batchinator');

  var FillRateHelper = _require2(_dependencyMap[3], 'FillRateHelper');

  var PropTypes = _require2(_dependencyMap[4], 'prop-types');

  var React = _require2(_dependencyMap[5], 'React');

  var ReactNative = _require2(_dependencyMap[6], 'ReactNative');

  var RefreshControl = _require2(_dependencyMap[7], 'RefreshControl');

  var ScrollView = _require2(_dependencyMap[8], 'ScrollView');

  var StyleSheet = _require2(_dependencyMap[9], 'StyleSheet');

  var UIManager = _require2(_dependencyMap[10], 'UIManager');

  var View = _require2(_dependencyMap[11], 'View');

  var ViewabilityHelper = _require2(_dependencyMap[12], 'ViewabilityHelper');

  var flattenStyle = _require2(_dependencyMap[13], 'flattenStyle');

  var infoLog = _require2(_dependencyMap[14], 'infoLog');

  var invariant = _require2(_dependencyMap[15], 'fbjs/lib/invariant');

  var warning = _require2(_dependencyMap[16], 'fbjs/lib/warning');

  var _require = _require2(_dependencyMap[17], 'VirtualizeUtils'),
      computeWindowedRenderLimits = _require.computeWindowedRenderLimits;

  var _usedIndexForKey = false;

  var VirtualizedList = _wrapComponent("VirtualizedList")((_temp = _class = function (_React$PureComponent) {
    _inherits(VirtualizedList, _React$PureComponent);

    _createClass(VirtualizedList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;

        var frame = this._getFrameMetricsApprox(veryLast);

        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _props = this.props,
            data = _props.data,
            horizontal = _props.horizontal,
            getItemCount = _props.getItemCount,
            getItemLayout = _props.getItemLayout,
            onScrollToIndexFailed = _props.onScrollToIndexFailed;
        var animated = params.animated,
            index = params.index,
            viewOffset = params.viewOffset,
            viewPosition = params.viewPosition;
        invariant(index >= 0 && index < getItemCount(data), "scrollToIndex out of range: " + index + " vs " + (getItemCount(data) - 1));

        if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
          invariant(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
          onScrollToIndexFailed({
            averageItemLength: this._averageCellLength,
            highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
            index: index
          });
          return;
        }

        var frame = this._getFrameMetricsApprox(index);

        var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);

        this._scrollRef.scrollTo(horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _props2 = this.props,
            data = _props2.data,
            getItem = _props2.getItem,
            getItemCount = _props2.getItemCount;
        var itemCount = getItemCount(data);

        for (var _index = 0; _index < itemCount; _index++) {
          if (getItem(data, _index) === item) {
            this.scrollToIndex(_extends({}, params, {
              index: _index
            }));
            break;
          }
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref.recordInteraction();
        });

        this._viewabilityTuples.forEach(function (t) {
          t.viewabilityHelper.recordInteraction();
        });

        this._updateViewableItems(this.props.data);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        this._scrollRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return ReactNative.findNodeHandle(this._scrollRef);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: {
            getScrollMetrics: this._getScrollMetrics,
            horizontal: this.props.horizontal,
            getOutermostParentListRef: this._getOutermostParentListRef,
            getNestedChildState: this._getNestedChildState,
            registerAsNestedChild: this._registerAsNestedChild,
            unregisterAsNestedChild: this._unregisterAsNestedChild
          }
        };
      }
    }, {
      key: "_getCellKey",
      value: function _getCellKey() {
        return this.context.virtualizedCell && this.context.virtualizedCell.cellKey || 'rootList';
      }
    }, {
      key: "hasMore",
      value: function hasMore() {
        return this._hasMore;
      }
    }]);

    function VirtualizedList(props, context) {
      _classCallCheck(this, VirtualizedList);

      var _this = _possibleConstructorReturn(this, (VirtualizedList.__proto__ || Object.getPrototypeOf(VirtualizedList)).call(this, props, context));

      _initialiseProps.call(_this);

      invariant(!props.onScroll || !props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
      invariant(props.windowSize > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
      _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
      _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
            onViewableItemsChanged: pair.onViewableItemsChanged
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new ViewabilityHelper(_this.props.viewabilityConfig),
          onViewableItemsChanged: _this.props.onViewableItemsChanged
        });
      }

      var initialState = {
        first: _this.props.initialScrollIndex || 0,
        last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
      };

      if (_this._isNestedWithSameOrientation()) {
        var storedState = _this.context.virtualizedList.getNestedChildState(_this.props.listKey || _this._getCellKey());

        if (storedState) {
          initialState = storedState;
          _this.state = storedState;
          _this._frames = storedState.frames;
        }
      }

      _this.state = initialState;
      return _this;
    }

    _createClass(VirtualizedList, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.registerAsNestedChild({
            cellKey: this._getCellKey(),
            key: this.props.listKey || this._getCellKey(),
            ref: this
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.unregisterAsNestedChild({
            key: this.props.listKey || this._getCellKey(),
            state: {
              first: this.state.first,
              last: this.state.last,
              frames: this._frames
            }
          });
        }

        this._updateViewableItems(null);

        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.dispose();
        });

        this._fillRateHelper.deactivateAndFlush();
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this2 = this;

        var _props3 = this.props,
            CellRendererComponent = _props3.CellRendererComponent,
            ItemSeparatorComponent = _props3.ItemSeparatorComponent,
            data = _props3.data,
            getItem = _props3.getItem,
            getItemCount = _props3.getItemCount,
            horizontal = _props3.horizontal,
            keyExtractor = _props3.keyExtractor;
        var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey = void 0;
        last = Math.min(end, last);

        var _loop = function _loop(ii) {
          var item = getItem(data, ii);
          var key = keyExtractor(item, ii);

          _this2._indicesToKeys.set(ii, key);

          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }

          cells.push(React.createElement(CellRenderer, {
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            cellKey: key,
            fillRateHelper: _this2._fillRateHelper,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            key: key,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this2._onUpdateSeparators,
            onLayout: function onLayout(e) {
              return _this2._onCellLayout(e, key, ii);
            },
            onUnmount: _this2._onCellUnmount,
            parentProps: _this2.props,
            ref: function (_ref) {
              function ref(_x) {
                return _ref.apply(this, arguments);
              }

              ref.toString = function () {
                return _ref.toString();
              };

              return ref;
            }(function (ref) {
              _this2._cellRefs[key] = ref;
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 670
            }
          }));
          prevCellKey = key;
        };

        for (var ii = first; ii <= last; ii++) {
          _loop(ii);
        }
      }
    }, {
      key: "_isVirtualizationDisabled",
      value: function _isVirtualizationDisabled() {
        return this.props.disableVirtualization;
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context.virtualizedList;
        return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
      }
    }, {
      key: "render",
      value: function render() {
        if (__DEV__) {
          var flatStyles = flattenStyle(this.props.contentContainerStyle);
          warning(flatStyles == null || flatStyles.flexWrap !== 'wrap', '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
        }

        var _props4 = this.props,
            ListEmptyComponent = _props4.ListEmptyComponent,
            ListFooterComponent = _props4.ListFooterComponent,
            ListHeaderComponent = _props4.ListHeaderComponent;
        var _props5 = this.props,
            data = _props5.data,
            horizontal = _props5.horizontal;

        var isVirtualizationDisabled = this._isVirtualizationDisabled();

        var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];

        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }

          var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 744
            }
          });
          cells.push(React.createElement(
            VirtualizedCellWrapper,
            {
              cellKey: this._getCellKey() + '-header',
              key: "$header",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 747
              }
            },
            React.createElement(
              View,
              {
                onLayout: this._onLayoutHeader,
                style: inversionStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 750
                }
              },
              element
            )
          ));
        }

        var itemCount = this.props.getItemCount(data);

        if (itemCount > 0) {
          _usedIndexForKey = false;
          var spacerKey = !horizontal ? 'height' : 'width';
          var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
          var _state = this.state,
              _first = _state.first,
              _last = _state.last;

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);

          var firstAfterInitial = Math.max(lastInitialIndex + 1, _first);

          if (!isVirtualizationDisabled && _first > lastInitialIndex + 1) {
            var insertedStickySpacer = false;

            if (stickyIndicesFromProps.size > 0) {
              var stickyOffset = ListHeaderComponent ? 1 : 0;

              for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
                if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                  var initBlock = this._getFrameMetricsApprox(lastInitialIndex);

                  var stickyBlock = this._getFrameMetricsApprox(ii);

                  var leadSpace = stickyBlock.offset - (initBlock.offset + initBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_lead",
                    style: _defineProperty({}, spacerKey, leadSpace),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 789
                    }
                  }));

                  this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);

                  var trailSpace = this._getFrameMetricsApprox(_first).offset - (stickyBlock.offset + stickyBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_trail",
                    style: _defineProperty({}, spacerKey, trailSpace),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 803
                    }
                  }));
                  insertedStickySpacer = true;
                  break;
                }
              }
            }

            if (!insertedStickySpacer) {
              var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);

              var firstSpace = this._getFrameMetricsApprox(_first).offset - (_initBlock.offset + _initBlock.length);

              cells.push(React.createElement(View, {
                key: "$lead_spacer",
                style: _defineProperty({}, spacerKey, firstSpace),
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 816
                }
              }));
            }
          }

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, _last, inversionStyle);

          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn('VirtualizedList: missing keys for items, make sure to specify a key property on each ' + 'item or provide a custom keyExtractor.');
            this._hasWarned.keys = true;
          }

          if (!isVirtualizationDisabled && _last < itemCount - 1) {
            var lastFrame = this._getFrameMetricsApprox(_last);

            var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);

            var endFrame = this._getFrameMetricsApprox(end);

            var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
            cells.push(React.createElement(View, {
              key: "$tail_spacer",
              style: _defineProperty({}, spacerKey, tailSpacerLength),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 849
              }
            }));
          }
        } else if (ListEmptyComponent) {
          var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 857
            }
          });

          cells.push(React.createElement(
            View,
            {
              key: "$empty",
              onLayout: this._onLayoutEmpty,
              style: inversionStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 860
              }
            },
            _element
          ));
        }

        if (ListFooterComponent) {
          var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 877
            }
          });

          cells.push(React.createElement(
            VirtualizedCellWrapper,
            {
              cellKey: this._getCellKey() + '-footer',
              key: "$footer",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 880
              }
            },
            React.createElement(
              View,
              {
                onLayout: this._onLayoutFooter,
                style: inversionStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 883
                }
              },
              _element2
            )
          ));
        }

        var scrollProps = _extends({}, this.props, {
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          scrollEventThrottle: this.props.scrollEventThrottle,
          invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
          stickyHeaderIndices: stickyHeaderIndices
        });

        if (inversionStyle) {
          scrollProps.style = [inversionStyle, this.props.style];
        }

        this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
        var ret = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells);

        if (this.props.debug) {
          return React.createElement(
            View,
            {
              style: {
                flex: 1
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 925
              }
            },
            ret,
            this._renderDebugOverlay()
          );
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _props6 = this.props,
            data = _props6.data,
            extraData = _props6.extraData;

        if (data !== prevProps.data || extraData !== prevProps.extraData) {
          this._hasDataChangedSinceEndReached = true;

          this._viewabilityTuples.forEach(function (tuple) {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }

        this._scheduleCellsToRenderUpdate();
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
      }
    }, {
      key: "_onCellLayout",
      value: function _onCellLayout(e, cellKey, index) {
        var layout = e.nativeEvent.layout;
        var next = {
          offset: this._selectOffset(layout),
          length: this._selectLength(layout),
          index: index,
          inLayout: true
        };
        var curr = this._frames[cellKey];

        if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
          this._totalCellLength += next.length - (curr ? curr.length : 0);
          this._totalCellsMeasured += curr ? 0 : 1;
          this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
          this._frames[cellKey] = next;
          this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);

          this._scheduleCellsToRenderUpdate();
        } else {
          this._frames[cellKey].inLayout = true;
        }

        this._computeBlankness();
      }
    }, {
      key: "_measureLayoutRelativeToContainingList",
      value: function _measureLayoutRelativeToContainingList() {
        var _this3 = this;

        UIManager.measureLayout(ReactNative.findNodeHandle(this), ReactNative.findNodeHandle(this.context.virtualizedList.getOutermostParentListRef()), function (error) {
          console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
        }, function (x, y, width, height) {
          _this3._offsetFromParentVirtualizedList = _this3._selectOffset({
            x: x,
            y: y
          });
          _this3._scrollMetrics.contentLength = _this3._selectLength({
            width: width,
            height: height
          });

          var scrollMetrics = _this3._convertParentScrollMetrics(_this3.context.virtualizedList.getScrollMetrics());

          _this3._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
          _this3._scrollMetrics.offset = scrollMetrics.offset;
        });
      }
    }, {
      key: "_renderDebugOverlay",
      value: function _renderDebugOverlay() {
        var normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);

        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._getFrameMetricsApprox(ii);

          if (frame.inLayout) {
            framesInLayout.push(frame);
          }
        }

        var windowTop = this._getFrameMetricsApprox(this.state.first).offset;

        var frameLast = this._getFrameMetricsApprox(this.state.last);

        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        var baseStyle = {
          position: 'absolute',
          top: 0,
          right: 0
        };
        return React.createElement(
          View,
          {
            style: _extends({}, baseStyle, {
              bottom: 0,
              width: 20,
              borderColor: 'blue',
              borderWidth: 1
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1136
            }
          },
          framesInLayout.map(function (f, ii) {
            return React.createElement(View, {
              key: 'f' + ii,
              style: _extends({}, baseStyle, {
                left: 0,
                top: f.offset * normalize,
                height: f.length * normalize,
                backgroundColor: 'orange'
              }),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1145
              }
            });
          }),
          React.createElement(View, {
            style: _extends({}, baseStyle, {
              left: 0,
              top: windowTop * normalize,
              height: windowLen * normalize,
              borderColor: 'green',
              borderWidth: 2
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1156
            }
          }),
          React.createElement(View, {
            style: _extends({}, baseStyle, {
              left: 0,
              top: visTop * normalize,
              height: visLen * normalize,
              borderColor: 'red',
              borderWidth: 2
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1166
            }
          })
        );
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !this.props.horizontal ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(metrics) {
        return !this.props.horizontal ? metrics.y : metrics.x;
      }
    }, {
      key: "_maybeCallOnEndReached",
      value: function _maybeCallOnEndReached() {
        var _props7 = this.props,
            data = _props7.data,
            getItemCount = _props7.getItemCount,
            onEndReached = _props7.onEndReached,
            onEndReachedThreshold = _props7.onEndReachedThreshold;
        var _scrollMetrics = this._scrollMetrics,
            contentLength = _scrollMetrics.contentLength,
            visibleLength = _scrollMetrics.visibleLength,
            offset = _scrollMetrics.offset;
        var distanceFromEnd = contentLength - visibleLength - offset;

        if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {
          this._hasDataChangedSinceEndReached = false;
          this._sentEndForContentLength = this._scrollMetrics.contentLength;
          onEndReached({
            distanceFromEnd: distanceFromEnd
          });
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        var _state2 = this.state,
            first = _state2.first,
            last = _state2.last;
        var _scrollMetrics2 = this._scrollMetrics,
            offset = _scrollMetrics2.offset,
            visibleLength = _scrollMetrics2.visibleLength,
            velocity = _scrollMetrics2.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;

        if (first > 0 || last < itemCount - 1) {
          var distTop = offset - this._getFrameMetricsApprox(first).offset;

          var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
          var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;
          hiPri = Math.min(distTop, distBottom) < 0 || velocity < -2 && distTop < scrollingThreshold || velocity > 2 && distBottom < scrollingThreshold;
        }

        if (hiPri && this._averageCellLength) {
          this._updateCellsToRenderBatcher.dispose({
            abort: true
          });

          this._updateCellsToRender();

          return;
        } else {
          this._updateCellsToRenderBatcher.schedule();
        }
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(data) {
        var _this4 = this;

        var getItemCount = this.props.getItemCount;

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.onUpdate(getItemCount(data), _this4._scrollMetrics.offset, _this4._scrollMetrics.visibleLength, _this4._getFrameMetrics, _this4._createViewToken, tuple.onViewableItemsChanged, _this4.state);
        });
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(newProps, prevState) {
        var data = newProps.data,
            extraData = newProps.extraData,
            getItemCount = newProps.getItemCount,
            maxToRenderPerBatch = newProps.maxToRenderPerBatch;
        return {
          first: Math.max(0, Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
          last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1))
        };
      }
    }]);

    return VirtualizedList;
  }(React.PureComponent), _class.defaultProps = {
    disableVirtualization: false,
    horizontal: false,
    initialNumToRender: 10,
    keyExtractor: function keyExtractor(item, index) {
      if (item.key != null) {
        return item.key;
      }

      _usedIndexForKey = true;
      return String(index);
    },
    maxToRenderPerBatch: 10,
    onEndReachedThreshold: 2,
    scrollEventThrottle: 50,
    updateCellsBatchingPeriod: 50,
    windowSize: 21
  }, _class.contextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    }),
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      getNestedChildState: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  }, _class.childContextTypes = {
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      getNestedChildState: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  }, _initialiseProps = function _initialiseProps() {
    var _this5 = this;

    this._getScrollMetrics = function () {
      return _this5._scrollMetrics;
    };

    this._getOutermostParentListRef = function () {
      if (_this5._isNestedWithSameOrientation()) {
        return _this5.context.virtualizedList.getOutermostParentListRef();
      } else {
        return _this5;
      }
    };

    this._getNestedChildState = function (key) {
      var existingChildData = _this5._nestedChildLists.get(key);

      return existingChildData && existingChildData.state;
    };

    this._registerAsNestedChild = function (childList) {
      var childListsInCell = _this5._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
      childListsInCell.add(childList.key);

      _this5._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);

      var existingChildData = _this5._nestedChildLists.get(childList.key);

      invariant(!(existingChildData && existingChildData.ref !== null), 'A VirtualizedList contains a cell which itself contains ' + 'more than one VirtualizedList of the same orientation as the parent ' + 'list. You must pass a unique listKey prop to each sibling list.');

      _this5._nestedChildLists.set(childList.key, {
        ref: childList.ref,
        state: null
      });

      if (_this5._hasInteracted) {
        childList.ref.recordInteraction();
      }
    };

    this._unregisterAsNestedChild = function (childList) {
      _this5._nestedChildLists.set(childList.key, {
        ref: null,
        state: childList.state
      });
    };

    this._onUpdateSeparators = function (keys, newProps) {
      keys.forEach(function (key) {
        var ref = key != null && _this5._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      });
    };

    this._averageCellLength = 0;
    this._cellKeysToChildListKeys = new Map();
    this._cellRefs = {};
    this._frames = {};
    this._footerLength = 0;
    this._hasDataChangedSinceEndReached = true;
    this._hasInteracted = false;
    this._hasMore = false;
    this._hasWarned = {};
    this._highestMeasuredFrameIndex = 0;
    this._headerLength = 0;
    this._indicesToKeys = new Map();
    this._hasDoneInitialScroll = false;
    this._nestedChildLists = new Map();
    this._offsetFromParentVirtualizedList = 0;
    this._prevParentOffset = 0;
    this._scrollMetrics = {
      contentLength: 0,
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0
    };
    this._scrollRef = null;
    this._sentEndForContentLength = 0;
    this._totalCellLength = 0;
    this._totalCellsMeasured = 0;
    this._viewabilityTuples = [];

    this._captureScrollRef = function (ref) {
      _this5._scrollRef = ref;
    };

    this._defaultRenderScrollComponent = function (props) {
      if (_this5._isNestedWithSameOrientation()) {
        return React.createElement(View, _extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1000
          }
        }));
      } else if (props.onRefresh) {
        invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');
        return React.createElement(ScrollView, _extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh,
            progressViewOffset: props.progressViewOffset,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1015
            }
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1009
          }
        }));
      } else {
        return React.createElement(ScrollView, _extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1024
          }
        }));
      }
    };

    this._onCellUnmount = function (cellKey) {
      var curr = _this5._frames[cellKey];

      if (curr) {
        _this5._frames[cellKey] = _extends({}, curr, {
          inLayout: false
        });
      }
    };

    this._onLayout = function (e) {
      if (_this5._isNestedWithSameOrientation()) {
        _this5._measureLayoutRelativeToContainingList();
      } else {
        _this5._scrollMetrics.visibleLength = _this5._selectLength(e.nativeEvent.layout);
      }

      _this5.props.onLayout && _this5.props.onLayout(e);

      _this5._scheduleCellsToRenderUpdate();

      _this5._maybeCallOnEndReached();
    };

    this._onLayoutEmpty = function (e) {
      _this5.props.onLayout && _this5.props.onLayout(e);
    };

    this._onLayoutFooter = function (e) {
      _this5._footerLength = _this5._selectLength(e.nativeEvent.layout);
    };

    this._onLayoutHeader = function (e) {
      _this5._headerLength = _this5._selectLength(e.nativeEvent.layout);
    };

    this._onContentSizeChange = function (width, height) {
      if (width > 0 && height > 0 && _this5.props.initialScrollIndex != null && _this5.props.initialScrollIndex > 0 && !_this5._hasDoneInitialScroll) {
        _this5.scrollToIndex({
          animated: false,
          index: _this5.props.initialScrollIndex
        });

        _this5._hasDoneInitialScroll = true;
      }

      if (_this5.props.onContentSizeChange) {
        _this5.props.onContentSizeChange(width, height);
      }

      _this5._scrollMetrics.contentLength = _this5._selectLength({
        height: height,
        width: width
      });

      _this5._scheduleCellsToRenderUpdate();

      _this5._maybeCallOnEndReached();
    };

    this._convertParentScrollMetrics = function (metrics) {
      var offset = metrics.offset - _this5._offsetFromParentVirtualizedList;
      var visibleLength = metrics.visibleLength;
      var dOffset = offset - _this5._scrollMetrics.offset;
      var contentLength = _this5._scrollMetrics.contentLength;
      return {
        visibleLength: visibleLength,
        contentLength: contentLength,
        offset: offset,
        dOffset: dOffset
      };
    };

    this._onScroll = function (e) {
      _this5._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScroll(e);
      });

      if (_this5.props.onScroll) {
        _this5.props.onScroll(e);
      }

      var timestamp = e.timeStamp;

      var visibleLength = _this5._selectLength(e.nativeEvent.layoutMeasurement);

      var contentLength = _this5._selectLength(e.nativeEvent.contentSize);

      var offset = _this5._selectOffset(e.nativeEvent.contentOffset);

      var dOffset = offset - _this5._scrollMetrics.offset;

      if (_this5._isNestedWithSameOrientation()) {
        if (_this5._scrollMetrics.contentLength === 0) {
          return;
        }

        var _convertParentScrollM = _this5._convertParentScrollMetrics({
          visibleLength: visibleLength,
          offset: offset
        });

        visibleLength = _convertParentScrollM.visibleLength;
        contentLength = _convertParentScrollM.contentLength;
        offset = _convertParentScrollM.offset;
        dOffset = _convertParentScrollM.dOffset;
      }

      var dt = _this5._scrollMetrics.timestamp ? Math.max(1, timestamp - _this5._scrollMetrics.timestamp) : 1;
      var velocity = dOffset / dt;

      if (dt > 500 && _this5._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this5._hasWarned.perf) {
        infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
          dt: dt,
          prevDt: _this5._scrollMetrics.dt,
          contentLength: contentLength
        });
        _this5._hasWarned.perf = true;
      }

      _this5._scrollMetrics = {
        contentLength: contentLength,
        dt: dt,
        dOffset: dOffset,
        offset: offset,
        timestamp: timestamp,
        velocity: velocity,
        visibleLength: visibleLength
      };

      _this5._updateViewableItems(_this5.props.data);

      if (!_this5.props) {
        return;
      }

      _this5._maybeCallOnEndReached();

      if (velocity !== 0) {
        _this5._fillRateHelper.activate();
      }

      _this5._computeBlankness();

      _this5._scheduleCellsToRenderUpdate();
    };

    this._onScrollBeginDrag = function (e) {
      _this5._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScrollBeginDrag(e);
      });

      _this5._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });

      _this5._hasInteracted = true;
      _this5.props.onScrollBeginDrag && _this5.props.onScrollBeginDrag(e);
    };

    this._onScrollEndDrag = function (e) {
      var velocity = e.nativeEvent.velocity;

      if (velocity) {
        _this5._scrollMetrics.velocity = _this5._selectOffset(velocity);
      }

      _this5._computeBlankness();

      _this5.props.onScrollEndDrag && _this5.props.onScrollEndDrag(e);
    };

    this._onMomentumScrollEnd = function (e) {
      _this5._scrollMetrics.velocity = 0;

      _this5._computeBlankness();

      _this5.props.onMomentumScrollEnd && _this5.props.onMomentumScrollEnd(e);
    };

    this._updateCellsToRender = function () {
      var _props8 = _this5.props,
          data = _props8.data,
          getItemCount = _props8.getItemCount,
          onEndReachedThreshold = _props8.onEndReachedThreshold;

      var isVirtualizationDisabled = _this5._isVirtualizationDisabled();

      _this5._updateViewableItems(data);

      if (!data) {
        return;
      }

      _this5.setState(function (state) {
        var newState = void 0;

        if (!isVirtualizationDisabled) {
          if (_this5._scrollMetrics.visibleLength) {
            if (!_this5.props.initialScrollIndex || _this5._scrollMetrics.offset) {
              newState = computeWindowedRenderLimits(_this5.props, state, _this5._getFrameMetricsApprox, _this5._scrollMetrics);
            }
          }
        } else {
          var _scrollMetrics3 = _this5._scrollMetrics,
              contentLength = _scrollMetrics3.contentLength,
              _offset = _scrollMetrics3.offset,
              visibleLength = _scrollMetrics3.visibleLength;

          var _distanceFromEnd = contentLength - visibleLength - _offset;

          var renderAhead = _distanceFromEnd < onEndReachedThreshold * visibleLength ? _this5.props.maxToRenderPerBatch : 0;
          newState = {
            first: 0,
            last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
          };
        }

        if (newState && _this5._nestedChildLists.size > 0) {
          var newFirst = newState.first;
          var newLast = newState.last;

          for (var ii = newFirst; ii <= newLast; ii++) {
            var cellKeyForIndex = _this5._indicesToKeys.get(ii);

            var childListKeys = cellKeyForIndex && _this5._cellKeysToChildListKeys.get(cellKeyForIndex);

            if (!childListKeys) {
              continue;
            }

            var someChildHasMore = false;

            for (var _iterator = childListKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
              var _ref6;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref6 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref6 = _i.value;
              }

              var childKey = _ref6;

              var childList = _this5._nestedChildLists.get(childKey);

              if (childList && childList.ref && childList.ref.hasMore()) {
                someChildHasMore = true;
                break;
              }
            }

            if (someChildHasMore) {
              newState.last = ii;
              break;
            }
          }
        }

        return newState;
      });
    };

    this._createViewToken = function (index, isViewable) {
      var _props9 = _this5.props,
          data = _props9.data,
          getItem = _props9.getItem,
          keyExtractor = _props9.keyExtractor;
      var item = getItem(data, index);
      return {
        index: index,
        item: item,
        key: keyExtractor(item, index),
        isViewable: isViewable
      };
    };

    this._getFrameMetricsApprox = function (index) {
      var frame = _this5._getFrameMetrics(index);

      if (frame && frame.index === index) {
        return frame;
      } else {
        var _getItemLayout = _this5.props.getItemLayout;
        invariant(!_getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
        return {
          length: _this5._averageCellLength,
          offset: _this5._averageCellLength * index
        };
      }
    };

    this._getFrameMetrics = function (index) {
      var _props10 = _this5.props,
          data = _props10.data,
          getItem = _props10.getItem,
          getItemCount = _props10.getItemCount,
          getItemLayout = _props10.getItemLayout,
          keyExtractor = _props10.keyExtractor;
      invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
      var item = getItem(data, index);

      var frame = item && _this5._frames[keyExtractor(item, index)];

      if (!frame || frame.index !== index) {
        if (getItemLayout) {
          frame = getItemLayout(data, index);

          if (__DEV__) {
            var frameType = PropTypes.shape({
              length: PropTypes.number.isRequired,
              offset: PropTypes.number.isRequired,
              index: PropTypes.number.isRequired
            }).isRequired;
            PropTypes.checkPropTypes({
              frame: frameType
            }, {
              frame: frame
            }, 'frame', 'VirtualizedList.getItemLayout');
          }
        }
      }

      return frame;
    };
  }, _temp));

  var CellRenderer = _wrapComponent("CellRenderer")((_temp3 = _class2 = function (_React$Component) {
    _inherits(CellRenderer, _React$Component);

    function CellRenderer() {
      var _ref7;

      var _temp2, _this6, _ret2;

      _classCallCheck(this, CellRenderer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret2 = (_temp2 = (_this6 = _possibleConstructorReturn(this, (_ref7 = CellRenderer.__proto__ || Object.getPrototypeOf(CellRenderer)).call.apply(_ref7, [this].concat(args))), _this6), _this6.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this6.props.item
        }
      }, _this6._separators = {
        highlight: function highlight() {
          var _this6$props = _this6.props,
              cellKey = _this6$props.cellKey,
              prevCellKey = _this6$props.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: function unhighlight() {
          var _this6$props2 = _this6.props,
              cellKey = _this6$props2.cellKey,
              prevCellKey = _this6$props2.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this6$props3 = _this6.props,
              cellKey = _this6$props3.cellKey,
              prevCellKey = _this6$props3.prevCellKey;

          _this6.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      }, _temp2), _possibleConstructorReturn(_this6, _ret2);
    }

    _createClass(CellRenderer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: _extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "render",
      value: function render() {
        var _props11 = this.props,
            CellRendererComponent = _props11.CellRendererComponent,
            ItemSeparatorComponent = _props11.ItemSeparatorComponent,
            fillRateHelper = _props11.fillRateHelper,
            horizontal = _props11.horizontal,
            item = _props11.item,
            index = _props11.index,
            inversionStyle = _props11.inversionStyle,
            parentProps = _props11.parentProps;
        var renderItem = parentProps.renderItem,
            getItemLayout = parentProps.getItemLayout;
        invariant(renderItem, 'no renderItem!');
        var element = renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
        var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;
        var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, _extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1655
          }
        }));
        var cellStyle = inversionStyle ? horizontal ? [{
          flexDirection: 'row-reverse'
        }, inversionStyle] : [{
          flexDirection: 'column-reverse'
        }, inversionStyle] : horizontal ? [{
          flexDirection: 'row'
        }, inversionStyle] : inversionStyle;

        if (!CellRendererComponent) {
          return React.createElement(
            View,
            {
              style: cellStyle,
              onLayout: onLayout,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 1664
              }
            },
            element,
            itemSeparator
          );
        }

        return React.createElement(
          CellRendererComponent,
          _extends({}, this.props, {
            style: cellStyle,
            onLayout: onLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 1671
            }
          }),
          element,
          itemSeparator
        );
      }
    }]);

    return CellRenderer;
  }(React.Component), _class2.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  }, _temp3));

  var VirtualizedCellWrapper = _wrapComponent("VirtualizedCellWrapper")((_temp4 = _class3 = function (_React$Component2) {
    _inherits(VirtualizedCellWrapper, _React$Component2);

    function VirtualizedCellWrapper() {
      _classCallCheck(this, VirtualizedCellWrapper);

      return _possibleConstructorReturn(this, (VirtualizedCellWrapper.__proto__ || Object.getPrototypeOf(VirtualizedCellWrapper)).apply(this, arguments));
    }

    _createClass(VirtualizedCellWrapper, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);

    return VirtualizedCellWrapper;
  }(React.Component), _class3.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  }, _temp4));

  var styles = StyleSheet.create({
    verticallyInverted: {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    }
  });
  module.exports = VirtualizedList;
},438,[13,219,439,440,25,172,92,437,414,211,164,213,441,159,148,19,20,442],"VirtualizedList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var InteractionManager = _require(_dependencyMap[0], 'InteractionManager');

  var Batchinator = function () {
    function Batchinator(callback, delayMS) {
      _classCallCheck(this, Batchinator);

      this._delay = delayMS;
      this._callback = callback;
    }

    _createClass(Batchinator, [{
      key: "dispose",
      value: function dispose() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          abort: false
        };

        if (this._taskHandle) {
          this._taskHandle.cancel();

          if (!options.abort) {
            this._callback();
          }

          this._taskHandle = null;
        }
      }
    }, {
      key: "schedule",
      value: function schedule() {
        var _this = this;

        if (this._taskHandle) {
          return;
        }

        var timeoutHandle = setTimeout(function () {
          _this._taskHandle = InteractionManager.runAfterInteractions(function () {
            _this._taskHandle = null;

            _this._callback();
          });
        }, this._delay);
        this._taskHandle = {
          cancel: function cancel() {
            return clearTimeout(timeoutHandle);
          }
        };
      }
    }]);

    return Batchinator;
  }();

  module.exports = Batchinator;
},439,[393],"Batchinator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var performanceNow = _require(_dependencyMap[0], 'fbjs/lib/performanceNow');

  var warning = _require(_dependencyMap[1], 'fbjs/lib/warning');

  var Info = function Info() {
    _classCallCheck(this, Info);

    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  };

  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;

  var _sampleRate = DEBUG ? 1 : null;

  var FillRateHelper = function () {
    _createClass(FillRateHelper, null, [{
      key: "addListener",
      value: function addListener(callback) {
        warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');

        _listeners.push(callback);

        return {
          remove: function remove() {
            _listeners = _listeners.filter(function (listener) {
              return callback !== listener;
            });
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);

    function FillRateHelper(getFrameMetrics) {
      _classCallCheck(this, FillRateHelper);

      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._getFrameMetrics = getFrameMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();

      this._resetData();
    }

    _createClass(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG && console.debug('FillRateHelper: activate');
          this._samplesStartTime = performanceNow();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }

        var start = this._samplesStartTime;

        if (start == null) {
          DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');
          return;
        }

        if (this._info.sample_count < _minSampleCount) {
          this._resetData();

          return;
        }

        var total_time_spent = performanceNow() - start;

        var info = _extends({}, this._info, {
          total_time_spent: total_time_spent
        });

        if (DEBUG) {
          var derived = {
            avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,
            avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),
            avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,
            any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),
            any_blank_time_frac: this._info.any_blank_ms / total_time_spent,
            mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),
            mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent
          };

          for (var key in derived) {
            derived[key] = Math.round(1000 * derived[key]) / 1000;
          }

          console.debug('FillRateHelper deactivateAndFlush: ', {
            derived: derived,
            info: info
          });
        }

        _listeners.forEach(function (listener) {
          return listener(info);
        });

        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, state, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
          return 0;
        }

        var dOffset = scrollMetrics.dOffset,
            offset = scrollMetrics.offset,
            velocity = scrollMetrics.velocity,
            visibleLength = scrollMetrics.visibleLength;
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
        var now = performanceNow();

        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }

        this._anyBlankStartTime = null;

        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }

        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = state.first;

        var firstFrame = this._getFrameMetrics(first);

        while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
          firstFrame = this._getFrameMetrics(first);
          first++;
        }

        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }

        var blankBottom = 0;
        var last = state.last;

        var lastFrame = this._getFrameMetrics(last);

        while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
          lastFrame = this._getFrameMetrics(last);
          last--;
        }

        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }

        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;

        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;

          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }

        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }]);

    return FillRateHelper;
  }();

  module.exports = FillRateHelper;
},440,[76,20],"FillRateHelper");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ViewabilityHelper = function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };

      _classCallCheck(this, ViewabilityHelper);

      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }

    _createClass(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        this._timers.forEach(clearTimeout);
      }
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
        var _config = this._config,
            itemVisiblePercentThreshold = _config.itemVisiblePercentThreshold,
            viewAreaCoveragePercentThreshold = _config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
        invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
        var viewableIndices = [];

        if (itemCount === 0) {
          return viewableIndices;
        }

        var firstVisible = -1;

        var _ref = renderRange || {
          first: 0,
          last: itemCount - 1
        },
            first = _ref.first,
            last = _ref.last;

        invariant(last < itemCount, 'Invalid render range ' + JSON.stringify({
          renderRange: renderRange,
          itemCount: itemCount
        }));

        for (var idx = first; idx <= last; idx++) {
          var metrics = getFrameMetrics(idx);

          if (!metrics) {
            continue;
          }

          var top = metrics.offset - scrollOffset;
          var bottom = top + metrics.length;

          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;

            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }

        return viewableIndices;
      }
    }, {
      key: "onUpdate",
      value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
        var _this = this;

        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
          return;
        }

        var viewableIndices = [];

        if (itemCount) {
          viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
        }

        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
          return v === viewableIndices[ii];
        })) {
          return;
        }

        this._viewableIndices = viewableIndices;

        if (this._config.minimumViewTime) {
          var handle = setTimeout(function () {
            _this._timers.delete(handle);

            _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);

          this._timers.add(handle);
        } else {
          this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        var _this2 = this;

        viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
          return _this2._viewableIndices.includes(ii);
        });
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
          var viewable = createViewToken(ii, true);
          return [viewable.key, viewable];
        }));
        var changed = [];

        for (var _iterator = nextItems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref4;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref4 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref4 = _i.value;
          }

          var _ref2 = _ref4;

          var _ref3 = _slicedToArray(_ref2, 2);

          var _key = _ref3[0];
          var viewable = _ref3[1];

          if (!prevItems.has(_key)) {
            changed.push(viewable);
          }
        }

        for (var _iterator2 = prevItems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref7;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref7 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref7 = _i2.value;
          }

          var _ref5 = _ref7;

          var _ref6 = _slicedToArray(_ref5, 2);

          var _key2 = _ref6[0];
          var _viewable = _ref6[1];

          if (!nextItems.has(_key2)) {
            changed.push(_extends({}, _viewable, {
              isViewable: false
            }));
          }
        }

        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed: changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);

    return ViewabilityHelper;
  }();

  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);

      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }

  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }

  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }

  module.exports = ViewabilityHelper;
},441,[19],"ViewabilityHelper");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
    var out = [];
    var outLength = 0;

    for (var ii = 0; ii < itemCount; ii++) {
      var frame = getFrameMetrics(ii);
      var trailingOffset = frame.offset + frame.length;

      for (var kk = 0; kk < offsets.length; kk++) {
        if (out[kk] == null && trailingOffset >= offsets[kk]) {
          out[kk] = ii;
          outLength++;

          if (kk === offsets.length - 1) {
            invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));
            return out;
          }
        }
      }
    }

    return out;
  }

  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }

  function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
    var data = props.data,
        getItemCount = props.getItemCount,
        maxToRenderPerBatch = props.maxToRenderPerBatch,
        windowSize = props.windowSize;
    var itemCount = getItemCount(data);

    if (itemCount === 0) {
      return prev;
    }

    var offset = scrollMetrics.offset,
        velocity = scrollMetrics.velocity,
        visibleLength = scrollMetrics.visibleLength;
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    var leadFactor = 0.5;
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;

    if (lastItemOffset < overscanBegin) {
      return {
        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
        last: itemCount - 1
      };
    }

    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),
        _elementsThatOverlapO2 = _slicedToArray(_elementsThatOverlapO, 4),
        overscanFirst = _elementsThatOverlapO2[0],
        first = _elementsThatOverlapO2[1],
        last = _elementsThatOverlapO2[2],
        overscanLast = _elementsThatOverlapO2[3];

    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first: first,
      last: last
    };
    var newCellCount = newRangeCount(prev, visible);

    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        break;
      }

      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = first <= prev.first || first > prev.last;
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastWillAddMore = last >= prev.last || last < prev.first;
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);

      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        break;
      }

      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }

        first--;
      }

      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }

        last++;
      }
    }

    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first: first,
        last: last,
        itemCount: itemCount,
        overscanFirst: overscanFirst,
        overscanLast: overscanLast,
        visible: visible
      }));
    }

    return {
      first: first,
      last: last
    };
  }

  var VirtualizeUtils = {
    computeWindowedRenderLimits: computeWindowedRenderLimits,
    elementsThatOverlapOffsets: elementsThatOverlapOffsets,
    newRangeCount: newRangeCount
  };
  module.exports = VirtualizeUtils;
},442,[19],"VirtualizeUtils");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Image/ImageBackground.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ImageBackground: {
      displayName: "ImageBackground"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Image/ImageBackground.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Image = _require(_dependencyMap[2], 'Image');

  var React = _require(_dependencyMap[3], 'React');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var View = _require(_dependencyMap[5], 'View');

  var ensureComponentIsNative = _require(_dependencyMap[6], 'ensureComponentIsNative');

  var ImageBackground = _wrapComponent("ImageBackground")(function (_React$Component) {
    _inherits(ImageBackground, _React$Component);

    function ImageBackground() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ImageBackground);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ImageBackground.__proto__ || Object.getPrototypeOf(ImageBackground)).call.apply(_ref, [this].concat(args))), _this), _this._viewRef = null, _this._captureRef = function (ref) {
        _this._viewRef = ref;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var viewRef = this._viewRef;

        if (viewRef) {
          ensureComponentIsNative(viewRef);
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            style = _props.style,
            imageStyle = _props.imageStyle,
            imageRef = _props.imageRef,
            props = _objectWithoutProperties(_props, ["children", "style", "imageStyle", "imageRef"]);

        return React.createElement(
          View,
          {
            style: style,
            ref: this._captureRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 64
            }
          },
          React.createElement(Image, _extends({}, props, {
            style: [StyleSheet.absoluteFill, {
              width: style.width,
              height: style.height
            }, imageStyle],
            ref: imageRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 65
            }
          })),
          children
        );
      }
    }]);

    return ImageBackground;
  }(React.Component));

  module.exports = ImageBackground;
},443,[13,219,413,172,211,213,444],"ImageBackground");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var ensureComponentIsNative = function ensureComponentIsNative(component) {
    invariant(component && typeof component.setNativeProps === 'function', 'Touchable child must either be native or forward setNativeProps to a ' + 'native component');
  };

  module.exports = ensureComponentIsNative;
},444,[19],"ensureComponentIsNative");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RCTImageEditingManager = _require(_dependencyMap[0], 'NativeModules').ImageEditingManager;

  var ImageEditor = function () {
    function ImageEditor() {
      _classCallCheck(this, ImageEditor);
    }

    _createClass(ImageEditor, null, [{
      key: "cropImage",
      value: function cropImage(uri, cropData, success, failure) {
        RCTImageEditingManager.cropImage(uri, cropData, success, failure);
      }
    }]);

    return ImageEditor;
  }();

  module.exports = ImageEditor;
},445,[67],"ImageEditor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RCTImageStoreManager = _require(_dependencyMap[0], 'NativeModules').ImageStoreManager;

  var ImageStore = function () {
    function ImageStore() {
      _classCallCheck(this, ImageStore);
    }

    _createClass(ImageStore, null, [{
      key: "hasImageForTag",
      value: function hasImageForTag(uri, callback) {
        if (RCTImageStoreManager.hasImageForTag) {
          RCTImageStoreManager.hasImageForTag(uri, callback);
        } else {
          console.warn('hasImageForTag() not implemented');
        }
      }
    }, {
      key: "removeImageForTag",
      value: function removeImageForTag(uri) {
        if (RCTImageStoreManager.removeImageForTag) {
          RCTImageStoreManager.removeImageForTag(uri);
        } else {
          console.warn('removeImageForTag() not implemented');
        }
      }
    }, {
      key: "addImageFromBase64",
      value: function addImageFromBase64(base64ImageData, success, failure) {
        RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
      }
    }, {
      key: "getBase64ForTag",
      value: function getBase64ForTag(uri, success, failure) {
        RCTImageStoreManager.getBase64ForTag(uri, success, failure);
      }
    }]);

    return ImageStore;
  }();

  module.exports = ImageStore;
},446,[67],"ImageStore");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var createReactClass = _require(_dependencyMap[0], 'create-react-class');

  var Keyboard = _require(_dependencyMap[1], 'Keyboard');

  var LayoutAnimation = _require(_dependencyMap[2], 'LayoutAnimation');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var React = _require(_dependencyMap[5], 'React');

  var TimerMixin = _require(_dependencyMap[6], 'react-timer-mixin');

  var View = _require(_dependencyMap[7], 'View');

  var ViewPropTypes = _require(_dependencyMap[8], 'ViewPropTypes');

  var viewRef = 'VIEW';
  var KeyboardAvoidingView = createReactClass({
    displayName: 'KeyboardAvoidingView',
    mixins: [TimerMixin],
    propTypes: _extends({}, ViewPropTypes, {
      behavior: PropTypes.oneOf(['height', 'position', 'padding']),
      contentContainerStyle: ViewPropTypes.style,
      keyboardVerticalOffset: PropTypes.number.isRequired,
      enabled: PropTypes.bool.isRequired
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        enabled: true,
        keyboardVerticalOffset: 0
      };
    },
    getInitialState: function getInitialState() {
      return {
        bottom: 0
      };
    },
    subscriptions: [],
    frame: null,
    _relativeKeyboardHeight: function _relativeKeyboardHeight(keyboardFrame) {
      var frame = this.frame;

      if (!frame || !keyboardFrame) {
        return 0;
      }

      var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;
      return Math.max(frame.y + frame.height - keyboardY, 0);
    },
    _onKeyboardChange: function _onKeyboardChange(event) {
      if (!event) {
        this.setState({
          bottom: 0
        });
        return;
      }

      var duration = event.duration,
          easing = event.easing,
          endCoordinates = event.endCoordinates;

      var height = this._relativeKeyboardHeight(endCoordinates);

      if (this.state.bottom === height) {
        return;
      }

      if (duration && easing) {
        LayoutAnimation.configureNext({
          duration: duration,
          update: {
            duration: duration,
            type: LayoutAnimation.Types[easing] || 'keyboard'
          }
        });
      }

      this.setState({
        bottom: height
      });
    },
    _onLayout: function _onLayout(event) {
      this.frame = event.nativeEvent.layout;
    },
    UNSAFE_componentWillUpdate: function UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {
      if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
        nextState.bottom = 0;
      }
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      if (Platform.OS === 'ios') {
        this.subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this._onKeyboardChange)];
      } else {
        this.subscriptions = [Keyboard.addListener('keyboardDidHide', this._onKeyboardChange), Keyboard.addListener('keyboardDidShow', this._onKeyboardChange)];
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this.subscriptions.forEach(function (sub) {
        return sub.remove();
      });
    },
    render: function render() {
      var _props = this.props,
          behavior = _props.behavior,
          children = _props.children,
          style = _props.style,
          props = _objectWithoutProperties(_props, ["behavior", "children", "style"]);

      var bottomHeight = this.props.enabled ? this.state.bottom : 0;

      switch (behavior) {
        case 'height':
          var heightStyle = void 0;

          if (this.frame) {
            heightStyle = {
              height: this.frame.height - bottomHeight,
              flex: 0
            };
          }

          return React.createElement(
            View,
            _extends({
              ref: viewRef,
              style: [style, heightStyle],
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 176
              }
            }),
            children
          );

        case 'position':
          var positionStyle = {
            bottom: bottomHeight
          };
          var contentContainerStyle = this.props.contentContainerStyle;
          return React.createElement(
            View,
            _extends({
              ref: viewRef,
              style: style,
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 186
              }
            }),
            React.createElement(
              View,
              {
                style: [contentContainerStyle, positionStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 187
                }
              },
              children
            )
          );

        case 'padding':
          var paddingStyle = {
            paddingBottom: bottomHeight
          };
          return React.createElement(
            View,
            _extends({
              ref: viewRef,
              style: [style, paddingStyle],
              onLayout: this._onLayout
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 196
              }
            }),
            children
          );

        default:
          return React.createElement(
            View,
            _extends({
              ref: viewRef,
              onLayout: this._onLayout,
              style: style
            }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 203
              }
            }),
            children
          );
      }
    }
  });
  module.exports = KeyboardAvoidingView;
},447,[216,418,419,75,25,172,382,213,173],"KeyboardAvoidingView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},448,[449],"MaskedViewIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    UnimplementedView: {
      displayName: "UnimplementedView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var UnimplementedView = _wrapComponent("UnimplementedView")(function (_React$Component) {
    _inherits(UnimplementedView, _React$Component);

    function UnimplementedView() {
      _classCallCheck(this, UnimplementedView);

      return _possibleConstructorReturn(this, (UnimplementedView.__proto__ || Object.getPrototypeOf(UnimplementedView)).apply(this, arguments));
    }

    _createClass(UnimplementedView, [{
      key: "setNativeProps",
      value: function setNativeProps() {}
    }, {
      key: "render",
      value: function render() {
        var View = _require(_dependencyMap[4], 'View');

        return React.createElement(
          View,
          {
            style: [styles.unimplementedView, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          },
          this.props.children
        );
      }
    }]);

    return UnimplementedView;
  }(React.Component));

  var styles = StyleSheet.create({
    unimplementedView: __DEV__ ? {
      alignSelf: 'flex-start',
      borderColor: 'red',
      borderWidth: 1
    } : {}
  });
  module.exports = UnimplementedView;
},449,[13,219,172,211,213],"UnimplementedView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Modal/Modal.js",
      _container;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Modal: {
      displayName: "Modal"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Modal/Modal.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var AppContainer = _require(_dependencyMap[2], 'AppContainer');

  var I18nManager = _require(_dependencyMap[3], 'I18nManager');

  var NativeEventEmitter = _require(_dependencyMap[4], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[5], 'NativeModules');

  var Platform = _require(_dependencyMap[6], 'Platform');

  var React = _require(_dependencyMap[7], 'React');

  var PropTypes = _require(_dependencyMap[8], 'prop-types');

  var StyleSheet = _require(_dependencyMap[9], 'StyleSheet');

  var View = _require(_dependencyMap[10], 'View');

  var deprecatedPropType = _require(_dependencyMap[11], 'deprecatedPropType');

  var requireNativeComponent = _require(_dependencyMap[12], 'requireNativeComponent');

  var RCTModalHostView = requireNativeComponent('RCTModalHostView', null);
  var ModalEventEmitter = Platform.OS === 'ios' && NativeModules.ModalManager ? new NativeEventEmitter(NativeModules.ModalManager) : null;
  var uniqueModalIdentifier = 0;

  var Modal = _wrapComponent("Modal")((_temp = _class = function (_React$Component) {
    _inherits(Modal, _React$Component);

    function Modal(props) {
      _classCallCheck(this, Modal);

      var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

      Modal._confirmProps(props);

      _this._identifier = uniqueModalIdentifier++;
      return _this;
    }

    _createClass(Modal, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (ModalEventEmitter) {
          this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', function (event) {
            if (event.modalID === _this2._identifier && _this2.props.onDismiss) {
              _this2.props.onDismiss();
            }
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._eventSubscription) {
          this._eventSubscription.remove();
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        Modal._confirmProps(nextProps);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.visible === false) {
          return null;
        }

        var containerStyles = {
          backgroundColor: this.props.transparent ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType;

        if (!animationType) {
          animationType = 'none';

          if (this.props.animated) {
            animationType = 'slide';
          }
        }

        var presentationStyle = this.props.presentationStyle;

        if (!presentationStyle) {
          presentationStyle = 'fullScreen';

          if (this.props.transparent) {
            presentationStyle = 'overFullScreen';
          }
        }

        var innerChildren = __DEV__ ? React.createElement(
          AppContainer,
          {
            rootTag: this.context.rootTag,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 189
            }
          },
          this.props.children
        ) : this.props.children;
        return React.createElement(
          RCTModalHostView,
          {
            animationType: animationType,
            presentationStyle: presentationStyle,
            transparent: this.props.transparent,
            hardwareAccelerated: this.props.hardwareAccelerated,
            onRequestClose: this.props.onRequestClose,
            onShow: this.props.onShow,
            identifier: this._identifier,
            style: styles.modal,
            onStartShouldSetResponder: this._shouldSetResponder,
            supportedOrientations: this.props.supportedOrientations,
            onOrientationChange: this.props.onOrientationChange,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 195
            }
          },
          React.createElement(
            View,
            {
              style: [styles.container, containerStyles],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 208
              }
            },
            innerChildren
          )
        );
      }
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }], [{
      key: "_confirmProps",
      value: function _confirmProps(props) {
        if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
          console.warn("Modal with '" + props.presentationStyle + "' presentation style and 'transparent' value is not supported.");
        }
      }
    }]);

    return Modal;
  }(React.Component), _class.propTypes = {
    animationType: PropTypes.oneOf(['none', 'slide', 'fade']),
    presentationStyle: PropTypes.oneOf(['fullScreen', 'pageSheet', 'formSheet', 'overFullScreen']),
    transparent: PropTypes.bool,
    hardwareAccelerated: PropTypes.bool,
    visible: PropTypes.bool,
    onRequestClose: Platform.isTVOS || Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func,
    onShow: PropTypes.func,
    onDismiss: PropTypes.func,
    animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),
    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),
    onOrientationChange: PropTypes.func
  }, _class.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  }, _class.contextTypes = {
    rootTag: PropTypes.number
  }, _temp));

  var side = I18nManager.isRTL ? 'right' : 'left';
  var styles = StyleSheet.create({
    modal: {
      position: 'absolute'
    },
    container: (_container = {
      position: 'absolute'
    }, _defineProperty(_container, side, 0), _defineProperty(_container, "top", 0), _container)
  });
  module.exports = Modal;
},450,[13,219,451,470,125,67,75,172,25,211,213,186,188],"Modal");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/ReactNative/AppContainer.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    AppContainer: {
      displayName: "AppContainer"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/ReactNative/AppContainer.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var EmitterSubscription = _require(_dependencyMap[2], 'EmitterSubscription');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var RCTDeviceEventEmitter = _require(_dependencyMap[4], 'RCTDeviceEventEmitter');

  var React = _require(_dependencyMap[5], 'React');

  var ReactNative = _require(_dependencyMap[6], 'ReactNative');

  var StyleSheet = _require(_dependencyMap[7], 'StyleSheet');

  var View = _require(_dependencyMap[8], 'View');

  var AppContainer = _wrapComponent("AppContainer")((_temp2 = _class = function (_React$Component) {
    _inherits(AppContainer, _React$Component);

    function AppContainer() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, AppContainer);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AppContainer.__proto__ || Object.getPrototypeOf(AppContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        inspector: null,
        mainKey: 1
      }, _this._subscription = null, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(AppContainer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          rootTag: this.props.rootTag
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling) {
            this._subscription = RCTDeviceEventEmitter.addListener('toggleElementInspector', function () {
              var Inspector = _require(_dependencyMap[9], 'Inspector');

              var inspector = _this2.state.inspector ? null : React.createElement(Inspector, {
                inspectedViewTag: ReactNative.findNodeHandle(_this2._mainRef),
                onRequestRerenderApp: function onRequestRerenderApp(updateInspectedViewTag) {
                  _this2.setState(function (s) {
                    return {
                      mainKey: s.mainKey + 1
                    };
                  }, function () {
                    return updateInspectedViewTag(ReactNative.findNodeHandle(_this2._mainRef));
                  });
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 65
                }
              });

              _this2.setState({
                inspector: inspector
              });
            });
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscription) {
          this._subscription.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var yellowBox = null;

        if (__DEV__) {
          if (!global.__RCTProfileIsProfiling && !this.props.fabric) {
            var YellowBox = _require(_dependencyMap[10], 'YellowBox');

            yellowBox = React.createElement(YellowBox, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 97
              }
            });
          }
        }

        var innerView = React.createElement(
          View,
          {
            collapsable: !this.state.inspector,
            key: this.state.mainKey,
            pointerEvents: "box-none",
            style: styles.appContainer,
            ref: function ref(_ref2) {
              _this3._mainRef = _ref2;
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 102
            }
          },
          this.props.children
        );
        var Wrapper = this.props.WrapperComponent;

        if (Wrapper) {
          innerView = React.createElement(
            Wrapper,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 119
              }
            },
            innerView
          );
        }

        return React.createElement(
          View,
          {
            style: styles.appContainer,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 122
            }
          },
          innerView,
          yellowBox,
          this.state.inspector
        );
      }
    }]);

    return AppContainer;
  }(React.Component), _class.childContextTypes = {
    rootTag: PropTypes.number
  }, _temp2));

  var styles = StyleSheet.create({
    appContainer: {
      flex: 1
    }
  });
  module.exports = AppContainer;
},451,[13,219,85,25,83,172,92,211,213,452,468],"AppContainer");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/Inspector.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Inspector: {
      displayName: "Inspector"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/Inspector.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Dimensions = _require(_dependencyMap[2], 'Dimensions');

  var InspectorOverlay = _require(_dependencyMap[3], 'InspectorOverlay');

  var InspectorPanel = _require(_dependencyMap[4], 'InspectorPanel');

  var Platform = _require(_dependencyMap[5], 'Platform');

  var React = _require(_dependencyMap[6], 'React');

  var ReactNative = _require(_dependencyMap[7], 'ReactNative');

  var StyleSheet = _require(_dependencyMap[8], 'StyleSheet');

  var Touchable = _require(_dependencyMap[9], 'Touchable');

  var UIManager = _require(_dependencyMap[10], 'UIManager');

  var View = _require(_dependencyMap[11], 'View');

  var emptyObject = _require(_dependencyMap[12], 'fbjs/lib/emptyObject');

  var invariant = _require(_dependencyMap[13], 'fbjs/lib/invariant');

  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var renderers = findRenderers();
  hook.resolveRNStyle = _require(_dependencyMap[14], 'flattenStyle');

  function findRenderers() {
    var allRenderers = Object.keys(hook._renderers).map(function (key) {
      return hook._renderers[key];
    });
    invariant(allRenderers.length >= 1, 'Expected to find at least one React Native renderer on DevTools hook.');
    return allRenderers;
  }

  function getInspectorDataForViewTag(touchedViewTag) {
    for (var i = 0; i < renderers.length; i++) {
      var renderer = renderers[i];
      var inspectorData = renderer.getInspectorDataForViewTag(touchedViewTag);

      if (inspectorData.hierarchy.length > 0) {
        return inspectorData;
      }
    }

    throw new Error('Expected to find at least one React renderer.');
  }

  var Inspector = _wrapComponent("Inspector")((_temp = _class = function (_React$Component) {
    _inherits(Inspector, _React$Component);

    function Inspector(props) {
      _classCallCheck(this, Inspector);

      var _this = _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).call(this, props));

      _initialiseProps.call(_this);

      _this.state = {
        devtoolsAgent: null,
        hierarchy: null,
        panelPos: 'bottom',
        inspecting: true,
        perfing: false,
        inspected: null,
        selection: null,
        inspectedViewTag: _this.props.inspectedViewTag,
        networking: false
      };
      return _this;
    }

    _createClass(Inspector, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        hook.on('react-devtools', this.attachToDevtools);

        if (hook.reactDevtoolsAgent) {
          this.attachToDevtools(hook.reactDevtoolsAgent);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subs) {
          this._subs.map(function (fn) {
            return fn();
          });
        }

        hook.off('react-devtools', this.attachToDevtools);
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        this.setState({
          inspectedViewTag: newProps.inspectedViewTag
        });
      }
    }, {
      key: "setSelection",
      value: function setSelection(i) {
        var _this2 = this;

        var hierarchyItem = this.state.hierarchy[i];

        var _hierarchyItem$getIns = hierarchyItem.getInspectorData(ReactNative.findNodeHandle),
            measure = _hierarchyItem$getIns.measure,
            props = _hierarchyItem$getIns.props,
            source = _hierarchyItem$getIns.source;

        measure(function (x, y, width, height, left, top) {
          _this2.setState({
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props.style,
              source: source
            },
            selection: i
          });
        });
      }
    }, {
      key: "onTouchViewTag",
      value: function onTouchViewTag(touchedViewTag, frame, pointerY) {
        var _getInspectorDataForV = getInspectorDataForViewTag(touchedViewTag),
            hierarchy = _getInspectorDataForV.hierarchy,
            props = _getInspectorDataForV.props,
            selection = _getInspectorDataForV.selection,
            source = _getInspectorDataForV.source;

        if (this.state.devtoolsAgent) {
          var offsetFromLeaf = hierarchy.length - 1 - selection;
          this.state.devtoolsAgent.selectFromDOMNode(touchedViewTag, true, offsetFromLeaf);
        }

        this.setState({
          panelPos: pointerY > Dimensions.get('window').height / 2 ? 'top' : 'bottom',
          selection: selection,
          hierarchy: hierarchy,
          inspected: {
            style: props.style,
            frame: frame,
            source: source
          }
        });
      }
    }, {
      key: "setPerfing",
      value: function setPerfing(val) {
        this.setState({
          perfing: val,
          inspecting: false,
          inspected: null,
          networking: false
        });
      }
    }, {
      key: "setInspecting",
      value: function setInspecting(val) {
        this.setState({
          inspecting: val,
          inspected: null
        });
      }
    }, {
      key: "setTouchTargeting",
      value: function setTouchTargeting(val) {
        var _this3 = this;

        Touchable.TOUCH_TARGET_DEBUG = val;
        this.props.onRequestRerenderApp(function (inspectedViewTag) {
          _this3.setState({
            inspectedViewTag: inspectedViewTag
          });
        });
      }
    }, {
      key: "setNetworking",
      value: function setNetworking(val) {
        this.setState({
          networking: val,
          perfing: false,
          inspecting: false,
          inspected: null
        });
      }
    }, {
      key: "render",
      value: function render() {
        var panelContainerStyle = this.state.panelPos === 'bottom' ? {
          bottom: 0
        } : {
          top: Platform.OS === 'ios' ? 20 : 0
        };
        return React.createElement(
          View,
          {
            style: styles.container,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 241
            }
          },
          this.state.inspecting && React.createElement(InspectorOverlay, {
            inspected: this.state.inspected,
            inspectedViewTag: this.state.inspectedViewTag,
            onTouchViewTag: this.onTouchViewTag.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 243
            }
          }),
          React.createElement(
            View,
            {
              style: [styles.panelContainer, panelContainerStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 248
              }
            },
            React.createElement(InspectorPanel, {
              devtoolsIsOpen: !!this.state.devtoolsAgent,
              inspecting: this.state.inspecting,
              perfing: this.state.perfing,
              setPerfing: this.setPerfing.bind(this),
              setInspecting: this.setInspecting.bind(this),
              inspected: this.state.inspected,
              hierarchy: this.state.hierarchy,
              selection: this.state.selection,
              setSelection: this.setSelection.bind(this),
              touchTargeting: Touchable.TOUCH_TARGET_DEBUG,
              setTouchTargeting: this.setTouchTargeting.bind(this),
              networking: this.state.networking,
              setNetworking: this.setNetworking.bind(this),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 249
              }
            })
          )
        );
      }
    }]);

    return Inspector;
  }(React.Component), _initialiseProps = function _initialiseProps() {
    var _this4 = this;

    this.attachToDevtools = function (agent) {
      var _hideWait = null;
      var hlSub = agent.sub('highlight', function (_ref) {
        var node = _ref.node,
            name = _ref.name,
            props = _ref.props;
        clearTimeout(_hideWait);

        if (typeof node !== 'number') {
          node = ReactNative.findNodeHandle(node);
        }

        UIManager.measure(node, function (x, y, width, height, left, top) {
          _this4.setState({
            hierarchy: [],
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props ? props.style : emptyObject
            }
          });
        });
      });
      var hideSub = agent.sub('hideHighlight', function () {
        if (_this4.state.inspected === null) {
          return;
        }

        _hideWait = setTimeout(function () {
          _this4.setState({
            inspected: null
          });
        }, 100);
      });
      _this4._subs = [hlSub, hideSub];
      agent.on('shutdown', function () {
        _this4.setState({
          devtoolsAgent: null
        });

        _this4._subs = null;
      });

      _this4.setState({
        devtoolsAgent: agent
      });
    };
  }, _temp));

  var styles = StyleSheet.create({
    container: {
      position: 'absolute',
      backgroundColor: 'transparent',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    panelContainer: {
      position: 'absolute',
      left: 0,
      right: 0
    }
  });
  module.exports = Inspector;
},452,[13,219,207,453,457,75,172,92,211,373,164,213,16,19,159],"Inspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    InspectorOverlay: {
      displayName: "InspectorOverlay"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Dimensions = _require(_dependencyMap[2], 'Dimensions');

  var ElementBox = _require(_dependencyMap[3], 'ElementBox');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var React = _require(_dependencyMap[5], 'React');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var UIManager = _require(_dependencyMap[7], 'UIManager');

  var View = _require(_dependencyMap[8], 'View');

  var InspectorOverlay = _wrapComponent("InspectorOverlay")((_temp2 = _class = function (_React$Component) {
    _inherits(InspectorOverlay, _React$Component);

    function InspectorOverlay() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, InspectorOverlay);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InspectorOverlay.__proto__ || Object.getPrototypeOf(InspectorOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.findViewForTouchEvent = function (e) {
        var _e$nativeEvent$touche = e.nativeEvent.touches[0],
            locationX = _e$nativeEvent$touche.locationX,
            locationY = _e$nativeEvent$touche.locationY;
        UIManager.findSubviewIn(_this.props.inspectedViewTag, [locationX, locationY], function (nativeViewTag, left, top, width, height) {
          _this.props.onTouchViewTag(nativeViewTag, {
            left: left,
            top: top,
            width: width,
            height: height
          }, locationY);
        });
      }, _this.shouldSetResponser = function (e) {
        _this.findViewForTouchEvent(e);

        return true;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(InspectorOverlay, [{
      key: "render",
      value: function render() {
        var content = null;

        if (this.props.inspected) {
          content = React.createElement(ElementBox, {
            frame: this.props.inspected.frame,
            style: this.props.inspected.style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 60
            }
          });
        }

        return React.createElement(
          View,
          {
            onStartShouldSetResponder: this.shouldSetResponser,
            onResponderMove: this.findViewForTouchEvent,
            style: [styles.inspector, {
              height: Dimensions.get('window').height
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 64
            }
          },
          content
        );
      }
    }]);

    return InspectorOverlay;
  }(React.Component), _class.propTypes = {
    inspected: PropTypes.shape({
      frame: PropTypes.object,
      style: PropTypes.any
    }),
    inspectedViewTag: PropTypes.number,
    onTouchViewTag: PropTypes.func.isRequired
  }, _temp2));

  var styles = StyleSheet.create({
    inspector: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });
  module.exports = InspectorOverlay;
},453,[13,219,207,454,25,172,211,164,213],"InspectorOverlay");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/ElementBox.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ElementBox: {
      displayName: "ElementBox"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/ElementBox.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var View = _require(_dependencyMap[3], 'View');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var BorderBox = _require(_dependencyMap[5], 'BorderBox');

  var resolveBoxStyle = _require(_dependencyMap[6], 'resolveBoxStyle');

  var flattenStyle = _require(_dependencyMap[7], 'flattenStyle');

  var ElementBox = _wrapComponent("ElementBox")(function (_React$Component) {
    _inherits(ElementBox, _React$Component);

    function ElementBox() {
      _classCallCheck(this, ElementBox);

      return _possibleConstructorReturn(this, (ElementBox.__proto__ || Object.getPrototypeOf(ElementBox)).apply(this, arguments));
    }

    _createClass(ElementBox, [{
      key: "render",
      value: function render() {
        var style = flattenStyle(this.props.style) || {};
        var margin = resolveBoxStyle('margin', style);
        var padding = resolveBoxStyle('padding', style);
        var frameStyle = this.props.frame;

        if (margin) {
          frameStyle = {
            top: frameStyle.top - margin.top,
            left: frameStyle.left - margin.left,
            height: frameStyle.height + margin.top + margin.bottom,
            width: frameStyle.width + margin.left + margin.right
          };
        }

        var contentStyle = {
          width: this.props.frame.width,
          height: this.props.frame.height
        };

        if (padding) {
          contentStyle = {
            width: contentStyle.width - padding.left - padding.right,
            height: contentStyle.height - padding.top - padding.bottom
          };
        }

        return React.createElement(
          View,
          {
            style: [styles.frame, frameStyle],
            pointerEvents: "none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 45
            }
          },
          React.createElement(
            BorderBox,
            {
              box: margin,
              style: styles.margin,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 46
              }
            },
            React.createElement(
              BorderBox,
              {
                box: padding,
                style: styles.padding,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 47
                }
              },
              React.createElement(View, {
                style: [styles.content, contentStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 48
                }
              })
            )
          )
        );
      }
    }]);

    return ElementBox;
  }(React.Component));

  var styles = StyleSheet.create({
    frame: {
      position: 'absolute'
    },
    content: {
      backgroundColor: 'rgba(200, 230, 255, 0.8)'
    },
    padding: {
      borderColor: 'rgba(77, 255, 0, 0.3)'
    },
    margin: {
      borderColor: 'rgba(255, 132, 0, 0.3)'
    }
  });
  module.exports = ElementBox;
},454,[13,219,172,213,211,455,456,159],"ElementBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/BorderBox.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    BorderBox: {
      displayName: "BorderBox"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/BorderBox.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var View = _require(_dependencyMap[3], 'View');

  var BorderBox = _wrapComponent("BorderBox")(function (_React$Component) {
    _inherits(BorderBox, _React$Component);

    function BorderBox() {
      _classCallCheck(this, BorderBox);

      return _possibleConstructorReturn(this, (BorderBox.__proto__ || Object.getPrototypeOf(BorderBox)).apply(this, arguments));
    }

    _createClass(BorderBox, [{
      key: "render",
      value: function render() {
        var box = this.props.box;

        if (!box) {
          return this.props.children;
        }

        var style = {
          borderTopWidth: box.top,
          borderBottomWidth: box.bottom,
          borderLeftWidth: box.left,
          borderRightWidth: box.right
        };
        return React.createElement(
          View,
          {
            style: [style, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 28
            }
          },
          this.props.children
        );
      }
    }]);

    return BorderBox;
  }(React.Component));

  module.exports = BorderBox;
},455,[13,219,172,213],"BorderBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function resolveBoxStyle(prefix, style) {
    var res = {};
    var subs = ['top', 'left', 'bottom', 'right'];
    var set = false;
    subs.forEach(function (sub) {
      res[sub] = style[prefix] || 0;
    });

    if (style[prefix]) {
      set = true;
    }

    if (style[prefix + 'Vertical']) {
      res.top = res.bottom = style[prefix + 'Vertical'];
      set = true;
    }

    if (style[prefix + 'Horizontal']) {
      res.left = res.right = style[prefix + 'Horizontal'];
      set = true;
    }

    subs.forEach(function (sub) {
      var val = style[prefix + capFirst(sub)];

      if (val) {
        res[sub] = val;
        set = true;
      }
    });

    if (!set) {
      return;
    }

    return res;
  }

  function capFirst(text) {
    return text[0].toUpperCase() + text.slice(1);
  }

  module.exports = resolveBoxStyle;
},456,[],"resolveBoxStyle");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/InspectorPanel.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    InspectorPanel: {
      displayName: "InspectorPanel"
    },
    Button: {
      displayName: "Button"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/InspectorPanel.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ElementProperties = _require(_dependencyMap[2], 'ElementProperties');

  var NetworkOverlay = _require(_dependencyMap[3], 'NetworkOverlay');

  var PerformanceOverlay = _require(_dependencyMap[4], 'PerformanceOverlay');

  var React = _require(_dependencyMap[5], 'React');

  var PropTypes = _require(_dependencyMap[6], 'prop-types');

  var ScrollView = _require(_dependencyMap[7], 'ScrollView');

  var StyleSheet = _require(_dependencyMap[8], 'StyleSheet');

  var Text = _require(_dependencyMap[9], 'Text');

  var TouchableHighlight = _require(_dependencyMap[10], 'TouchableHighlight');

  var View = _require(_dependencyMap[11], 'View');

  var InspectorPanel = _wrapComponent("InspectorPanel")(function (_React$Component) {
    _inherits(InspectorPanel, _React$Component);

    function InspectorPanel() {
      _classCallCheck(this, InspectorPanel);

      return _possibleConstructorReturn(this, (InspectorPanel.__proto__ || Object.getPrototypeOf(InspectorPanel)).apply(this, arguments));
    }

    _createClass(InspectorPanel, [{
      key: "renderWaiting",
      value: function renderWaiting() {
        if (this.props.inspecting) {
          return React.createElement(
            Text,
            {
              style: styles.waitingText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 27
              }
            },
            "Tap something to inspect it"
          );
        }

        return React.createElement(
          Text,
          {
            style: styles.waitingText,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 32
            }
          },
          "Nothing is inspected"
        );
      }
    }, {
      key: "render",
      value: function render() {
        var contents = void 0;

        if (this.props.inspected) {
          contents = React.createElement(
            ScrollView,
            {
              style: styles.properties,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 39
              }
            },
            React.createElement(ElementProperties, {
              style: this.props.inspected.style,
              frame: this.props.inspected.frame,
              source: this.props.inspected.source,
              hierarchy: this.props.hierarchy,
              selection: this.props.selection,
              setSelection: this.props.setSelection,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 40
              }
            })
          );
        } else if (this.props.perfing) {
          contents = React.createElement(PerformanceOverlay, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 52
            }
          });
        } else if (this.props.networking) {
          contents = React.createElement(NetworkOverlay, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 56
            }
          });
        } else {
          contents = React.createElement(
            View,
            {
              style: styles.waiting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 60
              }
            },
            this.renderWaiting()
          );
        }

        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          },
          !this.props.devtoolsIsOpen && contents,
          React.createElement(
            View,
            {
              style: styles.buttonRow,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 68
              }
            },
            React.createElement(Button, {
              title: 'Inspect',
              pressed: this.props.inspecting,
              onClick: this.props.setInspecting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 69
              }
            }),
            React.createElement(Button, {
              title: 'Perf',
              pressed: this.props.perfing,
              onClick: this.props.setPerfing,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 74
              }
            }),
            React.createElement(Button, {
              title: 'Network',
              pressed: this.props.networking,
              onClick: this.props.setNetworking,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 78
              }
            }),
            React.createElement(Button, {
              title: 'Touchables',
              pressed: this.props.touchTargeting,
              onClick: this.props.setTouchTargeting,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 82
              }
            })
          )
        );
      }
    }]);

    return InspectorPanel;
  }(React.Component));

  InspectorPanel.propTypes = {
    devtoolsIsOpen: PropTypes.bool,
    inspecting: PropTypes.bool,
    setInspecting: PropTypes.func,
    inspected: PropTypes.object,
    perfing: PropTypes.bool,
    setPerfing: PropTypes.func,
    touchTargeting: PropTypes.bool,
    setTouchTargeting: PropTypes.func,
    networking: PropTypes.bool,
    setNetworking: PropTypes.func
  };

  var Button = _wrapComponent("Button")(function (_React$Component2) {
    _inherits(Button, _React$Component2);

    function Button() {
      _classCallCheck(this, Button);

      return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    _createClass(Button, [{
      key: "render",
      value: function render() {
        var _this3 = this;

        return React.createElement(
          TouchableHighlight,
          {
            onPress: function onPress() {
              return _this3.props.onClick(!_this3.props.pressed);
            },
            style: [styles.button, this.props.pressed && styles.buttonPressed],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 108
            }
          },
          React.createElement(
            Text,
            {
              style: styles.buttonText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 112
              }
            },
            this.props.title
          )
        );
      }
    }]);

    return Button;
  }(React.Component));

  var styles = StyleSheet.create({
    buttonRow: {
      flexDirection: 'row'
    },
    button: {
      backgroundColor: 'rgba(0, 0, 0, 0.3)',
      margin: 2,
      height: 30,
      justifyContent: 'center',
      alignItems: 'center'
    },
    buttonPressed: {
      backgroundColor: 'rgba(255, 255, 255, 0.3)'
    },
    buttonText: {
      textAlign: 'center',
      color: 'white',
      margin: 5
    },
    container: {
      backgroundColor: 'rgba(0, 0, 0, 0.7)'
    },
    properties: {
      height: 200
    },
    waiting: {
      height: 100
    },
    waitingText: {
      fontSize: 20,
      textAlign: 'center',
      marginVertical: 20,
      color: 'white'
    }
  });
  module.exports = InspectorPanel;
},457,[13,219,458,464,467,172,25,414,211,371,461,213],"InspectorPanel");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/ElementProperties.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ElementProperties: {
      displayName: "ElementProperties"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/ElementProperties.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var BoxInspector = _require(_dependencyMap[2], 'BoxInspector');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var React = _require(_dependencyMap[4], 'React');

  var StyleInspector = _require(_dependencyMap[5], 'StyleInspector');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var Text = _require(_dependencyMap[7], 'Text');

  var TouchableHighlight = _require(_dependencyMap[8], 'TouchableHighlight');

  var TouchableWithoutFeedback = _require(_dependencyMap[9], 'TouchableWithoutFeedback');

  var View = _require(_dependencyMap[10], 'View');

  var flattenStyle = _require(_dependencyMap[11], 'flattenStyle');

  var mapWithSeparator = _require(_dependencyMap[12], 'mapWithSeparator');

  var openFileInEditor = _require(_dependencyMap[13], 'openFileInEditor');

  var ElementProperties = _wrapComponent("ElementProperties")((_temp = _class = function (_React$Component) {
    _inherits(ElementProperties, _React$Component);

    function ElementProperties() {
      _classCallCheck(this, ElementProperties);

      return _possibleConstructorReturn(this, (ElementProperties.__proto__ || Object.getPrototypeOf(ElementProperties)).apply(this, arguments));
    }

    _createClass(ElementProperties, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var style = flattenStyle(this.props.style);
        var selection = this.props.selection;
        var openFileButton = void 0;
        var source = this.props.source;

        var _ref = source || {},
            fileName = _ref.fileName,
            lineNumber = _ref.lineNumber;

        if (fileName && lineNumber) {
          var parts = fileName.split('/');
          var fileNameShort = parts[parts.length - 1];
          openFileButton = React.createElement(
            TouchableHighlight,
            {
              style: styles.openButton,
              onPress: openFileInEditor.bind(null, fileName, lineNumber),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 60
              }
            },
            React.createElement(
              Text,
              {
                style: styles.openButtonTitle,
                numberOfLines: 1,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 63
                }
              },
              fileNameShort,
              ":",
              lineNumber
            )
          );
        }

        return React.createElement(
          TouchableWithoutFeedback,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 72
            }
          },
          React.createElement(
            View,
            {
              style: styles.info,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 73
              }
            },
            React.createElement(
              View,
              {
                style: styles.breadcrumb,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 74
                }
              },
              mapWithSeparator(this.props.hierarchy, function (hierarchyItem, i) {
                return React.createElement(
                  TouchableHighlight,
                  {
                    key: 'item-' + i,
                    style: [styles.breadItem, i === selection && styles.selected],
                    onPress: function onPress() {
                      return _this2.props.setSelection(i);
                    },
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 78
                    }
                  },
                  React.createElement(
                    Text,
                    {
                      style: styles.breadItemText,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 83
                      }
                    },
                    hierarchyItem.name
                  )
                );
              }, function (i) {
                return React.createElement(
                  Text,
                  {
                    key: 'sep-' + i,
                    style: styles.breadSep,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 89
                    }
                  },
                  "\u25B8"
                );
              })
            ),
            React.createElement(
              View,
              {
                style: styles.row,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 95
                }
              },
              React.createElement(
                View,
                {
                  style: styles.col,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 96
                  }
                },
                React.createElement(StyleInspector, {
                  style: style,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 97
                  }
                }),
                openFileButton
              ),
              React.createElement(BoxInspector, {
                style: style,
                frame: this.props.frame,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 102
                }
              })
            )
          )
        );
      }
    }]);

    return ElementProperties;
  }(React.Component), _class.propTypes = {
    hierarchy: PropTypes.array.isRequired,
    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),
    source: PropTypes.shape({
      fileName: PropTypes.string,
      lineNumber: PropTypes.number
    })
  }, _temp));

  var styles = StyleSheet.create({
    breadSep: {
      fontSize: 8,
      color: 'white'
    },
    breadcrumb: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      alignItems: 'flex-start',
      marginBottom: 5
    },
    selected: {
      borderColor: 'white',
      borderRadius: 5
    },
    breadItem: {
      borderWidth: 1,
      borderColor: 'transparent',
      marginHorizontal: 2
    },
    breadItemText: {
      fontSize: 10,
      color: 'white',
      marginHorizontal: 5
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    col: {
      flex: 1
    },
    info: {
      padding: 10
    },
    openButton: {
      padding: 10,
      backgroundColor: '#000',
      marginVertical: 5,
      marginRight: 5,
      borderRadius: 2
    },
    openButtonTitle: {
      color: 'white',
      fontSize: 8
    }
  });
  module.exports = ElementProperties;
},458,[13,219,459,25,172,460,211,371,461,381,213,159,462,463],"ElementProperties");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/BoxInspector.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    BoxInspector: {
      displayName: "BoxInspector"
    },
    BoxContainer: {
      displayName: "BoxContainer"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/BoxInspector.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var Text = _require(_dependencyMap[4], 'Text');

  var View = _require(_dependencyMap[5], 'View');

  var resolveBoxStyle = _require(_dependencyMap[6], 'resolveBoxStyle');

  var blank = {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  };

  var BoxInspector = _wrapComponent("BoxInspector")(function (_React$Component) {
    _inherits(BoxInspector, _React$Component);

    function BoxInspector() {
      _classCallCheck(this, BoxInspector);

      return _possibleConstructorReturn(this, (BoxInspector.__proto__ || Object.getPrototypeOf(BoxInspector)).apply(this, arguments));
    }

    _createClass(BoxInspector, [{
      key: "render",
      value: function render() {
        var frame = this.props.frame;
        var style = this.props.style;
        var margin = style && resolveBoxStyle('margin', style) || blank;
        var padding = style && resolveBoxStyle('padding', style) || blank;
        return React.createElement(
          BoxContainer,
          {
            title: "margin",
            titleStyle: styles.marginLabel,
            box: margin,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 32
            }
          },
          React.createElement(
            BoxContainer,
            {
              title: "padding",
              box: padding,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 33
              }
            },
            React.createElement(
              View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 34
                }
              },
              React.createElement(
                Text,
                {
                  style: styles.innerText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 35
                  }
                },
                "(",
                (frame.left || 0).toFixed(1),
                ", ",
                (frame.top || 0).toFixed(1),
                ")"
              ),
              React.createElement(
                Text,
                {
                  style: styles.innerText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 38
                  }
                },
                (frame.width || 0).toFixed(1),
                " \xD7 ",
                (frame.height || 0).toFixed(1)
              )
            )
          )
        );
      }
    }]);

    return BoxInspector;
  }(React.Component));

  var BoxContainer = _wrapComponent("BoxContainer")(function (_React$Component2) {
    _inherits(BoxContainer, _React$Component2);

    function BoxContainer() {
      _classCallCheck(this, BoxContainer);

      return _possibleConstructorReturn(this, (BoxContainer.__proto__ || Object.getPrototypeOf(BoxContainer)).apply(this, arguments));
    }

    _createClass(BoxContainer, [{
      key: "render",
      value: function render() {
        var box = this.props.box;
        return React.createElement(
          View,
          {
            style: styles.box,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 52
            }
          },
          React.createElement(
            View,
            {
              style: styles.row,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 53
              }
            },
            React.createElement(
              Text,
              {
                style: [this.props.titleStyle, styles.label],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 56
                }
              },
              this.props.title
            ),
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 57
                }
              },
              box.top
            )
          ),
          React.createElement(
            View,
            {
              style: styles.row,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 59
              }
            },
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 60
                }
              },
              box.left
            ),
            this.props.children,
            React.createElement(
              Text,
              {
                style: styles.boxText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 62
                }
              },
              box.right
            )
          ),
          React.createElement(
            Text,
            {
              style: styles.boxText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 64
              }
            },
            box.bottom
          )
        );
      }
    }]);

    return BoxContainer;
  }(React.Component));

  var styles = StyleSheet.create({
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    marginLabel: {
      width: 60
    },
    label: {
      fontSize: 10,
      color: 'rgb(255,100,0)',
      marginLeft: 5,
      flex: 1,
      textAlign: 'left',
      top: -3
    },
    buffer: {
      fontSize: 10,
      color: 'yellow',
      flex: 1,
      textAlign: 'center'
    },
    innerText: {
      color: 'yellow',
      fontSize: 12,
      textAlign: 'center',
      width: 70
    },
    box: {
      borderWidth: 1,
      borderColor: 'grey'
    },
    boxText: {
      color: 'white',
      fontSize: 12,
      marginHorizontal: 3,
      marginVertical: 2,
      textAlign: 'center'
    }
  });
  module.exports = BoxInspector;
},459,[13,219,172,211,371,213,456],"BoxInspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/StyleInspector.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    StyleInspector: {
      displayName: "StyleInspector"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/StyleInspector.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var Text = _require(_dependencyMap[4], 'Text');

  var View = _require(_dependencyMap[5], 'View');

  var StyleInspector = _wrapComponent("StyleInspector")(function (_React$Component) {
    _inherits(StyleInspector, _React$Component);

    function StyleInspector() {
      _classCallCheck(this, StyleInspector);

      return _possibleConstructorReturn(this, (StyleInspector.__proto__ || Object.getPrototypeOf(StyleInspector)).apply(this, arguments));
    }

    _createClass(StyleInspector, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        if (!this.props.style) {
          return React.createElement(
            Text,
            {
              style: styles.noStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 20
              }
            },
            "No style"
          );
        }

        var names = Object.keys(this.props.style);
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 24
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 25
              }
            },
            names.map(function (name) {
              return React.createElement(
                Text,
                {
                  key: name,
                  style: styles.attr,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 26
                  }
                },
                name,
                ":"
              );
            })
          ),
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 29
              }
            },
            names.map(function (name) {
              var value = _typeof(_this2.props.style[name]) === 'object' ? JSON.stringify(_this2.props.style[name]) : _this2.props.style[name];
              return React.createElement(
                Text,
                {
                  key: name,
                  style: styles.value,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 32
                  }
                },
                value
              );
            })
          )
        );
      }
    }]);

    return StyleInspector;
  }(React.Component));

  var styles = StyleSheet.create({
    container: {
      flexDirection: 'row'
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    attr: {
      fontSize: 10,
      color: '#ccc'
    },
    value: {
      fontSize: 10,
      color: 'white',
      marginLeft: 10
    },
    noStyle: {
      color: 'white',
      fontSize: 10
    }
  });
  module.exports = StyleInspector;
},460,[13,219,172,211,371,213],"StyleInspector");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var React = _require(_dependencyMap[4], 'React');

  var ReactNativeViewAttributes = _require(_dependencyMap[5], 'ReactNativeViewAttributes');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var Touchable = _require(_dependencyMap[7], 'Touchable');

  var TouchableWithoutFeedback = _require(_dependencyMap[8], 'TouchableWithoutFeedback');

  var View = _require(_dependencyMap[9], 'View');

  var ViewPropTypes = _require(_dependencyMap[10], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[11], 'create-react-class');

  var ensurePositiveDelayProps = _require(_dependencyMap[12], 'ensurePositiveDelayProps');

  var DEFAULT_PROPS = {
    activeOpacity: 0.85,
    delayPressOut: 100,
    underlayColor: 'black'
  };
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableHighlight = createReactClass({
    displayName: 'TouchableHighlight',
    propTypes: _extends({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      underlayColor: ColorPropType,
      style: ViewPropTypes.style,
      onShowUnderlay: PropTypes.func,
      onHideUnderlay: PropTypes.func,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object,
      testOnly_pressed: PropTypes.bool
    }),
    mixins: [NativeMethodsMixin, Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return DEFAULT_PROPS;
    },
    getInitialState: function getInitialState() {
      this._isMounted = false;

      if (this.props.testOnly_pressed) {
        return _extends({}, this.touchableGetInitialState(), {
          extraChildStyle: {
            opacity: this.props.activeOpacity
          },
          extraUnderlayStyle: {
            backgroundColor: this.props.underlayColor
          }
        });
      } else {
        return _extends({}, this.touchableGetInitialState(), {
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
      }
    },
    componentDidMount: function componentDidMount() {
      this._isMounted = true;
      ensurePositiveDelayProps(this.props);
    },
    componentWillUnmount: function componentWillUnmount() {
      this._isMounted = false;
      clearTimeout(this._hideTimeout);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      this._showUnderlay();

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      if (!this._hideTimeout) {
        this._hideUnderlay();
      }

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      clearTimeout(this._hideTimeout);

      if (!Platform.isTVOS) {
        this._showUnderlay();

        this._hideTimeout = setTimeout(this._hideUnderlay, this.props.delayPressOut);
      }

      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _showUnderlay: function _showUnderlay() {
      if (!this._isMounted || !this._hasPressHandler()) {
        return;
      }

      this.setState({
        extraChildStyle: {
          opacity: this.props.activeOpacity
        },
        extraUnderlayStyle: {
          backgroundColor: this.props.underlayColor
        }
      });
      this.props.onShowUnderlay && this.props.onShowUnderlay();
    },
    _hideUnderlay: function _hideUnderlay() {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      if (this.props.testOnly_pressed) {
        return;
      }

      if (this._hasPressHandler()) {
        this.setState({
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
        this.props.onHideUnderlay && this.props.onHideUnderlay();
      }
    },
    _hasPressHandler: function _hasPressHandler() {
      return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      return React.createElement(
        View,
        {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityTraits: this.props.accessibilityTraits,
          style: StyleSheet.compose(this.props.style, this.state.extraUnderlayStyle),
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop,
          isTVSelectable: true,
          tvParallaxProperties: this.props.tvParallaxProperties,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
          onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
          onResponderGrant: this.touchableHandleResponderGrant,
          onResponderMove: this.touchableHandleResponderMove,
          onResponderRelease: this.touchableHandleResponderRelease,
          onResponderTerminate: this.touchableHandleResponderTerminate,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 329
          }
        },
        React.cloneElement(child, {
          style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)
        }),
        Touchable.renderDebugView({
          color: 'green',
          hitSlop: this.props.hitSlop
        })
      );
    }
  });
  module.exports = TouchableHighlight;
},461,[89,91,25,75,172,214,211,373,381,213,173,216,383],"TouchableHighlight");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function mapWithSeparator(items, itemRenderer, spacerRenderer) {
    var mapped = [];

    if (items.length > 0) {
      mapped.push(itemRenderer(items[0], 0, items));

      for (var ii = 1; ii < items.length; ii++) {
        mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
      }
    }

    return mapped;
  }

  module.exports = mapWithSeparator;
},462,[],"mapWithSeparator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var getDevServer = _require(_dependencyMap[0], 'getDevServer');

  function openFileInEditor(file, lineNumber) {
    fetch(getDevServer().url + 'open-stack-frame', {
      method: 'POST',
      body: JSON.stringify({
        file: file,
        lineNumber: lineNumber
      })
    });
  }

  module.exports = openFileInEditor;
},463,[106],"openFileInEditor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    NetworkOverlay: {
      displayName: "NetworkOverlay"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ListView = _require(_dependencyMap[2], 'ListView');

  var React = _require(_dependencyMap[3], 'React');

  var ScrollView = _require(_dependencyMap[4], 'ScrollView');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var Text = _require(_dependencyMap[6], 'Text');

  var TouchableHighlight = _require(_dependencyMap[7], 'TouchableHighlight');

  var View = _require(_dependencyMap[8], 'View');

  var WebSocketInterceptor = _require(_dependencyMap[9], 'WebSocketInterceptor');

  var XHRInterceptor = _require(_dependencyMap[10], 'XHRInterceptor');

  var LISTVIEW_CELL_HEIGHT = 15;
  var SEPARATOR_THICKNESS = 2;
  var nextXHRId = 0;

  var NetworkOverlay = _wrapComponent("NetworkOverlay")(function (_React$Component) {
    _inherits(NetworkOverlay, _React$Component);

    function NetworkOverlay(props) {
      _classCallCheck(this, NetworkOverlay);

      var _this = _possibleConstructorReturn(this, (NetworkOverlay.__proto__ || Object.getPrototypeOf(NetworkOverlay)).call(this, props));

      _this._requests = [];
      _this._detailViewItems = [];
      _this._listViewDataSource = new ListView.DataSource({
        rowHasChanged: function rowHasChanged(r1, r2) {
          return r1 !== r2;
        }
      });
      _this.state = {
        dataSource: _this._listViewDataSource.cloneWithRows([]),
        newDetailInfo: false,
        detailRowID: null
      };
      _this._listViewHighlighted = false;
      _this._listViewHeight = 0;
      _this._captureRequestListView = _this._captureRequestListView.bind(_this);
      _this._captureDetailScrollView = _this._captureDetailScrollView.bind(_this);
      _this._listViewOnLayout = _this._listViewOnLayout.bind(_this);
      _this._renderRow = _this._renderRow.bind(_this);
      _this._closeButtonClicked = _this._closeButtonClicked.bind(_this);
      _this._socketIdMap = {};
      _this._xhrIdMap = {};
      return _this;
    }

    _createClass(NetworkOverlay, [{
      key: "_enableXHRInterception",
      value: function _enableXHRInterception() {
        var _this2 = this;

        if (XHRInterceptor.isInterceptorEnabled()) {
          return;
        }

        XHRInterceptor.setOpenCallback(function (method, url, xhr) {
          xhr._index = nextXHRId++;
          var xhrIndex = _this2._requests.length;
          _this2._xhrIdMap[xhr._index] = xhrIndex;
          var _xhr = {
            'type': 'XMLHttpRequest',
            'method': method,
            'url': url
          };

          _this2._requests.push(_xhr);

          _this2._detailViewItems.push([]);

          _this2._genDetailViewItem(xhrIndex);

          _this2.setState({
            dataSource: _this2._listViewDataSource.cloneWithRows(_this2._requests)
          }, _this2._scrollToBottom());
        });
        XHRInterceptor.setRequestHeaderCallback(function (header, value, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];

          if (!networkInfo.requestHeaders) {
            networkInfo.requestHeaders = {};
          }

          networkInfo.requestHeaders[header] = value;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setSendCallback(function (data, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2._requests[xhrIndex].dataSent = data;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setHeaderReceivedCallback(function (type, size, responseHeaders, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];
          networkInfo.responseContentType = type;
          networkInfo.responseSize = size;
          networkInfo.responseHeaders = responseHeaders;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.setResponseCallback(function (status, timeout, response, responseURL, responseType, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          var networkInfo = _this2._requests[xhrIndex];
          networkInfo.status = status;
          networkInfo.timeout = timeout;
          networkInfo.response = response;
          networkInfo.responseURL = responseURL;
          networkInfo.responseType = responseType;

          _this2._genDetailViewItem(xhrIndex);
        });
        XHRInterceptor.enableInterception();
      }
    }, {
      key: "_enableWebSocketInterception",
      value: function _enableWebSocketInterception() {
        var _this3 = this;

        if (WebSocketInterceptor.isInterceptorEnabled()) {
          return;
        }

        WebSocketInterceptor.setConnectCallback(function (url, protocols, options, socketId) {
          var socketIndex = _this3._requests.length;
          _this3._socketIdMap[socketId] = socketIndex;
          var _webSocket = {
            'type': 'WebSocket',
            'url': url,
            'protocols': protocols
          };

          _this3._requests.push(_webSocket);

          _this3._detailViewItems.push([]);

          _this3._genDetailViewItem(socketIndex);

          _this3.setState({
            dataSource: _this3._listViewDataSource.cloneWithRows(_this3._requests)
          }, _this3._scrollToBottom());
        });
        WebSocketInterceptor.setCloseCallback(function (statusCode, closeReason, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (statusCode !== null && closeReason !== null) {
            _this3._requests[socketIndex].status = statusCode;
            _this3._requests[socketIndex].closeReason = closeReason;
          }

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setSendCallback(function (data, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (!_this3._requests[socketIndex].messages) {
            _this3._requests[socketIndex].messages = '';
          }

          _this3._requests[socketIndex].messages += 'Sent: ' + JSON.stringify(data) + '\n';

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnMessageCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (!_this3._requests[socketIndex].messages) {
            _this3._requests[socketIndex].messages = '';
          }

          _this3._requests[socketIndex].messages += 'Received: ' + JSON.stringify(message) + '\n';

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnCloseCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3._requests[socketIndex].serverClose = message;

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.setOnErrorCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3._requests[socketIndex].serverError = message;

          _this3._genDetailViewItem(socketIndex);
        });
        WebSocketInterceptor.enableInterception();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._enableXHRInterception();

        this._enableWebSocketInterception();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        XHRInterceptor.disableInterception();
        WebSocketInterceptor.disableInterception();
      }
    }, {
      key: "_renderRow",
      value: function _renderRow(rowData, sectionID, rowID, highlightRow) {
        var _this4 = this;

        var urlCellViewStyle = styles.urlEvenCellView;
        var methodCellViewStyle = styles.methodEvenCellView;

        if (rowID % 2 === 1) {
          urlCellViewStyle = styles.urlOddCellView;
          methodCellViewStyle = styles.methodOddCellView;
        }

        return React.createElement(
          TouchableHighlight,
          {
            onPress: function onPress() {
              _this4._pressRow(rowID);

              highlightRow(sectionID, rowID);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 298
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 302
              }
            },
            React.createElement(
              View,
              {
                style: styles.tableRow,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 303
                }
              },
              React.createElement(
                View,
                {
                  style: urlCellViewStyle,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 304
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 305
                    }
                  },
                  rowData.url
                )
              ),
              React.createElement(
                View,
                {
                  style: methodCellViewStyle,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 309
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 310
                    }
                  },
                  this._getTypeShortName(rowData.type)
                )
              )
            )
          )
        );
      }
    }, {
      key: "_renderSeperator",
      value: function _renderSeperator(sectionID, rowID, adjacentRowHighlighted) {
        return React.createElement(View, {
          key: sectionID + "-" + rowID,
          style: {
            height: adjacentRowHighlighted ? SEPARATOR_THICKNESS : 0,
            backgroundColor: adjacentRowHighlighted ? '#3B5998' : '#CCCCCC'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 325
          }
        });
      }
    }, {
      key: "_scrollToBottom",
      value: function _scrollToBottom() {
        if (this._listView) {
          var scrollResponder = this._listView.getScrollResponder();

          if (scrollResponder) {
            var scrollY = Math.max(this._requests.length * LISTVIEW_CELL_HEIGHT + (this._listViewHighlighted ? 2 * SEPARATOR_THICKNESS : 0) - this._listViewHeight, 0);
            scrollResponder.scrollResponderScrollTo({
              x: 0,
              y: scrollY,
              animated: true
            });
          }
        }
      }
    }, {
      key: "_captureRequestListView",
      value: function _captureRequestListView(listRef) {
        this._listView = listRef;
      }
    }, {
      key: "_listViewOnLayout",
      value: function _listViewOnLayout(event) {
        var height = event.nativeEvent.layout.height;
        this._listViewHeight = height;
      }
    }, {
      key: "_pressRow",
      value: function _pressRow(rowID) {
        this._listViewHighlighted = true;
        this.setState({
          detailRowID: rowID
        }, this._scrollToTop());
      }
    }, {
      key: "_scrollToTop",
      value: function _scrollToTop() {
        if (this._scrollView) {
          this._scrollView.scrollTo({
            y: 0,
            animated: false
          });
        }
      }
    }, {
      key: "_captureDetailScrollView",
      value: function _captureDetailScrollView(scrollRef) {
        this._scrollView = scrollRef;
      }
    }, {
      key: "_closeButtonClicked",
      value: function _closeButtonClicked() {
        this.setState({
          detailRowID: null
        });
      }
    }, {
      key: "_getStringByValue",
      value: function _getStringByValue(value) {
        if (value === undefined) {
          return 'undefined';
        }

        if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
          return JSON.stringify(value);
        }

        if (typeof value === 'string' && value.length > 500) {
          return String(value).substr(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
        }

        return value;
      }
    }, {
      key: "_getRequestIndexByXHRID",
      value: function _getRequestIndexByXHRID(index) {
        if (index === undefined) {
          return -1;
        }

        var xhrIndex = this._xhrIdMap[index];

        if (xhrIndex === undefined) {
          return -1;
        } else {
          return xhrIndex;
        }
      }
    }, {
      key: "_getTypeShortName",
      value: function _getTypeShortName(type) {
        if (type === 'XMLHttpRequest') {
          return 'XHR';
        } else if (type === 'WebSocket') {
          return 'WS';
        }

        return '';
      }
    }, {
      key: "_genDetailViewItem",
      value: function _genDetailViewItem(index) {
        this._detailViewItems[index] = [];
        var detailViewItem = this._detailViewItems[index];
        var requestItem = this._requests[index];

        for (var _key in requestItem) {
          detailViewItem.push(React.createElement(
            View,
            {
              style: styles.detailViewRow,
              key: _key,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 440
              }
            },
            React.createElement(
              Text,
              {
                style: [styles.detailViewText, styles.detailKeyCellView],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 441
                }
              },
              _key
            ),
            React.createElement(
              Text,
              {
                style: [styles.detailViewText, styles.detailValueCellView],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 444
                }
              },
              this._getStringByValue(requestItem[_key])
            )
          ));
        }

        if (this.state.detailRowID != null && Number(this.state.detailRowID) === index) {
          this.setState({
            newDetailInfo: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 459
            }
          },
          this.state.detailRowID != null && React.createElement(
            TouchableHighlight,
            {
              style: styles.closeButton,
              onPress: this._closeButtonClicked,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 461
              }
            },
            React.createElement(
              View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 464
                }
              },
              React.createElement(
                Text,
                {
                  style: styles.clostButtonText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 465
                  }
                },
                "v"
              )
            )
          ),
          this.state.detailRowID != null && React.createElement(
            ScrollView,
            {
              style: styles.detailScrollView,
              ref: this._captureDetailScrollView,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 469
              }
            },
            this._detailViewItems[this.state.detailRowID]
          ),
          React.createElement(
            View,
            {
              style: styles.listViewTitle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 474
              }
            },
            this._requests.length > 0 && React.createElement(
              View,
              {
                style: styles.tableRow,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 476
                }
              },
              React.createElement(
                View,
                {
                  style: styles.urlTitleCellView,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 477
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 478
                    }
                  },
                  "URL"
                )
              ),
              React.createElement(
                View,
                {
                  style: styles.methodTitleCellView,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 480
                  }
                },
                React.createElement(
                  Text,
                  {
                    style: styles.cellText,
                    numberOfLines: 1,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 481
                    }
                  },
                  "Type"
                )
              )
            )
          ),
          React.createElement(ListView, {
            style: styles.listView,
            ref: this._captureRequestListView,
            dataSource: this.state.dataSource,
            renderRow: this._renderRow,
            enableEmptySections: true,
            renderSeparator: this._renderSeperator,
            onLayout: this._listViewOnLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 485
            }
          })
        );
      }
    }]);

    return NetworkOverlay;
  }(React.Component));

  var styles = StyleSheet.create({
    container: {
      paddingTop: 10,
      paddingBottom: 10,
      paddingLeft: 5,
      paddingRight: 5
    },
    listViewTitle: {
      height: 20
    },
    listView: {
      flex: 1,
      height: 60
    },
    tableRow: {
      flexDirection: 'row',
      flex: 1
    },
    cellText: {
      color: 'white',
      fontSize: 12
    },
    methodTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 1
    },
    urlTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 5,
      paddingLeft: 3
    },
    methodOddCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#000',
      flex: 1
    },
    urlOddCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#000',
      flex: 5,
      paddingLeft: 3
    },
    methodEvenCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#888',
      flex: 1
    },
    urlEvenCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#888',
      flex: 5,
      paddingLeft: 3
    },
    detailScrollView: {
      flex: 1,
      height: 180,
      marginTop: 5,
      marginBottom: 5
    },
    detailKeyCellView: {
      flex: 1.3
    },
    detailValueCellView: {
      flex: 2
    },
    detailViewRow: {
      flexDirection: 'row',
      paddingHorizontal: 3
    },
    detailViewText: {
      color: 'white',
      fontSize: 11
    },
    clostButtonText: {
      color: 'white',
      fontSize: 10
    },
    closeButton: {
      marginTop: 5,
      backgroundColor: '#888',
      justifyContent: 'center',
      alignItems: 'center'
    }
  });
  module.exports = NetworkOverlay;
},464,[13,219,432,172,414,211,371,461,213,465,466],"NetworkOverlay");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTWebSocketModule = _require(_dependencyMap[0], 'NativeModules').WebSocketModule;

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var base64 = _require(_dependencyMap[2], 'base64-js');

  var originalRCTWebSocketConnect = RCTWebSocketModule.connect;
  var originalRCTWebSocketSend = RCTWebSocketModule.send;
  var originalRCTWebSocketSendBinary = RCTWebSocketModule.sendBinary;
  var originalRCTWebSocketClose = RCTWebSocketModule.close;
  var eventEmitter = void 0;
  var subscriptions = void 0;
  var closeCallback = void 0;
  var sendCallback = void 0;
  var connectCallback = void 0;
  var onOpenCallback = void 0;
  var onMessageCallback = void 0;
  var onErrorCallback = void 0;
  var onCloseCallback = void 0;
  var _isInterceptorEnabled = false;
  var WebSocketInterceptor = {
    setCloseCallback: function setCloseCallback(callback) {
      closeCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setConnectCallback: function setConnectCallback(callback) {
      connectCallback = callback;
    },
    setOnOpenCallback: function setOnOpenCallback(callback) {
      onOpenCallback = callback;
    },
    setOnMessageCallback: function setOnMessageCallback(callback) {
      onMessageCallback = callback;
    },
    setOnErrorCallback: function setOnErrorCallback(callback) {
      onErrorCallback = callback;
    },
    setOnCloseCallback: function setOnCloseCallback(callback) {
      onCloseCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    _unregisterEvents: function _unregisterEvents() {
      subscriptions.forEach(function (e) {
        return e.remove();
      });
      subscriptions = [];
    },
    _registerEvents: function _registerEvents() {
      subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {
        if (onMessageCallback) {
          onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
        }
      }), eventEmitter.addListener('websocketOpen', function (ev) {
        if (onOpenCallback) {
          onOpenCallback(ev.id);
        }
      }), eventEmitter.addListener('websocketClosed', function (ev) {
        if (onCloseCallback) {
          onCloseCallback(ev.id, {
            code: ev.code,
            reason: ev.reason
          });
        }
      }), eventEmitter.addListener('websocketFailed', function (ev) {
        if (onErrorCallback) {
          onErrorCallback(ev.id, {
            message: ev.message
          });
        }
      })];
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      eventEmitter = new NativeEventEmitter(RCTWebSocketModule);

      WebSocketInterceptor._registerEvents();

      RCTWebSocketModule.connect = function (url, protocols, options, socketId) {
        if (connectCallback) {
          connectCallback(url, protocols, options, socketId);
        }

        originalRCTWebSocketConnect.apply(this, arguments);
      };

      RCTWebSocketModule.send = function (data, socketId) {
        if (sendCallback) {
          sendCallback(data, socketId);
        }

        originalRCTWebSocketSend.apply(this, arguments);
      };

      RCTWebSocketModule.sendBinary = function (data, socketId) {
        if (sendCallback) {
          sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
        }

        originalRCTWebSocketSendBinary.apply(this, arguments);
      };

      RCTWebSocketModule.close = function () {
        if (closeCallback) {
          if (arguments.length === 3) {
            closeCallback(arguments[0], arguments[1], arguments[2]);
          } else {
            closeCallback(null, null, arguments[0]);
          }
        }

        originalRCTWebSocketClose.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    _arrayBufferToString: function _arrayBufferToString(data) {
      var value = base64.toByteArray(data).buffer;

      if (value === undefined || value === null) {
        return '(no value)';
      }

      if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
        return "ArrayBuffer {" + String(Array.from(new Uint8Array(value))) + "}";
      }

      return value;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      RCTWebSocketModule.send = originalRCTWebSocketSend;
      RCTWebSocketModule.sendBinary = originalRCTWebSocketSendBinary;
      RCTWebSocketModule.close = originalRCTWebSocketClose;
      RCTWebSocketModule.connect = originalRCTWebSocketConnect;
      connectCallback = null;
      closeCallback = null;
      sendCallback = null;
      onOpenCallback = null;
      onMessageCallback = null;
      onCloseCallback = null;
      onErrorCallback = null;

      WebSocketInterceptor._unregisterEvents();
    }
  };
  module.exports = WebSocketInterceptor;
},465,[67,125,128],"WebSocketInterceptor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var XMLHttpRequest = _require(_dependencyMap[0], 'XMLHttpRequest');

  var originalXHROpen = XMLHttpRequest.prototype.open;
  var originalXHRSend = XMLHttpRequest.prototype.send;
  var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;
  var openCallback;
  var sendCallback;
  var requestHeaderCallback;
  var headerReceivedCallback;
  var responseCallback;
  var _isInterceptorEnabled = false;
  var XHRInterceptor = {
    setOpenCallback: function setOpenCallback(callback) {
      openCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
      headerReceivedCallback = callback;
    },
    setResponseCallback: function setResponseCallback(callback) {
      responseCallback = callback;
    },
    setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
      requestHeaderCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      XMLHttpRequest.prototype.open = function (method, url) {
        if (openCallback) {
          openCallback(method, url, this);
        }

        originalXHROpen.apply(this, arguments);
      };

      XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
        if (requestHeaderCallback) {
          requestHeaderCallback(header, value, this);
        }

        originalXHRSetRequestHeader.apply(this, arguments);
      };

      XMLHttpRequest.prototype.send = function (data) {
        var _this = this;

        if (sendCallback) {
          sendCallback(data, this);
        }

        if (this.addEventListener) {
          this.addEventListener('readystatechange', function () {
            if (!_isInterceptorEnabled) {
              return;
            }

            if (_this.readyState === _this.HEADERS_RECEIVED) {
              var contentTypeString = _this.getResponseHeader('Content-Type');

              var contentLengthString = _this.getResponseHeader('Content-Length');

              var responseContentType = void 0,
                  responseSize = void 0;

              if (contentTypeString) {
                responseContentType = contentTypeString.split(';')[0];
              }

              if (contentLengthString) {
                responseSize = parseInt(contentLengthString, 10);
              }

              if (headerReceivedCallback) {
                headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
              }
            }

            if (_this.readyState === _this.DONE) {
              if (responseCallback) {
                responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
              }
            }
          }, false);
        }

        originalXHRSend.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      XMLHttpRequest.prototype.send = originalXHRSend;
      XMLHttpRequest.prototype.open = originalXHROpen;
      XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;
      responseCallback = null;
      openCallback = null;
      sendCallback = null;
      headerReceivedCallback = null;
      requestHeaderCallback = null;
    }
  };
  module.exports = XHRInterceptor;
},466,[118],"XHRInterceptor");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    PerformanceOverlay: {
      displayName: "PerformanceOverlay"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var PerformanceLogger = _require(_dependencyMap[2], 'PerformanceLogger');

  var React = _require(_dependencyMap[3], 'React');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var Text = _require(_dependencyMap[5], 'Text');

  var View = _require(_dependencyMap[6], 'View');

  var PerformanceOverlay = _wrapComponent("PerformanceOverlay")(function (_React$Component) {
    _inherits(PerformanceOverlay, _React$Component);

    function PerformanceOverlay() {
      _classCallCheck(this, PerformanceOverlay);

      return _possibleConstructorReturn(this, (PerformanceOverlay.__proto__ || Object.getPrototypeOf(PerformanceOverlay)).apply(this, arguments));
    }

    _createClass(PerformanceOverlay, [{
      key: "render",
      value: function render() {
        var perfLogs = PerformanceLogger.getTimespans();
        var items = [];

        for (var key in perfLogs) {
          if (perfLogs[key].totalTime) {
            var unit = key === 'BundleSize' ? 'b' : 'ms';
            items.push(React.createElement(
              View,
              {
                style: styles.row,
                key: key,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 27
                }
              },
              React.createElement(
                Text,
                {
                  style: [styles.text, styles.label],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 28
                  }
                },
                key
              ),
              React.createElement(
                Text,
                {
                  style: [styles.text, styles.totalTime],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 29
                  }
                },
                perfLogs[key].totalTime + unit
              )
            ));
          }
        }

        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 38
            }
          },
          items
        );
      }
    }]);

    return PerformanceOverlay;
  }(React.Component));

  var styles = StyleSheet.create({
    container: {
      height: 100,
      paddingTop: 10
    },
    label: {
      flex: 1
    },
    row: {
      flexDirection: 'row',
      paddingHorizontal: 10
    },
    text: {
      color: 'white',
      fontSize: 12
    },
    totalTime: {
      paddingRight: 100
    }
  });
  module.exports = PerformanceOverlay;
},467,[13,219,147,172,211,371,213],"PerformanceOverlay");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/ReactNative/YellowBox.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var _components = {
    YellowBox: {
      displayName: "YellowBox"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/ReactNative/YellowBox.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var EventEmitter = _require(_dependencyMap[2], 'EventEmitter');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var React = _require(_dependencyMap[4], 'React');

  var SafeAreaView = _require(_dependencyMap[5], 'SafeAreaView');

  var StyleSheet = _require(_dependencyMap[6], 'StyleSheet');

  var RCTLog = _require(_dependencyMap[7], 'RCTLog');

  var infoLog = _require(_dependencyMap[8], 'infoLog');

  var openFileInEditor = _require(_dependencyMap[9], 'openFileInEditor');

  var parseErrorStack = _require(_dependencyMap[10], 'parseErrorStack');

  var stringifySafe = _require(_dependencyMap[11], 'stringifySafe');

  var symbolicateStackTrace = _require(_dependencyMap[12], 'symbolicateStackTrace');

  var _warningEmitter = new EventEmitter();

  var _warningMap = new Map();

  var IGNORED_WARNINGS = [];

  if (__DEV__) {
    var _console = console,
        error = _console.error,
        warn = _console.warn;

    console.error = function () {
      error.apply(console, arguments);

      if (typeof arguments[0] === 'string' && arguments[0].startsWith('Warning: ')) {
        updateWarningMap.apply(null, arguments);
      }
    };

    console.warn = function () {
      warn.apply(console, arguments);
      updateWarningMap.apply(null, arguments);
    };

    if (Platform.isTesting) {
      console.disableYellowBox = true;
    }

    RCTLog.setWarningHandler(function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      updateWarningMap.apply(null, args);
    });
  }

  function sprintf(format) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    var index = 0;
    return format.replace(/%s/g, function (match) {
      return args[index++];
    });
  }

  function updateWarningMap() {
    if (console.disableYellowBox) {
      return;
    }

    var warning = void 0;

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    if (typeof args[0] === 'string') {
      var format = args[0],
          formatArgs = args.slice(1);
      var argCount = (format.match(/%s/g) || []).length;
      warning = [sprintf.apply(undefined, [format].concat(_toConsumableArray(formatArgs.slice(0, argCount).map(stringifySafe))))].concat(_toConsumableArray(formatArgs.slice(argCount).map(stringifySafe))).join(' ');
    } else {
      warning = args.map(stringifySafe).join(' ');
    }

    if (warning.startsWith('(ADVICE)')) {
      return;
    }

    var warningInfo = _warningMap.get(warning);

    if (warningInfo) {
      warningInfo.count += 1;
    } else {
      var _error = new Error();

      _error.framesToPop = 2;

      _warningMap.set(warning, {
        count: 1,
        stacktrace: parseErrorStack(_error),
        symbolicated: false
      });
    }

    _warningEmitter.emit('warning', _warningMap);
  }

  function ensureSymbolicatedWarning(warning) {
    var prevWarningInfo = _warningMap.get(warning);

    if (!prevWarningInfo || prevWarningInfo.symbolicated) {
      return;
    }

    prevWarningInfo.symbolicated = true;
    symbolicateStackTrace(prevWarningInfo.stacktrace).then(function (stack) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        nextWarningInfo.stacktrace = stack;

        _warningEmitter.emit('warning', _warningMap);
      }
    }, function (error) {
      var nextWarningInfo = _warningMap.get(warning);

      if (nextWarningInfo) {
        infoLog('Failed to symbolicate warning, "%s":', warning, error);

        _warningEmitter.emit('warning', _warningMap);
      }
    });
  }

  function isWarningIgnored(warning) {
    var isIgnored = IGNORED_WARNINGS.some(function (ignoredWarning) {
      return warning.startsWith(ignoredWarning);
    });

    if (isIgnored) {
      return true;
    }

    return Array.isArray(console.ignoredYellowBox) && console.ignoredYellowBox.some(function (ignorePrefix) {
      return warning.startsWith(String(ignorePrefix));
    });
  }

  var WarningRow = function WarningRow(_ref) {
    var count = _ref.count,
        warning = _ref.warning,
        onPress = _ref.onPress;

    var Text = _require(_dependencyMap[13], 'Text');

    var TouchableHighlight = _require(_dependencyMap[14], 'TouchableHighlight');

    var View = _require(_dependencyMap[15], 'View');

    var countText = count > 1 ? React.createElement(
      Text,
      {
        style: styles.listRowCount,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 195
        }
      },
      '(' + count + ') '
    ) : null;
    return React.createElement(
      View,
      {
        style: styles.listRow,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 199
        }
      },
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onPress,
          style: styles.listRowContent,
          underlayColor: "transparent",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 200
          }
        },
        React.createElement(
          Text,
          {
            style: styles.listRowText,
            numberOfLines: 2,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 205
            }
          },
          countText,
          warning
        )
      )
    );
  };

  var StackRow = function StackRow(_ref2) {
    var frame = _ref2.frame;

    var Text = _require(_dependencyMap[13], 'Text');

    var TouchableHighlight = _require(_dependencyMap[14], 'TouchableHighlight');

    var file = frame.file,
        lineNumber = frame.lineNumber;
    var fileName = void 0;

    if (file) {
      var fileParts = file.split('/');
      fileName = fileParts[fileParts.length - 1];
    } else {
      fileName = '<unknown file>';
    }

    return React.createElement(
      TouchableHighlight,
      {
        activeOpacity: 0.5,
        style: styles.openInEditorButton,
        underlayColor: "transparent",
        onPress: openFileInEditor.bind(null, file, lineNumber),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 228
        }
      },
      React.createElement(
        Text,
        {
          style: styles.inspectorCountText,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 233
          }
        },
        fileName,
        ":",
        lineNumber
      )
    );
  };

  var WarningInspector = function WarningInspector(_ref3) {
    var warningInfo = _ref3.warningInfo,
        warning = _ref3.warning,
        stacktraceVisible = _ref3.stacktraceVisible,
        onDismiss = _ref3.onDismiss,
        onDismissAll = _ref3.onDismissAll,
        onMinimize = _ref3.onMinimize,
        toggleStacktrace = _ref3.toggleStacktrace;

    var ScrollView = _require(_dependencyMap[16], 'ScrollView');

    var Text = _require(_dependencyMap[13], 'Text');

    var TouchableHighlight = _require(_dependencyMap[14], 'TouchableHighlight');

    var View = _require(_dependencyMap[15], 'View');

    var _ref4 = warningInfo || {},
        count = _ref4.count,
        stacktrace = _ref4.stacktrace;

    var countSentence = 'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';
    var stacktraceList = void 0;

    if (stacktraceVisible && stacktrace) {
      stacktraceList = React.createElement(
        View,
        {
          style: styles.stacktraceList,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 261
          }
        },
        stacktrace.map(function (frame, ii) {
          return React.createElement(StackRow, {
            frame: frame,
            key: ii,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 262
            }
          });
        })
      );
    }

    return React.createElement(
      View,
      {
        style: styles.inspector,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 268
        }
      },
      React.createElement(
        SafeAreaView,
        {
          style: styles.safeArea,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 269
          }
        },
        React.createElement(
          View,
          {
            style: styles.inspectorCount,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 270
            }
          },
          React.createElement(
            Text,
            {
              style: styles.inspectorCountText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 271
              }
            },
            countSentence
          ),
          React.createElement(
            TouchableHighlight,
            {
              onPress: toggleStacktrace,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 272
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 275
                }
              },
              stacktraceVisible ? "\u25BC" : "\u25B6",
              " Stacktrace"
            )
          )
        ),
        React.createElement(
          ScrollView,
          {
            style: styles.inspectorWarning,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 280
            }
          },
          stacktraceList,
          React.createElement(
            Text,
            {
              style: styles.inspectorWarningText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 282
              }
            },
            warning
          )
        ),
        React.createElement(
          View,
          {
            style: styles.inspectorButtons,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 284
            }
          },
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onMinimize,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 285
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 290
                }
              },
              "Minimize"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismiss,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 292
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 297
                }
              },
              "Dismiss"
            )
          ),
          React.createElement(
            TouchableHighlight,
            {
              activeOpacity: 0.5,
              onPress: onDismissAll,
              style: styles.inspectorButton,
              underlayColor: "transparent",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 299
              }
            },
            React.createElement(
              Text,
              {
                style: styles.inspectorButtonText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 304
                }
              },
              "Dismiss All"
            )
          )
        )
      )
    );
  };

  var YellowBox = _wrapComponent("YellowBox")(function (_React$Component) {
    _inherits(YellowBox, _React$Component);

    function YellowBox(props, context) {
      _classCallCheck(this, YellowBox);

      var _this = _possibleConstructorReturn(this, (YellowBox.__proto__ || Object.getPrototypeOf(YellowBox)).call(this, props, context));

      _this.state = {
        inspecting: null,
        stacktraceVisible: false,
        warningMap: _warningMap
      };

      _this.dismissWarning = function (warning) {
        var _this$state = _this.state,
            inspecting = _this$state.inspecting,
            warningMap = _this$state.warningMap;

        if (warning) {
          warningMap.delete(warning);
        } else {
          warningMap.clear();
        }

        _this.setState({
          inspecting: warning && inspecting !== warning ? inspecting : null,
          warningMap: warningMap
        });
      };

      return _this;
    }

    _createClass(YellowBox, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var scheduled = null;
        this._listener = _warningEmitter.addListener('warning', function (warningMap) {
          scheduled = scheduled || setImmediate(function () {
            scheduled = null;

            _this2.setState({
              warningMap: warningMap
            });
          });
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var inspecting = this.state.inspecting;

        if (inspecting != null) {
          ensureSymbolicatedWarning(inspecting);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._listener) {
          this._listener.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        if (console.disableYellowBox || this.state.warningMap.size === 0) {
          return null;
        }

        var ScrollView = _require(_dependencyMap[16], 'ScrollView');

        var View = _require(_dependencyMap[15], 'View');

        var _state = this.state,
            inspecting = _state.inspecting,
            stacktraceVisible = _state.stacktraceVisible;
        var inspector = inspecting !== null ? React.createElement(WarningInspector, {
          warningInfo: this.state.warningMap.get(inspecting),
          warning: inspecting,
          stacktraceVisible: stacktraceVisible,
          onDismiss: function onDismiss() {
            return _this3.dismissWarning(inspecting);
          },
          onDismissAll: function onDismissAll() {
            return _this3.dismissWarning(null);
          },
          onMinimize: function onMinimize() {
            return _this3.setState({
              inspecting: null
            });
          },
          toggleStacktrace: function toggleStacktrace() {
            return _this3.setState({
              stacktraceVisible: !stacktraceVisible
            });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 391
          }
        }) : null;
        var rows = [];
        this.state.warningMap.forEach(function (warningInfo, warning) {
          if (!isWarningIgnored(warning)) {
            rows.push(React.createElement(WarningRow, {
              key: warning,
              count: warningInfo.count,
              warning: warning,
              onPress: function onPress() {
                return _this3.setState({
                  inspecting: warning
                });
              },
              onDismiss: function onDismiss() {
                return _this3.dismissWarning(warning);
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 408
              }
            }));
          }
        });
        var listStyle = [styles.list, {
          height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight)
        }];
        return React.createElement(
          View,
          {
            style: inspector ? styles.fullScreen : listStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 425
            }
          },
          React.createElement(
            ScrollView,
            {
              style: listStyle,
              scrollsToTop: false,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 426
              }
            },
            rows
          ),
          inspector
        );
      }
    }], [{
      key: "ignoreWarnings",
      value: function ignoreWarnings(warnings) {
        warnings.forEach(function (warning) {
          if (IGNORED_WARNINGS.indexOf(warning) === -1) {
            IGNORED_WARNINGS.push(warning);
          }
        });
      }
    }]);

    return YellowBox;
  }(React.Component));

  var backgroundColor = function backgroundColor(opacity) {
    return 'rgba(250, 186, 48, ' + opacity + ')';
  };

  var textColor = 'white';
  var rowGutter = 1;
  var rowHeight = 46;
  var elevation = Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined;
  var styles = StyleSheet.create({
    fullScreen: {
      height: '100%',
      width: '100%',
      elevation: elevation,
      position: 'absolute'
    },
    inspector: {
      backgroundColor: backgroundColor(0.95),
      height: '100%',
      paddingTop: 5,
      elevation: elevation
    },
    inspectorButtons: {
      flexDirection: 'row'
    },
    inspectorButton: {
      flex: 1,
      paddingVertical: 22,
      backgroundColor: backgroundColor(1)
    },
    safeArea: {
      flex: 1
    },
    stacktraceList: {
      paddingBottom: 5
    },
    inspectorButtonText: {
      color: textColor,
      fontSize: 14,
      opacity: 0.8,
      textAlign: 'center'
    },
    openInEditorButton: {
      paddingTop: 5,
      paddingBottom: 5
    },
    inspectorCount: {
      padding: 15,
      paddingBottom: 0,
      flexDirection: 'row',
      justifyContent: 'space-between'
    },
    inspectorCountText: {
      color: textColor,
      fontSize: 14
    },
    inspectorWarning: {
      flex: 1,
      paddingHorizontal: 15
    },
    inspectorWarningText: {
      color: textColor,
      fontSize: 16,
      fontWeight: '600'
    },
    list: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      elevation: elevation
    },
    listRow: {
      backgroundColor: backgroundColor(0.95),
      height: rowHeight,
      marginTop: rowGutter
    },
    listRowContent: {
      flex: 1
    },
    listRowCount: {
      color: 'rgba(255, 255, 255, 0.5)'
    },
    listRowText: {
      color: textColor,
      position: 'absolute',
      left: 0,
      top: Platform.OS === 'android' ? 5 : 7,
      marginLeft: 15,
      marginRight: 15
    }
  });
  module.exports = YellowBox;
},468,[13,219,84,75,172,469,211,145,148,463,79,73,103,371,461,213,414],"YellowBox");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'View');
},469,[213],"SafeAreaView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var I18nManager = _require(_dependencyMap[0], 'NativeModules').I18nManager || {
    isRTL: false,
    doLeftAndRightSwapInRTL: true,
    allowRTL: function allowRTL() {},
    forceRTL: function forceRTL() {},
    swapLeftAndRightInRTL: function swapLeftAndRightInRTL() {}
  };
  module.exports = I18nManager;
},470,[67],"I18nManager");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},471,[449],"NavigatorIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _class2,
      _temp2,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Picker/Picker.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    PickerItem: {
      displayName: "PickerItem"
    },
    Picker: {
      displayName: "Picker"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Picker/Picker.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ColorPropType = _require(_dependencyMap[2], 'ColorPropType');

  var PickerIOS = _require(_dependencyMap[3], 'PickerIOS');

  var PickerAndroid = _require(_dependencyMap[4], 'PickerAndroid');

  var Platform = _require(_dependencyMap[5], 'Platform');

  var React = _require(_dependencyMap[6], 'React');

  var PropTypes = _require(_dependencyMap[7], 'prop-types');

  var StyleSheetPropType = _require(_dependencyMap[8], 'StyleSheetPropType');

  var TextStylePropTypes = _require(_dependencyMap[9], 'TextStylePropTypes');

  var UnimplementedView = _require(_dependencyMap[10], 'UnimplementedView');

  var ViewPropTypes = _require(_dependencyMap[11], 'ViewPropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[12], 'ViewStylePropTypes');

  var itemStylePropType = StyleSheetPropType(TextStylePropTypes);
  var pickerStyleType = StyleSheetPropType(_extends({}, ViewStylePropTypes, {
    color: ColorPropType
  }));
  var MODE_DIALOG = 'dialog';
  var MODE_DROPDOWN = 'dropdown';

  var PickerItem = _wrapComponent("PickerItem")((_temp = _class = function (_React$Component) {
    _inherits(PickerItem, _React$Component);

    function PickerItem() {
      _classCallCheck(this, PickerItem);

      return _possibleConstructorReturn(this, (PickerItem.__proto__ || Object.getPrototypeOf(PickerItem)).apply(this, arguments));
    }

    _createClass(PickerItem, [{
      key: "render",
      value: function render() {
        throw null;
      }
    }]);

    return PickerItem;
  }(React.Component), _class.propTypes = {
    label: PropTypes.string.isRequired,
    value: PropTypes.any,
    color: ColorPropType,
    testID: PropTypes.string
  }, _temp));

  var Picker = _wrapComponent("Picker")((_temp2 = _class2 = function (_React$Component2) {
    _inherits(Picker, _React$Component2);

    function Picker() {
      _classCallCheck(this, Picker);

      return _possibleConstructorReturn(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).apply(this, arguments));
    }

    _createClass(Picker, [{
      key: "render",
      value: function render() {
        if (Platform.OS === 'ios') {
          return React.createElement(
            PickerIOS,
            _extends({}, this.props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 155
              }
            }),
            this.props.children
          );
        } else if (Platform.OS === 'android') {
          return React.createElement(
            PickerAndroid,
            _extends({}, this.props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 158
              }
            }),
            this.props.children
          );
        } else {
          return React.createElement(UnimplementedView, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 160
            }
          });
        }
      }
    }]);

    return Picker;
  }(React.Component), _class2.MODE_DIALOG = MODE_DIALOG, _class2.MODE_DROPDOWN = MODE_DROPDOWN, _class2.Item = PickerItem, _class2.defaultProps = {
    mode: MODE_DIALOG
  }, _class2.propTypes = _extends({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: PropTypes.any,
    onValueChange: PropTypes.func,
    enabled: PropTypes.bool,
    mode: PropTypes.oneOf(['dialog', 'dropdown']),
    itemStyle: itemStylePropType,
    prompt: PropTypes.string,
    testID: PropTypes.string
  }), _temp2));

  module.exports = Picker;
},472,[13,219,89,473,474,75,172,25,181,194,449,173,182],"Picker");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},473,[449],"PickerIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    PickerAndroid: {
      displayName: "PickerAndroid"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ColorPropType = _require(_dependencyMap[2], 'ColorPropType');

  var React = _require(_dependencyMap[3], 'React');

  var ReactPropTypes = _require(_dependencyMap[4], 'prop-types');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var StyleSheetPropType = _require(_dependencyMap[6], 'StyleSheetPropType');

  var ViewPropTypes = _require(_dependencyMap[7], 'ViewPropTypes');

  var ViewStylePropTypes = _require(_dependencyMap[8], 'ViewStylePropTypes');

  var processColor = _require(_dependencyMap[9], 'processColor');

  var requireNativeComponent = _require(_dependencyMap[10], 'requireNativeComponent');

  var REF_PICKER = 'picker';
  var MODE_DROPDOWN = 'dropdown';
  var pickerStyleType = StyleSheetPropType(_extends({}, ViewStylePropTypes, {
    color: ColorPropType
  }));

  var PickerAndroid = _wrapComponent("PickerAndroid")((_temp = _class = function (_React$Component) {
    _inherits(PickerAndroid, _React$Component);

    function PickerAndroid(props, context) {
      _classCallCheck(this, PickerAndroid);

      var _this = _possibleConstructorReturn(this, (PickerAndroid.__proto__ || Object.getPrototypeOf(PickerAndroid)).call(this, props, context));

      _initialiseProps.call(_this);

      var state = _this._stateFromProps(props);

      _this.state = _extends({}, state, {
        initialSelectedIndex: state.selectedIndex
      });
      return _this;
    }

    _createClass(PickerAndroid, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState(this._stateFromProps(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        var Picker = this.props.mode === MODE_DROPDOWN ? DropdownPicker : DialogPicker;
        var nativeProps = {
          enabled: this.props.enabled,
          items: this.state.items,
          mode: this.props.mode,
          onSelect: this._onChange,
          prompt: this.props.prompt,
          selected: this.state.initialSelectedIndex,
          testID: this.props.testID,
          style: [styles.pickerAndroid, this.props.style],
          accessibilityLabel: this.props.accessibilityLabel
        };
        return React.createElement(Picker, _extends({
          ref: REF_PICKER
        }, nativeProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 105
          }
        }));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativePosition = this.state.initialSelectedIndex;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.refs[REF_PICKER] && this.state.selectedIndex !== this._lastNativePosition) {
          this.refs[REF_PICKER].setNativeProps({
            selected: this.state.selectedIndex
          });
          this._lastNativePosition = this.state.selectedIndex;
        }
      }
    }]);

    return PickerAndroid;
  }(React.Component), _class.propTypes = _extends({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: ReactPropTypes.any,
    enabled: ReactPropTypes.bool,
    mode: ReactPropTypes.oneOf(['dialog', 'dropdown']),
    onValueChange: ReactPropTypes.func,
    prompt: ReactPropTypes.string,
    testID: ReactPropTypes.string
  }), _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this._stateFromProps = function (props) {
      var selectedIndex = 0;
      var items = React.Children.map(props.children, function (child, index) {
        if (child.props.value === props.selectedValue) {
          selectedIndex = index;
        }

        var childProps = {
          value: child.props.value,
          label: child.props.label
        };

        if (child.props.color) {
          childProps.color = processColor(child.props.color);
        }

        return childProps;
      });
      return {
        selectedIndex: selectedIndex,
        items: items
      };
    };

    this._onChange = function (event) {
      if (_this2.props.onValueChange) {
        var position = event.nativeEvent.position;

        if (position >= 0) {
          var children = React.Children.toArray(_this2.props.children);
          var value = children[position].props.value;

          _this2.props.onValueChange(value, position);
        } else {
          _this2.props.onValueChange(null, position);
        }
      }

      _this2._lastNativePosition = event.nativeEvent.position;

      _this2.forceUpdate();
    };
  }, _temp));

  var styles = StyleSheet.create({
    pickerAndroid: {
      height: 50
    }
  });
  var cfg = {
    nativeOnly: {
      items: true,
      selected: true
    }
  };
  var DropdownPicker = requireNativeComponent('AndroidDropdownPicker', PickerAndroid, cfg);
  var DialogPicker = requireNativeComponent('AndroidDialogPicker', PickerAndroid, cfg);
  module.exports = PickerAndroid;
},474,[13,219,89,172,25,211,181,173,182,195,188],"PickerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.android.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    DummyProgressViewIOS: {
      displayName: "DummyProgressViewIOS"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var Text = _require(_dependencyMap[4], 'Text');

  var View = _require(_dependencyMap[5], 'View');

  var DummyProgressViewIOS = _wrapComponent("DummyProgressViewIOS")(function (_React$Component) {
    _inherits(DummyProgressViewIOS, _React$Component);

    function DummyProgressViewIOS() {
      _classCallCheck(this, DummyProgressViewIOS);

      return _possibleConstructorReturn(this, (DummyProgressViewIOS.__proto__ || Object.getPrototypeOf(DummyProgressViewIOS)).apply(this, arguments));
    }

    _createClass(DummyProgressViewIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummy, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 21
            }
          },
          React.createElement(
            Text,
            {
              style: styles.text,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 22
              }
            },
            "ProgressViewIOS is not supported on this platform!"
          )
        );
      }
    }]);

    return DummyProgressViewIOS;
  }(React.Component));

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 20,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummyProgressViewIOS;
},475,[13,219,172,211,371,213],"ProgressViewIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Lists/SectionList.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SectionList: {
      displayName: "SectionList"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Lists/SectionList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var MetroListView = _require(_dependencyMap[2], 'MetroListView');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var React = _require(_dependencyMap[4], 'React');

  var ScrollView = _require(_dependencyMap[5], 'ScrollView');

  var VirtualizedSectionList = _require(_dependencyMap[6], 'VirtualizedSectionList');

  var defaultProps = _extends({}, VirtualizedSectionList.defaultProps, {
    stickySectionHeadersEnabled: Platform.OS === 'ios'
  });

  var SectionList = _wrapComponent("SectionList")((_temp2 = _class = function (_React$PureComponent) {
    _inherits(SectionList, _React$PureComponent);

    function SectionList() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, SectionList);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SectionList.__proto__ || Object.getPrototypeOf(SectionList)).call.apply(_ref, [this].concat(args))), _this), _this._captureRef = function (ref) {
        _this._wrapperListRef = ref;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(SectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        this._wrapperListRef.scrollToLocation(params);
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.recordInteraction();
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;
        return React.createElement(List, _extends({}, this.props, {
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 332
          }
        }));
      }
    }]);

    return SectionList;
  }(React.PureComponent), _class.defaultProps = defaultProps, _temp2));

  module.exports = SectionList;
},476,[13,219,431,75,172,414,477],"SectionList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    VirtualizedSectionList: {
      displayName: "VirtualizedSectionList"
    },
    ItemWithSeparator: {
      displayName: "ItemWithSeparator"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var View = _require(_dependencyMap[3], 'View');

  var VirtualizedList = _require(_dependencyMap[4], 'VirtualizedList');

  var invariant = _require(_dependencyMap[5], 'fbjs/lib/invariant');

  var VirtualizedSectionList = _wrapComponent("VirtualizedSectionList")((_temp = _class = function (_React$PureComponent) {
    _inherits(VirtualizedSectionList, _React$PureComponent);

    _createClass(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex + 1;

        for (var ii = 0; ii < params.sectionIndex; ii++) {
          index += this.props.sections[ii].data.length + 2;
        }

        var toIndexParams = _extends({}, params, {
          index: index
        });

        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var defaultKeyExtractor = this.props.keyExtractor;

        for (var ii = 0; ii < this.props.sections.length; ii++) {
          var _section = this.props.sections[ii];

          var _key = _section.key || String(ii);

          itemIndex -= 1;

          if (itemIndex >= _section.data.length + 1) {
            itemIndex -= _section.data.length + 1;
          } else if (itemIndex === -1) {
            return {
              section: _section,
              key: _key + ':header',
              index: null,
              header: true,
              trailingSection: this.props.sections[ii + 1]
            };
          } else if (itemIndex === _section.data.length) {
            return {
              section: _section,
              key: _key + ':footer',
              index: null,
              header: false,
              trailingSection: this.props.sections[ii + 1]
            };
          } else {
            var _keyExtractor = _section.keyExtractor || defaultKeyExtractor;

            return {
              section: _section,
              key: _key + ':' + _keyExtractor(_section.data[itemIndex], itemIndex),
              index: itemIndex,
              leadingItem: _section.data[itemIndex - 1],
              leadingSection: this.props.sections[ii - 1],
              trailingItem: _section.data[itemIndex + 1],
              trailingSection: this.props.sections[ii + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info) {
        info = info || this._subExtractor(index);

        if (!info) {
          return null;
        }

        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
        var isLastItemInSection = info.index === info.section.data.length - 1;

        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }

        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }

        return null;
      }
    }, {
      key: "_computeState",
      value: function _computeState(props) {
        var offset = props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = [];
        var itemCount = props.sections.reduce(function (v, section) {
          stickyHeaderIndices.push(v + offset);
          return v + section.data.length + 2;
        }, 0);
        return {
          childProps: _extends({}, props, {
            renderItem: this._renderItem,
            ItemSeparatorComponent: undefined,
            data: props.sections,
            getItemCount: function getItemCount() {
              return itemCount;
            },
            getItem: getItem,
            keyExtractor: this._keyExtractor,
            onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
            stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined
          })
        };
      }
    }]);

    function VirtualizedSectionList(props, context) {
      _classCallCheck(this, VirtualizedSectionList);

      var _this = _possibleConstructorReturn(this, (VirtualizedSectionList.__proto__ || Object.getPrototypeOf(VirtualizedSectionList)).call(this, props, context));

      _this._keyExtractor = function (item, index) {
        var info = _this._subExtractor(index);

        return info && info.key || String(index);
      };

      _this._convertViewable = function (viewable) {
        invariant(viewable.index != null, 'Received a broken ViewToken');

        var info = _this._subExtractor(viewable.index);

        if (!info) {
          return null;
        }

        var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
        return _extends({}, viewable, {
          index: info.index,
          key: keyExtractor(viewable.item, info.index),
          section: info.section
        });
      };

      _this._onViewableItemsChanged = function (_ref) {
        var viewableItems = _ref.viewableItems,
            changed = _ref.changed;

        if (_this.props.onViewableItemsChanged) {
          _this.props.onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
            changed: changed.map(_this._convertViewable, _this).filter(Boolean)
          });
        }
      };

      _this._renderItem = function (_ref2) {
        var item = _ref2.item,
            index = _ref2.index;

        var info = _this._subExtractor(index);

        if (!info) {
          return null;
        }

        var infoIndex = info.index;

        if (infoIndex == null) {
          var _section2 = info.section;

          if (info.header === true) {
            var _renderSectionHeader = _this.props.renderSectionHeader;
            return _renderSectionHeader ? _renderSectionHeader({
              section: _section2
            }) : null;
          } else {
            var _renderSectionFooter = _this.props.renderSectionFooter;
            return _renderSectionFooter ? _renderSectionFooter({
              section: _section2
            }) : null;
          }
        } else {
          var _renderItem = info.section.renderItem || _this.props.renderItem;

          var _SeparatorComponent = _this._getSeparatorComponent(index, info);

          invariant(_renderItem, 'no renderItem!');
          return React.createElement(ItemWithSeparator, {
            SeparatorComponent: _SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            onUpdateSeparator: _this._onUpdateSeparator,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            ref: function ref(_ref3) {
              _this._cellRefs[info.key] = _ref3;
            },
            renderItem: _renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 279
            }
          });
        }
      };

      _this._onUpdateSeparator = function (key, newProps) {
        var ref = _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      };

      _this._cellRefs = {};

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this.state = _this._computeState(props);
      return _this;
    }

    _createClass(VirtualizedSectionList, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState(this._computeState(nextProps));
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(VirtualizedList, _extends({}, this.state.childProps, {
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 368
          }
        }));
      }
    }]);

    return VirtualizedSectionList;
  }(React.PureComponent), _class.defaultProps = _extends({}, VirtualizedList.defaultProps, {
    data: []
  }), _temp));

  var ItemWithSeparator = _wrapComponent("ItemWithSeparator")(function (_React$Component) {
    _inherits(ItemWithSeparator, _React$Component);

    function ItemWithSeparator() {
      var _ref4;

      var _temp2, _this2, _ret;

      _classCallCheck(this, ItemWithSeparator);

      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _ret = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref4 = ItemWithSeparator.__proto__ || Object.getPrototypeOf(ItemWithSeparator)).call.apply(_ref4, [this].concat(args))), _this2), _this2.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this2.props.item,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.trailingItem,
          trailingSection: _this2.props.trailingSection
        },
        leadingSeparatorProps: {
          highlighted: false,
          leadingItem: _this2.props.leadingItem,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.item,
          trailingSection: _this2.props.trailingSection
        }
      }, _this2._separators = {
        highlight: function highlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: true
            });
          });
        },
        unhighlight: function unhighlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: false
            });
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this2$props = _this2.props,
              LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent,
              cellKey = _this2$props.cellKey,
              prevCellKey = _this2$props.prevCellKey;

          if (select === 'leading' && LeadingSeparatorComponent) {
            _this2.setState(function (state) {
              return {
                leadingSeparatorProps: _extends({}, state.leadingSeparatorProps, newProps)
              };
            });
          } else {
            _this2.props.onUpdateSeparator(select === 'leading' && prevCellKey || cellKey, newProps);
          }
        }
      }, _temp2), _possibleConstructorReturn(_this2, _ret);
    }

    _createClass(ItemWithSeparator, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(props) {
        var _this3 = this;

        this.setState(function (state) {
          return {
            separatorProps: _extends({}, _this3.state.separatorProps, {
              leadingItem: props.item,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.trailingItem,
              trailingSection: props.trailingSection
            }),
            leadingSeparatorProps: _extends({}, _this3.state.leadingSeparatorProps, {
              leadingItem: props.leadingItem,
              leadingSection: props.leadingSection,
              section: props.section,
              trailingItem: props.item,
              trailingSection: props.trailingSection
            })
          };
        });
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: _extends({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            LeadingSeparatorComponent = _props.LeadingSeparatorComponent,
            SeparatorComponent = _props.SeparatorComponent,
            item = _props.item,
            index = _props.index,
            section = _props.section;
        var element = this.props.renderItem({
          item: item,
          index: index,
          section: section,
          separators: this._separators
        });
        var leadingSeparator = LeadingSeparatorComponent && React.createElement(LeadingSeparatorComponent, _extends({}, this.state.leadingSeparatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 489
          }
        }));
        var separator = SeparatorComponent && React.createElement(SeparatorComponent, _extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 492
          }
        }));
        return leadingSeparator || separator ? React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 495
            }
          },
          leadingSeparator,
          element,
          separator
        ) : element;
      }
    }]);

    return ItemWithSeparator;
  }(React.Component));

  function getItem(sections, index) {
    if (!sections) {
      return null;
    }

    var itemIdx = index - 1;

    for (var ii = 0; ii < sections.length; ii++) {
      if (itemIdx === -1 || itemIdx === sections[ii].data.length) {
        return sections[ii];
      } else if (itemIdx < sections[ii].data.length) {
        return sections[ii].data[itemIdx];
      } else {
        itemIdx -= sections[ii].data.length + 2;
      }
    }

    return null;
  }

  module.exports = VirtualizedSectionList;
},477,[13,219,172,213,438,19],"VirtualizedSectionList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.android.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    DummySegmentedControlIOS: {
      displayName: "DummySegmentedControlIOS"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var Text = _require(_dependencyMap[4], 'Text');

  var View = _require(_dependencyMap[5], 'View');

  var DummySegmentedControlIOS = _wrapComponent("DummySegmentedControlIOS")(function (_React$Component) {
    _inherits(DummySegmentedControlIOS, _React$Component);

    function DummySegmentedControlIOS() {
      _classCallCheck(this, DummySegmentedControlIOS);

      return _possibleConstructorReturn(this, (DummySegmentedControlIOS.__proto__ || Object.getPrototypeOf(DummySegmentedControlIOS)).apply(this, arguments));
    }

    _createClass(DummySegmentedControlIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [styles.dummy, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 21
            }
          },
          React.createElement(
            Text,
            {
              style: styles.text,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 22
              }
            },
            "SegmentedControlIOS is not supported on this platform!"
          )
        );
      }
    }]);

    return DummySegmentedControlIOS;
  }(React.Component));

  var styles = StyleSheet.create({
    dummy: {
      width: 120,
      height: 50,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      color: '#333333',
      margin: 5,
      fontSize: 10
    }
  });
  module.exports = DummySegmentedControlIOS;
},478,[13,219,172,211,371,213],"SegmentedControlIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Slider/Slider.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var Image = _require(_dependencyMap[0], 'Image');

  var ColorPropType = _require(_dependencyMap[1], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[2], 'NativeMethodsMixin');

  var ReactNativeViewAttributes = _require(_dependencyMap[3], 'ReactNativeViewAttributes');

  var Platform = _require(_dependencyMap[4], 'Platform');

  var React = _require(_dependencyMap[5], 'React');

  var PropTypes = _require(_dependencyMap[6], 'prop-types');

  var StyleSheet = _require(_dependencyMap[7], 'StyleSheet');

  var ViewPropTypes = _require(_dependencyMap[8], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[9], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[10], 'requireNativeComponent');

  var Slider = createReactClass({
    displayName: 'Slider',
    mixins: [NativeMethodsMixin],
    propTypes: _extends({}, ViewPropTypes, {
      style: ViewPropTypes.style,
      value: PropTypes.number,
      step: PropTypes.number,
      minimumValue: PropTypes.number,
      maximumValue: PropTypes.number,
      minimumTrackTintColor: ColorPropType,
      maximumTrackTintColor: ColorPropType,
      disabled: PropTypes.bool,
      trackImage: Image.propTypes.source,
      minimumTrackImage: Image.propTypes.source,
      maximumTrackImage: Image.propTypes.source,
      thumbImage: Image.propTypes.source,
      thumbTintColor: ColorPropType,
      onValueChange: PropTypes.func,
      onSlidingComplete: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        disabled: false,
        value: 0,
        minimumValue: 0,
        maximumValue: 1,
        step: 0
      };
    },
    viewConfig: {
      uiViewClassName: 'RCTSlider',
      validAttributes: _extends({}, ReactNativeViewAttributes.RCTView, {
        value: true
      })
    },
    render: function render() {
      var _props = this.props,
          style = _props.style,
          onValueChange = _props.onValueChange,
          onSlidingComplete = _props.onSlidingComplete,
          props = _objectWithoutProperties(_props, ["style", "onValueChange", "onSlidingComplete"]);

      props.style = [styles.slider, style];

      props.onValueChange = onValueChange && function (event) {
        var userEvent = true;

        if (Platform.OS === 'android') {
          userEvent = event.nativeEvent.fromUser;
        }

        onValueChange && userEvent && onValueChange(event.nativeEvent.value);
      };

      props.onChange = props.onValueChange;

      props.onSlidingComplete = onSlidingComplete && function (event) {
        onSlidingComplete && onSlidingComplete(event.nativeEvent.value);
      };

      return React.createElement(RCTSlider, _extends({}, props, {
        enabled: !this.props.disabled,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          return false;
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 246
        }
      }));
    }
  });
  var styles = void 0;

  if (Platform.OS === 'ios') {
    styles = StyleSheet.create({
      slider: {
        height: 40
      }
    });
  } else {
    styles = StyleSheet.create({
      slider: {}
    });
  }

  var options = {};

  if (Platform.OS === 'android') {
    options = {
      nativeOnly: {
        enabled: true
      }
    };
  }

  var RCTSlider = requireNativeComponent('RCTSlider', Slider, options);
  module.exports = Slider;
},479,[413,89,91,214,75,172,25,211,173,216,188],"Slider");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _require(_dependencyMap[0], 'UnimplementedView');
},480,[449],"SnapshotViewIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/Switch/Switch.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require(_dependencyMap[0], 'ColorPropType');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var ViewPropTypes = _require(_dependencyMap[6], 'ViewPropTypes');

  var createReactClass = _require(_dependencyMap[7], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[8], 'requireNativeComponent');

  var Switch = createReactClass({
    displayName: 'Switch',
    propTypes: _extends({}, ViewPropTypes, {
      value: PropTypes.bool,
      disabled: PropTypes.bool,
      onValueChange: PropTypes.func,
      testID: PropTypes.string,
      tintColor: ColorPropType,
      onTintColor: ColorPropType,
      thumbTintColor: ColorPropType
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        value: false,
        disabled: false
      };
    },
    mixins: [NativeMethodsMixin],
    _rctSwitch: {},
    _onChange: function _onChange(event) {
      if (Platform.OS === 'android') {
        this._rctSwitch.setNativeProps({
          on: this.props.value
        });
      } else {
        this._rctSwitch.setNativeProps({
          value: this.props.value
        });
      }

      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      var _this = this;

      var props = _extends({}, this.props);

      props.onStartShouldSetResponder = function () {
        return true;
      };

      props.onResponderTerminationRequest = function () {
        return false;
      };

      if (Platform.OS === 'android') {
        props.enabled = !this.props.disabled;
        props.on = this.props.value;
        props.style = this.props.style;
        props.trackTintColor = this.props.value ? this.props.onTintColor : this.props.tintColor;
      } else if (Platform.OS === 'ios') {
        props.style = [styles.rctSwitchIOS, this.props.style];
      }

      return React.createElement(RCTSwitch, _extends({}, props, {
        ref: function ref(_ref) {
          _this._rctSwitch = _ref;
        },
        onChange: this._onChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 113
        }
      }));
    }
  });
  var styles = StyleSheet.create({
    rctSwitchIOS: {
      height: 31,
      width: 51
    }
  });

  if (Platform.OS === 'android') {
    var RCTSwitch = requireNativeComponent('AndroidSwitch', Switch, {
      nativeOnly: {
        onChange: true,
        on: true,
        enabled: true,
        trackTintColor: true
      }
    });
  } else {
    var RCTSwitch = requireNativeComponent('RCTSwitch', Switch, {
      nativeOnly: {
        onChange: true
      }
    });
  }

  module.exports = Switch;
},481,[89,91,75,172,25,211,173,216,188],"Switch");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableFlatList.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SwipeableFlatList: {
      displayName: "SwipeableFlatList"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableFlatList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var PropTypes = _require(_dependencyMap[2], 'prop-types');

  var React = _require(_dependencyMap[3], 'React');

  var SwipeableRow = _require(_dependencyMap[4], 'SwipeableRow');

  var FlatList = _require(_dependencyMap[5], 'FlatList');

  var SwipeableFlatList = _wrapComponent("SwipeableFlatList")((_temp = _class = function (_React$Component) {
    _inherits(SwipeableFlatList, _React$Component);

    function SwipeableFlatList(props, context) {
      _classCallCheck(this, SwipeableFlatList);

      var _this = _possibleConstructorReturn(this, (SwipeableFlatList.__proto__ || Object.getPrototypeOf(SwipeableFlatList)).call(this, props, context));

      _this._flatListRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.state.openRowKey) {
          _this.setState({
            openRowKey: null
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderItem = function (info) {
        var slideoutView = _this.props.renderQuickActions(info);

        var key = _this.props.keyExtractor(info.item, info.index);

        if (!slideoutView) {
          return _this.props.renderItem(info);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = true;
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: key === _this.state.openRowKey,
            maxSwipeDistance: _this._getMaxSwipeDistance(info),
            onOpen: function onOpen() {
              return _this._onOpen(key);
            },
            onClose: function onClose() {
              return _this._onClose(key);
            },
            shouldBounceOnMount: shouldBounceOnMount,
            onSwipeEnd: _this._setListViewScrollable,
            onSwipeStart: _this._setListViewNotScrollable,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 135
            }
          },
          _this.props.renderItem(info)
        );
      };

      _this._setListViewScrollable = function () {
        _this._setListViewScrollableTo(true);
      };

      _this._setListViewNotScrollable = function () {
        _this._setListViewScrollableTo(false);
      };

      _this.state = {
        openRowKey: null
      };
      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      return _this;
    }

    _createClass(SwipeableFlatList, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(FlatList, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._flatListRef = _ref;
          },
          onScroll: this._onScroll,
          renderItem: this._renderItem,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 97
          }
        }));
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(info) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(info);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_setListViewScrollableTo",
      value: function _setListViewScrollableTo(value) {
        if (this._flatListRef) {
          this._flatListRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(key) {
        this.setState({
          openRowKey: key
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(key) {
        this.setState({
          openRowKey: null
        });
      }
    }]);

    return SwipeableFlatList;
  }(React.Component), _class.propTypes = _extends({}, FlatList.propTypes, {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderQuickActions: PropTypes.func.isRequired
  }), _class.defaultProps = _extends({}, FlatList.defaultProps, {
    bounceFirstRowOnMount: true,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  }), _temp));

  module.exports = SwipeableFlatList;
},482,[13,219,25,172,483,430],"SwipeableFlatList");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableRow.js";

  var Animated = _require(_dependencyMap[0], 'Animated');

  var I18nManager = _require(_dependencyMap[1], 'I18nManager');

  var PanResponder = _require(_dependencyMap[2], 'PanResponder');

  var React = _require(_dependencyMap[3], 'React');

  var PropTypes = _require(_dependencyMap[4], 'prop-types');

  var StyleSheet = _require(_dependencyMap[5], 'StyleSheet');

  var TimerMixin = _require(_dependencyMap[6], 'react-timer-mixin');

  var View = _require(_dependencyMap[7], 'View');

  var createReactClass = _require(_dependencyMap[8], 'create-react-class');

  var emptyFunction = _require(_dependencyMap[9], 'fbjs/lib/emptyFunction');

  var IS_RTL = I18nManager.isRTL;
  var CLOSED_LEFT_POSITION = 0;
  var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;
  var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;
  var SLOW_SPEED_SWIPE_FACTOR = 4;
  var SWIPE_DURATION = 300;
  var ON_MOUNT_BOUNCE_DELAY = 700;
  var ON_MOUNT_BOUNCE_DURATION = 400;
  var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
  var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;
  var RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;
  var SwipeableRow = createReactClass({
    displayName: 'SwipeableRow',
    _panResponder: {},
    _previousLeft: CLOSED_LEFT_POSITION,
    mixins: [TimerMixin],
    propTypes: {
      children: PropTypes.any,
      isOpen: PropTypes.bool,
      preventSwipeRight: PropTypes.bool,
      maxSwipeDistance: PropTypes.number.isRequired,
      onOpen: PropTypes.func.isRequired,
      onClose: PropTypes.func.isRequired,
      onSwipeEnd: PropTypes.func.isRequired,
      onSwipeStart: PropTypes.func.isRequired,
      shouldBounceOnMount: PropTypes.bool,
      slideoutView: PropTypes.node.isRequired,
      swipeThreshold: PropTypes.number.isRequired
    },
    getInitialState: function getInitialState() {
      return {
        currentLeft: new Animated.Value(this._previousLeft),
        isSwipeableViewRendered: false,
        rowHeight: null
      };
    },
    getDefaultProps: function getDefaultProps() {
      return {
        isOpen: false,
        preventSwipeRight: false,
        maxSwipeDistance: 0,
        onOpen: emptyFunction,
        onClose: emptyFunction,
        onSwipeEnd: emptyFunction,
        onSwipeStart: emptyFunction,
        swipeThreshold: 30
      };
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._panResponder = PanResponder.create({
        onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
        onPanResponderGrant: this._handlePanResponderGrant,
        onPanResponderMove: this._handlePanResponderMove,
        onPanResponderRelease: this._handlePanResponderEnd,
        onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
        onPanResponderTerminate: this._handlePanResponderEnd,
        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
          return false;
        }
      });
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      if (this.props.shouldBounceOnMount) {
        this.setTimeout(function () {
          _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
        }, ON_MOUNT_BOUNCE_DELAY);
      }
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.isOpen && !nextProps.isOpen) {
        this._animateToClosedPosition();
      }
    },
    render: function render() {
      var slideOutView = void 0;

      if (this.state.isSwipeableViewRendered && this.state.rowHeight) {
        slideOutView = React.createElement(
          View,
          {
            style: [styles.slideOutContainer, {
              height: this.state.rowHeight
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 162
            }
          },
          this.props.slideoutView
        );
      }

      var swipeableView = React.createElement(
        Animated.View,
        {
          onLayout: this._onSwipeableViewLayout,
          style: {
            transform: [{
              translateX: this.state.currentLeft
            }]
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 173
          }
        },
        this.props.children
      );
      return React.createElement(
        View,
        _extends({}, this._panResponder.panHandlers, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 181
          }
        }),
        slideOutView,
        swipeableView
      );
    },
    close: function close() {
      this.props.onClose();

      this._animateToClosedPosition();
    },
    _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
      this.setState({
        isSwipeableViewRendered: true,
        rowHeight: event.nativeEvent.layout.height
      });
    },
    _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
      return gestureState.dy < 10 && this._isValidSwipe(gestureState);
    },
    _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
    _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
      if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
        return;
      }

      this.props.onSwipeStart();

      if (this._isSwipingRightFromClosed(gestureState)) {
        this._swipeSlowSpeed(gestureState);
      } else {
        this._swipeFullSpeed(gestureState);
      }
    },
    _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
    },
    _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
    },
    _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
    },
    _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
    },
    _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
      return false;
    },
    _animateTo: function _animateTo(toValue) {
      var _this2 = this;

      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;
      Animated.timing(this.state.currentLeft, {
        duration: duration,
        toValue: toValue,
        useNativeDriver: true
      }).start(function () {
        _this2._previousLeft = toValue;
        callback();
      });
    },
    _animateToOpenPosition: function _animateToOpenPosition() {
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance);
    },
    _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
      speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
      var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance, duration);
    },
    _animateToClosedPosition: function _animateToClosedPosition() {
      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

      this._animateTo(CLOSED_LEFT_POSITION, duration);
    },
    _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
      this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    },
    _animateBounceBack: function _animateBounceBack(duration) {
      var swipeBounceBackDistance = IS_RTL ? -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;

      this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
    },
    _isValidSwipe: function _isValidSwipe(gestureState) {
      if (this.props.preventSwipeRight && this._previousLeft === CLOSED_LEFT_POSITION && gestureState.dx > 0) {
        return false;
      }

      return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
    },
    _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
      return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
    },
    _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
      var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;

      if (this._isSwipingRightFromClosed(gestureState)) {
        this.props.onOpen();

        this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
      } else if (this._shouldAnimateRemainder(gestureState)) {
        if (horizontalDistance < 0) {
          this.props.onOpen();

          this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
        } else {
          this.props.onClose();

          this._animateToClosedPosition();
        }
      } else {
        if (this._previousLeft === CLOSED_LEFT_POSITION) {
          this._animateToClosedPosition();
        } else {
          this._animateToOpenPosition();
        }
      }

      this.props.onSwipeEnd();
    }
  });
  var styles = StyleSheet.create({
    slideOutContainer: {
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0,
      top: 0
    }
  });
  module.exports = SwipeableRow;
},483,[385,470,484,172,25,211,382,213,216,17],"SwipeableRow");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = _require(_dependencyMap[0], './InteractionManager');

  var TouchHistoryMath = _require(_dependencyMap[1], 'TouchHistoryMath');

  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
  var currentCentroidX = TouchHistoryMath.currentCentroidX;
  var currentCentroidY = TouchHistoryMath.currentCentroidY;
  var PanResponder = {
    _initializeGestureState: function _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      gestureState._accountsForMovesUpTo = 0;
    },
    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;
      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    create: function create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        stateID: Math.random()
      };

      PanResponder._initializeGestureState(gestureState);

      var panHandlers = {
        onStartShouldSetResponder: function onStartShouldSetResponder(e) {
          return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
        },
        onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
          return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
          if (e.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }

          gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onResponderGrant: function onResponderGrant(e) {
          if (!interactionState.handle) {
            interactionState.handle = InteractionManager.createInteractionHandle();
          }

          gestureState.x0 = currentCentroidX(e.touchHistory);
          gestureState.y0 = currentCentroidY(e.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;

          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(e, gestureState);
          }

          return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
        },
        onResponderReject: function onResponderReject(e) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
        },
        onResponderRelease: function onResponderRelease(e) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart: function onResponderStart(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;

          if (config.onPanResponderStart) {
            config.onPanResponderStart(e, gestureState);
          }
        },
        onResponderMove: function onResponderMove(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          if (config.onPanResponderMove) {
            config.onPanResponderMove(e, gestureState);
          }
        },
        onResponderEnd: function onResponderEnd(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
        },
        onResponderTerminate: function onResponderTerminate(e) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest: function onResponderTerminationRequest(e) {
          return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
        }
      };
      return {
        panHandlers: panHandlers,
        getInteractionHandle: function getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };

  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      InteractionManager.clearInteractionHandle(interactionState.handle);
      interactionState.handle = null;
    }

    if (callback) {
      callback(event, gestureState);
    }
  }

  module.exports = PanResponder;
},484,[393,485],"PanResponder");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.TouchHistoryMath;
},485,[92],"TouchHistoryMath");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SwipeableListView: {
      displayName: "SwipeableListView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ListView = _require(_dependencyMap[2], 'ListView');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var React = _require(_dependencyMap[4], 'React');

  var SwipeableListViewDataSource = _require(_dependencyMap[5], 'SwipeableListViewDataSource');

  var SwipeableRow = _require(_dependencyMap[6], 'SwipeableRow');

  var SwipeableListView = _wrapComponent("SwipeableListView")((_temp = _class = function (_React$Component) {
    _inherits(SwipeableListView, _React$Component);

    _createClass(SwipeableListView, null, [{
      key: "getNewDataSource",
      value: function getNewDataSource() {
        return new SwipeableListViewDataSource({
          getRowData: function getRowData(data, sectionID, rowID) {
            return data[sectionID][rowID];
          },
          getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
            return data[sectionID];
          },
          rowHasChanged: function rowHasChanged(row1, row2) {
            return row1 !== row2;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
            return s1 !== s2;
          }
        });
      }
    }]);

    function SwipeableListView(props, context) {
      _classCallCheck(this, SwipeableListView);

      var _this = _possibleConstructorReturn(this, (SwipeableListView.__proto__ || Object.getPrototypeOf(SwipeableListView)).call(this, props, context));

      _this._listViewRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.props.dataSource.getOpenRowID()) {
          _this.setState({
            dataSource: _this.state.dataSource.setOpenRowID(null)
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderRow = function (rowData, sectionID, rowID) {
        var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

        if (!slideoutView) {
          return _this.props.renderRow(rowData, sectionID, rowID);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
        }

        return React.createElement(
          SwipeableRow,
          {
            slideoutView: slideoutView,
            isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
            maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
            key: rowID,
            onOpen: function onOpen() {
              return _this._onOpen(rowData.id);
            },
            onClose: function onClose() {
              return _this._onClose(rowData.id);
            },
            onSwipeEnd: function onSwipeEnd() {
              return _this._setListViewScrollable(true);
            },
            onSwipeStart: function onSwipeStart() {
              return _this._setListViewScrollable(false);
            },
            shouldBounceOnMount: shouldBounceOnMount,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 183
            }
          },
          _this.props.renderRow(rowData, sectionID, rowID)
        );
      };

      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      _this.state = {
        dataSource: _this.props.dataSource
      };
      return _this;
    }

    _createClass(SwipeableListView, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
          this.setState({
            dataSource: nextProps.dataSource
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(ListView, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._listViewRef = _ref;
          },
          dataSource: this.state.dataSource.getDataSource(),
          onScroll: this._onScroll,
          renderRow: this._renderRow,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 116
          }
        }));
      }
    }, {
      key: "_setListViewScrollable",
      value: function _setListViewScrollable(value) {
        if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
          this._listViewRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
          return this._listViewRef.getScrollResponder();
        }
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(rowData, sectionID, rowID) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(rowData, sectionID, rowID);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(rowID)
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(null)
        });
      }
    }]);

    return SwipeableListView;
  }(React.Component), _class.propTypes = {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderRow: PropTypes.func.isRequired,
    renderQuickActions: PropTypes.func.isRequired
  }, _class.defaultProps = {
    bounceFirstRowOnMount: false,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  }, _temp));

  module.exports = SwipeableListView;
},486,[13,219,432,25,172,487,483],"SwipeableListView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ListViewDataSource = _require(_dependencyMap[0], 'ListViewDataSource');

  var SwipeableListViewDataSource = function () {
    function SwipeableListViewDataSource(params) {
      var _this = this;

      _classCallCheck(this, SwipeableListViewDataSource);

      this._dataSource = new ListViewDataSource({
        getRowData: params.getRowData,
        getSectionHeaderData: params.getSectionHeaderData,
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
        },
        sectionHeaderHasChanged: params.sectionHeaderHasChanged
      });
    }

    _createClass(SwipeableListViewDataSource, [{
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);
        this._dataBlob = dataBlob;
        this.rowIdentities = this._dataSource.rowIdentities;
        this.sectionIdentities = this._dataSource.sectionIdentities;
        return this;
      }
    }, {
      key: "getDataSource",
      value: function getDataSource() {
        return this._dataSource;
      }
    }, {
      key: "getOpenRowID",
      value: function getOpenRowID() {
        return this._openRowID;
      }
    }, {
      key: "getFirstRowID",
      value: function getFirstRowID() {
        if (this.rowIdentities) {
          return this.rowIdentities[0] && this.rowIdentities[0][0];
        }

        return Object.keys(this._dataBlob)[0];
      }
    }, {
      key: "getLastRowID",
      value: function getLastRowID() {
        if (this.rowIdentities && this.rowIdentities.length) {
          var lastSection = this.rowIdentities[this.rowIdentities.length - 1];

          if (lastSection && lastSection.length) {
            return lastSection[lastSection.length - 1];
          }
        }

        return Object.keys(this._dataBlob)[this._dataBlob.length - 1];
      }
    }, {
      key: "setOpenRowID",
      value: function setOpenRowID(rowID) {
        this._previousOpenRowID = this._openRowID;
        this._openRowID = rowID;
        this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);
        return this;
      }
    }]);

    return SwipeableListViewDataSource;
  }();

  module.exports = SwipeableListViewDataSource;
},487,[433],"SwipeableListViewDataSource");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarIOS.android.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    DummyTabBarIOS: {
      displayName: "DummyTabBarIOS"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarIOS.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var StyleSheet = _require(_dependencyMap[3], 'StyleSheet');

  var TabBarItemIOS = _require(_dependencyMap[4], 'TabBarItemIOS');

  var View = _require(_dependencyMap[5], 'View');

  var DummyTabBarIOS = _wrapComponent("DummyTabBarIOS")((_temp = _class = function (_React$Component) {
    _inherits(DummyTabBarIOS, _React$Component);

    function DummyTabBarIOS() {
      _classCallCheck(this, DummyTabBarIOS);

      return _possibleConstructorReturn(this, (DummyTabBarIOS.__proto__ || Object.getPrototypeOf(DummyTabBarIOS)).apply(this, arguments));
    }

    _createClass(DummyTabBarIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(
          View,
          {
            style: [this.props.style, styles.tabGroup],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          },
          this.props.children
        );
      }
    }]);

    return DummyTabBarIOS;
  }(React.Component), _class.Item = TabBarItemIOS, _temp));

  var styles = StyleSheet.create({
    tabGroup: {
      flex: 1
    }
  });
  module.exports = DummyTabBarIOS;
},488,[13,219,172,211,489,213],"TabBarIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarItemIOS.android.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    DummyTab: {
      displayName: "DummyTab"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarItemIOS.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var View = _require(_dependencyMap[3], 'View');

  var StyleSheet = _require(_dependencyMap[4], 'StyleSheet');

  var DummyTab = _wrapComponent("DummyTab")(function (_React$Component) {
    _inherits(DummyTab, _React$Component);

    function DummyTab() {
      _classCallCheck(this, DummyTab);

      return _possibleConstructorReturn(this, (DummyTab.__proto__ || Object.getPrototypeOf(DummyTab)).apply(this, arguments));
    }

    _createClass(DummyTab, [{
      key: "render",
      value: function render() {
        if (!this.props.selected) {
          return React.createElement(View, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 19
            }
          });
        }

        return React.createElement(
          View,
          {
            style: [this.props.style, styles.tab],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          },
          this.props.children
        );
      }
    }]);

    return DummyTab;
  }(React.Component));

  var styles = StyleSheet.create({
    tab: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderColor: 'red',
      borderWidth: 1
    }
  });
  module.exports = DummyTab;
},489,[13,219,172,213,211],"TabBarItemIOS");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/TextInput/TextInput.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var ColorPropType = _require2(_dependencyMap[0], 'ColorPropType');

  var DocumentSelectionState = _require2(_dependencyMap[1], 'DocumentSelectionState');

  var EventEmitter = _require2(_dependencyMap[2], 'EventEmitter');

  var NativeMethodsMixin = _require2(_dependencyMap[3], 'NativeMethodsMixin');

  var Platform = _require2(_dependencyMap[4], 'Platform');

  var React = _require2(_dependencyMap[5], 'React');

  var createReactClass = _require2(_dependencyMap[6], 'create-react-class');

  var PropTypes = _require2(_dependencyMap[7], 'prop-types');

  var ReactNative = _require2(_dependencyMap[8], 'ReactNative');

  var StyleSheet = _require2(_dependencyMap[9], 'StyleSheet');

  var Text = _require2(_dependencyMap[10], 'Text');

  var TextInputState = _require2(_dependencyMap[11], 'TextInputState');

  var TimerMixin = _require2(_dependencyMap[12], 'react-timer-mixin');

  var TouchableWithoutFeedback = _require2(_dependencyMap[13], 'TouchableWithoutFeedback');

  var UIManager = _require2(_dependencyMap[14], 'UIManager');

  var ViewPropTypes = _require2(_dependencyMap[15], 'ViewPropTypes');

  var _require = _require2(_dependencyMap[16], 'ViewContext'),
      ViewContextTypes = _require.ViewContextTypes;

  var emptyFunction = _require2(_dependencyMap[17], 'fbjs/lib/emptyFunction');

  var invariant = _require2(_dependencyMap[18], 'fbjs/lib/invariant');

  var requireNativeComponent = _require2(_dependencyMap[19], 'requireNativeComponent');

  var warning = _require2(_dependencyMap[20], 'fbjs/lib/warning');

  var AndroidTextInput = void 0;
  var RCTMultilineTextInputView = void 0;
  var RCTSinglelineTextInputView = void 0;
  var onlyMultiline = {
    onTextInput: true,
    children: true
  };

  if (Platform.OS === 'android') {
    AndroidTextInput = requireNativeComponent('AndroidTextInput', null);
  } else if (Platform.OS === 'ios') {
    RCTMultilineTextInputView = requireNativeComponent('RCTMultilineTextInputView', null);
    RCTSinglelineTextInputView = requireNativeComponent('RCTSinglelineTextInputView', null);
  }

  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  var TextInput = createReactClass({
    displayName: 'TextInput',
    statics: {
      State: TextInputState
    },
    propTypes: _extends({}, ViewPropTypes, {
      autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
      autoCorrect: PropTypes.bool,
      spellCheck: PropTypes.bool,
      autoFocus: PropTypes.bool,
      allowFontScaling: PropTypes.bool,
      editable: PropTypes.bool,
      keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
      keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
      returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
      returnKeyLabel: PropTypes.string,
      maxLength: PropTypes.number,
      numberOfLines: PropTypes.number,
      disableFullscreenUI: PropTypes.bool,
      enablesReturnKeyAutomatically: PropTypes.bool,
      multiline: PropTypes.bool,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onBlur: PropTypes.func,
      onFocus: PropTypes.func,
      onChange: PropTypes.func,
      onChangeText: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      onEndEditing: PropTypes.func,
      onSelectionChange: PropTypes.func,
      onSubmitEditing: PropTypes.func,
      onKeyPress: PropTypes.func,
      onLayout: PropTypes.func,
      onScroll: PropTypes.func,
      placeholder: PropTypes.string,
      placeholderTextColor: ColorPropType,
      secureTextEntry: PropTypes.bool,
      selectionColor: ColorPropType,
      selectionState: PropTypes.instanceOf(DocumentSelectionState),
      selection: PropTypes.shape({
        start: PropTypes.number.isRequired,
        end: PropTypes.number
      }),
      value: PropTypes.string,
      defaultValue: PropTypes.string,
      clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
      clearTextOnFocus: PropTypes.bool,
      selectTextOnFocus: PropTypes.bool,
      blurOnSubmit: PropTypes.bool,
      style: Text.propTypes.style,
      underlineColorAndroid: ColorPropType,
      inlineImageLeft: PropTypes.string,
      inlineImagePadding: PropTypes.number,
      dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
      caretHidden: PropTypes.bool,
      contextMenuHidden: PropTypes.bool,
      inputAccessoryViewID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        allowFontScaling: true
      };
    },
    mixins: [NativeMethodsMixin, TimerMixin],
    isFocused: function isFocused() {
      return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
    },
    _inputRef: undefined,
    _focusSubscription: undefined,
    _lastNativeText: undefined,
    _lastNativeSelection: undefined,
    componentDidMount: function componentDidMount() {
      var _this = this;

      this._lastNativeText = this.props.value;

      if (!this.context.focusEmitter) {
        if (this.props.autoFocus) {
          this.requestAnimationFrame(this.focus);
        }

        return;
      }

      this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
        if (_this === el) {
          _this.requestAnimationFrame(_this.focus);
        } else if (_this.isFocused()) {
          _this.blur();
        }
      });

      if (this.props.autoFocus) {
        this.context.onFocusRequested(this);
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this._focusSubscription && this._focusSubscription.remove();

      if (this.isFocused()) {
        this.blur();
      }
    },
    getChildContext: function getChildContext() {
      return {
        isInAParentText: true
      };
    },
    childContextTypes: ViewContextTypes,
    contextTypes: _extends({}, ViewContextTypes, {
      onFocusRequested: PropTypes.func,
      focusEmitter: PropTypes.instanceOf(EventEmitter)
    }),
    clear: function clear() {
      this.setNativeProps({
        text: ''
      });
    },
    render: function render() {
      if (Platform.OS === 'ios') {
        return UIManager.RCTVirtualText ? this._renderIOS() : this._renderIOSLegacy();
      } else if (Platform.OS === 'android') {
        return this._renderAndroid();
      }
    },
    _getText: function _getText() {
      return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
    },
    _setNativeRef: function _setNativeRef(ref) {
      this._inputRef = ref;
    },
    _renderIOSLegacy: function _renderIOSLegacy() {
      var textContainer = void 0;

      var props = _extends({}, this.props);

      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      if (!props.multiline) {
        if (__DEV__) {
          for (var propKey in onlyMultiline) {
            if (props[propKey]) {
              var error = new Error('TextInput prop `' + propKey + '` is only supported with multiline.');
              warning(false, '%s', error.stack);
            }
          }
        }

        textContainer = React.createElement(RCTSinglelineTextInputView, _extends({
          ref: this._setNativeRef
        }, props, {
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onSelectionChange: this._onSelectionChange,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 735
          }
        }));
      } else {
        var children = props.children;
        var childCount = 0;
        React.Children.forEach(children, function () {
          return ++childCount;
        });
        invariant(!(props.value && childCount), 'Cannot specify both value and children.');

        if (childCount >= 1) {
          children = React.createElement(
            Text,
            {
              style: props.style,
              allowFontScaling: props.allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 756
              }
            },
            children
          );
        }

        if (props.inputView) {
          children = [children, props.inputView];
        }

        props.style.unshift(styles.multilineInput);
        textContainer = React.createElement(RCTMultilineTextInputView, _extends({
          ref: this._setNativeRef
        }, props, {
          children: children,
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onContentSizeChange: this.props.onContentSizeChange,
          onSelectionChange: this._onSelectionChange,
          onTextInput: this._onTextInput,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          dataDetectorTypes: this.props.dataDetectorTypes,
          onScroll: this._onScroll,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 766
          }
        }));
      }

      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityTraits: props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 785
          }
        },
        textContainer
      );
    },
    _renderIOS: function _renderIOS() {
      var props = _extends({}, this.props);

      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var RCTTextInputView = props.multiline ? RCTMultilineTextInputView : RCTSinglelineTextInputView;

      if (props.multiline) {
        props.style.unshift(styles.multilineInput);
      }

      var textContainer = React.createElement(RCTTextInputView, _extends({
        ref: this._setNativeRef
      }, props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 819
        }
      }));
      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          rejectResponderTermination: true,
          accessible: props.accessible,
          accessibilityLabel: props.accessibilityLabel,
          accessibilityTraits: props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 836
          }
        },
        textContainer
      );
    },
    _renderAndroid: function _renderAndroid() {
      var props = _extends({}, this.props);

      props.style = [this.props.style];
      props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[props.autoCapitalize || 'sentences'];
      var children = this.props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');

      if (childCount > 1) {
        children = React.createElement(
          Text,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 868
            }
          },
          children
        );
      }

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var textContainer = React.createElement(AndroidTextInput, _extends({
        ref: this._setNativeRef
      }, props, {
        mostRecentEventCount: 0,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        text: this._getText(),
        children: children,
        disableFullscreenUI: this.props.disableFullscreenUI,
        textBreakStrategy: this.props.textBreakStrategy,
        onScroll: this._onScroll,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 879
        }
      }));
      return React.createElement(
        TouchableWithoutFeedback,
        {
          onLayout: props.onLayout,
          onPress: this._onPress,
          accessible: this.props.accessible,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityComponentType: this.props.accessibilityComponentType,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 897
          }
        },
        textContainer
      );
    },
    _onFocus: function _onFocus(event) {
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.focus();
      }
    },
    _onPress: function _onPress(event) {
      if (this.props.editable || this.props.editable === undefined) {
        this.focus();
      }
    },
    _onChange: function _onChange(event) {
      if (this._inputRef) {
        this._inputRef.setNativeProps({
          mostRecentEventCount: event.nativeEvent.eventCount
        });
      }

      var text = event.nativeEvent.text;
      this.props.onChange && this.props.onChange(event);
      this.props.onChangeText && this.props.onChangeText(text);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeText = text;
      this.forceUpdate();
    },
    _onSelectionChange: function _onSelectionChange(event) {
      this.props.onSelectionChange && this.props.onSelectionChange(event);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeSelection = event.nativeEvent.selection;

      if (this.props.selection || this.props.selectionState) {
        this.forceUpdate();
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var nativeProps = {};

      if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
        nativeProps.text = this.props.value;
      }

      var selection = this.props.selection;

      if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
        nativeProps.selection = this.props.selection;
      }

      if (Object.keys(nativeProps).length > 0 && this._inputRef) {
        this._inputRef.setNativeProps(nativeProps);
      }

      if (this.props.selectionState && selection) {
        this.props.selectionState.update(selection.start, selection.end);
      }
    },
    _onBlur: function _onBlur(event) {
      this.blur();

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.blur();
      }
    },
    _onTextInput: function _onTextInput(event) {
      this.props.onTextInput && this.props.onTextInput(event);
    },
    _onScroll: function _onScroll(event) {
      this.props.onScroll && this.props.onScroll(event);
    }
  });
  var styles = StyleSheet.create({
    multilineInput: {
      paddingTop: 5
    }
  });
  module.exports = TextInput;
},490,[89,491,84,91,75,172,216,25,92,211,371,166,382,381,164,173,215,17,19,188,20],"TextInput");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var mixInEventEmitter = _require(_dependencyMap[0], 'mixInEventEmitter');

  var DocumentSelectionState = function () {
    function DocumentSelectionState(anchor, focus) {
      _classCallCheck(this, DocumentSelectionState);

      this._anchorOffset = anchor;
      this._focusOffset = focus;
      this._hasFocus = false;
    }

    _createClass(DocumentSelectionState, [{
      key: "update",
      value: function update(anchor, focus) {
        if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
          this._anchorOffset = anchor;
          this._focusOffset = focus;
          this.emit('update');
        }
      }
    }, {
      key: "constrainLength",
      value: function constrainLength(maxLength) {
        this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
      }
    }, {
      key: "focus",
      value: function focus() {
        if (!this._hasFocus) {
          this._hasFocus = true;
          this.emit('focus');
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        if (this._hasFocus) {
          this._hasFocus = false;
          this.emit('blur');
        }
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        return this._hasFocus;
      }
    }, {
      key: "isCollapsed",
      value: function isCollapsed() {
        return this._anchorOffset === this._focusOffset;
      }
    }, {
      key: "isBackward",
      value: function isBackward() {
        return this._anchorOffset > this._focusOffset;
      }
    }, {
      key: "getAnchorOffset",
      value: function getAnchorOffset() {
        return this._hasFocus ? this._anchorOffset : null;
      }
    }, {
      key: "getFocusOffset",
      value: function getFocusOffset() {
        return this._hasFocus ? this._focusOffset : null;
      }
    }, {
      key: "getStartOffset",
      value: function getStartOffset() {
        return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "getEndOffset",
      value: function getEndOffset() {
        return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "overlaps",
      value: function overlaps(start, end) {
        return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
      }
    }]);

    return DocumentSelectionState;
  }();

  mixInEventEmitter(DocumentSelectionState, {
    'blur': true,
    'focus': true,
    'update': true
  });
  module.exports = DocumentSelectionState;
},491,[492],"DocumentSelectionState");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var EventEmitter = _require(_dependencyMap[0], 'EventEmitter');

  var EventEmitterWithHolding = _require(_dependencyMap[1], 'EventEmitterWithHolding');

  var EventHolder = _require(_dependencyMap[2], 'EventHolder');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var keyOf = _require(_dependencyMap[4], 'fbjs/lib/keyOf');

  var TYPES_KEY = keyOf({
    __types: true
  });

  function mixInEventEmitter(cls, types) {
    invariant(types, 'Must supply set of valid event types');
    var target = cls.prototype || cls;
    invariant(!target.__eventEmitter, 'An active emitter is already mixed in');
    var ctor = cls.constructor;

    if (ctor) {
      invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
    }

    if (target.hasOwnProperty(TYPES_KEY)) {
      _extends(target.__types, types);
    } else if (target.__types) {
      target.__types = _extends({}, target.__types, types);
    } else {
      target.__types = types;
    }

    _extends(target, EventEmitterMixin);
  }

  var EventEmitterMixin = {
    emit: function emit(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
    },
    emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
    },
    addListener: function addListener(eventType, listener, context) {
      return this.__getEventEmitter().addListener(eventType, listener, context);
    },
    once: function once(eventType, listener, context) {
      return this.__getEventEmitter().once(eventType, listener, context);
    },
    addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
      return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
    },
    addListenerMap: function addListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    removeAllListeners: function removeAllListeners() {
      this.__getEventEmitter().removeAllListeners();
    },
    removeCurrentListener: function removeCurrentListener() {
      this.__getEventEmitter().removeCurrentListener();
    },
    releaseHeldEventType: function releaseHeldEventType(eventType) {
      this.__getEventEmitter().releaseHeldEventType(eventType);
    },
    __getEventEmitter: function __getEventEmitter() {
      if (!this.__eventEmitter) {
        var emitter = new EventEmitter();

        if (__DEV__) {
          var EventValidator = _require(_dependencyMap[5], 'EventValidator');

          emitter = EventValidator.addValidation(emitter, this.__types);
        }

        var holder = new EventHolder();
        this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
      }

      return this.__eventEmitter;
    }
  };
  module.exports = mixInEventEmitter;
},492,[84,493,494,19,495,496],"mixInEventEmitter");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var EventEmitterWithHolding = function () {
    function EventEmitterWithHolding(emitter, holder) {
      _classCallCheck(this, EventEmitterWithHolding);

      this._emitter = emitter;
      this._eventHolder = holder;
      this._currentEventToken = null;
      this._emittingHeldEvents = false;
    }

    _createClass(EventEmitterWithHolding, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener, context);
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        return this._emitter.once(eventType, listener, context);
      }
    }, {
      key: "addRetroactiveListener",
      value: function addRetroactiveListener(eventType, listener, context) {
        var subscription = this._emitter.addListener(eventType, listener, context);

        this._emittingHeldEvents = true;

        this._eventHolder.emitToListener(eventType, listener, context);

        this._emittingHeldEvents = false;
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        this._emitter.removeCurrentListener();
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        return this._emitter.listeners(eventType);
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var _emitter;

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (_emitter = this._emitter).emit.apply(_emitter, [eventType].concat(_toConsumableArray(args)));
      }
    }, {
      key: "emitAndHold",
      value: function emitAndHold(eventType) {
        var _eventHolder, _emitter2;

        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        this._currentEventToken = (_eventHolder = this._eventHolder).holdEvent.apply(_eventHolder, [eventType].concat(_toConsumableArray(args)));

        (_emitter2 = this._emitter).emit.apply(_emitter2, [eventType].concat(_toConsumableArray(args)));

        this._currentEventToken = null;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        if (this._currentEventToken) {
          this._eventHolder.releaseEvent(this._currentEventToken);
        } else if (this._emittingHeldEvents) {
          this._eventHolder.releaseCurrentEvent();
        }
      }
    }, {
      key: "releaseHeldEventType",
      value: function releaseHeldEventType(eventType) {
        this._eventHolder.releaseEventType(eventType);
      }
    }]);

    return EventEmitterWithHolding;
  }();

  module.exports = EventEmitterWithHolding;
},493,[],"EventEmitterWithHolding");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var invariant = _require(_dependencyMap[0], 'fbjs/lib/invariant');

  var EventHolder = function () {
    function EventHolder() {
      _classCallCheck(this, EventHolder);

      this._heldEvents = {};
      this._currentEventKey = null;
    }

    _createClass(EventHolder, [{
      key: "holdEvent",
      value: function holdEvent(eventType) {
        this._heldEvents[eventType] = this._heldEvents[eventType] || [];
        var eventsOfType = this._heldEvents[eventType];
        var key = {
          eventType: eventType,
          index: eventsOfType.length
        };

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        eventsOfType.push(args);
        return key;
      }
    }, {
      key: "emitToListener",
      value: function emitToListener(eventType, listener, context) {
        var _this = this;

        var eventsOfType = this._heldEvents[eventType];

        if (!eventsOfType) {
          return;
        }

        var origEventKey = this._currentEventKey;
        eventsOfType.forEach(function (eventHeld, index) {
          if (!eventHeld) {
            return;
          }

          _this._currentEventKey = {
            eventType: eventType,
            index: index
          };
          listener.apply(context, eventHeld);
        });
        this._currentEventKey = origEventKey;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
        this._currentEventKey && this.releaseEvent(this._currentEventKey);
      }
    }, {
      key: "releaseEvent",
      value: function releaseEvent(token) {
        delete this._heldEvents[token.eventType][token.index];
      }
    }, {
      key: "releaseEventType",
      value: function releaseEventType(type) {
        this._heldEvents[type] = [];
      }
    }]);

    return EventHolder;
  }();

  module.exports = EventHolder;
},494,[19],"EventHolder");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var keyOf = function keyOf(oneKeyObj) {
    var key;

    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }

      return key;
    }

    return null;
  };

  module.exports = keyOf;
},495,[],"node_modules/fbjs/lib/keyOf.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var EventValidator = {
    addValidation: function addValidation(emitter, types) {
      var eventTypes = Object.keys(types);
      var emitterWithValidation = Object.create(emitter);

      _extends(emitterWithValidation, {
        emit: function emit(type, a, b, c, d, e, _) {
          assertAllowsEventType(type, eventTypes);
          return emitter.emit.call(this, type, a, b, c, d, e, _);
        }
      });

      return emitterWithValidation;
    }
  };

  function assertAllowsEventType(type, allowedTypes) {
    if (allowedTypes.indexOf(type) === -1) {
      throw new TypeError(errorMessageFor(type, allowedTypes));
    }
  }

  function errorMessageFor(type, allowedTypes) {
    var message = 'Unknown event type "' + type + '". ';

    if (__DEV__) {
      message += recommendationFor(type, allowedTypes);
    }

    message += 'Known event types: ' + allowedTypes.join(', ') + '.';
    return message;
  }

  if (__DEV__) {
    var recommendationFor = function recommendationFor(type, allowedTypes) {
      var closestTypeRecommendation = closestTypeFor(type, allowedTypes);

      if (isCloseEnough(closestTypeRecommendation, type)) {
        return 'Did you mean "' + closestTypeRecommendation.type + '"? ';
      } else {
        return '';
      }
    };

    var closestTypeFor = function closestTypeFor(type, allowedTypes) {
      var typeRecommendations = allowedTypes.map(typeRecommendationFor.bind(this, type));
      return typeRecommendations.sort(recommendationSort)[0];
    };

    var typeRecommendationFor = function typeRecommendationFor(type, recommendedType) {
      return {
        type: recommendedType,
        distance: damerauLevenshteinDistance(type, recommendedType)
      };
    };

    var recommendationSort = function recommendationSort(recommendationA, recommendationB) {
      if (recommendationA.distance < recommendationB.distance) {
        return -1;
      } else if (recommendationA.distance > recommendationB.distance) {
        return 1;
      } else {
        return 0;
      }
    };

    var isCloseEnough = function isCloseEnough(closestType, actualType) {
      return closestType.distance / actualType.length < 0.334;
    };

    var damerauLevenshteinDistance = function damerauLevenshteinDistance(a, b) {
      var i = void 0,
          j = void 0;
      var d = [];

      for (i = 0; i <= a.length; i++) {
        d[i] = [i];
      }

      for (j = 1; j <= b.length; j++) {
        d[0][j] = j;
      }

      for (i = 1; i <= a.length; i++) {
        for (j = 1; j <= b.length; j++) {
          var cost = a.charAt(i - 1) === b.charAt(j - 1) ? 0 : 1;
          d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

          if (i > 1 && j > 1 && a.charAt(i - 1) === b.charAt(j - 2) && a.charAt(i - 2) === b.charAt(j - 1)) {
            d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
          }
        }
      }

      return d[a.length][b.length];
    };
  }

  module.exports = EventValidator;
},496,[],"EventValidator");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/ToolbarAndroid/ToolbarAndroid.android.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var Image = _require(_dependencyMap[0], 'Image');

  var NativeMethodsMixin = _require(_dependencyMap[1], 'NativeMethodsMixin');

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var ReactNativeViewAttributes = _require(_dependencyMap[4], 'ReactNativeViewAttributes');

  var UIManager = _require(_dependencyMap[5], 'UIManager');

  var ViewPropTypes = _require(_dependencyMap[6], 'ViewPropTypes');

  var ColorPropType = _require(_dependencyMap[7], 'ColorPropType');

  var createReactClass = _require(_dependencyMap[8], 'create-react-class');

  var requireNativeComponent = _require(_dependencyMap[9], 'requireNativeComponent');

  var resolveAssetSource = _require(_dependencyMap[10], 'resolveAssetSource');

  var optionalImageSource = PropTypes.oneOfType([Image.propTypes.source, PropTypes.oneOf([])]);
  var ToolbarAndroid = createReactClass({
    displayName: 'ToolbarAndroid',
    mixins: [NativeMethodsMixin],
    propTypes: _extends({}, ViewPropTypes, {
      actions: PropTypes.arrayOf(PropTypes.shape({
        title: PropTypes.string.isRequired,
        icon: optionalImageSource,
        show: PropTypes.oneOf(['always', 'ifRoom', 'never']),
        showWithText: PropTypes.bool
      })),
      logo: optionalImageSource,
      navIcon: optionalImageSource,
      onActionSelected: PropTypes.func,
      onIconClicked: PropTypes.func,
      overflowIcon: optionalImageSource,
      subtitle: PropTypes.string,
      subtitleColor: ColorPropType,
      title: PropTypes.string,
      titleColor: ColorPropType,
      contentInsetStart: PropTypes.number,
      contentInsetEnd: PropTypes.number,
      rtl: PropTypes.bool,
      testID: PropTypes.string
    }),
    render: function render() {
      var nativeProps = _extends({}, this.props);

      if (this.props.logo) {
        nativeProps.logo = resolveAssetSource(this.props.logo);
      }

      if (this.props.navIcon) {
        nativeProps.navIcon = resolveAssetSource(this.props.navIcon);
      }

      if (this.props.overflowIcon) {
        nativeProps.overflowIcon = resolveAssetSource(this.props.overflowIcon);
      }

      if (this.props.actions) {
        var nativeActions = [];

        for (var i = 0; i < this.props.actions.length; i++) {
          var action = _extends({}, this.props.actions[i]);

          if (action.icon) {
            action.icon = resolveAssetSource(action.icon);
          }

          if (action.show) {
            action.show = UIManager.ToolbarAndroid.Constants.ShowAsAction[action.show];
          }

          nativeActions.push(action);
        }

        nativeProps.nativeActions = nativeActions;
      }

      return React.createElement(NativeToolbar, _extends({
        onSelect: this._onSelect
      }, nativeProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 194
        }
      }));
    },
    _onSelect: function _onSelect(event) {
      var position = event.nativeEvent.position;

      if (position === -1) {
        this.props.onIconClicked && this.props.onIconClicked();
      } else {
        this.props.onActionSelected && this.props.onActionSelected(position);
      }
    }
  });
  var NativeToolbar = requireNativeComponent('ToolbarAndroid', ToolbarAndroid, {
    nativeOnly: {
      nativeActions: true
    }
  });
  module.exports = ToolbarAndroid;
},497,[413,91,172,25,214,164,173,89,216,188,203],"ToolbarAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/ViewPager/ViewPagerAndroid.android.js";

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ViewPagerAndroid: {
      displayName: "ViewPagerAndroid"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/ViewPager/ViewPagerAndroid.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var React = _require(_dependencyMap[2], 'React');

  var PropTypes = _require(_dependencyMap[3], 'prop-types');

  var ReactNative = _require(_dependencyMap[4], 'ReactNative');

  var UIManager = _require(_dependencyMap[5], 'UIManager');

  var ViewPropTypes = _require(_dependencyMap[6], 'ViewPropTypes');

  var dismissKeyboard = _require(_dependencyMap[7], 'dismissKeyboard');

  var requireNativeComponent = _require(_dependencyMap[8], 'requireNativeComponent');

  var VIEWPAGER_REF = 'viewPager';

  var ViewPagerAndroid = _wrapComponent("ViewPagerAndroid")((_temp2 = _class = function (_React$Component) {
    _inherits(ViewPagerAndroid, _React$Component);

    function ViewPagerAndroid() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ViewPagerAndroid);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ViewPagerAndroid.__proto__ || Object.getPrototypeOf(ViewPagerAndroid)).call.apply(_ref, [this].concat(args))), _this), _this.getInnerViewNode = function () {
        return _this.refs[VIEWPAGER_REF].getInnerViewNode();
      }, _this._childrenWithOverridenStyle = function () {
        return React.Children.map(_this.props.children, function (child) {
          if (!child) {
            return null;
          }

          var newProps = _extends({}, child.props, {
            style: [child.props.style, {
              position: 'absolute',
              left: 0,
              top: 0,
              right: 0,
              bottom: 0,
              width: undefined,
              height: undefined
            }],
            collapsable: false
          });

          if (child.type && child.type.displayName && child.type.displayName !== 'RCTView' && child.type.displayName !== 'View') {
            console.warn('Each ViewPager child must be a <View>. Was ' + child.type.displayName);
          }

          return React.createElement(child.type, newProps);
        });
      }, _this._onPageScroll = function (e) {
        if (_this.props.onPageScroll) {
          _this.props.onPageScroll(e);
        }

        if (_this.props.keyboardDismissMode === 'on-drag') {
          dismissKeyboard();
        }
      }, _this._onPageScrollStateChanged = function (e) {
        if (_this.props.onPageScrollStateChanged) {
          _this.props.onPageScrollStateChanged(e.nativeEvent.pageScrollState);
        }
      }, _this._onPageSelected = function (e) {
        if (_this.props.onPageSelected) {
          _this.props.onPageSelected(e);
        }
      }, _this.setPage = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPage, [selectedPage]);
      }, _this.setPageWithoutAnimation = function (selectedPage) {
        UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPageWithoutAnimation, [selectedPage]);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ViewPagerAndroid, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.initialPage != null) {
          this.setPageWithoutAnimation(this.props.initialPage);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(NativeAndroidViewPager, _extends({}, this.props, {
          ref: VIEWPAGER_REF,
          style: this.props.style,
          onPageScroll: this._onPageScroll,
          onPageScrollStateChanged: this._onPageScrollStateChanged,
          onPageSelected: this._onPageSelected,
          children: this._childrenWithOverridenStyle(),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 236
          }
        }));
      }
    }]);

    return ViewPagerAndroid;
  }(React.Component), _class.propTypes = _extends({}, ViewPropTypes, {
    initialPage: PropTypes.number,
    onPageScroll: PropTypes.func,
    onPageScrollStateChanged: PropTypes.func,
    onPageSelected: PropTypes.func,
    pageMargin: PropTypes.number,
    keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),
    scrollEnabled: PropTypes.bool,
    peekEnabled: PropTypes.bool
  }), _temp2));

  var NativeAndroidViewPager = requireNativeComponent('AndroidViewPager', ViewPagerAndroid);
  module.exports = ViewPagerAndroid;
},498,[13,219,172,25,92,164,173,420,188],"ViewPagerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/WebView/WebView.android.js",
      _class,
      _temp2;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    WebView: {
      displayName: "WebView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/Components/WebView/WebView.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var EdgeInsetsPropType = _require(_dependencyMap[2], 'EdgeInsetsPropType');

  var ActivityIndicator = _require(_dependencyMap[3], 'ActivityIndicator');

  var React = _require(_dependencyMap[4], 'React');

  var PropTypes = _require(_dependencyMap[5], 'prop-types');

  var ReactNative = _require(_dependencyMap[6], 'ReactNative');

  var StyleSheet = _require(_dependencyMap[7], 'StyleSheet');

  var UIManager = _require(_dependencyMap[8], 'UIManager');

  var View = _require(_dependencyMap[9], 'View');

  var ViewPropTypes = _require(_dependencyMap[10], 'ViewPropTypes');

  var deprecatedPropType = _require(_dependencyMap[11], 'deprecatedPropType');

  var keyMirror = _require(_dependencyMap[12], 'fbjs/lib/keyMirror');

  var requireNativeComponent = _require(_dependencyMap[13], 'requireNativeComponent');

  var resolveAssetSource = _require(_dependencyMap[14], 'resolveAssetSource');

  var RCT_WEBVIEW_REF = 'webview';
  var WebViewState = keyMirror({
    IDLE: null,
    LOADING: null,
    ERROR: null
  });

  var defaultRenderLoading = function defaultRenderLoading() {
    return React.createElement(
      View,
      {
        style: styles.loadingView,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      },
      React.createElement(ActivityIndicator, {
        style: styles.loadingProgressBar,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 36
        }
      })
    );
  };

  var WebView = _wrapComponent("WebView")((_temp2 = _class = function (_React$Component) {
    _inherits(WebView, _React$Component);

    function WebView() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, WebView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = WebView.__proto__ || Object.getPrototypeOf(WebView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        viewState: WebViewState.IDLE,
        lastErrorEvent: null,
        startInLoadingState: true
      }, _this.goForward = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goForward, null);
      }, _this.goBack = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goBack, null);
      }, _this.reload = function () {
        _this.setState({
          viewState: WebViewState.LOADING
        });

        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.reload, null);
      }, _this.stopLoading = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.stopLoading, null);
      }, _this.postMessage = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.postMessage, [String(data)]);
      }, _this.injectJavaScript = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.injectJavaScript, [data]);
      }, _this.updateNavigationState = function (event) {
        if (_this.props.onNavigationStateChange) {
          _this.props.onNavigationStateChange(event.nativeEvent);
        }
      }, _this.getWebViewHandle = function () {
        return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
      }, _this.onLoadingStart = function (event) {
        var onLoadStart = _this.props.onLoadStart;
        onLoadStart && onLoadStart(event);

        _this.updateNavigationState(event);
      }, _this.onLoadingError = function (event) {
        event.persist();
        var _this$props = _this.props,
            onError = _this$props.onError,
            onLoadEnd = _this$props.onLoadEnd;
        onError && onError(event);
        onLoadEnd && onLoadEnd(event);
        console.warn('Encountered an error loading page', event.nativeEvent);

        _this.setState({
          lastErrorEvent: event.nativeEvent,
          viewState: WebViewState.ERROR
        });
      }, _this.onLoadingFinish = function (event) {
        var _this$props2 = _this.props,
            onLoad = _this$props2.onLoad,
            onLoadEnd = _this$props2.onLoadEnd;
        onLoad && onLoad(event);
        onLoadEnd && onLoadEnd(event);

        _this.setState({
          viewState: WebViewState.IDLE
        });

        _this.updateNavigationState(event);
      }, _this.onMessage = function (event) {
        var onMessage = _this.props.onMessage;
        onMessage && onMessage(event);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(WebView, [{
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        if (this.props.startInLoadingState) {
          this.setState({
            viewState: WebViewState.LOADING
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var otherView = null;

        if (this.state.viewState === WebViewState.LOADING) {
          otherView = (this.props.renderLoading || defaultRenderLoading)();
        } else if (this.state.viewState === WebViewState.ERROR) {
          var errorEvent = this.state.lastErrorEvent;
          otherView = this.props.renderError && this.props.renderError(errorEvent.domain, errorEvent.code, errorEvent.description);
        } else if (this.state.viewState !== WebViewState.IDLE) {
          console.error('RCTWebView invalid state encountered: ' + this.state.loading);
        }

        var webViewStyles = [styles.container, this.props.style];

        if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
          webViewStyles.push(styles.hidden);
        }

        var source = this.props.source || {};

        if (this.props.html) {
          source.html = this.props.html;
        } else if (this.props.url) {
          source.uri = this.props.url;
        }

        if (source.method === 'POST' && source.headers) {
          console.warn('WebView: `source.headers` is not supported when using POST.');
        } else if (source.method === 'GET' && source.body) {
          console.warn('WebView: `source.body` is not supported when using GET.');
        }

        var nativeConfig = this.props.nativeConfig || {};
        var NativeWebView = nativeConfig.component || RCTWebView;
        var webView = React.createElement(NativeWebView, _extends({
          ref: RCT_WEBVIEW_REF,
          key: "webViewKey",
          style: webViewStyles,
          source: resolveAssetSource(source),
          scalesPageToFit: this.props.scalesPageToFit,
          injectedJavaScript: this.props.injectedJavaScript,
          userAgent: this.props.userAgent,
          javaScriptEnabled: this.props.javaScriptEnabled,
          thirdPartyCookiesEnabled: this.props.thirdPartyCookiesEnabled,
          domStorageEnabled: this.props.domStorageEnabled,
          messagingEnabled: typeof this.props.onMessage === 'function',
          onMessage: this.onMessage,
          contentInset: this.props.contentInset,
          automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
          onContentSizeChange: this.props.onContentSizeChange,
          onLoadingStart: this.onLoadingStart,
          onLoadingFinish: this.onLoadingFinish,
          onLoadingError: this.onLoadingError,
          testID: this.props.testID,
          mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
          allowUniversalAccessFromFileURLs: this.props.allowUniversalAccessFromFileURLs,
          mixedContentMode: this.props.mixedContentMode,
          saveFormDataDisabled: this.props.saveFormDataDisabled,
          urlPrefixesForDefaultIntent: this.props.urlPrefixesForDefaultIntent
        }, nativeConfig.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 294
          }
        }));
        return React.createElement(
          View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 323
            }
          },
          webView,
          otherView
        );
      }
    }], [{
      key: "extraNativeComponentConfig",
      get: function get() {
        return {
          nativeOnly: {
            messagingEnabled: PropTypes.bool
          }
        };
      }
    }]);

    return WebView;
  }(React.Component), _class.propTypes = _extends({}, ViewPropTypes, {
    renderError: PropTypes.func,
    renderLoading: PropTypes.func,
    onLoad: PropTypes.func,
    onLoadEnd: PropTypes.func,
    onLoadStart: PropTypes.func,
    onError: PropTypes.func,
    automaticallyAdjustContentInsets: PropTypes.bool,
    contentInset: EdgeInsetsPropType,
    onNavigationStateChange: PropTypes.func,
    onMessage: PropTypes.func,
    onContentSizeChange: PropTypes.func,
    startInLoadingState: PropTypes.bool,
    style: ViewPropTypes.style,
    html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      method: PropTypes.oneOf(['GET', 'POST']),
      headers: PropTypes.object,
      body: PropTypes.string
    }), PropTypes.shape({
      html: PropTypes.string,
      baseUrl: PropTypes.string
    }), PropTypes.number]),
    javaScriptEnabled: PropTypes.bool,
    thirdPartyCookiesEnabled: PropTypes.bool,
    domStorageEnabled: PropTypes.bool,
    injectedJavaScript: PropTypes.string,
    scalesPageToFit: PropTypes.bool,
    userAgent: PropTypes.string,
    testID: PropTypes.string,
    mediaPlaybackRequiresUserAction: PropTypes.bool,
    allowUniversalAccessFromFileURLs: PropTypes.bool,
    injectJavaScript: PropTypes.func,
    mixedContentMode: PropTypes.oneOf(['never', 'always', 'compatibility']),
    saveFormDataDisabled: PropTypes.bool,
    nativeConfig: PropTypes.shape({
      component: PropTypes.any,
      props: PropTypes.object,
      viewManager: PropTypes.object
    }),
    urlPrefixesForDefaultIntent: PropTypes.arrayOf(PropTypes.string)
  }), _class.defaultProps = {
    javaScriptEnabled: true,
    thirdPartyCookiesEnabled: true,
    scalesPageToFit: true,
    saveFormDataDisabled: false
  }, _temp2));

  var RCTWebView = requireNativeComponent('RCTWebView', WebView, WebView.extraNativeComponentConfig);
  var styles = StyleSheet.create({
    container: {
      flex: 1
    },
    hidden: {
      height: 0,
      flex: 0
    },
    loadingView: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    loadingProgressBar: {
      height: 20
    }
  });
  module.exports = WebView;
},499,[13,219,174,88,172,25,92,211,164,213,173,186,193,188,203],"WebView");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var RCTActionSheetManager = _require(_dependencyMap[0], 'NativeModules').ActionSheetManager;

  var invariant = _require(_dependencyMap[1], 'fbjs/lib/invariant');

  var processColor = _require(_dependencyMap[2], 'processColor');

  var ActionSheetIOS = {
    showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
      invariant((typeof options === "undefined" ? "undefined" : _typeof(options)) === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTActionSheetManager.showActionSheetWithOptions(_extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), callback);
    },
    showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      invariant((typeof options === "undefined" ? "undefined" : _typeof(options)) === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
      invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
      RCTActionSheetManager.showShareActionSheetWithOptions(_extends({}, options, {
        tintColor: processColor(options.tintColor)
      }), failureCallback, successCallback);
    }
  };
  module.exports = ActionSheetIOS;
},500,[67,19,195],"ActionSheetIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var BatchedBridge = _require(_dependencyMap[0], 'BatchedBridge');

  var BugReporting = _require(_dependencyMap[1], 'BugReporting');

  var NativeModules = _require(_dependencyMap[2], 'NativeModules');

  var ReactNative = _require(_dependencyMap[3], 'ReactNative');

  var SceneTracker = _require(_dependencyMap[4], 'SceneTracker');

  var infoLog = _require(_dependencyMap[5], 'infoLog');

  var invariant = _require(_dependencyMap[6], 'fbjs/lib/invariant');

  var renderApplication = _require(_dependencyMap[7], 'renderApplication');

  var runnables = {};
  var runCount = 1;
  var sections = {};
  var tasks = new Map();

  var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
    return component();
  };

  var wrapperComponentProvider = void 0;
  var AppRegistry = {
    setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    registerConfig: function registerConfig(config) {
      config.forEach(function (appConfig) {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          invariant(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    registerComponent: function registerComponent(appKey, componentProvider, section) {
      runnables[appKey] = {
        componentProvider: componentProvider,
        run: function run(appParameters) {
          return renderApplication(componentProviderInstrumentationHook(componentProvider), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters));
        }
      };

      if (section) {
        sections[appKey] = runnables[appKey];
      }

      return appKey;
    },
    registerRunnable: function registerRunnable(appKey, run) {
      runnables[appKey] = {
        run: run
      };
      return appKey;
    },
    registerSection: function registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys: function getSectionKeys() {
      return Object.keys(sections);
    },
    getSections: function getSections() {
      return _extends({}, sections);
    },
    getRunnable: function getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry: function getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: _extends({}, runnables)
      };
    },
    setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    runApplication: function runApplication(appKey, appParameters) {
      var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(__DEV__) + ', development-level warning are ' + (__DEV__ ? 'ON' : 'OFF') + ', performance optimizations are ' + (__DEV__ ? 'OFF' : 'ON');
      infoLog(msg);
      BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
        return msg;
      });
      invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered.\n\n' + "Hint: This error often happens when you're running the packager " + '(local dev server) from a wrong folder. For example you have ' + 'multiple apps and the packager is still running for the app you ' + 'were working on before.\nIf this is the case, simply kill the old ' + 'packager instance (e.g. close the packager terminal window) ' + 'and start the packager in the correct app folder (e.g. cd into app ' + "folder and run 'npm start').\n\n" + 'This error can also happen due to a require() error during ' + 'initialization or failure to call AppRegistry.registerComponent.\n\n');
      SceneTracker.setActiveScene({
        name: appKey
      });
      runnables[appKey].run(appParameters);
    },
    unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
      ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
    },
    registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
      if (tasks.has(taskKey)) {
        console.warn("registerHeadlessTask called multiple times for same key '" + taskKey + "'");
      }

      tasks.set(taskKey, task);
    },
    startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = tasks.get(taskKey);

      if (!taskProvider) {
        throw new Error("No task registered for key " + taskKey);
      }

      taskProvider()(data).then(function () {
        return NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      }).catch(function (reason) {
        console.error(reason);
        NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      });
    }
  };
  BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);
  module.exports = AppRegistry;
},501,[68,502,67,92,504,148,19,505],"AppRegistry");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RCTDeviceEventEmitter = _require(_dependencyMap[0], 'RCTDeviceEventEmitter');

  var Map = _require(_dependencyMap[1], 'Map');

  var infoLog = _require(_dependencyMap[2], 'infoLog');

  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function () {
      return _require(_dependencyMap[3], 'dumpReactTree')();
    });
  }

  var BugReporting = function () {
    function BugReporting() {
      _classCallCheck(this, BugReporting);
    }

    _createClass(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
          defaultExtras();
        }

        if (!BugReporting._redboxSubscription) {
          BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
        }
      }
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();

        if (source.has(key)) {
          console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
        }

        source.set(key, callback);
        return {
          remove: function remove() {
            source.delete(key);
          }
        };
      }
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};

        for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref = _ref3;

          var _ref2 = _slicedToArray(_ref, 2);

          var _key = _ref2[0];
          var callback = _ref2[1];
          extraData[_key] = callback();
        }

        var fileData = {};

        for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref6;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref6 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref6 = _i2.value;
          }

          var _ref4 = _ref6;

          var _ref5 = _slicedToArray(_ref4, 2);

          var _key2 = _ref5[0];
          var _callback = _ref5[1];
          fileData[_key2] = _callback();
        }

        infoLog('BugReporting extraData:', extraData);

        var BugReportingNativeModule = _require(_dependencyMap[4], 'NativeModules').BugReporting;

        BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);

        var RedBoxNativeModule = _require(_dependencyMap[4], 'NativeModules').RedBox;

        RedBoxNativeModule && RedBoxNativeModule.setExtraData && RedBoxNativeModule.setExtraData(extraData, 'From BugReporting.js');
        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);

    return BugReporting;
  }();

  BugReporting._extraSources = new Map();
  BugReporting._fileSources = new Map();
  BugReporting._subscription = null;
  BugReporting._redboxSubscription = null;
  module.exports = BugReporting;
},502,[83,97,148,503,67],"BugReporting");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }

  function getReactTree() {
    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
  }

  module.exports = dumpReactTree;
},503,[],"dumpReactTree");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene: function setActiveScene(scene) {
      _activeScene = scene;

      _listeners.forEach(function (listener) {
        return listener(_activeScene);
      });
    },
    getActiveScene: function getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
      _listeners.push(callback);

      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  };
  module.exports = SceneTracker;
},504,[],"SceneTracker");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native/Libraries/ReactNative/renderApplication.js";

  var AppContainer = _require(_dependencyMap[0], 'AppContainer');

  var React = _require(_dependencyMap[1], 'React');

  var ReactNative = _require(_dependencyMap[2], 'ReactNative');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  _require(_dependencyMap[4], 'BackHandler');

  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent) {
    invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var renderable = React.createElement(
      AppContainer,
      {
        rootTag: rootTag,
        WrapperComponent: WrapperComponent,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 32
        }
      },
      React.createElement(RootComponent, _extends({}, initialProps, {
        rootTag: rootTag,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 33
        }
      }))
    );

    if (RootComponent.prototype != null && RootComponent.prototype.unstable_isAsyncReactComponent === true) {
      var AsyncMode = React.unstable_AsyncMode;
      renderable = React.createElement(
        AsyncMode,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 46
          }
        },
        renderable
      );
    }

    ReactNative.render(renderable, rootTag);
  }

  module.exports = renderApplication;
},505,[451,172,92,19,506],"renderApplication");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var DeviceEventManager = _require(_dependencyMap[0], 'NativeModules').DeviceEventManager;

  var RCTDeviceEventEmitter = _require(_dependencyMap[1], 'RCTDeviceEventEmitter');

  var DEVICE_BACK_EVENT = 'hardwareBackPress';

  var _backPressSubscriptions = new Set();

  RCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function () {
    var invokeDefault = true;
    var subscriptions = Array.from(_backPressSubscriptions.values()).reverse();

    for (var i = 0; i < subscriptions.length; ++i) {
      if (subscriptions[i]()) {
        invokeDefault = false;
        break;
      }
    }

    if (invokeDefault) {
      BackHandler.exitApp();
    }
  });
  var BackHandler = {
    exitApp: function exitApp() {
      DeviceEventManager.invokeDefaultBackPressHandler();
    },
    addEventListener: function addEventListener(eventName, handler) {
      _backPressSubscriptions.add(handler);

      return {
        remove: function remove() {
          return BackHandler.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      _backPressSubscriptions.delete(handler);
    }
  };
  module.exports = BackHandler;
},506,[67,83],"BackHandler");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var NativeModules = _require(_dependencyMap[0], 'NativeModules');

  var RCTAsyncStorage = NativeModules.AsyncRocksDBStorage || NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;
  var AsyncStorage = {
    _getRequests: [],
    _getKeys: [],
    _immediate: null,
    getItem: function getItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiGet([key], function (errors, result) {
          var value = result && result[0] && result[0][1] ? result[0][1] : null;
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0], value);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(value);
          }
        });
      });
    },
    setItem: function setItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    removeItem: function removeItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove([key], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    mergeItem: function mergeItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    clear: function clear(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.clear(function (error) {
          callback && callback(convertError(error));

          if (error && convertError(error)) {
            reject(convertError(error));
          } else {
            resolve(null);
          }
        });
      });
    },
    getAllKeys: function getAllKeys(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.getAllKeys(function (error, keys) {
          callback && callback(convertError(error), keys);

          if (error) {
            reject(convertError(error));
          } else {
            resolve(keys);
          }
        });
      });
    },
    flushGetRequests: function flushGetRequests() {
      var getRequests = this._getRequests;
      var getKeys = this._getKeys;
      this._getRequests = [];
      this._getKeys = [];
      RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
        var map = {};
        result && result.forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          map[key] = value;
          return value;
        });
        var reqLength = getRequests.length;

        for (var i = 0; i < reqLength; i++) {
          var request = getRequests[i];
          var requestKeys = request.keys;
          var requestResult = requestKeys.map(function (key) {
            return [key, map[key]];
          });
          request.callback && request.callback(null, requestResult);
          request.resolve && request.resolve(requestResult);
        }
      });
    },
    multiGet: function multiGet(keys, callback) {
      var _this = this;

      if (!this._immediate) {
        this._immediate = setImmediate(function () {
          _this._immediate = null;

          _this.flushGetRequests();
        });
      }

      var getRequest = {
        keys: keys,
        callback: callback,
        keyIndex: this._getKeys.length,
        resolve: null,
        reject: null
      };
      var promiseResult = new Promise(function (resolve, reject) {
        getRequest.resolve = resolve;
        getRequest.reject = reject;
      });

      this._getRequests.push(getRequest);

      keys.forEach(function (key) {
        if (_this._getKeys.indexOf(key) === -1) {
          _this._getKeys.push(key);
        }
      });
      return promiseResult;
    },
    multiSet: function multiSet(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiRemove: function multiRemove(keys, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove(keys, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiMerge: function multiMerge(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    }
  };

  if (!RCTAsyncStorage.multiMerge) {
    delete AsyncStorage.mergeItem;
    delete AsyncStorage.multiMerge;
  }

  function convertErrors(errs) {
    if (!errs) {
      return null;
    }

    return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
      return convertError(e);
    });
  }

  function convertError(error) {
    if (!error) {
      return null;
    }

    var out = new Error(error.message);
    out.key = error.key;
    return out;
  }

  module.exports = AsyncStorage;
},507,[67],"AsyncStorage");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var BackHandler = _require(_dependencyMap[0], 'BackHandler');

  var warning = _require(_dependencyMap[1], 'fbjs/lib/warning');

  var BackAndroid = {
    exitApp: function exitApp() {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.exitApp();
    },
    addEventListener: function addEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      return BackHandler.addEventListener(eventName, handler);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.removeEventListener(eventName, handler);
    }
  };
  module.exports = BackAndroid;
},508,[506,20],"BackAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var PropTypes = _require(_dependencyMap[0], 'prop-types');

  var checkPropTypes = PropTypes.checkPropTypes;

  var RCTCameraRollManager = _require(_dependencyMap[1], 'NativeModules').CameraRollManager;

  var createStrictShapeTypeChecker = _require(_dependencyMap[2], 'createStrictShapeTypeChecker');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var GROUP_TYPES_OPTIONS = {
    Album: 'Album',
    All: 'All',
    Event: 'Event',
    Faces: 'Faces',
    Library: 'Library',
    PhotoStream: 'PhotoStream',
    SavedPhotos: 'SavedPhotos'
  };
  var ASSET_TYPE_OPTIONS = {
    All: 'All',
    Videos: 'Videos',
    Photos: 'Photos'
  };
  var getPhotosParamChecker = createStrictShapeTypeChecker({
    first: PropTypes.number.isRequired,
    after: PropTypes.string,
    groupTypes: PropTypes.oneOf(Object.keys(GROUP_TYPES_OPTIONS)),
    groupName: PropTypes.string,
    assetType: PropTypes.oneOf(Object.keys(ASSET_TYPE_OPTIONS)),
    mimeTypes: PropTypes.arrayOf(PropTypes.string)
  });
  var getPhotosReturnChecker = createStrictShapeTypeChecker({
    edges: PropTypes.arrayOf(createStrictShapeTypeChecker({
      node: createStrictShapeTypeChecker({
        type: PropTypes.string.isRequired,
        group_name: PropTypes.string.isRequired,
        image: createStrictShapeTypeChecker({
          uri: PropTypes.string.isRequired,
          height: PropTypes.number.isRequired,
          width: PropTypes.number.isRequired,
          isStored: PropTypes.bool,
          playableDuration: PropTypes.number.isRequired
        }).isRequired,
        timestamp: PropTypes.number.isRequired,
        location: createStrictShapeTypeChecker({
          latitude: PropTypes.number,
          longitude: PropTypes.number,
          altitude: PropTypes.number,
          heading: PropTypes.number,
          speed: PropTypes.number
        })
      }).isRequired
    })).isRequired,
    page_info: createStrictShapeTypeChecker({
      has_next_page: PropTypes.bool.isRequired,
      start_cursor: PropTypes.string,
      end_cursor: PropTypes.string
    }).isRequired
  });

  var CameraRoll = function () {
    function CameraRoll() {
      _classCallCheck(this, CameraRoll);
    }

    _createClass(CameraRoll, null, [{
      key: "saveImageWithTag",
      value: function saveImageWithTag(tag) {
        console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');
        return this.saveToCameraRoll(tag, 'photo');
      }
    }, {
      key: "deletePhotos",
      value: function deletePhotos(photos) {
        return RCTCameraRollManager.deletePhotos(photos);
      }
    }, {
      key: "saveToCameraRoll",
      value: function saveToCameraRoll(tag, type) {
        invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');
        invariant(type === 'photo' || type === 'video' || type === undefined, "The second argument to saveToCameraRoll must be 'photo' or 'video'. You passed " + (type || 'unknown'));
        var mediaType = 'photo';

        if (type) {
          mediaType = type;
        } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
          mediaType = 'video';
        }

        return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
      }
    }, {
      key: "getPhotos",
      value: function getPhotos(params) {
        if (__DEV__) {
          checkPropTypes({
            params: getPhotosParamChecker
          }, {
            params: params
          }, 'params', 'CameraRoll.getPhotos');
        }

        if (arguments.length > 1) {
          console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
          var successCallback = arguments[1];

          if (__DEV__) {
            var callback = arguments[1];

            successCallback = function successCallback(response) {
              checkPropTypes({
                response: getPhotosReturnChecker
              }, {
                response: response
              }, 'response', 'CameraRoll.getPhotos callback');
              callback(response);
            };
          }

          var errorCallback = arguments[2] || function () {};

          RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
        }

        return RCTCameraRollManager.getPhotos(params);
      }
    }]);

    return CameraRoll;
  }();

  CameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;
  CameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;
  module.exports = CameraRoll;
},509,[25,67,175,19],"CameraRoll");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Clipboard = _require(_dependencyMap[0], 'NativeModules').Clipboard;

  module.exports = {
    getString: function getString() {
      return Clipboard.getString();
    },
    setString: function setString(content) {
      Clipboard.setString(content);
    }
  };
},510,[67],"Clipboard");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var DatePickerModule = _require(_dependencyMap[0], 'NativeModules').DatePickerAndroid;

  function _toMillis(options, key) {
    var dateVal = options[key];

    if ((typeof dateVal === "undefined" ? "undefined" : _typeof(dateVal)) === 'object' && typeof dateVal.getMonth === 'function') {
      options[key] = dateVal.getTime();
    }
  }

  var DatePickerAndroid = function () {
    function DatePickerAndroid() {
      _classCallCheck(this, DatePickerAndroid);
    }

    _createClass(DatePickerAndroid, null, [{
      key: "open",
      value: function () {
        var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(options) {
          var optionsMs;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  optionsMs = options;

                  if (optionsMs) {
                    _toMillis(options, 'date');

                    _toMillis(options, 'minDate');

                    _toMillis(options, 'maxDate');
                  }

                  return _context.abrupt("return", DatePickerModule.open(options));

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function open(_x) {
          return _ref.apply(this, arguments);
        }

        return open;
      }()
    }, {
      key: "dateSetAction",
      get: function get() {
        return 'dateSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);

    return DatePickerAndroid;
  }();

  module.exports = DatePickerAndroid;
},511,[67],"DatePickerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var RCTImagePicker = _require(_dependencyMap[0], 'NativeModules').ImagePickerIOS;

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      return RCTImagePicker.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      return RCTImagePicker.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      config = _extends({
        videoMode: false
      }, config);
      return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      config = _extends({
        showImages: true,
        showVideos: false
      }, config);
      return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
    }
  };
  module.exports = ImagePickerIOS;
},512,[67],"ImagePickerIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var NativeEventEmitter = _require(_dependencyMap[0], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[1], 'NativeModules');

  var Platform = _require(_dependencyMap[2], 'Platform');

  var invariant = _require(_dependencyMap[3], 'fbjs/lib/invariant');

  var LinkingManager = Platform.OS === 'android' ? NativeModules.IntentAndroid : NativeModules.LinkingManager;

  var Linking = function (_NativeEventEmitter) {
    _inherits(Linking, _NativeEventEmitter);

    function Linking() {
      _classCallCheck(this, Linking);

      return _possibleConstructorReturn(this, (Linking.__proto__ || Object.getPrototypeOf(Linking)).call(this, LinkingManager));
    }

    _createClass(Linking, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        this.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        this.removeListener(type, handler);
      }
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);

        return LinkingManager.openURL(url);
      }
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);

        return LinkingManager.canOpenURL(url);
      }
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return LinkingManager.getInitialURL();
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        invariant(url, 'Invalid URL: cannot be empty');
      }
    }]);

    return Linking;
  }(NativeEventEmitter);

  module.exports = new Linking();
},513,[125,67,75,19],"Linking");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Map = _require(_dependencyMap[0], 'Map');

  var NativeEventEmitter = _require(_dependencyMap[1], 'NativeEventEmitter');

  var NativeModules = _require(_dependencyMap[2], 'NativeModules');

  var Platform = _require(_dependencyMap[3], 'Platform');

  var RCTNetInfo = NativeModules.NetInfo;
  var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);
  var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

  var _subscriptions = new Map();

  var _isConnectedDeprecated = void 0;

  if (Platform.OS === 'ios') {
    _isConnectedDeprecated = function _isConnectedDeprecated(reachability) {
      return reachability !== 'none' && reachability !== 'unknown';
    };
  } else if (Platform.OS === 'android') {
    _isConnectedDeprecated = function _isConnectedDeprecated(connectionType) {
      return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';
    };
  }

  function _isConnected(connection) {
    return connection.type !== 'none' && connection.type !== 'unknown';
  }

  var _isConnectedSubscriptions = new Map();

  var NetInfo = {
    addEventListener: function addEventListener(eventName, handler) {
      var listener = void 0;

      if (eventName === 'connectionChange') {
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler({
            type: appStateData.connectionType,
            effectiveType: appStateData.effectiveConnectionType
          });
        });
      } else if (eventName === 'change') {
        console.warn('NetInfo\'s "change" event is deprecated. Listen to the "connectionChange" event instead.');
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler(appStateData.network_info);
        });
      } else {
        console.warn('Trying to subscribe to unknown event: "' + eventName + '"');
        return {
          remove: function remove() {}
        };
      }

      _subscriptions.set(handler, listener);

      return {
        remove: function remove() {
          return NetInfo.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    },
    fetch: function fetch() {
      console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return resp.network_info;
      });
    },
    getConnectionInfo: function getConnectionInfo() {
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return {
          type: resp.connectionType,
          effectiveType: resp.effectiveConnectionType
        };
      });
    },
    isConnected: {
      addEventListener: function addEventListener(eventName, handler) {
        var listener = function listener(connection) {
          if (eventName === 'change') {
            handler(_isConnectedDeprecated(connection));
          } else if (eventName === 'connectionChange') {
            handler(_isConnected(connection));
          }
        };

        _isConnectedSubscriptions.set(handler, listener);

        NetInfo.addEventListener(eventName, listener);
        return {
          remove: function remove() {
            return NetInfo.isConnected.removeEventListener(eventName, handler);
          }
        };
      },
      removeEventListener: function removeEventListener(eventName, handler) {
        var listener = _isConnectedSubscriptions.get(handler);

        NetInfo.removeEventListener(eventName, listener);

        _isConnectedSubscriptions.delete(handler);
      },
      fetch: function fetch() {
        return NetInfo.getConnectionInfo().then(_isConnected);
      }
    },
    isConnectionExpensive: function isConnectionExpensive() {
      return Platform.OS === 'android' ? RCTNetInfo.isConnectionMetered() : Promise.reject(new Error('Currently not supported on iOS'));
    }
  };
  module.exports = NetInfo;
},514,[97,125,67,75],"NetInfo");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var NativeEventEmitter = _require(_dependencyMap[0], 'NativeEventEmitter');

  var RCTPushNotificationManager = _require(_dependencyMap[1], 'NativeModules').PushNotificationManager;

  var invariant = _require(_dependencyMap[2], 'fbjs/lib/invariant');

  var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

  var _notifHandlers = new Map();

  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';

  var PushNotificationIOS = function () {
    _createClass(PushNotificationIOS, null, [{
      key: "presentLocalNotification",
      value: function presentLocalNotification(details) {
        RCTPushNotificationManager.presentLocalNotification(details);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        RCTPushNotificationManager.scheduleLocalNotification(details);
      }
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        RCTPushNotificationManager.cancelAllLocalNotifications();
      }
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        RCTPushNotificationManager.removeAllDeliveredNotifications();
      }
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        RCTPushNotificationManager.getDeliveredNotifications(callback);
      }
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        RCTPushNotificationManager.removeDeliveredNotifications(identifiers);
      }
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
      }
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
      }
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        RCTPushNotificationManager.cancelLocalNotifications(userInfo);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        RCTPushNotificationManager.getScheduledLocalNotifications(callback);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;

        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
            handler(errorInfo);
          });
        }

        _notifHandlers.set(type, listener);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');

        var listener = _notifHandlers.get(type);

        if (!listener) {
          return;
        }

        listener.remove();

        _notifHandlers.delete(type);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {};

        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        } else {
          requestedPermissions = {
            alert: true,
            badge: true,
            sound: true
          };
        }

        return RCTPushNotificationManager.requestPermissions(requestedPermissions);
      }
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        RCTPushNotificationManager.abandonPermissions();
      }
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        invariant(typeof callback === 'function', 'Must provide a valid callback');
        RCTPushNotificationManager.checkPermissions(callback);
      }
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
          return notification && new PushNotificationIOS(notification);
        });
      }
    }]);

    function PushNotificationIOS(nativeNotif) {
      var _this = this;

      _classCallCheck(this, PushNotificationIOS);

      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;

      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }

      if (nativeNotif.remote) {
        Object.keys(nativeNotif).forEach(function (notifKey) {
          var notifVal = nativeNotif[notifKey];

          if (notifKey === 'aps') {
            _this._alert = notifVal.alert;
            _this._sound = notifVal.sound;
            _this._badgeCount = notifVal.badge;
            _this._category = notifVal.category;
            _this._contentAvailable = notifVal['content-available'];
            _this._threadID = notifVal['thread-id'];
          } else {
            _this._data[notifKey] = notifVal;
          }
        });
      } else {
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }

    _createClass(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }

        this._remoteNotificationCompleteCallbackCalled = true;
        RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
      }
    }, {
      key: "getMessage",
      value: function getMessage() {
        return this._alert;
      }
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }, {
      key: "getThreadID",
      value: function getThreadID() {
        return this._threadID;
      }
    }]);

    return PushNotificationIOS;
  }();

  PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  };
  module.exports = PushNotificationIOS;
},515,[125,67,19],"PushNotificationIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var Settings = {
    get: function get(key) {
      console.warn('Settings is not yet supported on Android');
      return null;
    },
    set: function set(settings) {
      console.warn('Settings is not yet supported on Android');
    },
    watchKeys: function watchKeys(keys, callback) {
      console.warn('Settings is not yet supported on Android');
      return -1;
    },
    clearWatch: function clearWatch(watchId) {
      console.warn('Settings is not yet supported on Android');
    }
  };
  module.exports = Settings;
},516,[],"Settings");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Platform = _require2(_dependencyMap[0], 'Platform');

  var invariant = _require2(_dependencyMap[1], 'fbjs/lib/invariant');

  var processColor = _require2(_dependencyMap[2], 'processColor');

  var _require = _require2(_dependencyMap[3], 'NativeModules'),
      ActionSheetManager = _require.ActionSheetManager,
      ShareModule = _require.ShareModule;

  var Share = function () {
    function Share() {
      _classCallCheck(this, Share);
    }

    _createClass(Share, null, [{
      key: "share",
      value: function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        invariant((typeof content === "undefined" ? "undefined" : _typeof(content)) === 'object' && content !== null, 'Content to share must be a valid object');
        invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
        invariant((typeof options === "undefined" ? "undefined" : _typeof(options)) === 'object' && options !== null, 'Options must be a valid object');

        if (Platform.OS === 'android') {
          invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
          return ShareModule.share(content, options.dialogTitle);
        } else if (Platform.OS === 'ios') {
          return new Promise(function (resolve, reject) {
            ActionSheetManager.showShareActionSheetWithOptions(_extends({}, content, options, {
              tintColor: processColor(options.tintColor)
            }), function (error) {
              return reject(error);
            }, function (success, activityType) {
              if (success) {
                resolve({
                  'action': 'sharedAction',
                  'activityType': activityType
                });
              } else {
                resolve({
                  'action': 'dismissedAction'
                });
              }
            });
          });
        } else {
          return Promise.reject(new Error('Unsupported platform'));
        }
      }
    }, {
      key: "sharedAction",
      get: function get() {
        return 'sharedAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);

    return Share;
  }();

  module.exports = Share;
},517,[75,19,195,67],"Share");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var NativeEventEmitter = _require(_dependencyMap[0], 'NativeEventEmitter');

  module.exports = new NativeEventEmitter('StatusBarManager');
},518,[125],"StatusBarIOS");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var TimePickerModule = _require(_dependencyMap[0], 'NativeModules').TimePickerAndroid;

  var TimePickerAndroid = function () {
    function TimePickerAndroid() {
      _classCallCheck(this, TimePickerAndroid);
    }

    _createClass(TimePickerAndroid, null, [{
      key: "open",
      value: function () {
        var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(options) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", TimePickerModule.open(options));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function open(_x) {
          return _ref.apply(this, arguments);
        }

        return open;
      }()
    }, {
      key: "timeSetAction",
      get: function get() {
        return 'timeSetAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);

    return TimePickerAndroid;
  }();

  module.exports = TimePickerAndroid;
},519,[67],"TimePickerAndroid");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var RCTVibration = _require(_dependencyMap[0], 'NativeModules').Vibration;

  var Platform = _require(_dependencyMap[1], 'Platform');

  var _vibrating = false;
  var _id = 0;

  function vibrateByPattern(pattern) {
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (_vibrating) {
      return;
    }

    _vibrating = true;

    if (pattern[0] === 0) {
      RCTVibration.vibrate();
      pattern = pattern.slice(1);
    }

    if (pattern.length === 0) {
      _vibrating = false;
      return;
    }

    setTimeout(function () {
      return vibrateScheduler(++_id, pattern, repeat, 1);
    }, pattern[0]);
  }

  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }

    RCTVibration.vibrate();

    if (nextIndex >= pattern.length) {
      if (repeat) {
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }

    setTimeout(function () {
      return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
    }, pattern[nextIndex]);
  }

  var Vibration = {
    vibrate: function vibrate() {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (Platform.OS === 'android') {
        if (typeof pattern === 'number') {
          RCTVibration.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      } else {
        if (_vibrating) {
          return;
        }

        if (typeof pattern === 'number') {
          RCTVibration.vibrate();
        } else if (Array.isArray(pattern)) {
          vibrateByPattern(pattern, repeat);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    cancel: function cancel() {
      if (Platform.OS === 'ios') {
        _vibrating = false;
      } else {
        RCTVibration.cancel();
      }
    }
  };
  module.exports = Vibration;
},520,[67,75],"Vibration");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var warning = _require(_dependencyMap[0], 'fbjs/lib/warning');

  var VibrationIOS = {
    vibrate: function vibrate() {
      warning('VibrationIOS is not supported on this platform!');
    }
  };
  module.exports = VibrationIOS;
},521,[20],"VibrationIOS");
__d(function (global, _require2, module, exports, _dependencyMap) {
  'use strict';

  var _require = _require2(_dependencyMap[0], 'ReactNative'),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.takeSnapshot;
},522,[92],"takeSnapshot");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var startSingleScreenApp = function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(params) {
      var components;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              components = params.components;

              if (!(!params.screen && !components)) {
                _context.next = 4;
                break;
              }

              console.error('startSingleScreenApp(params): screen must include a screen property');
              return _context.abrupt("return");

            case 4:
              if (components) {
                params.screen = createSingleScreen(components[0]);
                components.shift();
                params.screen.screens = components.map(createSingleScreen) || [];
                params.screen.screens.map(function (c, i) {
                  return i === 0 ? c : addTitleBarBackButtonIfNeeded(c);
                });
              } else {
                params.screen = createSingleScreen(_extends({}, params.screen, {
                  passProps: params.passProps
                }));
              }

              params.sideMenu = convertDrawerParamsToSideMenuParams(params.drawer);
              params.overrideBackPress = params.screen.overrideBackPress;
              params.animateShow = convertAnimationType(params.animationType);
              params.appStyle = convertStyleParams(params.appStyle);

              if (params.appStyle) {
                params.appStyle.orientation = getOrientation(params);
              }

              _context.next = 12;
              return newPlatformSpecific.startApp(params);

            case 12:
              return _context.abrupt("return", _context.sent);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function startSingleScreenApp(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  var startTabBasedApp = function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(params) {
      var newTabs;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (params.tabs) {
                _context2.next = 3;
                break;
              }

              console.error('startTabBasedApp(params): params.tabs is required');
              return _context2.abrupt("return");

            case 3:
              newTabs = [];
              params.tabs = _lodash2.default.cloneDeep(params.tabs);
              params.tabs.forEach(function (tab, idx) {
                if (tab.components) {
                  var components = tab.components;
                  var screen = createBottomTabScreen(tab, idx, params);
                  var _screen = screen,
                      label = _screen.label,
                      icon = _screen.icon;
                  screen.screens = components.map(function (c) {
                    return createBottomTabScreen(_extends({}, c, {
                      icon: icon,
                      label: label
                    }), idx, params);
                  });
                  screen.screens.map(function (s, i) {
                    return addTitleBarBackButtonIfNeeded(s);
                  });
                  screen.screens.map(function (s, i) {
                    return s.navigationParams.navigatorID = screen.navigationParams.navigatorID;
                  });
                  screen = _lodash2.default.omit(screen, ['components']);
                  newTabs.push(screen);
                } else {
                  newTabs.push(createBottomTabScreen(tab, idx, params));
                }
              });
              params.tabs = newTabs;
              params.appStyle = convertStyleParams(params.appStyle);

              if (params.appStyle) {
                params.appStyle.orientation = getOrientation(params);
              }

              params.sideMenu = convertDrawerParamsToSideMenuParams(params.drawer);
              params.animateShow = convertAnimationType(params.animationType);
              _context2.next = 13;
              return newPlatformSpecific.startApp(params);

            case 13:
              return _context2.abrupt("return", _context2.sent);

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function startTabBasedApp(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var dismissAllModals = function () {
    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(params) {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return newPlatformSpecific.dismissAllModals();

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function dismissAllModals(_x3) {
      return _ref3.apply(this, arguments);
    };
  }();

  var isAppLaunched = function () {
    var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return newPlatformSpecific.isAppLaunched();

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    return function isAppLaunched() {
      return _ref4.apply(this, arguments);
    };
  }();

  var isRootLaunched = function () {
    var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return newPlatformSpecific.isRootLaunched();

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    return function isRootLaunched() {
      return _ref5.apply(this, arguments);
    };
  }();

  var getCurrentlyVisibleScreenId = function () {
    var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return newPlatformSpecific.getCurrentlyVisibleScreenId();

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    return function getCurrentlyVisibleScreenId() {
      return _ref6.apply(this, arguments);
    };
  }();

  var getLaunchArgs = function () {
    var _ref7 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7() {
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return newPlatformSpecific.getLaunchArgs();

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    return function getLaunchArgs() {
      return _ref7.apply(this, arguments);
    };
  }();

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _reactNative2 = _interopRequireDefault(_reactNative);

  var _lodash = _require(_dependencyMap[2], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _PropRegistry = _require(_dependencyMap[3], "./../PropRegistry");

  var _PropRegistry2 = _interopRequireDefault(_PropRegistry);

  var _Navigation = _require(_dependencyMap[4], "./../Navigation");

  var _Navigation2 = _interopRequireDefault(_Navigation);

  var _platformSpecific = _require(_dependencyMap[5], "./../platformSpecific");

  var newPlatformSpecific = _interopRequireWildcard(_platformSpecific);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

  var resolveAssetSource = _require(_dependencyMap[6], 'react-native/Libraries/Image/resolveAssetSource');

  function createSingleScreen(params) {
    var screen = params;
    addNavigatorParams(screen);
    addNavigatorButtons(screen, params.drawer);
    addNavigationStyleParams(screen);
    screen.passProps = params.passProps;
    adaptTopTabs(screen, screen.navigatorID);
    screen.screenId = screen.screen;
    screen = adaptNavigationStyleToScreenStyle(screen);
    screen = adaptNavigationParams(screen);
    return screen;
  }

  function getOrientation(params) {
    if (params.portraitOnlyMode || _lodash2.default.get(params, 'appStyle.orientation') === 'portrait') {
      return 'portrait';
    }

    if (params.landscaptOnlyMode || _lodash2.default.get(params, 'appStyle.orientation') === 'landscape') {
      return 'landscape';
    }

    return 'auto';
  }

  function adaptTopTabs(screen, navigatorID) {
    screen.topTabs = _lodash2.default.cloneDeep(screen.topTabs);

    _lodash2.default.forEach(_lodash2.default.get(screen, 'topTabs'), function (tab) {
      addNavigatorParams(tab);

      if (navigatorID) {
        tab.navigatorID = navigatorID;
      }

      tab.screen = tab.screenId;

      if (tab.icon) {
        addTabIcon(tab);
      }

      addNavigatorButtons(tab);
      adaptNavigationParams(tab);
      addNavigationStyleParams(tab);
      tab = adaptNavigationStyleToScreenStyle(tab);
    });
  }

  function navigatorPush(navigator, params) {
    addNavigatorParams(params, navigator);
    addNavigatorButtons(params);
    addTitleBarBackButtonIfNeeded(params);
    addNavigationStyleParams(params);
    adaptTopTabs(params, params.navigatorID);
    params.screenId = params.screen;
    var adapted = adaptNavigationStyleToScreenStyle(params);
    adapted = adaptNavigationParams(adapted);
    adapted.overrideBackPress = params.overrideBackPress;
    adapted.timestamp = Date.now();

    if (!adapted.passProps) {
      adapted.passProps = {};
    }

    if (!adapted.passProps.commandType) {
      adapted.passProps.commandType = 'Push';
    }

    return newPlatformSpecific.push(adapted);
  }

  function navigatorPop(navigator, params) {
    addNavigatorParams(params, navigator);
    params.screenId = params.screen;
    var adapted = adaptNavigationStyleToScreenStyle(params);
    adapted = adaptNavigationParams(adapted);
    adapted.timestamp = Date.now();
    newPlatformSpecific.pop(adapted);
  }

  function navigatorPopToRoot(navigator, params) {
    addNavigatorParams(params, navigator);
    params.screenId = params.screen;
    var adapted = adaptNavigationStyleToScreenStyle(params);
    adapted = adaptNavigationParams(adapted);
    adapted.timestamp = Date.now();
    newPlatformSpecific.popToRoot(adapted);
  }

  function navigatorResetTo(navigator, params) {
    addNavigatorParams(params, navigator);
    addNavigatorButtons(params);
    addNavigationStyleParams(params);
    adaptTopTabs(params, params.navigatorID);
    params.screenId = params.screen;
    var adapted = adaptNavigationStyleToScreenStyle(params);
    adapted = adaptNavigationParams(adapted);
    adapted.timestamp = Date.now();
    newPlatformSpecific.newStack(adapted);
  }

  function adaptNavigationStyleToScreenStyle(screen) {
    var navigatorStyle = screen.navigatorStyle;

    if (!navigatorStyle) {
      return screen;
    }

    screen.styleParams = convertStyleParams(navigatorStyle);
    return _lodash2.default.omit(screen, ['navigatorStyle']);
  }

  function convertStyleParams(originalStyleObject) {
    if (!originalStyleObject) {
      return null;
    }

    var ret = {
      orientation: originalStyleObject.orientation,
      screenAnimationType: originalStyleObject.screenAnimationType,
      statusBarColor: (0, _reactNative.processColor)(originalStyleObject.statusBarColor),
      statusBarHidden: originalStyleObject.statusBarHidden,
      statusBarTextColorScheme: originalStyleObject.statusBarTextColorScheme,
      drawUnderStatusBar: originalStyleObject.drawUnderStatusBar,
      topBarReactView: originalStyleObject.navBarCustomView,
      topBarReactViewAlignment: originalStyleObject.navBarComponentAlignment,
      topBarReactViewInitialProps: originalStyleObject.navBarCustomViewInitialProps,
      topBarColor: (0, _reactNative.processColor)(originalStyleObject.navBarBackgroundColor),
      topBarTransparent: originalStyleObject.navBarTransparent,
      topBarTranslucent: originalStyleObject.navBarTranslucent,
      topBarElevationShadowEnabled: originalStyleObject.topBarElevationShadowEnabled,
      topBarCollapseOnScroll: originalStyleObject.topBarCollapseOnScroll,
      topBarBorderColor: (0, _reactNative.processColor)(originalStyleObject.topBarBorderColor),
      topBarBorderWidth: originalStyleObject.topBarBorderWidth && "" + originalStyleObject.topBarBorderWidth,
      collapsingToolBarImage: originalStyleObject.collapsingToolBarImage,
      collapsingToolBarComponent: originalStyleObject.collapsingToolBarComponent,
      collapsingToolBarComponentHeight: originalStyleObject.collapsingToolBarComponentHeight,
      collapsingToolBarCollapsedColor: (0, _reactNative.processColor)(originalStyleObject.collapsingToolBarCollapsedColor),
      collapsingToolBarExpendedColor: (0, _reactNative.processColor)(originalStyleObject.collapsingToolBarExpendedColor),
      showTitleWhenExpended: originalStyleObject.showTitleWhenExpended,
      expendCollapsingToolBarOnTopTabChange: originalStyleObject.expendCollapsingToolBarOnTopTabChange,
      titleBarHidden: originalStyleObject.navBarHidden,
      titleBarHideOnScroll: originalStyleObject.navBarHideOnScroll,
      titleBarTitleColor: (0, _reactNative.processColor)(originalStyleObject.navBarTextColor),
      titleBarSubtitleColor: (0, _reactNative.processColor)(originalStyleObject.navBarSubtitleColor),
      titleBarSubtitleFontSize: originalStyleObject.navBarSubtitleFontSize,
      titleBarSubtitleFontFamily: originalStyleObject.navBarSubtitleFontFamily,
      titleBarButtonColor: (0, _reactNative.processColor)(originalStyleObject.navBarButtonColor),
      titleBarButtonFontFamily: originalStyleObject.navBarButtonFontFamily,
      titleBarDisabledButtonColor: (0, _reactNative.processColor)(originalStyleObject.titleBarDisabledButtonColor),
      titleBarTitleFontFamily: originalStyleObject.navBarTextFontFamily,
      titleBarTitleFontSize: originalStyleObject.navBarTextFontSize,
      titleBarTitleFontBold: originalStyleObject.navBarTextFontBold,
      titleBarTitleTextCentered: originalStyleObject.navBarTitleTextCentered,
      titleBarSubTitleTextCentered: originalStyleObject.navBarSubTitleTextCentered,
      titleBarHeight: originalStyleObject.navBarHeight,
      titleBarTopPadding: originalStyleObject.navBarTopPadding,
      backButtonHidden: originalStyleObject.backButtonHidden,
      topTabsHidden: originalStyleObject.topTabsHidden,
      contextualMenuStatusBarColor: (0, _reactNative.processColor)(originalStyleObject.contextualMenuStatusBarColor),
      contextualMenuBackgroundColor: (0, _reactNative.processColor)(originalStyleObject.contextualMenuBackgroundColor),
      contextualMenuButtonsColor: (0, _reactNative.processColor)(originalStyleObject.contextualMenuButtonsColor),
      drawBelowTopBar: !originalStyleObject.drawUnderNavBar,
      topTabTextColor: (0, _reactNative.processColor)(originalStyleObject.topTabTextColor),
      topTabTextFontFamily: originalStyleObject.topTabTextFontFamily,
      topTabIconColor: (0, _reactNative.processColor)(originalStyleObject.topTabIconColor),
      selectedTopTabIconColor: (0, _reactNative.processColor)(originalStyleObject.selectedTopTabIconColor),
      selectedTopTabTextColor: (0, _reactNative.processColor)(originalStyleObject.selectedTopTabTextColor),
      selectedTopTabIndicatorHeight: originalStyleObject.selectedTopTabIndicatorHeight,
      selectedTopTabIndicatorColor: (0, _reactNative.processColor)(originalStyleObject.selectedTopTabIndicatorColor),
      topTabsScrollable: originalStyleObject.topTabsScrollable,
      topTabsHeight: originalStyleObject.topTabsHeight,
      screenBackgroundColor: (0, _reactNative.processColor)(originalStyleObject.screenBackgroundColor),
      rootBackgroundImageName: originalStyleObject.rootBackgroundImageName,
      drawScreenAboveBottomTabs: !originalStyleObject.drawUnderTabBar,
      initialTabIndex: originalStyleObject.initialTabIndex,
      bottomTabsColor: (0, _reactNative.processColor)(originalStyleObject.tabBarBackgroundColor),
      bottomTabsButtonColor: (0, _reactNative.processColor)(originalStyleObject.tabBarButtonColor),
      bottomTabsSelectedButtonColor: (0, _reactNative.processColor)(originalStyleObject.tabBarSelectedButtonColor),
      bottomTabsHidden: originalStyleObject.tabBarHidden,
      bottomTabsHiddenOnScroll: originalStyleObject.bottomTabsHiddenOnScroll,
      bottomTabsHideShadow: originalStyleObject.tabBarHideShadow,
      forceTitlesDisplay: originalStyleObject.forceTitlesDisplay,
      bottomTabBadgeTextColor: (0, _reactNative.processColor)(originalStyleObject.bottomTabBadgeTextColor),
      bottomTabBadgeBackgroundColor: (0, _reactNative.processColor)(originalStyleObject.bottomTabBadgeBackgroundColor),
      bottomTabFontFamily: originalStyleObject.tabFontFamily,
      bottomTabFontSize: originalStyleObject.tabFontSize,
      bottomTabSelectedFontSize: originalStyleObject.selectedTabFontSize,
      navigationBarColor: (0, _reactNative.processColor)(originalStyleObject.navigationBarColor)
    };

    if (originalStyleObject.disabledButtonColor) {
      ret.titleBarDisabledButtonColor = (0, _reactNative.processColor)(originalStyleObject.disabledButtonColor);
    }

    if (originalStyleObject.collapsingToolBarImage) {
      if (_lodash2.default.isString(originalStyleObject.collapsingToolBarImage)) {
        ret.collapsingToolBarImage = originalStyleObject.collapsingToolBarImage;
      }

      var collapsingToolBarImage = resolveAssetSource(originalStyleObject.collapsingToolBarImage);

      if (collapsingToolBarImage) {
        ret.collapsingToolBarImage = collapsingToolBarImage.uri;
      }
    }

    if (_lodash2.default.isUndefined(ret.expendCollapsingToolBarOnTopTabChange)) {
      ret.expendCollapsingToolBarOnTopTabChange = true;
    }

    if (ret.topBarReactViewInitialProps) {
      var passPropsKey = _lodash2.default.uniqueId('customNavBarComponent');

      _PropRegistry2.default.save(passPropsKey, ret.topBarReactViewInitialProps);

      ret.topBarReactViewInitialProps = {
        passPropsKey: passPropsKey
      };
    }

    return ret;
  }

  function convertDrawerParamsToSideMenuParams(drawerParams) {
    var drawer = _extends({}, drawerParams);

    var result = {
      left: {},
      right: {}
    };
    Object.keys(result).forEach(function (key) {
      if (drawer[key] && drawer[key].screen) {
        result[key].screenId = drawer[key].screen;
        addNavigatorParams(result[key]);
        result[key] = adaptNavigationParams(result[key]);
        result[key].passProps = drawer[key].passProps;

        if (drawer.disableOpenGesture) {
          result[key].disableOpenGesture = parseInt(drawer.disableOpenGesture);
        } else {
          var fixedWidth = drawer[key].disableOpenGesture;
          result[key].disableOpenGesture = fixedWidth ? parseInt(fixedWidth) : null;
        }

        if (drawer.fixedWidth) {
          result[key].fixedWidth = drawer.fixedWidth;
        } else {
          result[key].fixedWidth = drawer[key].fixedWidth;
        }
      } else {
        result[key] = null;
      }
    });
    return result;
  }

  function adaptNavigationParams(screen) {
    screen.navigationParams = {
      screenInstanceID: screen.screenInstanceID,
      navigatorID: screen.navigatorID,
      navigatorEventID: screen.navigatorEventID
    };
    return screen;
  }

  function createBottomTabScreen(tab, idx, params) {
    addNavigatorParams(tab, null, idx);
    addNavigatorButtons(tab, params.drawer);
    addNavigationStyleParams(tab);
    addTabIcon(tab);

    if (!tab.passProps) {
      tab.passProps = params.passProps;
    }

    adaptTopTabs(tab, tab.navigatorID);
    tab.screenId = tab.screen;
    var newtab = adaptNavigationStyleToScreenStyle(tab);
    newtab = adaptNavigationParams(tab);
    newtab.overrideBackPress = tab.overrideBackPress;
    newtab.timestamp = Date.now();
    return newtab;
  }

  ;

  function addTabIcon(tab) {
    if (tab.icon) {
      var icon = resolveAssetSource(tab.icon);

      if (icon) {
        tab.icon = icon.uri;
      }
    }

    if (!tab.icon) {
      throw new Error("No icon defined for tab " + tab.screen);
    }
  }

  function convertAnimationType(animationType) {
    return animationType !== 'none';
  }

  function navigatorSetButtons(navigator, navigatorEventID, _params) {
    var params = _lodash2.default.cloneDeep(_params);

    if (params.rightButtons) {
      params.rightButtons.forEach(function (button) {
        button.enabled = !button.disabled;

        if (button.icon) {
          var icon = resolveAssetSource(button.icon);

          if (icon) {
            button.icon = icon.uri;
          }
        }

        if (button.buttonColor) {
          button.color = (0, _reactNative.processColor)(button.buttonColor);
        }

        if (button.component) {
          var passPropsKey = _lodash2.default.uniqueId('customButtonComponent');

          _PropRegistry2.default.save(passPropsKey, button.passProps);

          button.passProps = {
            passPropsKey: passPropsKey
          };
        }
      });
    }

    var leftButton = getLeftButton(params);

    if (leftButton) {
      if (leftButton.icon) {
        var icon = resolveAssetSource(leftButton.icon);

        if (icon) {
          leftButton.icon = icon.uri;
        }
      }

      if (leftButton.buttonColor) {
        leftButton.color = (0, _reactNative.processColor)(leftButton.buttonColor);
      }
    } else if (shouldRemoveLeftButton(params)) {
      leftButton = {};
    }

    var fab = getFab(params);
    newPlatformSpecific.setScreenButtons(navigator.screenInstanceID, navigatorEventID, params.rightButtons, leftButton, fab);
  }

  function shouldRemoveLeftButton(params) {
    return params.leftButtons && params.leftButtons.length === 0;
  }

  function navigatorSetTabBadge(navigator, params) {
    var badge = params.badge ? params.badge.toString() : '';

    if (params.tabIndex >= 0) {
      newPlatformSpecific.setBottomTabBadgeByIndex(params.tabIndex, badge);
    } else {
      newPlatformSpecific.setBottomTabBadgeByNavigatorId(navigator.navigatorID, badge);
    }
  }

  function navigatorSetTabButton(navigator, params) {
    if (params.icon) {
      var icon = resolveAssetSource(params.icon);

      if (icon) {
        params.icon = icon.uri;
      }
    }

    params.navigationParams = {};

    if (params.tabIndex >= 0) {
      newPlatformSpecific.setBottomTabButtonByIndex(params.tabIndex, params);
    } else {
      newPlatformSpecific.setBottomTabButtonByNavigatorId(navigator.navigatorID, params);
    }
  }

  function navigatorSetTitle(navigator, params) {
    newPlatformSpecific.setScreenTitleBarTitle(navigator.screenInstanceID, params.title);
  }

  function navigatorSetSubtitle(navigator, params) {
    newPlatformSpecific.setScreenTitleBarSubtitle(navigator.screenInstanceID, params.subtitle);
  }

  function navigatorSetStyle(navigator, params) {
    var style = convertStyleParams(params);
    newPlatformSpecific.setScreenStyle(navigator.screenInstanceID, style);
  }

  function navigatorSwitchToTab(navigator, params) {
    if (params.tabIndex >= 0) {
      newPlatformSpecific.selectBottomTabByTabIndex(params.tabIndex);
    } else {
      newPlatformSpecific.selectBottomTabByNavigatorId(navigator.navigatorID);
    }
  }

  function navigatorSwitchToTopTab(navigator, params) {
    if (params.tabIndex >= 0) {
      newPlatformSpecific.selectTopTabByTabIndex(navigator.screenInstanceID, params.tabIndex);
    } else {
      newPlatformSpecific.selectTopTabByScreen(navigator.screenInstanceID);
    }
  }

  function navigatorToggleDrawer(navigator, params) {
    var animated = !(params.animated === false);

    if (params.to) {
      var visible = params.to === 'open';
      newPlatformSpecific.setSideMenuVisible(animated, visible, params.side);
    } else {
      newPlatformSpecific.toggleSideMenuVisible(animated, params.side);
    }
  }

  function navigatorSetDrawerEnabled(navigator, params) {
    newPlatformSpecific.setSideMenuEnabled(params.enabled, params.side);
  }

  function navigatorToggleNavBar(navigator, params) {
    var screenInstanceID = navigator.screenInstanceID;
    var visible = params.to === 'shown' || params.to === 'show';
    var animated = !(params.animated === false);
    newPlatformSpecific.toggleTopBarVisible(screenInstanceID, visible, animated);
  }

  function navigatorToggleTabs(navigator, params) {
    var visibility = params.to === 'hidden';
    var animated = !(params.animated === false);
    newPlatformSpecific.toggleBottomTabsVisible(visibility, animated);
  }

  function showModal(params) {
    addNavigatorParams(params);
    addNavigatorButtons(params);
    addTitleBarBackButtonIfNeeded(params);
    addNavigationStyleParams(params);
    adaptTopTabs(params, params.navigatorID);
    params.screenId = params.screen;
    var adapted = adaptNavigationStyleToScreenStyle(params);
    adapted = adaptNavigationParams(adapted);
    adapted.overrideBackPress = params.overrideBackPress;
    adapted.timestamp = Date.now();

    if (!adapted.passProps) {
      adapted.passProps = {};
    }

    if (!adapted.passProps.commandType) {
      adapted.passProps.commandType = 'ShowModal';
    }

    newPlatformSpecific.showModal(adapted);
  }

  function showLightBox(params) {
    params.navigationParams = {};
    addNavigatorParams(params.navigationParams);
    params.screenId = params.screen;

    var backgroundBlur = _lodash2.default.get(params, 'style.backgroundBlur');

    var backgroundColor = _lodash2.default.get(params, 'style.backgroundColor');

    if (backgroundColor) {
      params.backgroundColor = (0, _reactNative.processColor)(backgroundColor);
    } else {
      if (backgroundBlur === 'dark') {
        params.backgroundColor = (0, _reactNative.processColor)('rgba(0, 0, 0, 0.5)');
      } else {
        params.backgroundColor = (0, _reactNative.processColor)('transparent');
      }
    }

    params.tapBackgroundToDismiss = _lodash2.default.get(params, 'style.tapBackgroundToDismiss') || false;
    newPlatformSpecific.showLightBox(params);
  }

  function dismissLightBox() {
    newPlatformSpecific.dismissLightBox();
  }

  function dismissModal(params) {
    newPlatformSpecific.dismissTopModal(_extends({}, params, {
      navigationParams: {}
    }));
  }

  function showInAppNotification(params) {
    params.navigationParams = {};
    addNavigatorParams(params.navigationParams);
    params.autoDismissTimerSec = params.autoDismissTimerSec || 5;
    if (params.autoDismiss === false) delete params.autoDismissTimerSec;
    newPlatformSpecific.showInAppNotification(params);
  }

  function dismissInAppNotification(params) {
    newPlatformSpecific.dismissInAppNotification(params);
  }

  function addNavigatorParams(screen) {
    var navigator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    screen.navigatorID = navigator ? navigator.navigatorID : _lodash2.default.uniqueId('navigatorID') + '_nav' + idx;
    screen.screenInstanceID = _lodash2.default.uniqueId('screenInstanceID');
    screen.navigatorEventID = screen.screenInstanceID + '_events';
  }

  function addNavigatorButtons(screen, sideMenuParams) {
    var Screen = _Navigation2.default.getRegisteredScreen(screen.screen);

    if (screen.navigatorButtons == null) {
      screen.navigatorButtons = _lodash2.default.cloneDeep(Screen.navigatorButtons);
    }

    var rightButtons = getRightButtons(screen);

    if (rightButtons) {
      rightButtons.forEach(function (button) {
        button.enabled = !button.disabled;

        if (button.icon) {
          var icon = resolveAssetSource(button.icon);

          if (icon) {
            button.icon = icon.uri;
          }
        }

        if (button.buttonColor) {
          button.color = (0, _reactNative.processColor)(button.buttonColor);
        }

        if (button.component) {
          var passPropsKey = _lodash2.default.uniqueId('customButtonComponent');

          _PropRegistry2.default.save(passPropsKey, button.passProps);

          button.passProps = {
            passPropsKey: passPropsKey
          };
        }
      });
    }

    var leftButton = getLeftButton(screen);

    if (leftButton) {
      if (leftButton.icon) {
        var icon = resolveAssetSource(leftButton.icon);

        if (icon) {
          leftButton.icon = icon.uri;
        }
      }

      if (leftButton.buttonColor) {
        leftButton.color = (0, _reactNative.processColor)(leftButton.buttonColor);
      }
    }

    var fab = getFab(screen);

    if (fab) {
      screen.fab = fab;
    }

    if (rightButtons) {
      screen.rightButtons = rightButtons;
    }

    if (leftButton) {
      screen.leftButton = leftButton;
    }
  }

  function getFab(screen) {
    var fab = screen.fab;

    if (screen.navigatorButtons && screen.navigatorButtons.fab) {
      fab = screen.navigatorButtons.fab;
    }

    if (fab === null || fab === undefined) {
      return;
    }

    if (Object.keys(fab).length === 0) {
      return {};
    }

    var collapsedIconUri = resolveAssetSource(fab.collapsedIcon);

    if (!collapsedIconUri) {
      return;
    }

    fab.collapsedIcon = collapsedIconUri.uri;

    if (fab.expendedIcon) {
      var expendedIconUri = resolveAssetSource(fab.expendedIcon);

      if (expendedIconUri) {
        fab.expendedIcon = expendedIconUri.uri;
      }
    }

    if (fab.backgroundColor) {
      fab.backgroundColor = (0, _reactNative.processColor)(fab.backgroundColor);
    }

    if (fab.collapsedIconColor) {
      fab.collapsedIconColor = (0, _reactNative.processColor)(fab.collapsedIconColor);
    }

    if (fab.expendedIconColor) {
      fab.expendedIconColor = (0, _reactNative.processColor)(fab.expendedIconColor);
    }

    if (fab.actions) {
      _lodash2.default.forEach(fab.actions, function (action) {
        action.icon = resolveAssetSource(action.icon).uri;

        if (action.backgroundColor) {
          action.backgroundColor = (0, _reactNative.processColor)(action.backgroundColor);
        }

        if (action.iconColor) {
          action.iconColor = (0, _reactNative.processColor)(action.iconColor);
        }

        return action;
      });
    }

    return fab;
  }

  function createSideMenuButton() {
    return {
      id: "sideMenu"
    };
  }

  function addTitleBarBackButtonIfNeeded(screen) {
    var leftButton = getLeftButton(screen);

    if (!leftButton) {
      screen.leftButton = {
        id: 'back'
      };
    }
  }

  function getLeftButton(screen) {
    var leftButton = getLeftButtonDeprecated(screen);

    if (leftButton) {
      return leftButton;
    }

    if (screen.navigatorButtons && screen.navigatorButtons.leftButtons) {
      return screen.navigatorButtons.leftButtons[0];
    }

    if (screen.leftButtons) {
      if (_lodash2.default.isArray(screen.leftButtons)) {
        return screen.leftButtons[0];
      } else {
        return screen.leftButtons;
      }
    }

    return null;
  }

  function getLeftButtonDeprecated(screen) {
    if (screen.navigatorButtons && screen.navigatorButtons.leftButton) {
      return screen.navigatorButtons.leftButton;
    }

    return screen.leftButton;
  }

  function getRightButtons(screen) {
    if (screen.navigatorButtons && screen.navigatorButtons.rightButtons) {
      return screen.navigatorButtons.rightButtons;
    } else if (screen.rightButtons) {
      return screen.rightButtons;
    }

    var Screen = _Navigation2.default.getRegisteredScreen(screen.screen);

    if (Screen.navigatorButtons && !_lodash2.default.isEmpty(Screen.navigatorButtons.rightButtons)) {
      return _lodash2.default.cloneDeep(Screen.navigatorButtons.rightButtons);
    }

    return null;
  }

  function addNavigationStyleParams(screen) {
    var Screen = _Navigation2.default.getRegisteredScreen(screen.screen);

    screen.navigatorStyle = _extends({}, Screen.navigatorStyle, screen.navigatorStyle);
  }

  function showSnackbar(params) {
    var adapted = _lodash2.default.cloneDeep(params);

    if (adapted.backgroundColor) {
      adapted.backgroundColor = (0, _reactNative.processColor)(adapted.backgroundColor);
    }

    if (adapted.actionColor) {
      adapted.actionColor = (0, _reactNative.processColor)(adapted.actionColor);
    }

    if (adapted.textColor) {
      adapted.textColor = (0, _reactNative.processColor)(adapted.textColor);
    }

    return newPlatformSpecific.showSnackbar(adapted);
  }

  function dismissSnackbar() {
    return newPlatformSpecific.dismissSnackbar();
  }

  function showContextualMenu(navigator, params) {
    var contextualMenu = {
      buttons: [],
      backButton: {
        id: 'back'
      },
      navigationParams: {
        navigatorEventID: navigator.navigatorEventID
      }
    };
    params.rightButtons.forEach(function (button, index) {
      var btn = {
        icon: resolveAssetSource(button.icon),
        showAsAction: button.showAsAction,
        color: (0, _reactNative.processColor)(button.color),
        label: button.title,
        index: index
      };

      if (btn.icon) {
        btn.icon = btn.icon.uri;
      }

      contextualMenu.buttons.push(btn);
    });
    newPlatformSpecific.showContextualMenu(navigator.screenInstanceID, contextualMenu, params.onButtonPressed);
  }

  function dismissContextualMenu() {
    newPlatformSpecific.dismissContextualMenu();
  }

  exports.default = {
    startTabBasedApp: startTabBasedApp,
    startSingleScreenApp: startSingleScreenApp,
    navigatorPush: navigatorPush,
    navigatorPop: navigatorPop,
    navigatorPopToRoot: navigatorPopToRoot,
    navigatorResetTo: navigatorResetTo,
    showModal: showModal,
    dismissModal: dismissModal,
    dismissAllModals: dismissAllModals,
    showInAppNotification: showInAppNotification,
    showLightBox: showLightBox,
    dismissLightBox: dismissLightBox,
    dismissInAppNotification: dismissInAppNotification,
    navigatorSetButtons: navigatorSetButtons,
    navigatorSetTabBadge: navigatorSetTabBadge,
    navigatorSetTabButton: navigatorSetTabButton,
    navigatorSetTitle: navigatorSetTitle,
    navigatorSetSubtitle: navigatorSetSubtitle,
    navigatorSetStyle: navigatorSetStyle,
    navigatorSwitchToTab: navigatorSwitchToTab,
    navigatorSwitchToTopTab: navigatorSwitchToTopTab,
    navigatorToggleDrawer: navigatorToggleDrawer,
    navigatorSetDrawerEnabled: navigatorSetDrawerEnabled,
    navigatorToggleTabs: navigatorToggleTabs,
    navigatorToggleNavBar: navigatorToggleNavBar,
    showSnackbar: showSnackbar,
    dismissSnackbar: dismissSnackbar,
    showContextualMenu: showContextualMenu,
    dismissContextualMenu: dismissContextualMenu,
    isAppLaunched: isAppLaunched,
    isRootLaunched: isRootLaunched,
    getCurrentlyVisibleScreenId: getCurrentlyVisibleScreenId,
    getLaunchArgs: getLaunchArgs
  };
},523,[13,65,524,525,64,526,203],"node_modules/react-native-navigation/src/deprecated/platformSpecificDeprecated.android.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright JS Foundation and other contributors <https://js.foundation/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */;
  (function () {
    var undefined;
    var VERSION = '4.17.5';
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = '__lodash_placeholder__';
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 800,
        HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = "\\ud800-\\udfff",
        rsComboMarksRange = "\\u0300-\\u036f",
        reComboHalfMarksRange = "\\ufe20-\\ufe2f",
        rsComboSymbolsRange = "\\u20d0-\\u20ff",
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = "\\u2700-\\u27bf",
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = "\\u2000-\\u206f",
        rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = "\\ufe0e\\ufe0f",
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = "\\ud83c[\\udffb-\\udfff]",
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
        rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = "\\u200d";
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    var reApos = RegExp(rsApos, 'g');
    var reComboMark = RegExp(rsCombo, 'g');
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      '\xc0': 'A',
      '\xc1': 'A',
      '\xc2': 'A',
      '\xc3': 'A',
      '\xc4': 'A',
      '\xc5': 'A',
      '\xe0': 'a',
      '\xe1': 'a',
      '\xe2': 'a',
      '\xe3': 'a',
      '\xe4': 'a',
      '\xe5': 'a',
      '\xc7': 'C',
      '\xe7': 'c',
      '\xd0': 'D',
      '\xf0': 'd',
      '\xc8': 'E',
      '\xc9': 'E',
      '\xca': 'E',
      '\xcb': 'E',
      '\xe8': 'e',
      '\xe9': 'e',
      '\xea': 'e',
      '\xeb': 'e',
      '\xcc': 'I',
      '\xcd': 'I',
      '\xce': 'I',
      '\xcf': 'I',
      '\xec': 'i',
      '\xed': 'i',
      '\xee': 'i',
      '\xef': 'i',
      '\xd1': 'N',
      '\xf1': 'n',
      '\xd2': 'O',
      '\xd3': 'O',
      '\xd4': 'O',
      '\xd5': 'O',
      '\xd6': 'O',
      '\xd8': 'O',
      '\xf2': 'o',
      '\xf3': 'o',
      '\xf4': 'o',
      '\xf5': 'o',
      '\xf6': 'o',
      '\xf8': 'o',
      '\xd9': 'U',
      '\xda': 'U',
      '\xdb': 'U',
      '\xdc': 'U',
      '\xf9': 'u',
      '\xfa': 'u',
      '\xfb': 'u',
      '\xfc': 'u',
      '\xdd': 'Y',
      '\xfd': 'y',
      '\xff': 'y',
      '\xc6': 'Ae',
      '\xe6': 'ae',
      '\xde': 'Th',
      '\xfe': 'th',
      '\xdf': 'ss',
      "\u0100": 'A',
      "\u0102": 'A',
      "\u0104": 'A',
      "\u0101": 'a',
      "\u0103": 'a',
      "\u0105": 'a',
      "\u0106": 'C',
      "\u0108": 'C',
      "\u010A": 'C',
      "\u010C": 'C',
      "\u0107": 'c',
      "\u0109": 'c',
      "\u010B": 'c',
      "\u010D": 'c',
      "\u010E": 'D',
      "\u0110": 'D',
      "\u010F": 'd',
      "\u0111": 'd',
      "\u0112": 'E',
      "\u0114": 'E',
      "\u0116": 'E',
      "\u0118": 'E',
      "\u011A": 'E',
      "\u0113": 'e',
      "\u0115": 'e',
      "\u0117": 'e',
      "\u0119": 'e',
      "\u011B": 'e',
      "\u011C": 'G',
      "\u011E": 'G',
      "\u0120": 'G',
      "\u0122": 'G',
      "\u011D": 'g',
      "\u011F": 'g',
      "\u0121": 'g',
      "\u0123": 'g',
      "\u0124": 'H',
      "\u0126": 'H',
      "\u0125": 'h',
      "\u0127": 'h',
      "\u0128": 'I',
      "\u012A": 'I',
      "\u012C": 'I',
      "\u012E": 'I',
      "\u0130": 'I',
      "\u0129": 'i',
      "\u012B": 'i',
      "\u012D": 'i',
      "\u012F": 'i',
      "\u0131": 'i',
      "\u0134": 'J',
      "\u0135": 'j',
      "\u0136": 'K',
      "\u0137": 'k',
      "\u0138": 'k',
      "\u0139": 'L',
      "\u013B": 'L',
      "\u013D": 'L',
      "\u013F": 'L',
      "\u0141": 'L',
      "\u013A": 'l',
      "\u013C": 'l',
      "\u013E": 'l',
      "\u0140": 'l',
      "\u0142": 'l',
      "\u0143": 'N',
      "\u0145": 'N',
      "\u0147": 'N',
      "\u014A": 'N',
      "\u0144": 'n',
      "\u0146": 'n',
      "\u0148": 'n',
      "\u014B": 'n',
      "\u014C": 'O',
      "\u014E": 'O',
      "\u0150": 'O',
      "\u014D": 'o',
      "\u014F": 'o',
      "\u0151": 'o',
      "\u0154": 'R',
      "\u0156": 'R',
      "\u0158": 'R',
      "\u0155": 'r',
      "\u0157": 'r',
      "\u0159": 'r',
      "\u015A": 'S',
      "\u015C": 'S',
      "\u015E": 'S',
      "\u0160": 'S',
      "\u015B": 's',
      "\u015D": 's',
      "\u015F": 's',
      "\u0161": 's',
      "\u0162": 'T',
      "\u0164": 'T',
      "\u0166": 'T',
      "\u0163": 't',
      "\u0165": 't',
      "\u0167": 't',
      "\u0168": 'U',
      "\u016A": 'U',
      "\u016C": 'U',
      "\u016E": 'U',
      "\u0170": 'U',
      "\u0172": 'U',
      "\u0169": 'u',
      "\u016B": 'u',
      "\u016D": 'u',
      "\u016F": 'u',
      "\u0171": 'u',
      "\u0173": 'u',
      "\u0174": 'W',
      "\u0175": 'w',
      "\u0176": 'Y',
      "\u0177": 'y',
      "\u0178": 'Y',
      "\u0179": 'Z',
      "\u017B": 'Z',
      "\u017D": 'Z',
      "\u017A": 'z',
      "\u017C": 'z',
      "\u017E": 'z',
      "\u0132": 'IJ',
      "\u0133": 'ij',
      "\u0152": 'Oe',
      "\u0153": 'oe',
      "\u0149": "'n",
      "\u017F": 's'
    };
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      "\u2028": 'u2028',
      "\u2029": 'u2029'
    };
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
    var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;
    var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports = (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && (typeof module === "undefined" ? "undefined" : _typeof(module)) == 'object' && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;

    var nodeUtil = function () {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);

        case 1:
          return func.call(thisArg, args[0]);

        case 2:
          return func.call(thisArg, args[0], args[1]);

        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }

      return func.apply(thisArg, args);
    }

    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }

      return accumulator;
    }

    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }

      return true;
    }

    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }

      return result;
    }

    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }

      return false;
    }

    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }

      return result;
    }

    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }

      return array;
    }

    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }

      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }

      return accumulator;
    }

    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[--length];
      }

      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }

      return accumulator;
    }

    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }

      return false;
    }

    var asciiSize = baseProperty('length');

    function asciiToArray(string) {
      return string.split('');
    }

    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function (value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }

      return -1;
    }

    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }

      return -1;
    }

    function baseIsNaN(value) {
      return value !== value;
    }

    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }

    function baseProperty(key) {
      return function (object) {
        return object == null ? undefined : object[key];
      };
    }

    function basePropertyOf(object) {
      return function (key) {
        return object == null ? undefined : object[key];
      };
    }

    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function (value, index, collection) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);

      while (length--) {
        array[length] = array[length].value;
      }

      return array;
    }

    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);

        if (current !== undefined) {
          result = result === undefined ? current : result + current;
        }
      }

      return result;
    }

    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }

      return result;
    }

    function baseToPairs(object, props) {
      return arrayMap(props, function (key) {
        return [key, object[key]];
      });
    }

    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }

    function baseValues(object, props) {
      return arrayMap(props, function (key) {
        return object[key];
      });
    }

    function cacheHas(cache, key) {
      return cache.has(key);
    }

    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }

      return result;
    }

    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }

      return result;
    }

    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);
      map.forEach(function (value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }

    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }

      return result;
    }

    function safeGet(object, key) {
      return key == '__proto__' ? undefined : object[key];
    }

    function setToArray(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = value;
      });
      return result;
    }

    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = [value, value];
      });
      return result;
    }

    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }

      return -1;
    }

    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;

      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }

      return index;
    }

    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }

    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }

    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;

      while (reUnicode.test(string)) {
        ++result;
      }

      return result;
    }

    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    var runInContext = function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;
      var coreJsData = context['__core-js_shared__'];
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var idCounter = 0;

      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();

      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var oldDash = root._;
      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      var Buffer = moduleExports ? context.Buffer : undefined,
          _Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined,
          symIterator = _Symbol ? _Symbol.iterator : undefined,
          symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

      var defineProperty = function () {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();

      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');
      var metaMap = WeakMap && new WeakMap();
      var realNames = {};
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);
      var symbolProto = _Symbol ? _Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }

          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }

        return new LodashWrapper(value);
      }

      var baseCreate = function () {
        function object() {}

        return function (proto) {
          if (!isObject(proto)) {
            return {};
          }

          if (objectCreate) {
            return objectCreate(proto);
          }

          object.prototype = proto;
          var result = new object();
          object.prototype = undefined;
          return result;
        };
      }();

      function baseLodash() {}

      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }

      lodash.templateSettings = {
        'escape': reEscape,
        'evaluate': reEvaluate,
        'interpolate': reInterpolate,
        'variable': '',
        'imports': {
          '_': lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }

        return result;
      }

      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }

        var result = [];

        outer: while (length-- && resIndex < takeCount) {
          index += dir;
          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }

          result[resIndex++] = value;
        }

        return result;
      }

      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      function hashGet(key) {
        var data = this.__data__;

        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }

        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
      }

      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
      }

      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }

        var lastIndex = data.length - 1;

        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }

        --this.size;
        return true;
      }

      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }

      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }

        return this;
      }

      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new (Map || ListCache)(),
          'string': new Hash()
        };
      }

      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
          this.add(values[index]);
        }
      }

      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);

        return this;
      }

      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }

      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);
        this.size = data.size;
        return result;
      }

      function stackGet(key) {
        return this.__data__.get(key);
      }

      function stackHas(key) {
        return this.__data__.has(key);
      }

      function stackSet(key, value) {
        var data = this.__data__;

        if (data instanceof ListCache) {
          var pairs = data.__data__;

          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }

          data = this.__data__ = new MapCache(pairs);
        }

        data.set(key, value);
        this.size = data.size;
        return this;
      }

      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
            result.push(key);
          }
        }

        return result;
      }

      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined;
      }

      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assignValue(object, key, value) {
        var objValue = object[key];

        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assocIndexOf(array, key) {
        var length = array.length;

        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }

        return -1;
      }

      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function (value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined : get(object, paths[index]);
        }

        return result;
      }

      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }

          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }

        return number;
      }

      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }

        if (result !== undefined) {
          return result;
        }

        if (!isObject(value)) {
          return value;
        }

        var isArr = isArray(value);

        if (isArr) {
          result = initCloneArray(value);

          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }

          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);

            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }

            result = initCloneByTag(value, tag, isDeep);
          }
        }

        stack || (stack = new Stack());
        var stacked = stack.get(value);

        if (stacked) {
          return stacked;
        }

        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function (subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
          return result;
        }

        if (isMap(value)) {
          value.forEach(function (subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }

        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? undefined : keysFunc(value);
        arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }

          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      function baseConforms(source) {
        var props = keys(source);
        return function (object) {
          return baseConformsTo(object, source, props);
        };
      }

      function baseConformsTo(object, source, props) {
        var length = props.length;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if (value === undefined && !(key in object) || !predicate(value)) {
            return false;
          }
        }

        return true;
      }

      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return setTimeout(function () {
          func.apply(undefined, args);
        }, wait);
      }

      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }

        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }

        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;

            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }

            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }

        return result;
      }

      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current,
                result = value;
          }
        }

        return result;
      }

      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end === undefined || end > length ? length : toInteger(end);

        if (end < 0) {
          end += length;
        }

        end = start > end ? 0 : toLength(end);

        while (start < end) {
          array[start++] = value;
        }

        return array;
      }

      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];

          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }

        return result;
      }

      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);

      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      function baseFunctions(object, props) {
        return arrayFilter(props, function (key) {
          return isFunction(object[key]);
        });
      }

      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }

        return index && index == length ? object : undefined;
      }

      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }

      function baseGt(value, other) {
        return value > other;
      }

      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];

          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }

          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
        }

        array = arrays[0];
        var index = -1,
            seen = caches[0];

        outer: while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;

            while (--othIndex) {
              var cache = caches[othIndex];

              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }

            if (seen) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function (value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined : apply(func, object, args);
      }

      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }

        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }

        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }

          objIsArr = true;
          objIsObj = false;
        }

        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }

        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }

        if (!isSameTag) {
          return false;
        }

        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (index--) {
          var data = matchData[index];

          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }

        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();

            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }

            if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
              return false;
            }
          }
        }

        return true;
      }

      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }

        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      function baseIteratee(value) {
        if (typeof value == 'function') {
          return value;
        }

        if (value == null) {
          return identity;
        }

        if ((typeof value === "undefined" ? "undefined" : _typeof(value)) == 'object') {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }

        return property(value);
      }

      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }

        var result = [];

        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }

        return result;
      }

      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }

        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }

        return result;
      }

      function baseLt(value, other) {
        return value < other;
      }

      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      function baseMatches(source) {
        var matchData = getMatchData(source);

        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }

        return function (object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }

        return function (object) {
          var objValue = get(object, path);
          return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }

      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }

        baseFor(source, function (srcValue, key) {
          if (isObject(srcValue)) {
            stack || (stack = new Stack());
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }

            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }

        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
        var isCommon = newValue === undefined;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;

          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;

            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }

        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }

        assignMergeValue(object, key, newValue);
      }

      function baseNth(array, n) {
        var length = array.length;

        if (!length) {
          return;
        }

        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }

      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
        var result = baseMap(collection, function (value, key, collection) {
          var criteria = arrayMap(iteratees, function (iteratee) {
            return iteratee(value);
          });
          return {
            'criteria': criteria,
            'index': ++index,
            'value': value
          };
        });
        return baseSortBy(result, function (object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      function basePick(object, paths) {
        return basePickBy(object, paths, function (value, path) {
          return hasIn(object, path);
        });
      }

      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }

        return result;
      }

      function basePropertyDeep(path) {
        return function (object) {
          return baseGet(object, path);
        };
      }

      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }

        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }

        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }

            splice.call(array, fromIndex, 1);
          }
        }

        return array;
      }

      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];

          if (length == lastIndex || index !== previous) {
            var previous = index;

            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }

        return array;
      }

      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }

        return result;
      }

      function baseRepeat(string, n) {
        var result = '';

        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }

        do {
          if (n % 2) {
            result += string;
          }

          n = nativeFloor(n / 2);

          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      function baseSample(collection) {
        return arraySample(values(collection));
      }

      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }

        path = castPath(path, object);
        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;

            if (newValue === undefined) {
              newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
            }
          }

          assignValue(nested, key, newValue);
          nested = nested[key];
        }

        return object;
      }

      var baseSetData = !metaMap ? identity : function (func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function (func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end > length ? length : end;

        if (end < 0) {
          end += length;
        }

        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);

        while (++index < length) {
          result[index] = array[index + start];
        }

        return result;
      }

      function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function (value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }

          return high;
        }

        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);
        var low = 0,
            high = array == null ? 0 : array.length,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }

          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }

        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }

        return result;
      }

      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        return +value;
      }

      function baseToString(value) {
        if (typeof value == 'string') {
          return value;
        }

        if (isArray(value)) {
          return arrayMap(value, baseToString) + '';
        }

        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);

          if (set) {
            return setToArray(set);
          }

          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var seenIndex = seen.length;

            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }

            if (iteratee) {
              seen.push(computed);
            }

            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }

      function baseWrapperValue(value, actions) {
        var result = value;

        if (result instanceof LazyWrapper) {
          result = result.value();
        }

        return arrayReduce(actions, function (result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;

        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }

        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }

        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }

        return result;
      }

      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }

        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      var castRest = baseRest;

      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }

      var clearTimeout = ctxClearTimeout || function (id) {
        return root.clearTimeout(id);
      };

      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }

        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }

      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }

          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }

        return 0;
      }

      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);

          if (result) {
            if (index >= ordersLength) {
              return result;
            }

            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }

        return object.index - other.index;
      }

      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }

        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }

        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }

        return result;
      }

      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }

        var offset = argsIndex;

        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }

        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }

        return result;
      }

      function copyArray(source, array) {
        var index = -1,
            length = source.length;
        array || (array = Array(length));

        while (++index < length) {
          array[index] = source[index];
        }

        return array;
      }

      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }

          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }

        return object;
      }

      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      function createAggregator(setter, initializer) {
        return function (collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }

          object = Object(object);

          while (++index < length) {
            var source = sources[index];

            if (source) {
              assigner(object, source, index, customizer);
            }
          }

          return object;
        });
      }

      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }

          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }

          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }

          return collection;
        };
      }

      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];

            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }

          return object;
        };
      }

      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }

        return wrapper;
      }

      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }

      function createCompounder(callback) {
        return function (string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      function createCtor(Ctor) {
        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return new Ctor();

            case 1:
              return new Ctor(args[0]);

            case 2:
              return new Ctor(args[0], args[1]);

            case 3:
              return new Ctor(args[0], args[1], args[2]);

            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);

            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);

            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }

          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        };
      }

      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }

          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;

          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
          }

          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }

        return wrapper;
      }

      function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
          var iterable = Object(collection);

          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);

            predicate = function predicate(key) {
              return iteratee(iterable[key], key, iterable);
            };
          }

          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
      }

      function createFlow(fromRight) {
        return flatRest(function (funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }

          while (index--) {
            var func = funcs[index];

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }

          index = wrapper ? index : length;

          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }

          return function () {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }

            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }

            return result;
          };
        });
      }

      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }

          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }

          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }

          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }

          length -= holdersCount;

          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
          }

          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
          length = args.length;

          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }

          if (isAry && ary < length) {
            args.length = ary;
          }

          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }

          return fn.apply(thisBinding, args);
        }

        return wrapper;
      }

      function createInverter(setter, toIteratee) {
        return function (object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      function createMathOperation(operator, defaultValue) {
        return function (value, other) {
          var result;

          if (value === undefined && other === undefined) {
            return defaultValue;
          }

          if (value !== undefined) {
            result = value;
          }

          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }

            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }

            result = operator(value, other);
          }

          return result;
        };
      }

      function createOver(arrayFunc) {
        return flatRest(function (iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function (args) {
            var thisArg = this;
            return arrayFunc(iteratees, function (iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);
        var charsLength = chars.length;

        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }

        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
      }

      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = this && this !== root && this instanceof wrapper ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }

          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }

          return apply(fn, isBind ? thisArg : this, args);
        }

        return wrapper;
      }

      function createRange(fromRight) {
        return function (start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }

          start = toFinite(start);

          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }

          step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      function createRelationalOperation(operator) {
        return function (value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }

          return operator(value, other);
        };
      }

      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }

        var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
        var result = wrapFunc.apply(undefined, newData);

        if (isLaziable(func)) {
          setData(result, newData);
        }

        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      function createRound(methodName) {
        var func = Math[methodName];
        return function (number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);

          if (precision) {
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }

          return func(number);
        };
      }

      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
        return new Set(values);
      };

      function createToPairs(keysFunc) {
        return function (object) {
          var tag = getTag(object);

          if (tag == mapTag) {
            return mapToArray(object);
          }

          if (tag == setTag) {
            return setToPairs(object);
          }

          return baseToPairs(object, keysFunc(object));
        };
      }

      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;

        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var length = partials ? partials.length : 0;

        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined;
        }

        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;
          partials = holders = undefined;
        }

        var data = isBindKey ? undefined : getData(func);
        var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

        if (data) {
          mergeData(newData, data);
        }

        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }

        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined, newData);
        }

        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }

        return objValue;
      }

      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }

        return objValue;
      }

      function customOmitClone(value) {
        return isPlainObject(value) ? undefined : value;
      }

      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }

        var stacked = stack.get(array);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var index = -1,
            result = true,
            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
        stack.set(array, other);
        stack.set(other, array);

        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }

          if (compared !== undefined) {
            if (compared) {
              continue;
            }

            result = false;
            break;
          }

          if (seen) {
            if (!arraySome(other, function (othValue, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }

        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }

            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }

            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            return object == other + '';

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }

            var stacked = stack.get(object);

            if (stacked) {
              return stacked == other;
            }

            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }

        }

        return false;
      }

      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }

        var index = objLength;

        while (index--) {
          var key = objProps[index];

          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }

        var stacked = stack.get(object);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;

        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }

          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }

          skipCtor || (skipCtor = key == 'constructor');
        }

        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }

        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
      }

      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      var getData = !metaMap ? noop : function (func) {
        return metaMap.get(func);
      };

      function getFuncName(func) {
        var result = func.name + '',
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;

          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }

        return result;
      }

      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }

      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }

        return result;
      }

      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);

        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }

        return result;
      }

      var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
        if (object == null) {
          return [];
        }

        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function (symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
        var result = [];

        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }

        return result;
      };
      var getTag = baseGetTag;

      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;

              case mapCtorString:
                return mapTag;

              case promiseCtorString:
                return promiseTag;

              case setCtorString:
                return setTag;

              case weakMapCtorString:
                return weakMapTag;
            }
          }

          return result;
        };
      }

      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':
              start += size;
              break;

            case 'dropRight':
              end -= size;
              break;

            case 'take':
              end = nativeMin(end, start + size);
              break;

            case 'takeRight':
              start = nativeMax(start, end - size);
              break;
          }
        }

        return {
          'start': start,
          'end': end
        };
      }

      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);

          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }

          object = object[key];
        }

        if (result || ++index != length) {
          return result;
        }

        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }

      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }

        return result;
      }

      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }

      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;

        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor();

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor();

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      function insertWrapDetails(source, details) {
        var length = details.length;

        if (!length) {
          return source;
        }

        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      function isIndex(value, length) {
        var type = typeof value === "undefined" ? "undefined" : _typeof(value);
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }

      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }

        var type = typeof index === "undefined" ? "undefined" : _typeof(index);

        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
          return eq(object[index], value);
        }

        return false;
      }

      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }

        var type = typeof value === "undefined" ? "undefined" : _typeof(value);

        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
          return true;
        }

        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }

      function isKeyable(value) {
        var type = typeof value === "undefined" ? "undefined" : _typeof(value);
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }

        if (func === other) {
          return true;
        }

        var data = getData(other);
        return !!data && func === data[0];
      }

      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }

      var isMaskable = coreJsData ? isFunction : stubFalse;

      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
        return value === proto;
      }

      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      function matchesStrictComparable(key, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }

          return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
        };
      }

      function memoizeCapped(func) {
        var result = memoize(func, function (key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }

          return key;
        });
        var cache = result.cache;
        return result;
      }

      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

        if (!(isCommon || isCombo)) {
          return data;
        }

        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }

        var value = source[3];

        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }

        value = source[5];

        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }

        value = source[7];

        if (value) {
          data[7] = value;
        }

        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }

        if (data[9] == null) {
          data[9] = source[9];
        }

        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }

      function nativeKeysIn(object) {
        var result = [];

        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }

        return result;
      }

      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }

          index = -1;
          var otherArgs = Array(start + 1);

          while (++index < start) {
            otherArgs[index] = args[index];
          }

          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }

        return array;
      }

      var setData = shortOut(baseSetData);

      var setTimeout = ctxSetTimeout || function (func, wait) {
        return root.setTimeout(func, wait);
      };

      var setToString = shortOut(baseSetToString);

      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + '';
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      function shortOut(func) {
        var count = 0,
            lastCalled = 0;
        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;

          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }

          return func.apply(undefined, arguments);
        };
      }

      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;
        size = size === undefined ? length : size;

        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];
          array[rand] = array[index];
          array[index] = value;
        }

        array.length = size;
        return array;
      }

      var stringToPath = memoizeCapped(function (string) {
        var result = [];

        if (string.charCodeAt(0) === 46) {
            result.push('');
          }

        string.replace(rePropName, function (match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });

      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}

          try {
            return func + '';
          } catch (e) {}
        }

        return '';
      }

      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function (pair) {
          var value = '_.' + pair[0];

          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }

        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__ = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      function chunk(array, size, guard) {
        if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }

        var length = array == null ? 0 : array.length;

        if (!length || size < 1) {
          return [];
        }

        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, index += size);
        }

        return result;
      }

      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (value) {
            result[resIndex++] = value;
          }
        }

        return result;
      }

      function concat() {
        var length = arguments.length;

        if (!length) {
          return [];
        }

        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }

        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function (array, values) {
        var iteratee = last(values);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
      });
      var differenceWith = baseRest(function (array, values) {
        var comparator = last(values);

        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
      });

      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }

      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }

      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }

        return baseFill(array, value, start, end);
      }

      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length - 1;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }

        return result;
      }

      function head(array) {
        return array && array.length ? array[0] : undefined;
      }

      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseIndexOf(array, value, index);
      }

      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      var intersection = baseRest(function (arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function (arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
      });
      var intersectionWith = baseRest(function (arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == 'function' ? comparator : undefined;

        if (comparator) {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
      });

      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
      }

      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }

      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined;
      }

      var pull = baseRest(pullAll);

      function pullAll(array, values) {
        return array && array.length && values && values.length ? basePullAll(array, values) : array;
      }

      function pullAllBy(array, values, iteratee) {
        return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
      }

      function pullAllWith(array, values, comparator) {
        return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
      }

      var pullAt = flatRest(function (array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function (index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result;
      });

      function remove(array, predicate) {
        var result = [];

        if (!(array && array.length)) {
          return result;
        }

        var index = -1,
            indexes = [],
            length = array.length;
        predicate = getIteratee(predicate, 3);

        while (++index < length) {
          var value = array[index];

          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }

        basePullAt(array, indexes);
        return result;
      }

      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }

        return baseSlice(array, start, end);
      }

      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value);

          if (index < length && eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;

          if (eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }

      function sortedUniqBy(array, iteratee) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }

      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }

      var union = baseRest(function (arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });
      var unionWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });

      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }

      function uniqBy(array, iteratee) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return array && array.length ? baseUniq(array, undefined, comparator) : [];
      }

      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }

        var length = 0;
        array = arrayFilter(array, function (group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function (index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }

        var result = unzip(array);

        if (iteratee == null) {
          return result;
        }

        return arrayMap(result, function (group) {
          return apply(iteratee, undefined, group);
        });
      }

      var without = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });
      var xor = baseRest(function (arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });
      var xorWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });
      var zip = baseRest(unzip);

      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      var zipWith = baseRest(function (arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;
        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });

      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      function thru(value, interceptor) {
        return interceptor(value);
      }

      var wrapperAt = flatRest(function (paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function interceptor(object) {
          return baseAt(object, paths);
        };

        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }

        value = value.slice(start, +start + (length ? 1 : 0));

        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });

        return new LodashWrapper(value, this.__chain__).thru(function (array) {
          if (length && !array.length) {
            array.push(undefined);
          }

          return array;
        });
      });

      function wrapperChain() {
        return chain(this);
      }

      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }

        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];
        return {
          'done': done,
          'value': value
        };
      }

      function wrapperToIterator() {
        return this;
      }

      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;

          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }

          var previous = clone;
          parent = parent.__wrapped__;
        }

        previous.__wrapped__ = value;
        return result;
      }

      function wrapperReverse() {
        var value = this.__wrapped__;

        if (value instanceof LazyWrapper) {
          var wrapped = value;

          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }

          wrapped = wrapped.reverse();

          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });

          return new LodashWrapper(wrapped, this.__chain__);
        }

        return this.thru(reverse);
      }

      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      var countBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      var find = createFind(findIndex);
      var findLast = createFind(findLastIndex);

      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      var groupBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;

        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }

        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }

      var invokeMap = baseRest(function (collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });
      var keyBy = createAggregator(function (result, value, key) {
        baseAssignValue(result, key, value);
      });

      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }

        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }

        orders = guard ? undefined : orders;

        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }

        return baseOrderBy(collection, iteratees, orders);
      }

      var partition = createAggregator(function (result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function () {
        return [[], []];
      });

      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      function size(collection) {
        if (collection == null) {
          return 0;
        }

        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }

        var tag = getTag(collection);

        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }

        return baseKeys(collection).length;
      }

      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      var sortBy = baseRest(function (collection, iteratees) {
        if (collection == null) {
          return [];
        }

        var length = iteratees.length;

        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }

        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      var now = ctxNow || function () {
        return root.Date.now();
      };

      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      function before(n, func) {
        var result;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }

          if (n <= 1) {
            func = undefined;
          }

          return result;
        };
      }

      var bind = baseRest(function (func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function (object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(key, bitmask, object, partials, holders);
      });

      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        wait = toNumber(wait) || 0;

        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }

        function timerExpired() {
          var time = now();

          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }

          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined;

          if (trailing && lastArgs) {
            return invokeFunc(time);
          }

          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }

          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }

            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }

          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }

          return result;
        }

        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      var defer = baseRest(function (func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var memoized = function memoized() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }

          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };

        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }

      memoize.Cache = MapCache;

      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return !predicate.call(this);

            case 1:
              return !predicate.call(this, args[0]);

            case 2:
              return !predicate.call(this, args[0], args[1]);

            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }

          return !predicate.apply(this, args);
        };
      }

      function once(func) {
        return before(2, func);
      }

      var overArgs = castRest(function (func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function (args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }

          return apply(func, this, args);
        });
      });
      var partial = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
      });
      var partialRight = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });
      var rearg = flatRest(function (func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
      });

      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start === undefined ? start : toInteger(start);
        return baseRest(func, start);
      }

      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function (args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }

          return apply(func, this, otherArgs);
        });
      }

      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      function unary(func) {
        return ary(func, 1);
      }

      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      function castArray() {
        if (!arguments.length) {
          return [];
        }

        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }

      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }

      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function (value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function () {
        return arguments;
      }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };
      var isArray = Array.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }

      var isBuffer = nativeIsBuffer || stubFalse;
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      function isEmpty(value) {
        if (value == null) {
          return true;
        }

        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }

        var tag = getTag(value);

        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }

        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }

        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }

        return true;
      }

      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
      }

      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
      }

      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      function isObject(value) {
        var type = typeof value === "undefined" ? "undefined" : _typeof(value);
        return value != null && (type == 'object' || type == 'function');
      }

      function isObjectLike(value) {
        return value != null && (typeof value === "undefined" ? "undefined" : _typeof(value)) == 'object';
      }

      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      function isNaN(value) {
        return isNumber(value) && value != +value;
      }

      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }

        return baseIsNative(value);
      }

      function isNull(value) {
        return value === null;
      }

      function isNil(value) {
        return value == null;
      }

      function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
      }

      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }

        var proto = getPrototype(value);

        if (proto === null) {
          return true;
        }

        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }

      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }

      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }

      function isSymbol(value) {
        return (typeof value === "undefined" ? "undefined" : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }

      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      function isUndefined(value) {
        return value === undefined;
      }

      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function (value, other) {
        return value <= other;
      });

      function toArray(value) {
        if (!value) {
          return [];
        }

        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }

        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }

        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }

      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }

        value = toNumber(value);

        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }

        return value === value ? value : 0;
      }

      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }

      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }

        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }

        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }

      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }

      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      var assign = createAssigner(function (object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }

        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function (object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = flatRest(baseAt);

      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      var defaults = baseRest(function (object, sources) {
        object = Object(object);
        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });
      var defaultsDeep = baseRest(function (args) {
        args.push(undefined, customDefaultsMerge);
        return apply(mergeWith, undefined, args);
      });

      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      function forIn(object, iteratee) {
        return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      function forInRight(object, iteratee) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      var invert = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);

      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = flatRest(function (object, paths) {
        var result = {};

        if (object == null) {
          return result;
        }

        var isDeep = false;
        paths = arrayMap(paths, function (path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);

        if (isDeep) {
          result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }

        var length = paths.length;

        while (length--) {
          baseUnset(result, paths[length]);
        }

        return result;
      });

      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      var pick = flatRest(function (object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }

        var props = arrayMap(getAllKeysIn(object), function (prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function (value, path) {
          return predicate(value, path[0]);
        });
      }

      function result(object, path, defaultValue) {
        path = castPath(path, object);
        var index = -1,
            length = path.length;

        if (!length) {
          length = 1;
          object = undefined;
        }

        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];

          if (value === undefined) {
            index = length;
            value = defaultValue;
          }

          object = isFunction(value) ? value.call(object) : value;
        }

        return object;
      }

      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      var toPairs = createToPairs(keys);
      var toPairsIn = createToPairs(keysIn);

      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);
        iteratee = getIteratee(iteratee, 4);

        if (accumulator == null) {
          var Ctor = object && object.constructor;

          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }

        (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }

        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }

        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }

        return baseClamp(toNumber(number), lower, upper);
      }

      function inRange(number, start, end) {
        start = toFinite(start);

        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }

        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }

        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          } else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }

        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);

          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }

        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }

        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
        }

        return baseRandom(lower, upper);
      }

      var camelCase = createCompounder(function (result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }

      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
      }

      var kebabCase = createCompounder(function (result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });
      var lowerCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst('toLowerCase');

      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;

        if (!length || strLength >= length) {
          return string;
        }

        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }

      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }

      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }

      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }

        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        return baseRepeat(toString(string), n);
      }

      function replace() {
        var args = arguments,
            string = toString(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      var snakeCase = createCompounder(function (result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }

        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;

        if (!limit) {
          return [];
        }

        string = toString(string);

        if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);

          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }

        return string.split(separator, limit);
      }

      var startCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      function template(string, options, guard) {
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }

        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);
        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
        var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }

          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }

          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }

          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = options.variable;

        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }

        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
        source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
        var result = attempt(function () {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
        });
        result.source = source;

        if (isError(result)) {
          throw result;
        }

        return result;
      }

      function toLower(value) {
        return toString(value).toLowerCase();
      }

      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      function trim(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join('');
      }

      function trimEnd(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join('');
      }

      function trimStart(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join('');
      }

      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }

        string = toString(string);
        var strLength = string.length;

        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }

        if (length >= strLength) {
          return string;
        }

        var end = length - stringSize(omission);

        if (end < 1) {
          return omission;
        }

        var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

        if (separator === undefined) {
          return result + omission;
        }

        if (strSymbols) {
          end += result.length - end;
        }

        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }

            separator.lastIndex = 0;

            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }

            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);

          if (index > -1) {
            result = result.slice(0, index);
          }
        }

        return result + omission;
      }

      function unescape(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }

      var upperCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });
      var upperFirst = createCaseFirst('toUpperCase');

      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;

        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }

        return string.match(pattern) || [];
      }

      var attempt = baseRest(function (func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });
      var bindAll = flatRest(function (object, methodNames) {
        arrayEach(methodNames, function (key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function (pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function (args) {
          var index = -1;

          while (++index < length) {
            var pair = pairs[index];

            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      function constant(value) {
        return function () {
          return value;
        };
      }

      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }

      var flow = createFlow();
      var flowRight = createFlow(true);

      function identity(value) {
        return value;
      }

      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      var method = baseRest(function (path, args) {
        return function (object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = baseRest(function (object, args) {
        return function (path) {
          return baseInvoke(object, path, args);
        };
      });

      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }

        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);
        arrayEach(methodNames, function (methodName) {
          var func = source[methodName];
          object[methodName] = func;

          if (isFunc) {
            object.prototype[methodName] = function () {
              var chainAll = this.__chain__;

              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);
                actions.push({
                  'func': func,
                  'args': arguments,
                  'thisArg': object
                });
                result.__chain__ = chainAll;
                return result;
              }

              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }

      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }

        return this;
      }

      function noop() {}

      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function (args) {
          return baseNth(args, n);
        });
      }

      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);

      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      function propertyOf(object) {
        return function (path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }

      var range = createRange();
      var rangeRight = createRange(true);

      function stubArray() {
        return [];
      }

      function stubFalse() {
        return false;
      }

      function stubObject() {
        return {};
      }

      function stubString() {
        return '';
      }

      function stubTrue() {
        return true;
      }

      function times(n, iteratee) {
        n = toInteger(n);

        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }

        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;
        var result = baseTimes(length, iteratee);

        while (++index < n) {
          iteratee(index);
        }

        return result;
      }

      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }

        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      var add = createMathOperation(function (augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound('ceil');
      var divide = createMathOperation(function (dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound('floor');

      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
      }

      function maxBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
      }

      function mean(array) {
        return baseMean(array, identity);
      }

      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
      }

      function minBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
      }

      var multiply = createMathOperation(function (multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound('round');
      var subtract = createMathOperation(function (minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }

      function sumBy(array, iteratee) {
        return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
      }

      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), {
        'chain': false
      });
      lodash.VERSION = VERSION;
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(['drop', 'take'], function (methodName, index) {
        LazyWrapper.prototype[methodName] = function (n) {
          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
          var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }

          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function (iteratee) {
          var result = this.clone();

          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });

          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });
      arrayEach(['head', 'last'], function (methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function () {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(['initial', 'tail'], function (methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function () {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function () {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function (predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function (predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }

        return this.map(function (value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function (predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function (start, end) {
        start = toInteger(start);
        var result = this;

        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }

        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }

        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }

        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function (predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function () {
        return this.take(MAX_ARRAY_LENGTH);
      };

      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }

        lodash.prototype[methodName] = function () {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function interceptor(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return isTaker && chainAll ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            isLazy = useLazy = false;
          }

          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);

            result.__actions__.push({
              'func': thru,
              'args': [interceptor],
              'thisArg': undefined
            });

            return new LodashWrapper(result, chainAll);
          }

          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }

          result = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
        };
      });
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function () {
          var args = arguments;

          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }

          return this[chainName](function (value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var lodashFunc = lodash[methodName];

        if (lodashFunc) {
          var key = lodashFunc.name + '',
              names = realNames[key] || (realNames[key] = []);
          names.push({
            'name': methodName,
            'func': lodashFunc
          });
        }
      });
      realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }

      return lodash;
    };

    var _ = runInContext();

    if (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {
      root._ = _;
      define(function () {
        return _;
      });
    } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
  }).call(undefined);
},524,[],"node_modules/lodash/lodash.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var PropRegistry = function () {
    function PropRegistry() {
      _classCallCheck(this, PropRegistry);

      this.registry = {};
    }

    _createClass(PropRegistry, [{
      key: "save",
      value: function save() {
        var screenInstanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var passProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.registry[screenInstanceId] = passProps;
      }
    }, {
      key: "load",
      value: function load() {
        var screenInstanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        return this.registry[screenInstanceId] || {};
      }
    }]);

    return PropRegistry;
  }();

  module.exports = new PropRegistry();
},525,[],"node_modules/react-native-navigation/src/PropRegistry.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var startApp = function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(activityParams) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              savePassProps(activityParams);
              _context.next = 3;
              return NativeReactModule.startApp(activityParams);

            case 3:
              return _context.abrupt("return", _context.sent);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function startApp(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  var dismissTopModal = function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(params) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return NativeReactModule.dismissTopModal(params);

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function dismissTopModal(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  var dismissAllModals = function () {
    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return NativeReactModule.dismissAllModals();

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function dismissAllModals() {
      return _ref3.apply(this, arguments);
    };
  }();

  var isAppLaunched = function () {
    var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return NativeReactModule.isAppLaunched();

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    return function isAppLaunched() {
      return _ref4.apply(this, arguments);
    };
  }();

  var isRootLaunched = function () {
    var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return NativeReactModule.isRootLaunched();

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    return function isRootLaunched() {
      return _ref5.apply(this, arguments);
    };
  }();

  var getCurrentlyVisibleScreenId = function () {
    var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return NativeReactModule.getCurrentlyVisibleScreenId();

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    return function getCurrentlyVisibleScreenId() {
      return _ref6.apply(this, arguments);
    };
  }();

  var getLaunchArgs = function () {
    var _ref7 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7() {
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return NativeReactModule.getLaunchArgs();

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    return function getLaunchArgs() {
      return _ref7.apply(this, arguments);
    };
  }();

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _lodash = _require(_dependencyMap[2], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _PropRegistry = _require(_dependencyMap[3], "./PropRegistry");

  var _PropRegistry2 = _interopRequireDefault(_PropRegistry);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

  var NativeReactModule = _reactNative.NativeModules.NavigationReactModule;

  function push(screenParams) {
    savePassProps(screenParams);
    return NativeReactModule.push(screenParams);
  }

  function pop(screenParams) {
    NativeReactModule.pop(screenParams);
  }

  function popToRoot(screenParams) {
    NativeReactModule.popToRoot(screenParams);
  }

  function newStack(screenParams) {
    savePassProps(screenParams);
    NativeReactModule.newStack(screenParams);
  }

  function toggleTopBarVisible(screenInstanceID, visible, animated) {
    NativeReactModule.setTopBarVisible(screenInstanceID, visible, animated);
  }

  function toggleBottomTabsVisible(visible, animated) {
    NativeReactModule.setBottomTabsVisible(visible, animated);
  }

  function setScreenTitleBarTitle(screenInstanceID, title) {
    NativeReactModule.setScreenTitleBarTitle(screenInstanceID, title);
  }

  function setScreenTitleBarSubtitle(screenInstanceID, subtitle) {
    NativeReactModule.setScreenTitleBarSubtitle(screenInstanceID, subtitle);
  }

  function setScreenButtons(screenInstanceID, navigatorEventID, rightButtons, leftButton, fab) {
    NativeReactModule.setScreenButtons(screenInstanceID, navigatorEventID, rightButtons, leftButton, fab);
  }

  function showModal(screenParams) {
    savePassProps(screenParams);
    NativeReactModule.showModal(screenParams);
  }

  function showLightBox(params) {
    savePassProps(params);
    NativeReactModule.showLightBox(params);
  }

  function dismissLightBox() {
    NativeReactModule.dismissLightBox();
  }

  function showInAppNotification(params) {
    savePassProps(params);
    NativeReactModule.showSlidingOverlay(params);
  }

  function dismissInAppNotification(params) {
    NativeReactModule.hideSlidingOverlay(params);
  }

  function savePassProps(params) {
    if (params.navigationParams && params.passProps) {
      _PropRegistry2.default.save(params.navigationParams.screenInstanceID, params.passProps);
    }

    if (params.screen && params.screen.passProps) {
      _PropRegistry2.default.save(params.screen.navigationParams.screenInstanceID, params.screen.passProps);
    }

    if (_lodash2.default.get(params, 'screen.screens')) {
      _lodash2.default.forEach(params.screen.screens, savePassProps);
    }

    if (_lodash2.default.get(params, 'screen.topTabs')) {
      _lodash2.default.forEach(params.screen.topTabs, function (tab) {
        return savePassProps(tab);
      });
    }

    if (params.topTabs) {
      _lodash2.default.forEach(params.topTabs, function (tab) {
        return savePassProps(tab);
      });
    }

    if (params.tabs) {
      _lodash2.default.forEach(params.tabs, function (tab) {
        if (!tab.passProps) {
          tab.passProps = params.passProps;
        }

        savePassProps(tab);

        if (tab.screens) {
          _lodash2.default.forEach(tab.screens, savePassProps);
        }
      });
    }

    if (params.sideMenu && params.sideMenu.left) {
      _PropRegistry2.default.save(params.sideMenu.left.navigationParams.screenInstanceID, params.sideMenu.left.passProps);
    }

    if (params.sideMenu && params.sideMenu.right) {
      _PropRegistry2.default.save(params.sideMenu.right.navigationParams.screenInstanceID, params.sideMenu.right.passProps);
    }
  }

  function toggleSideMenuVisible(animated, side) {
    NativeReactModule.toggleSideMenuVisible(animated, side);
  }

  function setSideMenuVisible(animated, visible, side) {
    NativeReactModule.setSideMenuVisible(animated, visible, side);
  }

  function setSideMenuEnabled(enabled, side) {
    NativeReactModule.setSideMenuEnabled(enabled, side);
  }

  function selectTopTabByTabIndex(screenInstanceId, index) {
    NativeReactModule.selectTopTabByTabIndex(screenInstanceId, index);
  }

  function selectTopTabByScreen(screenInstanceId) {
    NativeReactModule.selectTopTabByScreen(screenInstanceId);
  }

  function selectBottomTabByNavigatorId(navigatorId) {
    NativeReactModule.selectBottomTabByNavigatorId(navigatorId);
  }

  function selectBottomTabByTabIndex(index) {
    NativeReactModule.selectBottomTabByTabIndex(index);
  }

  function setBottomTabBadgeByIndex(index, badge) {
    NativeReactModule.setBottomTabBadgeByIndex(index, badge);
  }

  function setBottomTabBadgeByNavigatorId(navigatorId, badge) {
    NativeReactModule.setBottomTabBadgeByNavigatorId(navigatorId, badge);
  }

  function setBottomTabButtonByIndex(index, params) {
    NativeReactModule.setBottomTabButtonByIndex(index, params);
  }

  function setBottomTabButtonByNavigatorId(navigatorId, params) {
    NativeReactModule.setBottomTabButtonByNavigatorId(navigatorId, params);
  }

  function showSnackbar(params) {
    NativeReactModule.showSnackbar(params);
  }

  function dismissSnackbar() {
    NativeReactModule.dismissSnackbar();
  }

  function showContextualMenu(screenInstanceID, params, onButtonPressed) {
    NativeReactModule.showContextualMenu(screenInstanceID, params, onButtonPressed);
  }

  function dismissContextualMenu(screenInstanceID) {
    NativeReactModule.dismissContextualMenu(screenInstanceID);
  }

  function setScreenStyle(screenInstanceId, style) {
    NativeReactModule.setScreenStyle(screenInstanceId, style);
  }

  module.exports = {
    startApp: startApp,
    push: push,
    pop: pop,
    popToRoot: popToRoot,
    newStack: newStack,
    toggleTopBarVisible: toggleTopBarVisible,
    toggleBottomTabsVisible: toggleBottomTabsVisible,
    setScreenTitleBarTitle: setScreenTitleBarTitle,
    setScreenTitleBarSubtitle: setScreenTitleBarSubtitle,
    setScreenButtons: setScreenButtons,
    showModal: showModal,
    dismissTopModal: dismissTopModal,
    dismissAllModals: dismissAllModals,
    showLightBox: showLightBox,
    dismissLightBox: dismissLightBox,
    selectTopTabByScreen: selectTopTabByScreen,
    selectTopTabByTabIndex: selectTopTabByTabIndex,
    showInAppNotification: showInAppNotification,
    dismissInAppNotification: dismissInAppNotification,
    toggleSideMenuVisible: toggleSideMenuVisible,
    setSideMenuVisible: setSideMenuVisible,
    setSideMenuEnabled: setSideMenuEnabled,
    selectBottomTabByNavigatorId: selectBottomTabByNavigatorId,
    selectBottomTabByTabIndex: selectBottomTabByTabIndex,
    setBottomTabBadgeByNavigatorId: setBottomTabBadgeByNavigatorId,
    setBottomTabBadgeByIndex: setBottomTabBadgeByIndex,
    setBottomTabButtonByNavigatorId: setBottomTabButtonByNavigatorId,
    setBottomTabButtonByIndex: setBottomTabButtonByIndex,
    showSnackbar: showSnackbar,
    dismissSnackbar: dismissSnackbar,
    showContextualMenu: showContextualMenu,
    dismissContextualMenu: dismissContextualMenu,
    setScreenStyle: setScreenStyle,
    isAppLaunched: isAppLaunched,
    isRootLaunched: isRootLaunched,
    getCurrentlyVisibleScreenId: getCurrentlyVisibleScreenId,
    getLaunchArgs: getLaunchArgs
  };
},526,[13,65,524,525],"node_modules/react-native-navigation/src/platformSpecific.android.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Navigator = exports.Screen = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _platformSpecificDeprecated = _require(_dependencyMap[2], "./deprecated/platformSpecificDeprecated");

  var _platformSpecificDeprecated2 = _interopRequireDefault(_platformSpecificDeprecated);

  var _Navigation = _require(_dependencyMap[3], "./Navigation");

  var _Navigation2 = _interopRequireDefault(_Navigation);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var NavigationSpecific = {
    push: _platformSpecificDeprecated2.default.navigatorPush,
    pop: _platformSpecificDeprecated2.default.navigatorPop,
    popToRoot: _platformSpecificDeprecated2.default.navigatorPopToRoot,
    resetTo: _platformSpecificDeprecated2.default.navigatorResetTo
  };

  var Navigator = function () {
    function Navigator(navigatorID, navigatorEventID, screenInstanceID) {
      _classCallCheck(this, Navigator);

      this.navigatorID = navigatorID;
      this.screenInstanceID = screenInstanceID;
      this.navigatorEventID = navigatorEventID;
      this.navigatorEventHandler = null;
      this.navigatorEventHandlers = [];
      this.navigatorEventSubscription = null;
    }

    _createClass(Navigator, [{
      key: "push",
      value: function push() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return NavigationSpecific.push(this, params);
      }
    }, {
      key: "pop",
      value: function pop() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return NavigationSpecific.pop(this, params);
      }
    }, {
      key: "popToRoot",
      value: function popToRoot() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return NavigationSpecific.popToRoot(this, params);
      }
    }, {
      key: "resetTo",
      value: function resetTo() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return NavigationSpecific.resetTo(this, params);
      }
    }, {
      key: "showModal",
      value: function showModal() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _Navigation2.default.showModal(params);
      }
    }, {
      key: "showLightBox",
      value: function showLightBox() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _Navigation2.default.showLightBox(params);
      }
    }, {
      key: "dismissModal",
      value: function dismissModal() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _Navigation2.default.dismissModal(params);
      }
    }, {
      key: "dismissAllModals",
      value: function dismissAllModals() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _Navigation2.default.dismissAllModals(params);
      }
    }, {
      key: "showLightBox",
      value: function showLightBox() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _Navigation2.default.showLightBox(params);
      }
    }, {
      key: "dismissLightBox",
      value: function dismissLightBox() {
        return _Navigation2.default.dismissLightBox();
      }
    }, {
      key: "showInAppNotification",
      value: function showInAppNotification() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _Navigation2.default.showInAppNotification(params);
      }
    }, {
      key: "dismissInAppNotification",
      value: function dismissInAppNotification() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _Navigation2.default.dismissInAppNotification(params);
      }
    }, {
      key: "setButtons",
      value: function setButtons() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorSetButtons(this, this.navigatorEventID, params);
      }
    }, {
      key: "setTitle",
      value: function setTitle() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorSetTitle(this, params);
      }
    }, {
      key: "setSubTitle",
      value: function setSubTitle() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorSetSubtitle(this, params);
      }
    }, {
      key: "setTitleImage",
      value: function setTitleImage() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorSetTitleImage(this, params);
      }
    }, {
      key: "setStyle",
      value: function setStyle() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorSetStyle(this, params);
      }
    }, {
      key: "toggleDrawer",
      value: function toggleDrawer() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorToggleDrawer(this, params);
      }
    }, {
      key: "setDrawerEnabled",
      value: function setDrawerEnabled() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorSetDrawerEnabled(this, params);
      }
    }, {
      key: "toggleTabs",
      value: function toggleTabs() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorToggleTabs(this, params);
      }
    }, {
      key: "toggleNavBar",
      value: function toggleNavBar() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorToggleNavBar(this, params);
      }
    }, {
      key: "setTabBadge",
      value: function setTabBadge() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorSetTabBadge(this, params);
      }
    }, {
      key: "setTabButton",
      value: function setTabButton() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorSetTabButton(this, params);
      }
    }, {
      key: "switchToTab",
      value: function switchToTab() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorSwitchToTab(this, params);
      }
    }, {
      key: "switchToTopTab",
      value: function switchToTopTab() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.navigatorSwitchToTopTab(this, params);
      }
    }, {
      key: "showSnackbar",
      value: function showSnackbar() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _platformSpecificDeprecated2.default.showSnackbar(params);
      }
    }, {
      key: "dismissSnackbar",
      value: function dismissSnackbar() {
        return _platformSpecificDeprecated2.default.dismissSnackbar();
      }
    }, {
      key: "showContextualMenu",
      value: function showContextualMenu(params, onButtonPressed) {
        return _platformSpecificDeprecated2.default.showContextualMenu(this, params, onButtonPressed);
      }
    }, {
      key: "dismissContextualMenu",
      value: function dismissContextualMenu() {
        return _platformSpecificDeprecated2.default.dismissContextualMenu();
      }
    }, {
      key: "setOnNavigatorEvent",
      value: function setOnNavigatorEvent(callback) {
        if (this.navigatorEventHandlers.length > 0) {
          throw new Error('setOnNavigatorEvent can not be used after addOnNavigatorEvent has been called');
        }

        this.navigatorEventHandler = callback;

        this._registerNavigatorEvent();
      }
    }, {
      key: "addOnNavigatorEvent",
      value: function addOnNavigatorEvent(callback) {
        var _this = this;

        if (this.navigatorEventHandler) {
          throw new Error('addOnNavigatorEvent can not be used after setOnNavigatorEvent has been called');
        }

        if (this.navigatorEventHandlers.indexOf(callback) === -1) {
          this.navigatorEventHandlers.push(callback);
        }

        this._registerNavigatorEvent();

        return function () {
          return _this._removeOnNavigatorEvent(callback);
        };
      }
    }, {
      key: "_registerNavigatorEvent",
      value: function _registerNavigatorEvent() {
        var _this2 = this;

        if (!this.navigatorEventSubscription) {
          var Emitter = _reactNative.Platform.OS === 'android' ? _reactNative.DeviceEventEmitter : _reactNative.NativeAppEventEmitter;
          this.navigatorEventSubscription = Emitter.addListener(this.navigatorEventID, function (event) {
            return _this2.onNavigatorEvent(event);
          });

          _Navigation2.default.setEventHandler(this.navigatorEventID, function (event) {
            return _this2.onNavigatorEvent(event);
          });
        }
      }
    }, {
      key: "_removeOnNavigatorEvent",
      value: function _removeOnNavigatorEvent(callback) {
        var index = this.navigatorEventHandlers.indexOf(callback);

        if (index !== -1) {
          this.navigatorEventHandlers.splice(index, 1);
        }
      }
    }, {
      key: "onNavigatorEvent",
      value: function onNavigatorEvent(event) {
        if (this.navigatorEventHandler) {
          this.navigatorEventHandler(event);
        }

        this.navigatorEventHandlers.forEach(function (handler) {
          return handler(event);
        });
      }
    }, {
      key: "handleDeepLink",
      value: function handleDeepLink() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _Navigation2.default.handleDeepLink(params);
      }
    }, {
      key: "cleanup",
      value: function cleanup() {
        if (this.navigatorEventSubscription) {
          this.navigatorEventSubscription.remove();
          this.navigatorEventHandlers = [];

          _Navigation2.default.clearEventHandler(this.navigatorEventID);
        }
      }
    }, {
      key: "screenIsCurrentlyVisible",
      value: function () {
        var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var res;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _Navigation2.default.getCurrentlyVisibleScreenId();

                case 2:
                  res = _context.sent;

                  if (res) {
                    _context.next = 5;
                    break;
                  }

                  return _context.abrupt("return", false);

                case 5:
                  return _context.abrupt("return", res.screenId === this.screenInstanceID);

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function screenIsCurrentlyVisible() {
          return _ref.apply(this, arguments);
        }

        return screenIsCurrentlyVisible;
      }()
    }]);

    return Navigator;
  }();

  var Screen = function (_Component) {
    _inherits(Screen, _Component);

    function Screen(props) {
      _classCallCheck(this, Screen);

      var _this3 = _possibleConstructorReturn(this, (Screen.__proto__ || Object.getPrototypeOf(Screen)).call(this, props));

      if (props.navigatorID) {
        _this3.navigator = new Navigator(props.navigatorID, props.navigatorEventID, props.screenInstanceID);
      }

      return _this3;
    }

    _createClass(Screen, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.navigator) {
          this.navigator.cleanup();
          this.navigator = undefined;
        }
      }
    }]);

    return Screen;
  }(_react.Component);

  Screen.navigatorStyle = {};
  Screen.navigatorButtons = {};
  exports.Screen = Screen;
  exports.Navigator = Navigator;
},527,[13,65,523,64],"node_modules/react-native-navigation/src/Screen.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-navigation/src/views/sharedElementTransition.android.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SharedElementTransition: {
      displayName: "SharedElementTransition"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-navigation/src/views/sharedElementTransition.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var SharedElementTransitionModule = (0, _reactNative.requireNativeComponent)('SharedElementTransition', null);

  var SharedElementTransition = _wrapComponent("SharedElementTransition")(function (_Component) {
    _inherits(SharedElementTransition, _Component);

    function SharedElementTransition() {
      _classCallCheck(this, SharedElementTransition);

      return _possibleConstructorReturn(this, (SharedElementTransition.__proto__ || Object.getPrototypeOf(SharedElementTransition)).apply(this, arguments));
    }

    _createClass(SharedElementTransition, [{
      key: "render",
      value: function render() {
        return _react3.default.createElement(SharedElementTransitionModule, _extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 10
          }
        }));
      }
    }]);

    return SharedElementTransition;
  }(_react2.Component));

  exports.default = SharedElementTransition;
},528,[13,219,65],"node_modules/react-native-navigation/src/views/sharedElementTransition.android.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[0], "react-native");

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var NativeEventsReceiver = function () {
    function NativeEventsReceiver() {
      _classCallCheck(this, NativeEventsReceiver);

      this.emitter = _reactNative.Platform.OS === 'android' ? _reactNative.DeviceEventEmitter : _reactNative.NativeAppEventEmitter;
    }

    _createClass(NativeEventsReceiver, [{
      key: "appLaunched",
      value: function appLaunched(callback) {
        this.emitter.addListener('RNN.appLaunched', callback);
      }
    }]);

    return NativeEventsReceiver;
  }();

  exports.default = NativeEventsReceiver;
},529,[65],"node_modules/react-native-navigation/src/NativeEventsReceiver.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[0], "react-native");

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ScreenVisibilityListener = function () {
    function ScreenVisibilityListener(listeners) {
      _classCallCheck(this, ScreenVisibilityListener);

      this.emitter = _reactNative.Platform.OS === 'android' ? _reactNative.DeviceEventEmitter : _reactNative.NativeAppEventEmitter;
      this.listeners = listeners;
    }

    _createClass(ScreenVisibilityListener, [{
      key: "register",
      value: function register() {
        var _listeners = this.listeners,
            willAppear = _listeners.willAppear,
            didAppear = _listeners.didAppear,
            willDisappear = _listeners.willDisappear,
            didDisappear = _listeners.didDisappear;
        this.willAppearSubscription = willAppear && this.emitter.addListener('willAppear', willAppear);
        this.didAppearSubscription = didAppear && this.emitter.addListener('didAppear', didAppear);
        this.willDisappearSubscription = willDisappear && this.emitter.addListener('willDisappear', willDisappear);
        this.didDisappearSubscription = didDisappear && this.emitter.addListener('didDisappear', didDisappear);
      }
    }, {
      key: "unregister",
      value: function unregister() {
        if (this.willAppearSubscription) {
          this.willAppearSubscription.remove();
        }

        if (this.didAppearSubscription) {
          this.didAppearSubscription.remove();
        }

        if (this.willDisappearSubscription) {
          this.willDisappearSubscription.remove();
        }

        if (this.didDisappearSubscription) {
          this.didDisappearSubscription.remove();
        }
      }
    }]);

    return ScreenVisibilityListener;
  }();

  exports.default = ScreenVisibilityListener;
},530,[65],"node_modules/react-native-navigation/src/ScreenVisibilityListener.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _redux = _require(_dependencyMap[0], "redux");

    var _reduxThunk = _require(_dependencyMap[1], "redux-thunk");

    var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

    var _reduxLogger = _require(_dependencyMap[2], "redux-logger");

    var _reduxLogger2 = _interopRequireDefault(_reduxLogger);

    var _reducer = _require(_dependencyMap[3], "./state/reducer");

    var _reducer2 = _interopRequireDefault(_reducer);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var initialState = {};

    var makeStore = function makeStore() {
        var store = (0, _redux.createStore)(_reducer2.default, initialState, (0, _redux.applyMiddleware)(_reduxLogger2.default, _reduxThunk2.default));
        return store;
    };

    exports.default = makeStore;
},531,[37,532,533,534],"src/store.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  exports.__esModule = true;

  function createThunkMiddleware(extraArgument) {
    return function (_ref) {
      var dispatch = _ref.dispatch,
          getState = _ref.getState;
      return function (next) {
        return function (action) {
          if (typeof action === 'function') {
            return action(dispatch, getState, extraArgument);
          }

          return next(action);
        };
      };
    };
  }

  var thunk = createThunkMiddleware();
  thunk.withExtraArgument = createThunkMiddleware;
  exports['default'] = thunk;
},532,[],"node_modules/redux-thunk/lib/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  !function (e, t) {
    "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t(e.reduxLogger = e.reduxLogger || {});
  }(undefined, function (e) {
    "use strict";

    function t(e, t) {
      e.super_ = t, e.prototype = Object.create(t.prototype, {
        constructor: {
          value: e,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      });
    }

    function r(e, t) {
      Object.defineProperty(this, "kind", {
        value: e,
        enumerable: !0
      }), t && t.length && Object.defineProperty(this, "path", {
        value: t,
        enumerable: !0
      });
    }

    function n(e, t, r) {
      n.super_.call(this, "E", e), Object.defineProperty(this, "lhs", {
        value: t,
        enumerable: !0
      }), Object.defineProperty(this, "rhs", {
        value: r,
        enumerable: !0
      });
    }

    function o(e, t) {
      o.super_.call(this, "N", e), Object.defineProperty(this, "rhs", {
        value: t,
        enumerable: !0
      });
    }

    function i(e, t) {
      i.super_.call(this, "D", e), Object.defineProperty(this, "lhs", {
        value: t,
        enumerable: !0
      });
    }

    function a(e, t, r) {
      a.super_.call(this, "A", e), Object.defineProperty(this, "index", {
        value: t,
        enumerable: !0
      }), Object.defineProperty(this, "item", {
        value: r,
        enumerable: !0
      });
    }

    function f(e, t, r) {
      var n = e.slice((r || t) + 1 || e.length);
      return e.length = t < 0 ? e.length + t : t, e.push.apply(e, n), e;
    }

    function u(e) {
      var t = "undefined" == typeof e ? "undefined" : N(e);
      return "object" !== t ? t : e === Math ? "math" : null === e ? "null" : Array.isArray(e) ? "array" : "[object Date]" === Object.prototype.toString.call(e) ? "date" : "function" == typeof e.toString && /^\/.*\//.test(e.toString()) ? "regexp" : "object";
    }

    function l(e, t, r, c, s, d, p) {
      s = s || [], p = p || [];
      var g = s.slice(0);

      if ("undefined" != typeof d) {
        if (c) {
          if ("function" == typeof c && c(g, d)) return;

          if ("object" === ("undefined" == typeof c ? "undefined" : N(c))) {
            if (c.prefilter && c.prefilter(g, d)) return;

            if (c.normalize) {
              var h = c.normalize(g, d, e, t);
              h && (e = h[0], t = h[1]);
            }
          }
        }

        g.push(d);
      }

      "regexp" === u(e) && "regexp" === u(t) && (e = e.toString(), t = t.toString());
      var y = "undefined" == typeof e ? "undefined" : N(e),
          v = "undefined" == typeof t ? "undefined" : N(t),
          b = "undefined" !== y || p && p[p.length - 1].lhs && p[p.length - 1].lhs.hasOwnProperty(d),
          m = "undefined" !== v || p && p[p.length - 1].rhs && p[p.length - 1].rhs.hasOwnProperty(d);
      if (!b && m) r(new o(g, t));else if (!m && b) r(new i(g, e));else if (u(e) !== u(t)) r(new n(g, e, t));else if ("date" === u(e) && e - t !== 0) r(new n(g, e, t));else if ("object" === y && null !== e && null !== t) {
        if (p.filter(function (t) {
          return t.lhs === e;
        }).length) e !== t && r(new n(g, e, t));else {
          if (p.push({
            lhs: e,
            rhs: t
          }), Array.isArray(e)) {
            var w;
            e.length;

            for (w = 0; w < e.length; w++) {
              w >= t.length ? r(new a(g, w, new i(void 0, e[w]))) : l(e[w], t[w], r, c, g, w, p);
            }

            for (; w < t.length;) {
              r(new a(g, w, new o(void 0, t[w++])));
            }
          } else {
            var x = Object.keys(e),
                S = Object.keys(t);
            x.forEach(function (n, o) {
              var i = S.indexOf(n);
              i >= 0 ? (l(e[n], t[n], r, c, g, n, p), S = f(S, i)) : l(e[n], void 0, r, c, g, n, p);
            }), S.forEach(function (e) {
              l(void 0, t[e], r, c, g, e, p);
            });
          }

          p.length = p.length - 1;
        }
      } else e !== t && ("number" === y && isNaN(e) && isNaN(t) || r(new n(g, e, t)));
    }

    function c(e, t, r, n) {
      return n = n || [], l(e, t, function (e) {
        e && n.push(e);
      }, r), n.length ? n : void 0;
    }

    function s(e, t, r) {
      if (r.path && r.path.length) {
        var n,
            o = e[t],
            i = r.path.length - 1;

        for (n = 0; n < i; n++) {
          o = o[r.path[n]];
        }

        switch (r.kind) {
          case "A":
            s(o[r.path[n]], r.index, r.item);
            break;

          case "D":
            delete o[r.path[n]];
            break;

          case "E":
          case "N":
            o[r.path[n]] = r.rhs;
        }
      } else switch (r.kind) {
        case "A":
          s(e[t], r.index, r.item);
          break;

        case "D":
          e = f(e, t);
          break;

        case "E":
        case "N":
          e[t] = r.rhs;
      }

      return e;
    }

    function d(e, t, r) {
      if (e && t && r && r.kind) {
        for (var n = e, o = -1, i = r.path ? r.path.length - 1 : 0; ++o < i;) {
          "undefined" == typeof n[r.path[o]] && (n[r.path[o]] = "number" == typeof r.path[o] ? [] : {}), n = n[r.path[o]];
        }

        switch (r.kind) {
          case "A":
            s(r.path ? n[r.path[o]] : n, r.index, r.item);
            break;

          case "D":
            delete n[r.path[o]];
            break;

          case "E":
          case "N":
            n[r.path[o]] = r.rhs;
        }
      }
    }

    function p(e, t, r) {
      if (r.path && r.path.length) {
        var n,
            o = e[t],
            i = r.path.length - 1;

        for (n = 0; n < i; n++) {
          o = o[r.path[n]];
        }

        switch (r.kind) {
          case "A":
            p(o[r.path[n]], r.index, r.item);
            break;

          case "D":
            o[r.path[n]] = r.lhs;
            break;

          case "E":
            o[r.path[n]] = r.lhs;
            break;

          case "N":
            delete o[r.path[n]];
        }
      } else switch (r.kind) {
        case "A":
          p(e[t], r.index, r.item);
          break;

        case "D":
          e[t] = r.lhs;
          break;

        case "E":
          e[t] = r.lhs;
          break;

        case "N":
          e = f(e, t);
      }

      return e;
    }

    function g(e, t, r) {
      if (e && t && r && r.kind) {
        var n,
            o,
            i = e;

        for (o = r.path.length - 1, n = 0; n < o; n++) {
          "undefined" == typeof i[r.path[n]] && (i[r.path[n]] = {}), i = i[r.path[n]];
        }

        switch (r.kind) {
          case "A":
            p(i[r.path[n]], r.index, r.item);
            break;

          case "D":
            i[r.path[n]] = r.lhs;
            break;

          case "E":
            i[r.path[n]] = r.lhs;
            break;

          case "N":
            delete i[r.path[n]];
        }
      }
    }

    function h(e, t, r) {
      if (e && t) {
        var n = function n(_n) {
          r && !r(e, t, _n) || d(e, t, _n);
        };

        l(e, t, n);
      }
    }

    function y(e) {
      return "color: " + F[e].color + "; font-weight: bold";
    }

    function v(e) {
      var t = e.kind,
          r = e.path,
          n = e.lhs,
          o = e.rhs,
          i = e.index,
          a = e.item;

      switch (t) {
        case "E":
          return [r.join("."), n, "→", o];

        case "N":
          return [r.join("."), o];

        case "D":
          return [r.join(".")];

        case "A":
          return [r.join(".") + "[" + i + "]", a];

        default:
          return [];
      }
    }

    function b(e, t, r, n) {
      var o = c(e, t);

      try {
        n ? r.groupCollapsed("diff") : r.group("diff");
      } catch (e) {
        r.log("diff");
      }

      o ? o.forEach(function (e) {
        var t = e.kind,
            n = v(e);
        r.log.apply(r, ["%c " + F[t].text, y(t)].concat(P(n)));
      }) : r.log("—— no diff ——");

      try {
        r.groupEnd();
      } catch (e) {
        r.log("—— diff end —— ");
      }
    }

    function m(e, t, r, n) {
      switch ("undefined" == typeof e ? "undefined" : N(e)) {
        case "object":
          return "function" == typeof e[n] ? e[n].apply(e, P(r)) : e[n];

        case "function":
          return e(t);

        default:
          return e;
      }
    }

    function w(e) {
      var t = e.timestamp,
          r = e.duration;
      return function (e, n, o) {
        var i = ["action"];
        return i.push("%c" + String(e.type)), t && i.push("%c@ " + n), r && i.push("%c(in " + o.toFixed(2) + " ms)"), i.join(" ");
      };
    }

    function x(e, t) {
      var r = t.logger,
          n = t.actionTransformer,
          o = t.titleFormatter,
          i = void 0 === o ? w(t) : o,
          a = t.collapsed,
          f = t.colors,
          u = t.level,
          l = t.diff,
          c = "undefined" == typeof t.titleFormatter;
      e.forEach(function (o, s) {
        var d = o.started,
            p = o.startedTime,
            g = o.action,
            h = o.prevState,
            y = o.error,
            v = o.took,
            w = o.nextState,
            x = e[s + 1];
        x && (w = x.prevState, v = x.started - d);
        var S = n(g),
            k = "function" == typeof a ? a(function () {
          return w;
        }, g, o) : a,
            j = D(p),
            E = f.title ? "color: " + f.title(S) + ";" : "",
            A = ["color: gray; font-weight: lighter;"];
        A.push(E), t.timestamp && A.push("color: gray; font-weight: lighter;"), t.duration && A.push("color: gray; font-weight: lighter;");
        var O = i(S, j, v);

        try {
          k ? f.title && c ? r.groupCollapsed.apply(r, ["%c " + O].concat(A)) : r.groupCollapsed(O) : f.title && c ? r.group.apply(r, ["%c " + O].concat(A)) : r.group(O);
        } catch (e) {
          r.log(O);
        }

        var N = m(u, S, [h], "prevState"),
            P = m(u, S, [S], "action"),
            C = m(u, S, [y, h], "error"),
            F = m(u, S, [w], "nextState");
        if (N) if (f.prevState) {
          var L = "color: " + f.prevState(h) + "; font-weight: bold";
          r[N]("%c prev state", L, h);
        } else r[N]("prev state", h);
        if (P) if (f.action) {
          var T = "color: " + f.action(S) + "; font-weight: bold";
          r[P]("%c action    ", T, S);
        } else r[P]("action    ", S);
        if (y && C) if (f.error) {
          var M = "color: " + f.error(y, h) + "; font-weight: bold;";
          r[C]("%c error     ", M, y);
        } else r[C]("error     ", y);
        if (F) if (f.nextState) {
          var _ = "color: " + f.nextState(w) + "; font-weight: bold";

          r[F]("%c next state", _, w);
        } else r[F]("next state", w);
        l && b(h, w, r, k);

        try {
          r.groupEnd();
        } catch (e) {
          r.log("—— log end ——");
        }
      });
    }

    function S() {
      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          t = _extends({}, L, e),
          r = t.logger,
          n = t.stateTransformer,
          o = t.errorTransformer,
          i = t.predicate,
          a = t.logErrors,
          f = t.diffPredicate;

      if ("undefined" == typeof r) return function () {
        return function (e) {
          return function (t) {
            return e(t);
          };
        };
      };
      if (e.getState && e.dispatch) return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"), function () {
        return function (e) {
          return function (t) {
            return e(t);
          };
        };
      };
      var u = [];
      return function (e) {
        var r = e.getState;
        return function (e) {
          return function (l) {
            if ("function" == typeof i && !i(r, l)) return e(l);
            var c = {};
            u.push(c), c.started = O.now(), c.startedTime = new Date(), c.prevState = n(r()), c.action = l;
            var s = void 0;
            if (a) try {
              s = e(l);
            } catch (e) {
              c.error = o(e);
            } else s = e(l);
            c.took = O.now() - c.started, c.nextState = n(r());
            var d = t.diff && "function" == typeof f ? f(r, l) : t.diff;
            if (x(u, _extends({}, t, {
              diff: d
            })), u.length = 0, c.error) throw c.error;
            return s;
          };
        };
      };
    }

    var k,
        j,
        E = function E(e, t) {
      return new Array(t + 1).join(e);
    },
        A = function A(e, t) {
      return E("0", t - e.toString().length) + e;
    },
        D = function D(e) {
      return A(e.getHours(), 2) + ":" + A(e.getMinutes(), 2) + ":" + A(e.getSeconds(), 2) + "." + A(e.getMilliseconds(), 3);
    },
        O = "undefined" != typeof performance && null !== performance && "function" == typeof performance.now ? performance : Date,
        N = "function" == typeof Symbol && "symbol" == _typeof(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (e) {
      return typeof e === "undefined" ? "undefined" : _typeof(e);
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
    },
        P = function P(e) {
      if (Array.isArray(e)) {
        for (var t = 0, r = Array(e.length); t < e.length; t++) {
          r[t] = e[t];
        }

        return r;
      }

      return Array.from(e);
    },
        C = [];

    k = "object" === ("undefined" == typeof global ? "undefined" : N(global)) && global ? global : "undefined" != typeof window ? window : {}, j = k.DeepDiff, j && C.push(function () {
      "undefined" != typeof j && k.DeepDiff === c && (k.DeepDiff = j, j = void 0);
    }), t(n, r), t(o, r), t(i, r), t(a, r), Object.defineProperties(c, {
      diff: {
        value: c,
        enumerable: !0
      },
      observableDiff: {
        value: l,
        enumerable: !0
      },
      applyDiff: {
        value: h,
        enumerable: !0
      },
      applyChange: {
        value: d,
        enumerable: !0
      },
      revertChange: {
        value: g,
        enumerable: !0
      },
      isConflict: {
        value: function value() {
          return "undefined" != typeof j;
        },
        enumerable: !0
      },
      noConflict: {
        value: function value() {
          return C && (C.forEach(function (e) {
            e();
          }), C = null), c;
        },
        enumerable: !0
      }
    });

    var F = {
      E: {
        color: "#2196F3",
        text: "CHANGED:"
      },
      N: {
        color: "#4CAF50",
        text: "ADDED:"
      },
      D: {
        color: "#F44336",
        text: "DELETED:"
      },
      A: {
        color: "#2196F3",
        text: "ARRAY:"
      }
    },
        L = {
      level: "log",
      logger: console,
      logErrors: !0,
      collapsed: void 0,
      predicate: void 0,
      duration: !1,
      timestamp: !0,
      stateTransformer: function stateTransformer(e) {
        return e;
      },
      actionTransformer: function actionTransformer(e) {
        return e;
      },
      errorTransformer: function errorTransformer(e) {
        return e;
      },
      colors: {
        title: function title() {
          return "inherit";
        },
        prevState: function prevState() {
          return "#9E9E9E";
        },
        action: function action() {
          return "#03A9F4";
        },
        nextState: function nextState() {
          return "#4CAF50";
        },
        error: function error() {
          return "#F20404";
        }
      },
      diff: !1,
      diffPredicate: void 0,
      transformer: void 0
    },
        T = function T() {
      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          t = e.dispatch,
          r = e.getState;
      return "function" == typeof t || "function" == typeof r ? S()({
        dispatch: t,
        getState: r
      }) : void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n");
    };

    e.defaults = L, e.createLogger = S, e.logger = T, e.default = T, Object.defineProperty(e, "__esModule", {
      value: !0
    });
  });
},533,[],"node_modules/redux-logger/dist/redux-logger.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = reducer;

    var _reducer = _require(_dependencyMap[0], "./screen/home/reducer");

    var _reducer2 = _interopRequireDefault(_reducer);

    var _reducer3 = _require(_dependencyMap[1], "./screen/product/reducer");

    var _reducer4 = _interopRequireDefault(_reducer3);

    var _reducer5 = _require(_dependencyMap[2], "./screen/square/reducer");

    var _reducer6 = _interopRequireDefault(_reducer5);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function reducer() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var action = arguments[1];
        return {
            home: (0, _reducer2.default)(state.home, action),
            product: (0, _reducer4.default)(state.product, action),
            square: (0, _reducer6.default)(state.square, action)
        };
    }
},534,[535,537,539],"src/state/reducer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _actions = _require(_dependencyMap[0], "./actions");

    var initialState = {
        home: 'home screen',
        homeTitle: '中信领航',
        products: [{
            id: '0',
            title: '商品 1',
            price: '100.00',
            user: {
                name: '用户1',
                address: '地址1'
            },
            tags: [{
                id: 0,
                name: '数码'
            }, {
                id: 1,
                name: '手机'
            }]
        }, {
            id: '1',
            title: '商品 2',
            price: '200.00',
            user: {
                name: '用户2',
                address: '地址2'
            },
            tags: [{
                id: 0,
                name: '服装'
            }, {
                id: 1,
                name: '女士'
            }]
        }, {
            id: '3',
            title: '商品 3',
            price: '300.00',
            user: {
                name: '用户3',
                address: '地址3'
            },
            tags: [{
                id: 0,
                name: '服装'
            }, {
                id: 1,
                name: '女士'
            }]
        }, {
            id: '4',
            title: '商品 4',
            price: '400.00',
            user: {
                name: '用户4',
                address: '地址4'
            },
            tags: [{
                id: 0,
                name: '服装'
            }, {
                id: 1,
                name: '女士'
            }]
        }],
        index: 0,
        routes: [{
            key: 'first',
            title: 'First'
        }, {
            key: 'second',
            title: 'Second'
        }]
    };

    var homeReducer = function homeReducer() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
        var action = arguments[1];

        switch (action.type) {
            case _actions.HOME_HIT_BUTTON:
                return _extends({}, state, {
                    home: 'button hit'
                });

            case _actions.HOME_RESET_BUTTON:
                return _extends({}, state, {
                    home: 'home screen'
                });

            case _actions.HOME_INDEX_UPDATE:
                return _extends({}, state, {
                    index: action.payload
                });

            default:
                return state;
        }
    };

    exports.default = homeReducer;
},535,[536],"src/state/screen/home/reducer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var HOME_HIT_BUTTON = exports.HOME_HIT_BUTTON = 'HOME_HIT_BUTTON';
    var HOME_RESET_BUTTON = exports.HOME_RESET_BUTTON = 'HOME_RESET_BUTTON';
    var HOME_INDEX_UPDATE = exports.HOME_INDEX_UPDATE = 'HOME_INDEX_UPDATE';

    var hitButtonAction = exports.hitButtonAction = function hitButtonAction() {
        return {
            type: HOME_HIT_BUTTON,
            payload: {},
            meta: {}
        };
    };

    var resetButtonAction = exports.resetButtonAction = function resetButtonAction() {
        return {
            type: HOME_RESET_BUTTON,
            payload: {},
            meta: {}
        };
    };

    var indexUpdateAction = exports.indexUpdateAction = function indexUpdateAction(index) {
        return {
            type: HOME_INDEX_UPDATE,
            payload: index,
            meta: {}
        };
    };
},536,[],"src/state/screen/home/actions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _actions = _require(_dependencyMap[0], "./actions");

    var initialState = {
        products: [{
            id: '0',
            title: '商品 1',
            price: '100.00',
            productDescription: '这是商品 1',
            user: {
                name: '用户1',
                address: '地址1'
            },
            tags: [{
                id: 0,
                name: '数码'
            }, {
                id: 1,
                name: '手机'
            }]
        }, {
            id: '1',
            title: '商品 2',
            price: '200.00',
            productDescription: '这是商品 2',
            user: {
                name: '用户2',
                address: '地址2'
            },
            tags: [{
                id: 0,
                name: '服装'
            }, {
                id: 1,
                name: '女士'
            }]
        }, {
            id: '3',
            title: '商品 3',
            price: '300.00',
            productDescription: '这是商品 3',
            user: {
                name: '用户3',
                address: '地址3'
            },
            tags: [{
                id: 0,
                name: '服装'
            }, {
                id: 1,
                name: '女士'
            }]
        }, {
            id: '4',
            title: '商品 4',
            price: '400.00',
            productDescription: '这是商品 4',
            user: {
                name: '用户4',
                address: '地址4'
            },
            tags: [{
                id: 0,
                name: '服装'
            }, {
                id: 1,
                name: '女士'
            }]
        }],
        product: {}
    };

    var productReducer = function productReducer() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
        var action = arguments[1];

        switch (action.type) {
            case _actions.PRODUCT_SELECT:
                return _extends({}, state, {
                    product: action.payload
                });

            default:
                return state;
        }
    };

    exports.default = productReducer;
},537,[538],"src/state/screen/product/reducer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var PRODUCT_SELECT = exports.PRODUCT_SELECT = 'PRODUCT_SELECT';

    var productSelectAction = exports.productSelectAction = function productSelectAction(product) {
        return {
            type: PRODUCT_SELECT,
            payload: product,
            meta: {}
        };
    };
},538,[],"src/state/screen/product/actions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _reactNativeGiftedChat = _require(_dependencyMap[0], "react-native-gifted-chat");

    var _actions = _require(_dependencyMap[1], "./actions");

    var initialState = {
        messages: [{
            _id: Math.round(Math.random() * 1000000),
            text: '你好',
            createdAt: new Date(Date.UTC(2016, 7, 30, 17, 20, 0)),
            user: {
                _id: 1,
                name: 'Developer'
            },
            sent: true,
            received: true
        }, {
            _id: Math.round(Math.random() * 1000000),
            text: '你好， 903',
            createdAt: new Date(Date.UTC(2016, 7, 30, 17, 20, 0)),
            user: {
                _id: 2,
                name: 'React Native'
            }
        }, {
            _id: Math.round(Math.random() * 1000000),
            text: '中信领航',
            createdAt: new Date(Date.UTC(2016, 7, 30, 17, 20, 0)),
            system: true
        }],
        old_messages: [{
            _id: Math.round(Math.random() * 1000000),
            text: '谁在卖婴儿车？',
            createdAt: new Date(Date.UTC(2016, 7, 30, 17, 20, 0)),
            user: {
                _id: 1,
                name: 'Developer'
            }
        }, {
            _id: Math.round(Math.random() * 1000000),
            text: '谁在卖桌子？',
            createdAt: new Date(Date.UTC(2016, 7, 30, 17, 20, 0)),
            user: {
                _id: 1,
                name: 'Developer'
            }
        }, {
            _id: Math.round(Math.random() * 1000000),
            text: '系统消息',
            createdAt: new Date(Date.UTC(2016, 7, 30, 17, 20, 0)),
            system: true
        }],
        loadEarlier: true,
        typingText: null,
        isLoadingEarlier: false
    };

    var squareReducer = function squareReducer() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
        var action = arguments[1];

        switch (action.type) {
            case _actions.LOAD_OLD_MESSAGE_SUCCESS:
                return _extends({}, state, {
                    loadEarlier: false,
                    isLoadingEarlier: false,
                    messages: _reactNativeGiftedChat.GiftedChat.prepend(state.messages, action.payload.messages)
                });

            case _actions.LOAD_OLD_MESSAGE_REQUEST:
                return _extends({}, state, {
                    loadEarlier: true,
                    isLoadingEarlier: true
                });

            case _actions.RECEIVE_MESSAGE:
                return _extends({}, state, {
                    messages: _reactNativeGiftedChat.GiftedChat.append(state.messages, action.payload.messages)
                });

            case _actions.SEND_MESSAGE:
                return _extends({}, state, {
                    messages: _reactNativeGiftedChat.GiftedChat.append(state.messages, action.payload.messages)
                });

            default:
                return state;
        }
    };

    exports.default = squareReducer;
},539,[540,582],"src/state/screen/square/reducer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _GiftedChat = _require(_dependencyMap[0], "./src/GiftedChat");

  Object.keys(_GiftedChat).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _GiftedChat[key];
      }
    });
  });
},540,[541],"node_modules/react-native-gifted-chat/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.utils = exports.GiftedAvatar = exports.Time = exports.Send = exports.MessageContainer = exports.Message = exports.LoadEarlier = exports.InputToolbar = exports.Day = exports.Composer = exports.MessageText = exports.MessageImage = exports.SystemMessage = exports.Bubble = exports.Avatar = exports.Actions = exports.GiftedChat = undefined;

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/GiftedChat.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _reactNativeActionSheet = _require(_dependencyMap[4], "@expo/react-native-action-sheet");

  var _reactNativeActionSheet2 = _interopRequireDefault(_reactNativeActionSheet);

  var _moment = _require(_dependencyMap[5], "moment");

  var _moment2 = _interopRequireDefault(_moment);

  var _uuid = _require(_dependencyMap[6], "uuid");

  var _uuid2 = _interopRequireDefault(_uuid);

  var _utils = _require(_dependencyMap[7], "./utils");

  var utils = _interopRequireWildcard(_utils);

  var _Actions = _require(_dependencyMap[8], "./Actions");

  var _Actions2 = _interopRequireDefault(_Actions);

  var _Avatar = _require(_dependencyMap[9], "./Avatar");

  var _Avatar2 = _interopRequireDefault(_Avatar);

  var _Bubble = _require(_dependencyMap[10], "./Bubble");

  var _Bubble2 = _interopRequireDefault(_Bubble);

  var _SystemMessage = _require(_dependencyMap[11], "./SystemMessage");

  var _SystemMessage2 = _interopRequireDefault(_SystemMessage);

  var _MessageImage = _require(_dependencyMap[12], "./MessageImage");

  var _MessageImage2 = _interopRequireDefault(_MessageImage);

  var _MessageText = _require(_dependencyMap[13], "./MessageText");

  var _MessageText2 = _interopRequireDefault(_MessageText);

  var _Composer = _require(_dependencyMap[14], "./Composer");

  var _Composer2 = _interopRequireDefault(_Composer);

  var _Day = _require(_dependencyMap[15], "./Day");

  var _Day2 = _interopRequireDefault(_Day);

  var _InputToolbar = _require(_dependencyMap[16], "./InputToolbar");

  var _InputToolbar2 = _interopRequireDefault(_InputToolbar);

  var _LoadEarlier = _require(_dependencyMap[17], "./LoadEarlier");

  var _LoadEarlier2 = _interopRequireDefault(_LoadEarlier);

  var _Message = _require(_dependencyMap[18], "./Message");

  var _Message2 = _interopRequireDefault(_Message);

  var _MessageContainer = _require(_dependencyMap[19], "./MessageContainer");

  var _MessageContainer2 = _interopRequireDefault(_MessageContainer);

  var _Send = _require(_dependencyMap[20], "./Send");

  var _Send2 = _interopRequireDefault(_Send);

  var _Time = _require(_dependencyMap[21], "./Time");

  var _Time2 = _interopRequireDefault(_Time);

  var _GiftedAvatar = _require(_dependencyMap[22], "./GiftedAvatar");

  var _GiftedAvatar2 = _interopRequireDefault(_GiftedAvatar);

  var _Constant = _require(_dependencyMap[23], "./Constant");

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    GiftedChat: {
      displayName: "GiftedChat"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/GiftedChat.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var GiftedChat = _wrapComponent("GiftedChat")(function (_React$Component) {
    _inherits(GiftedChat, _React$Component);

    function GiftedChat(props) {
      _classCallCheck(this, GiftedChat);

      var _this = _possibleConstructorReturn(this, (GiftedChat.__proto__ || Object.getPrototypeOf(GiftedChat)).call(this, props));

      _this._isMounted = false;
      _this._keyboardHeight = 0;
      _this._bottomOffset = 0;
      _this._maxHeight = null;
      _this._isFirstLayout = true;
      _this._locale = 'en';
      _this._messages = [];
      _this.state = {
        isInitialized: false,
        composerHeight: _Constant.MIN_COMPOSER_HEIGHT,
        messagesContainerHeight: null,
        typingDisabled: false
      };
      _this.onKeyboardWillShow = _this.onKeyboardWillShow.bind(_this);
      _this.onKeyboardWillHide = _this.onKeyboardWillHide.bind(_this);
      _this.onKeyboardDidShow = _this.onKeyboardDidShow.bind(_this);
      _this.onKeyboardDidHide = _this.onKeyboardDidHide.bind(_this);
      _this.onSend = _this.onSend.bind(_this);
      _this.getLocale = _this.getLocale.bind(_this);
      _this.onInputSizeChanged = _this.onInputSizeChanged.bind(_this);
      _this.onInputTextChanged = _this.onInputTextChanged.bind(_this);
      _this.onMainViewLayout = _this.onMainViewLayout.bind(_this);
      _this.onInitialLayoutViewLayout = _this.onInitialLayoutViewLayout.bind(_this);
      _this.invertibleScrollViewProps = {
        inverted: _this.props.inverted,
        keyboardShouldPersistTaps: _this.props.keyboardShouldPersistTaps,
        onKeyboardWillShow: _this.onKeyboardWillShow,
        onKeyboardWillHide: _this.onKeyboardWillHide,
        onKeyboardDidShow: _this.onKeyboardDidShow,
        onKeyboardDidHide: _this.onKeyboardDidHide
      };
      return _this;
    }

    _createClass(GiftedChat, [{
      key: "getChildContext",
      value: function getChildContext() {
        var _this2 = this;

        return {
          actionSheet: function actionSheet() {
            return _this2._actionSheetRef;
          },
          getLocale: this.getLocale
        };
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        var _props = this.props,
            messages = _props.messages,
            text = _props.text;
        this.setIsMounted(true);
        this.initLocale();
        this.setMessages(messages || []);
        this.setTextFromProp(text);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.setIsMounted(false);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps() {
        var nextProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var messages = nextProps.messages,
            text = nextProps.text;
        this.setMessages(messages || []);
        this.setTextFromProp(text);
      }
    }, {
      key: "initLocale",
      value: function initLocale() {
        if (this.props.locale === null || _moment2.default.locales().indexOf(this.props.locale) === -1) {
          this.setLocale('en');
        } else {
          this.setLocale(this.props.locale);
        }
      }
    }, {
      key: "setLocale",
      value: function setLocale(locale) {
        this._locale = locale;
      }
    }, {
      key: "getLocale",
      value: function getLocale() {
        return this._locale;
      }
    }, {
      key: "setTextFromProp",
      value: function setTextFromProp(textProp) {
        if (textProp !== undefined && textProp !== this.state.text) {
          this.setState({
            text: textProp
          });
        }
      }
    }, {
      key: "getTextFromProp",
      value: function getTextFromProp(fallback) {
        if (this.props.text === undefined) {
          return fallback;
        }

        return this.props.text;
      }
    }, {
      key: "setMessages",
      value: function setMessages(messages) {
        this._messages = messages;
      }
    }, {
      key: "getMessages",
      value: function getMessages() {
        return this._messages;
      }
    }, {
      key: "setMaxHeight",
      value: function setMaxHeight(height) {
        this._maxHeight = height;
      }
    }, {
      key: "getMaxHeight",
      value: function getMaxHeight() {
        return this._maxHeight;
      }
    }, {
      key: "setKeyboardHeight",
      value: function setKeyboardHeight(height) {
        this._keyboardHeight = height;
      }
    }, {
      key: "getKeyboardHeight",
      value: function getKeyboardHeight() {
        if (_reactNative.Platform.OS === 'android' && !this.props.forceGetKeyboardHeight) {
          return 0;
        }

        return this._keyboardHeight;
      }
    }, {
      key: "setBottomOffset",
      value: function setBottomOffset(value) {
        this._bottomOffset = value;
      }
    }, {
      key: "getBottomOffset",
      value: function getBottomOffset() {
        return this._bottomOffset;
      }
    }, {
      key: "setIsFirstLayout",
      value: function setIsFirstLayout(value) {
        this._isFirstLayout = value;
      }
    }, {
      key: "getIsFirstLayout",
      value: function getIsFirstLayout() {
        return this._isFirstLayout;
      }
    }, {
      key: "setIsTypingDisabled",
      value: function setIsTypingDisabled(value) {
        this.setState({
          typingDisabled: value
        });
      }
    }, {
      key: "getIsTypingDisabled",
      value: function getIsTypingDisabled() {
        return this.state.typingDisabled;
      }
    }, {
      key: "setIsMounted",
      value: function setIsMounted(value) {
        this._isMounted = value;
      }
    }, {
      key: "getIsMounted",
      value: function getIsMounted() {
        return this._isMounted;
      }
    }, {
      key: "getMinInputToolbarHeight",
      value: function getMinInputToolbarHeight() {
        return this.props.renderAccessory ? this.props.minInputToolbarHeight * 2 : this.props.minInputToolbarHeight;
      }
    }, {
      key: "calculateInputToolbarHeight",
      value: function calculateInputToolbarHeight(composerHeight) {
        return composerHeight + (this.getMinInputToolbarHeight() - _Constant.MIN_COMPOSER_HEIGHT);
      }
    }, {
      key: "getBasicMessagesContainerHeight",
      value: function getBasicMessagesContainerHeight() {
        var composerHeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.composerHeight;
        return this.getMaxHeight() - this.calculateInputToolbarHeight(composerHeight);
      }
    }, {
      key: "getMessagesContainerHeightWithKeyboard",
      value: function getMessagesContainerHeightWithKeyboard() {
        var composerHeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.composerHeight;
        return this.getBasicMessagesContainerHeight(composerHeight) - this.getKeyboardHeight() + this.getBottomOffset();
      }
    }, {
      key: "prepareMessagesContainerHeight",
      value: function prepareMessagesContainerHeight(value) {
        if (this.props.isAnimated === true) {
          return new _reactNative.Animated.Value(value);
        }

        return value;
      }
    }, {
      key: "onKeyboardWillShow",
      value: function onKeyboardWillShow(e) {
        this.setIsTypingDisabled(true);
        this.setKeyboardHeight(e.endCoordinates ? e.endCoordinates.height : e.end.height);
        this.setBottomOffset(this.props.bottomOffset);
        var newMessagesContainerHeight = this.getMessagesContainerHeightWithKeyboard();

        if (this.props.isAnimated === true) {
          _reactNative.Animated.timing(this.state.messagesContainerHeight, {
            toValue: newMessagesContainerHeight,
            duration: 210
          }).start();
        } else {
          this.setState({
            messagesContainerHeight: newMessagesContainerHeight
          });
        }
      }
    }, {
      key: "onKeyboardWillHide",
      value: function onKeyboardWillHide() {
        this.setIsTypingDisabled(true);
        this.setKeyboardHeight(0);
        this.setBottomOffset(0);
        var newMessagesContainerHeight = this.getBasicMessagesContainerHeight();

        if (this.props.isAnimated === true) {
          _reactNative.Animated.timing(this.state.messagesContainerHeight, {
            toValue: newMessagesContainerHeight,
            duration: 210
          }).start();
        } else {
          this.setState({
            messagesContainerHeight: newMessagesContainerHeight
          });
        }
      }
    }, {
      key: "onKeyboardDidShow",
      value: function onKeyboardDidShow(e) {
        if (_reactNative.Platform.OS === 'android') {
          this.onKeyboardWillShow(e);
        }

        this.setIsTypingDisabled(false);
      }
    }, {
      key: "onKeyboardDidHide",
      value: function onKeyboardDidHide(e) {
        if (_reactNative.Platform.OS === 'android') {
          this.onKeyboardWillHide(e);
        }

        this.setIsTypingDisabled(false);
      }
    }, {
      key: "scrollToBottom",
      value: function scrollToBottom() {
        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (this._messageContainerRef === null) {
          return;
        }

        this._messageContainerRef.scrollTo({
          y: 0,
          animated: animated
        });
      }
    }, {
      key: "renderMessages",
      value: function renderMessages() {
        var _this3 = this;

        var AnimatedView = this.props.isAnimated === true ? _reactNative.Animated.View : _reactNative.View;
        return _react3.default.createElement(
          AnimatedView,
          {
            style: {
              height: this.state.messagesContainerHeight
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 308
            }
          },
          _react3.default.createElement(_MessageContainer2.default, _extends({}, this.props, {
            invertibleScrollViewProps: this.invertibleScrollViewProps,
            messages: this.getMessages(),
            ref: function ref(component) {
              return _this3._messageContainerRef = component;
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 313
            }
          })),
          this.renderChatFooter()
        );
      }
    }, {
      key: "onSend",
      value: function onSend() {
        var _this4 = this;

        var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var shouldResetInputToolbar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!Array.isArray(messages)) {
          messages = [messages];
        }

        messages = messages.map(function (message) {
          return _extends({}, message, {
            user: _this4.props.user,
            createdAt: new Date(),
            _id: _this4.props.messageIdGenerator()
          });
        });

        if (shouldResetInputToolbar === true) {
          this.setIsTypingDisabled(true);
          this.resetInputToolbar();
        }

        this.props.onSend(messages);
        this.scrollToBottom();

        if (shouldResetInputToolbar === true) {
          setTimeout(function () {
            if (_this4.getIsMounted() === true) {
              _this4.setIsTypingDisabled(false);
            }
          }, 100);
        }
      }
    }, {
      key: "resetInputToolbar",
      value: function resetInputToolbar() {
        if (this.textInput) {
          this.textInput.clear();
        }

        this.notifyInputTextReset();
        var newComposerHeight = _Constant.MIN_COMPOSER_HEIGHT;
        var newMessagesContainerHeight = this.getMessagesContainerHeightWithKeyboard(newComposerHeight);
        this.setState({
          text: this.getTextFromProp(''),
          composerHeight: newComposerHeight,
          messagesContainerHeight: this.prepareMessagesContainerHeight(newMessagesContainerHeight)
        });
      }
    }, {
      key: "focusTextInput",
      value: function focusTextInput() {
        if (this.textInput) {
          this.textInput.focus();
        }
      }
    }, {
      key: "onInputSizeChanged",
      value: function onInputSizeChanged(size) {
        var newComposerHeight = Math.max(_Constant.MIN_COMPOSER_HEIGHT, Math.min(_Constant.MAX_COMPOSER_HEIGHT, size.height));
        var newMessagesContainerHeight = this.getMessagesContainerHeightWithKeyboard(newComposerHeight);
        this.setState({
          composerHeight: newComposerHeight,
          messagesContainerHeight: this.prepareMessagesContainerHeight(newMessagesContainerHeight)
        });
      }
    }, {
      key: "onInputTextChanged",
      value: function onInputTextChanged(text) {
        if (this.getIsTypingDisabled()) {
          return;
        }

        if (this.props.onInputTextChanged) {
          this.props.onInputTextChanged(text);
        }

        if (this.props.text === undefined) {
          this.setState({
            text: text
          });
        }
      }
    }, {
      key: "notifyInputTextReset",
      value: function notifyInputTextReset() {
        if (this.props.onInputTextChanged) {
          this.props.onInputTextChanged('');
        }
      }
    }, {
      key: "onInitialLayoutViewLayout",
      value: function onInitialLayoutViewLayout(e) {
        var layout = e.nativeEvent.layout;

        if (layout.height <= 0) {
          return;
        }

        this.notifyInputTextReset();
        this.setMaxHeight(layout.height);
        var newComposerHeight = _Constant.MIN_COMPOSER_HEIGHT;
        var newMessagesContainerHeight = this.getMessagesContainerHeightWithKeyboard(newComposerHeight);
        this.setState({
          isInitialized: true,
          text: this.getTextFromProp(''),
          composerHeight: newComposerHeight,
          messagesContainerHeight: this.prepareMessagesContainerHeight(newMessagesContainerHeight)
        });
      }
    }, {
      key: "onMainViewLayout",
      value: function onMainViewLayout(e) {
        var layout = e.nativeEvent.layout;

        if (this.getMaxHeight() !== layout.height || this.getIsFirstLayout() === true) {
          this.setMaxHeight(layout.height);
          this.setState({
            messagesContainerHeight: this.prepareMessagesContainerHeight(this.getBasicMessagesContainerHeight())
          });
        }

        if (this.getIsFirstLayout() === true) {
          this.setIsFirstLayout(false);
        }
      }
    }, {
      key: "renderInputToolbar",
      value: function renderInputToolbar() {
        var _this5 = this;

        var inputToolbarProps = _extends({}, this.props, {
          text: this.getTextFromProp(this.state.text),
          composerHeight: Math.max(_Constant.MIN_COMPOSER_HEIGHT, this.state.composerHeight),
          onSend: this.onSend,
          onInputSizeChanged: this.onInputSizeChanged,
          onTextChanged: this.onInputTextChanged,
          textInputProps: _extends({}, this.props.textInputProps, {
            ref: function ref(textInput) {
              return _this5.textInput = textInput;
            },
            maxLength: this.getIsTypingDisabled() ? 0 : this.props.maxInputLength
          })
        });

        if (this.props.renderInputToolbar) {
          return this.props.renderInputToolbar(inputToolbarProps);
        }

        return _react3.default.createElement(_InputToolbar2.default, _extends({}, inputToolbarProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 452
          }
        }));
      }
    }, {
      key: "renderChatFooter",
      value: function renderChatFooter() {
        if (this.props.renderChatFooter) {
          var footerProps = _extends({}, this.props);

          return this.props.renderChatFooter(footerProps);
        }

        return null;
      }
    }, {
      key: "renderLoading",
      value: function renderLoading() {
        if (this.props.renderLoading) {
          return this.props.renderLoading();
        }

        return null;
      }
    }, {
      key: "render",
      value: function render() {
        var _this6 = this;

        if (this.state.isInitialized === true) {
          return _react3.default.createElement(
            _reactNativeActionSheet2.default,
            {
              ref: function ref(component) {
                return _this6._actionSheetRef = component;
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 478
              }
            },
            _react3.default.createElement(
              _reactNative.View,
              {
                style: styles.container,
                onLayout: this.onMainViewLayout,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 479
                }
              },
              this.renderMessages(),
              this.renderInputToolbar()
            )
          );
        }

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: styles.container,
            onLayout: this.onInitialLayoutViewLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 487
            }
          },
          this.renderLoading()
        );
      }
    }], [{
      key: "append",
      value: function append() {
        var currentMessages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var messages = arguments[1];
        var inverted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        if (!Array.isArray(messages)) {
          messages = [messages];
        }

        return inverted ? messages.concat(currentMessages) : currentMessages.concat(messages);
      }
    }, {
      key: "prepend",
      value: function prepend() {
        var currentMessages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var messages = arguments[1];
        var inverted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        if (!Array.isArray(messages)) {
          messages = [messages];
        }

        return inverted ? currentMessages.concat(messages) : messages.concat(currentMessages);
      }
    }]);

    return GiftedChat;
  }(_react3.default.Component));

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    }
  });

  GiftedChat.childContextTypes = {
    actionSheet: _propTypes2.default.func,
    getLocale: _propTypes2.default.func
  };
  GiftedChat.defaultProps = {
    messages: [],
    text: undefined,
    placeholder: _Constant.DEFAULT_PLACEHOLDER,
    messageIdGenerator: function messageIdGenerator() {
      return _uuid2.default.v4();
    },
    user: {},
    onSend: function onSend() {},
    locale: null,
    timeFormat: _Constant.TIME_FORMAT,
    dateFormat: _Constant.DATE_FORMAT,
    isAnimated: _reactNative.Platform.select({
      ios: true,
      android: false
    }),
    loadEarlier: false,
    onLoadEarlier: function onLoadEarlier() {},
    isLoadingEarlier: false,
    renderLoading: null,
    renderLoadEarlier: null,
    renderAvatar: undefined,
    showUserAvatar: false,
    onPressAvatar: null,
    renderAvatarOnTop: false,
    renderBubble: null,
    renderSystemMessage: null,
    onLongPress: null,
    renderMessage: null,
    renderMessageText: null,
    renderMessageImage: null,
    imageProps: {},
    lightboxProps: {},
    textInputProps: {},
    listViewProps: {},
    renderCustomView: null,
    renderDay: null,
    renderTime: null,
    renderFooter: null,
    renderChatFooter: null,
    renderInputToolbar: null,
    renderComposer: null,
    renderActions: null,
    renderSend: null,
    renderAccessory: null,
    onPressActionButton: null,
    bottomOffset: 0,
    minInputToolbarHeight: 44,
    keyboardShouldPersistTaps: _reactNative.Platform.select({
      ios: 'never',
      android: 'always'
    }),
    onInputTextChanged: null,
    maxInputLength: null,
    forceGetKeyboardHeight: false,
    inverted: true
  };
  GiftedChat.propTypes = {
    messages: _propTypes2.default.arrayOf(_propTypes2.default.object),
    text: _propTypes2.default.string,
    placeholder: _propTypes2.default.string,
    messageIdGenerator: _propTypes2.default.func,
    user: _propTypes2.default.object,
    onSend: _propTypes2.default.func,
    locale: _propTypes2.default.string,
    timeFormat: _propTypes2.default.string,
    dateFormat: _propTypes2.default.string,
    isAnimated: _propTypes2.default.bool,
    loadEarlier: _propTypes2.default.bool,
    onLoadEarlier: _propTypes2.default.func,
    isLoadingEarlier: _propTypes2.default.bool,
    renderLoading: _propTypes2.default.func,
    renderLoadEarlier: _propTypes2.default.func,
    renderAvatar: _propTypes2.default.func,
    showUserAvatar: _propTypes2.default.bool,
    onPressAvatar: _propTypes2.default.func,
    renderAvatarOnTop: _propTypes2.default.bool,
    renderBubble: _propTypes2.default.func,
    renderSystemMessage: _propTypes2.default.func,
    onLongPress: _propTypes2.default.func,
    renderMessage: _propTypes2.default.func,
    renderMessageText: _propTypes2.default.func,
    renderMessageImage: _propTypes2.default.func,
    imageProps: _propTypes2.default.object,
    lightboxProps: _propTypes2.default.object,
    renderCustomView: _propTypes2.default.func,
    renderDay: _propTypes2.default.func,
    renderTime: _propTypes2.default.func,
    renderFooter: _propTypes2.default.func,
    renderChatFooter: _propTypes2.default.func,
    renderInputToolbar: _propTypes2.default.func,
    renderComposer: _propTypes2.default.func,
    renderActions: _propTypes2.default.func,
    renderSend: _propTypes2.default.func,
    renderAccessory: _propTypes2.default.func,
    onPressActionButton: _propTypes2.default.func,
    bottomOffset: _propTypes2.default.number,
    minInputToolbarHeight: _propTypes2.default.number,
    listViewProps: _propTypes2.default.object,
    keyboardShouldPersistTaps: _propTypes2.default.oneOf(['always', 'never', 'handled']),
    onInputTextChanged: _propTypes2.default.func,
    maxInputLength: _propTypes2.default.number,
    forceGetKeyboardHeight: _propTypes2.default.bool,
    inverted: _propTypes2.default.bool,
    textInputProps: _propTypes2.default.object
  };
  exports.GiftedChat = GiftedChat;
  exports.Actions = _Actions2.default;
  exports.Avatar = _Avatar2.default;
  exports.Bubble = _Bubble2.default;
  exports.SystemMessage = _SystemMessage2.default;
  exports.MessageImage = _MessageImage2.default;
  exports.MessageText = _MessageText2.default;
  exports.Composer = _Composer2.default;
  exports.Day = _Day2.default;
  exports.InputToolbar = _InputToolbar2.default;
  exports.LoadEarlier = _LoadEarlier2.default;
  exports.Message = _Message2.default;
  exports.MessageContainer = _MessageContainer2.default;
  exports.Send = _Send2.default;
  exports.Time = _Time2.default;
  exports.GiftedAvatar = _GiftedAvatar2.default;
  exports.utils = utils;
},541,[13,219,25,65,542,546,547,552,553,555,557,567,562,558,568,569,570,572,573,574,571,565,556,566],"node_modules/react-native-gifted-chat/src/GiftedChat.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = _require(_dependencyMap[0], './ActionSheet');
  module.exports.ActionSheetProvider = _require(_dependencyMap[1], './ActionSheetProvider').default;
  module.exports.connectActionSheet = _require(_dependencyMap[2], './connectActionSheet').default;
},542,[543,544,545],"node_modules/@expo/react-native-action-sheet/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/@expo/react-native-action-sheet/ActionSheet.android.js",
      _class3,
      _temp3;

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ActionGroup: {
      displayName: "ActionGroup"
    },
    ActionSheet: {
      displayName: "ActionSheet"
    },
    TouchableNativeFeedbackSafe: {
      displayName: "TouchableNativeFeedbackSafe"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/@expo/react-native-action-sheet/ActionSheet.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var OPACITY_ANIMATION_TIME = 150;

  var PIXEL = 1 / _reactNative.PixelRatio.get();

  var ActionGroup = _wrapComponent("ActionGroup")((_temp = _class = function (_React$Component) {
    _inherits(ActionGroup, _React$Component);

    function ActionGroup() {
      _classCallCheck(this, ActionGroup);

      return _possibleConstructorReturn(this, (ActionGroup.__proto__ || Object.getPrototypeOf(ActionGroup)).apply(this, arguments));
    }

    _createClass(ActionGroup, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            options = _props.options,
            icons = _props.icons,
            destructiveButtonIndex = _props.destructiveButtonIndex,
            onSelect = _props.onSelect,
            startIndex = _props.startIndex,
            length = _props.length,
            textStyle = _props.textStyle;
        var optionViews = [];
        var nativeFeedbackBackground = TouchableNativeFeedbackSafe.Ripple('rgba(180, 180, 180, 1)', false);

        var _loop = function _loop(_i) {
          var color = '#444444';

          if (_i === destructiveButtonIndex) {
            color = '#ff3b30';
          }

          var iconElement = undefined;

          if (icons && icons[_i]) {
            iconElement = _react3.default.createElement(_reactNative.Image, {
              source: icons[_i],
              style: styles.icon,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 97
              }
            });
          }

          optionViews.push(_react3.default.createElement(
            TouchableNativeFeedbackSafe,
            {
              key: _i,
              pressInDelay: 0,
              background: nativeFeedbackBackground,
              onPress: function onPress() {
                return onSelect(_i);
              },
              style: styles.button,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 101
              }
            },
            iconElement,
            _react3.default.createElement(
              _reactNative.Text,
              {
                style: [styles.text, {
                  color: color
                }, textStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 108
                }
              },
              options[_i]
            )
          ));

          if (_i < startIndex + length - 1) {
            optionViews.push(_react3.default.createElement(_reactNative.View, {
              key: "separator-" + _i,
              style: styles.rowSeparator,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 113
              }
            }));
          }
        };

        for (var _i = startIndex; _i < startIndex + length; _i++) {
          _loop(_i);
        }

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: styles.groupContainer,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 118
            }
          },
          _react3.default.createElement(
            _reactNative.ScrollView,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 119
              }
            },
            optionViews
          )
        );
      }
    }]);

    return ActionGroup;
  }(_react3.default.Component), _class.propTypes = {
    options: _propTypes2.default.array.isRequired,
    icons: _propTypes2.default.array,
    destructiveButtonIndex: _propTypes2.default.number,
    onSelect: _propTypes2.default.func.isRequired,
    startIndex: _propTypes2.default.number.isRequired,
    length: _propTypes2.default.number.isRequired,
    textStyle: _reactNative.Text.propTypes.style
  }, _temp));

  var ActionSheet = _wrapComponent("ActionSheet")(function (_React$Component2) {
    _inherits(ActionSheet, _React$Component2);

    function ActionSheet() {
      var _ref;

      var _temp2, _this2, _ret2;

      _classCallCheck(this, ActionSheet);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref = ActionSheet.__proto__ || Object.getPrototypeOf(ActionSheet)).call.apply(_ref, [this].concat(args))), _this2), _this2._animateOutCallback = null, _this2.state = {
        isVisible: false,
        isAnimating: false,
        options: null,
        onSelect: null,
        overlayOpacity: new _reactNative.Animated.Value(0),
        sheetOpacity: new _reactNative.Animated.Value(0)
      }, _this2._selectCancelButton = function () {
        if (!_this2.state.options) {
          return false;
        }

        if (typeof _this2.state.options.cancelButtonIndex === 'number') {
          return _this2._onSelect(_this2.state.options.cancelButtonIndex);
        } else {
          return _this2._animateOut();
        }
      }, _this2._onSelect = function (index) {
        if (_this2.state.isAnimating) {
          return false;
        }

        _this2.state.onSelect && _this2.state.onSelect(index);
        return _this2._animateOut();
      }, _this2._animateOut = function () {
        if (_this2.state.isAnimating) {
          return false;
        }

        _reactNative.BackHandler.removeEventListener('actionSheetHardwareBackPress', _this2._selectCancelButton);

        _this2.setState({
          isAnimating: true
        });

        _reactNative.Animated.parallel([_reactNative.Animated.timing(_this2.state.overlayOpacity, {
          toValue: 0,
          easing: _reactNative.Easing.in(_reactNative.Easing.linear),
          duration: OPACITY_ANIMATION_TIME,
          useNativeDriver: _this2.props.useNativeDriver
        }), _reactNative.Animated.timing(_this2.state.sheetOpacity, {
          toValue: 0,
          easing: _reactNative.Easing.in(_reactNative.Easing.linear),
          duration: OPACITY_ANIMATION_TIME,
          useNativeDriver: _this2.props.useNativeDriver
        })]).start(function (result) {
          if (result.finished) {
            _this2.setState({
              isVisible: false,
              isAnimating: false
            });

            if (typeof _this2._animateOutCallback === 'function') {
              _this2._animateOutCallback();

              _this2._animateOutCallback = null;
            }
          }
        });

        return true;
      }, _temp2), _possibleConstructorReturn(_this2, _ret2);
    }

    _createClass(ActionSheet, [{
      key: "render",
      value: function render() {
        var isVisible = this.state.isVisible;
        var overlay = isVisible ? _react3.default.createElement(_reactNative.Animated.View, {
          style: [styles.overlay, {
            opacity: this.state.overlayOpacity
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 142
          }
        }) : null;
        var sheet = isVisible ? this._renderSheet() : null;
        return _react3.default.createElement(
          _reactNative.View,
          {
            style: {
              flex: 1
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 155
            }
          },
          _react3.default.Children.only(this.props.children),
          overlay,
          sheet
        );
      }
    }, {
      key: "_renderSheet",
      value: function _renderSheet() {
        if (!this.state.options) {
          return;
        }

        var numOptions = this.state.options.options.length;
        return _react3.default.createElement(
          _reactNative.TouchableWithoutFeedback,
          {
            onPress: this._selectCancelButton,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 171
            }
          },
          _react3.default.createElement(
            _reactNative.Animated.View,
            {
              needsOffscreenAlphaCompositing: this.state.isAnimating,
              style: [styles.sheetContainer, {
                opacity: this.state.sheetOpacity,
                transform: [{
                  scale: this.state.sheetOpacity.interpolate({
                    inputRange: [0, 0.5, 1],
                    outputRange: [0.6, 1, 1]
                  })
                }]
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 172
              }
            },
            _react3.default.createElement(
              _reactNative.View,
              {
                style: styles.sheet,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 188
                }
              },
              _react3.default.createElement(ActionGroup, {
                options: this.state.options.options,
                icons: this.state.options.icons,
                destructiveButtonIndex: this.state.options.destructiveButtonIndex,
                onSelect: this._onSelect,
                startIndex: 0,
                length: numOptions,
                textStyle: this.state.options.textStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 189
                }
              })
            )
          )
        );
      }
    }, {
      key: "showActionSheetWithOptions",
      value: function showActionSheetWithOptions(options, onSelect, onAnimateOut) {
        var _this3 = this;

        if (this.state.isVisible) {
          return;
        }

        this.setState({
          options: options,
          onSelect: onSelect,
          isVisible: true,
          isAnimating: true
        });
        this.state.overlayOpacity.setValue(0);
        this.state.sheetOpacity.setValue(0);

        _reactNative.Animated.parallel([_reactNative.Animated.timing(this.state.overlayOpacity, {
          toValue: 0.5,
          easing: _reactNative.Easing.in(_reactNative.Easing.linear),
          duration: OPACITY_ANIMATION_TIME,
          useNativeDriver: this.props.useNativeDriver
        }), _reactNative.Animated.timing(this.state.sheetOpacity, {
          toValue: 1,
          easing: _reactNative.Easing.in(_reactNative.Easing.linear),
          duration: OPACITY_ANIMATION_TIME,
          useNativeDriver: this.props.useNativeDriver
        })]).start(function (result) {
          if (result.finished) {
            _this3.setState({
              isAnimating: false
            });
          }
        });

        this._animateOutCallback = onAnimateOut;

        _reactNative.BackHandler.addEventListener('actionSheetHardwareBackPress', this._selectCancelButton);
      }
    }]);

    return ActionSheet;
  }(_react3.default.Component));

  exports.default = ActionSheet;
  ActionSheet.defaultProps = {
    useNativeDriver: true
  };
  var TouchableComponent = void 0;
  TouchableComponent = _reactNative.Platform.Version <= 20 ? _reactNative.TouchableOpacity : _reactNative.TouchableNativeFeedback;

  if (TouchableComponent !== _reactNative.TouchableNativeFeedback) {
    TouchableComponent.SelectableBackground = function () {
      return {};
    };

    TouchableComponent.SelectableBackgroundBorderless = function () {
      return {};
    };

    TouchableComponent.Ripple = function (color, borderless) {
      return {};
    };
  }

  var TouchableNativeFeedbackSafe = _wrapComponent("TouchableNativeFeedbackSafe")((_temp3 = _class3 = function (_React$Component3) {
    _inherits(TouchableNativeFeedbackSafe, _React$Component3);

    function TouchableNativeFeedbackSafe() {
      _classCallCheck(this, TouchableNativeFeedbackSafe);

      return _possibleConstructorReturn(this, (TouchableNativeFeedbackSafe.__proto__ || Object.getPrototypeOf(TouchableNativeFeedbackSafe)).apply(this, arguments));
    }

    _createClass(TouchableNativeFeedbackSafe, [{
      key: "render",
      value: function render() {
        if (TouchableComponent === _reactNative.TouchableNativeFeedback) {
          return _react3.default.createElement(
            TouchableComponent,
            _extends({}, this.props, {
              style: {},
              __source: {
                fileName: _jsxFileName,
                lineNumber: 339
              }
            }),
            _react3.default.createElement(
              _reactNative.View,
              {
                style: this.props.style,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 340
                }
              },
              this.props.children
            )
          );
        } else {
          return _react3.default.createElement(
            TouchableComponent,
            _extends({}, this.props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 344
              }
            }),
            this.props.children
          );
        }
      }
    }]);

    return TouchableNativeFeedbackSafe;
  }(_react3.default.Component), _class3.SelectableBackground = TouchableComponent.SelectableBackground, _class3.SelectableBackgroundBorderless = TouchableComponent.SelectableBackgroundBorderless, _class3.Ripple = TouchableComponent.Ripple, _temp3));

  var styles = _reactNative.StyleSheet.create({
    groupContainer: {
      backgroundColor: '#fefefe',
      borderRadius: 4,
      borderColor: '#cbcbcb',
      borderWidth: PIXEL,
      overflow: 'hidden',
      marginHorizontal: 16,
      marginBottom: 8
    },
    button: {
      justifyContent: 'flex-start',
      alignItems: 'center',
      flexDirection: 'row',
      height: 50,
      paddingHorizontal: 16
    },
    icon: {
      marginRight: 15
    },
    text: {
      fontSize: 17,
      fontWeight: '700',
      textAlignVertical: 'center'
    },
    rowSeparator: {
      backgroundColor: '#dddddd',
      height: 1,
      flex: 1
    },
    overlay: {
      position: 'absolute',
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      backgroundColor: 'black'
    },
    sheetContainer: {
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      top: 0,
      backgroundColor: 'transparent',
      alignItems: 'center',
      justifyContent: 'center',
      flexDirection: 'row'
    },
    sheet: {
      flex: 1,
      backgroundColor: 'transparent'
    }
  });
},543,[13,219,25,65],"node_modules/@expo/react-native-action-sheet/ActionSheet.android.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/@expo/react-native-action-sheet/ActionSheetProvider.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _ActionSheet = _require(_dependencyMap[3], "./ActionSheet");

  var _ActionSheet2 = _interopRequireDefault(_ActionSheet);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ActionSheetProvider: {
      displayName: "ActionSheetProvider"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/@expo/react-native-action-sheet/ActionSheetProvider.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ActionSheetProvider = _wrapComponent("ActionSheetProvider")((_temp = _class = function (_React$Component) {
    _inherits(ActionSheetProvider, _React$Component);

    function ActionSheetProvider() {
      _classCallCheck(this, ActionSheetProvider);

      return _possibleConstructorReturn(this, (ActionSheetProvider.__proto__ || Object.getPrototypeOf(ActionSheetProvider)).apply(this, arguments));
    }

    _createClass(ActionSheetProvider, [{
      key: "getChildContext",
      value: function getChildContext() {
        var _this2 = this;

        return {
          showActionSheetWithOptions: function showActionSheetWithOptions() {
            var _actionSheetRef;

            return (_actionSheetRef = _this2._actionSheetRef).showActionSheetWithOptions.apply(_actionSheetRef, arguments);
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        return _react3.default.createElement(
          _ActionSheet2.default,
          {
            ref: function ref(component) {
              return _this3._actionSheetRef = component;
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          },
          _react3.default.Children.only(this.props.children)
        );
      }
    }]);

    return ActionSheetProvider;
  }(_react3.default.Component), _class.propTypes = {
    children: _propTypes2.default.any
  }, _class.childContextTypes = {
    showActionSheetWithOptions: _propTypes2.default.func
  }, _temp));

  exports.default = ActionSheetProvider;
},544,[13,219,25,543],"node_modules/@expo/react-native-action-sheet/ActionSheetProvider.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/@expo/react-native-action-sheet/connectActionSheet.js";
  exports.default = connectActionSheet;

  var _hoistNonReactStatics = _require(_dependencyMap[0], "hoist-non-react-statics");

  var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function connectActionSheet(WrappedComponent) {
    var ConnectedActionSheet = function ConnectedActionSheet(props, context) {
      return _react2.default.createElement(WrappedComponent, _extends({}, props, {
        showActionSheetWithOptions: context.showActionSheetWithOptions,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 8
        }
      }));
    };

    ConnectedActionSheet.contextTypes = {
      showActionSheetWithOptions: _propTypes2.default.func
    };
    return (0, _hoistNonReactStatics2.default)(ConnectedActionSheet, WrappedComponent);
  }
},545,[31,13,25],"node_modules/@expo/react-native-action-sheet/connectActionSheet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

    ;

    (function (global, factory) {
        (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
    })(undefined, function () {
        'use strict';

        var hookCallback;

        function hooks() {
            return hookCallback.apply(null, arguments);
        }

        function setHookCallback(callback) {
            hookCallback = callback;
        }

        function isArray(input) {
            return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
        }

        function isObject(input) {
            return input != null && Object.prototype.toString.call(input) === '[object Object]';
        }

        function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
                return Object.getOwnPropertyNames(obj).length === 0;
            } else {
                var k;

                for (k in obj) {
                    if (obj.hasOwnProperty(k)) {
                        return false;
                    }
                }

                return true;
            }
        }

        function isUndefined(input) {
            return input === void 0;
        }

        function isNumber(input) {
            return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
        }

        function isDate(input) {
            return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
        }

        function map(arr, fn) {
            var res = [],
                i;

            for (i = 0; i < arr.length; ++i) {
                res.push(fn(arr[i], i));
            }

            return res;
        }

        function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
        }

        function extend(a, b) {
            for (var i in b) {
                if (hasOwnProp(b, i)) {
                    a[i] = b[i];
                }
            }

            if (hasOwnProp(b, 'toString')) {
                a.toString = b.toString;
            }

            if (hasOwnProp(b, 'valueOf')) {
                a.valueOf = b.valueOf;
            }

            return a;
        }

        function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
        }

        function defaultParsingFlags() {
            return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false,
                parsedDateParts: [],
                meridiem: null,
                rfc2822: false,
                weekdayMismatch: false
            };
        }

        function getParsingFlags(m) {
            if (m._pf == null) {
                m._pf = defaultParsingFlags();
            }

            return m._pf;
        }

        var some;

        if (Array.prototype.some) {
            some = Array.prototype.some;
        } else {
            some = function some(fun) {
                var t = Object(this);
                var len = t.length >>> 0;

                for (var i = 0; i < len; i++) {
                    if (i in t && fun.call(this, t[i], i, t)) {
                        return true;
                    }
                }

                return false;
            };
        }

        function isValid(m) {
            if (m._isValid == null) {
                var flags = getParsingFlags(m);
                var parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                });
                var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

                if (m._strict) {
                    isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
                }

                if (Object.isFrozen == null || !Object.isFrozen(m)) {
                    m._isValid = isNowValid;
                } else {
                    return isNowValid;
                }
            }

            return m._isValid;
        }

        function createInvalid(flags) {
            var m = createUTC(NaN);

            if (flags != null) {
                extend(getParsingFlags(m), flags);
            } else {
                getParsingFlags(m).userInvalidated = true;
            }

            return m;
        }

        var momentProperties = hooks.momentProperties = [];

        function copyConfig(to, from) {
            var i, prop, val;

            if (!isUndefined(from._isAMomentObject)) {
                to._isAMomentObject = from._isAMomentObject;
            }

            if (!isUndefined(from._i)) {
                to._i = from._i;
            }

            if (!isUndefined(from._f)) {
                to._f = from._f;
            }

            if (!isUndefined(from._l)) {
                to._l = from._l;
            }

            if (!isUndefined(from._strict)) {
                to._strict = from._strict;
            }

            if (!isUndefined(from._tzm)) {
                to._tzm = from._tzm;
            }

            if (!isUndefined(from._isUTC)) {
                to._isUTC = from._isUTC;
            }

            if (!isUndefined(from._offset)) {
                to._offset = from._offset;
            }

            if (!isUndefined(from._pf)) {
                to._pf = getParsingFlags(from);
            }

            if (!isUndefined(from._locale)) {
                to._locale = from._locale;
            }

            if (momentProperties.length > 0) {
                for (i = 0; i < momentProperties.length; i++) {
                    prop = momentProperties[i];
                    val = from[prop];

                    if (!isUndefined(val)) {
                        to[prop] = val;
                    }
                }
            }

            return to;
        }

        var updateInProgress = false;

        function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);

            if (!this.isValid()) {
                this._d = new Date(NaN);
            }

            if (updateInProgress === false) {
                updateInProgress = true;
                hooks.updateOffset(this);
                updateInProgress = false;
            }
        }

        function isMoment(obj) {
            return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
        }

        function absFloor(number) {
            if (number < 0) {
                return Math.ceil(number) || 0;
            } else {
                return Math.floor(number);
            }
        }

        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
                value = 0;

            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                value = absFloor(coercedNumber);
            }

            return value;
        }

        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;

            for (i = 0; i < len; i++) {
                if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                    diffs++;
                }
            }

            return diffs + lengthDiff;
        }

        function warn(msg) {
            if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
                console.warn('Deprecation warning: ' + msg);
            }
        }

        function deprecate(msg, fn) {
            var firstTime = true;
            return extend(function () {
                if (hooks.deprecationHandler != null) {
                    hooks.deprecationHandler(null, msg);
                }

                if (firstTime) {
                    var args = [];
                    var arg;

                    for (var i = 0; i < arguments.length; i++) {
                        arg = '';

                        if (_typeof(arguments[i]) === 'object') {
                            arg += '\n[' + i + '] ';

                            for (var key in arguments[0]) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }

                            arg = arg.slice(0, -2);
                        } else {
                            arg = arguments[i];
                        }

                        args.push(arg);
                    }

                    warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                    firstTime = false;
                }

                return fn.apply(this, arguments);
            }, fn);
        }

        var deprecations = {};

        function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(name, msg);
            }

            if (!deprecations[name]) {
                warn(msg);
                deprecations[name] = true;
            }
        }

        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;

        function isFunction(input) {
            return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
        }

        function set(config) {
            var prop, i;

            for (i in config) {
                prop = config[i];

                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }

            this._config = config;
            this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
        }

        function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
                prop;

            for (prop in childConfig) {
                if (hasOwnProp(childConfig, prop)) {
                    if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                        res[prop] = {};
                        extend(res[prop], parentConfig[prop]);
                        extend(res[prop], childConfig[prop]);
                    } else if (childConfig[prop] != null) {
                        res[prop] = childConfig[prop];
                    } else {
                        delete res[prop];
                    }
                }
            }

            for (prop in parentConfig) {
                if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                    res[prop] = extend({}, res[prop]);
                }
            }

            return res;
        }

        function Locale(config) {
            if (config != null) {
                this.set(config);
            }
        }

        var keys;

        if (Object.keys) {
            keys = Object.keys;
        } else {
            keys = function keys(obj) {
                var i,
                    res = [];

                for (i in obj) {
                    if (hasOwnProp(obj, i)) {
                        res.push(i);
                    }
                }

                return res;
            };
        }

        var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        };

        function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
        }

        var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A'
        };

        function longDateFormat(key) {
            var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];

            if (format || !formatUpper) {
                return format;
            }

            this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
                return val.slice(1);
            });
            return this._longDateFormat[key];
        }

        var defaultInvalidDate = 'Invalid date';

        function invalidDate() {
            return this._invalidDate;
        }

        var defaultOrdinal = '%d';
        var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

        function ordinal(number) {
            return this._ordinal.replace('%d', number);
        }

        var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        };

        function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
        }

        function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
        }

        var aliases = {};

        function addUnitAlias(unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
        }

        function normalizeUnits(units) {
            return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
        }

        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
                normalizedProp,
                prop;

            for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                    normalizedProp = normalizeUnits(prop);

                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }

            return normalizedInput;
        }

        var priorities = {};

        function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
        }

        function getPrioritizedUnits(unitsObj) {
            var units = [];

            for (var u in unitsObj) {
                units.push({
                    unit: u,
                    priority: priorities[u]
                });
            }

            units.sort(function (a, b) {
                return a.priority - b.priority;
            });
            return units;
        }

        function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
            return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
        }

        var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
        var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
        var formatFunctions = {};
        var formatTokenFunctions = {};

        function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;

            if (typeof callback === 'string') {
                func = function func() {
                    return this[callback]();
                };
            }

            if (token) {
                formatTokenFunctions[token] = func;
            }

            if (padded) {
                formatTokenFunctions[padded[0]] = function () {
                    return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                };
            }

            if (ordinal) {
                formatTokenFunctions[ordinal] = function () {
                    return this.localeData().ordinal(func.apply(this, arguments), token);
                };
            }
        }

        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
            }

            return input.replace(/\\/g, '');
        }

        function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
                i,
                length;

            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                } else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }

            return function (mom) {
                var output = '',
                    i;

                for (i = 0; i < length; i++) {
                    output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
                }

                return output;
            };
        }

        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.localeData().invalidDate();
            }

            format = expandFormat(format, m.localeData());
            formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
            return formatFunctions[format](m);
        }

        function expandFormat(format, locale) {
            var i = 5;

            function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
            }

            localFormattingTokens.lastIndex = 0;

            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }

            return format;
        }

        var match1 = /\d/;
        var match2 = /\d\d/;
        var match3 = /\d{3}/;
        var match4 = /\d{4}/;
        var match6 = /[+-]?\d{6}/;
        var match1to2 = /\d\d?/;
        var match3to4 = /\d\d\d\d?/;
        var match5to6 = /\d\d\d\d\d\d?/;
        var match1to3 = /\d{1,3}/;
        var match1to4 = /\d{1,4}/;
        var match1to6 = /[+-]?\d{1,6}/;
        var matchUnsigned = /\d+/;
        var matchSigned = /[+-]?\d+/;
        var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
        var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
        var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
        var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
        var regexes = {};

        function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
                return isStrict && strictRegex ? strictRegex : regex;
            };
        }

        function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
                return new RegExp(unescapeFormat(token));
            }

            return regexes[token](config._strict, config._locale);
        }

        function unescapeFormat(s) {
            return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
                return p1 || p2 || p3 || p4;
            }));
        }

        function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }

        var tokens = {};

        function addParseToken(token, callback) {
            var i,
                func = callback;

            if (typeof token === 'string') {
                token = [token];
            }

            if (isNumber(callback)) {
                func = function func(input, array) {
                    array[callback] = toInt(input);
                };
            }

            for (i = 0; i < token.length; i++) {
                tokens[token[i]] = func;
            }
        }

        function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
                config._w = config._w || {};
                callback(input, config._w, config, token);
            });
        }

        function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
                tokens[token](input, config._a, config, token);
            }
        }

        var YEAR = 0;
        var MONTH = 1;
        var DATE = 2;
        var HOUR = 3;
        var MINUTE = 4;
        var SECOND = 5;
        var MILLISECOND = 6;
        var WEEK = 7;
        var WEEKDAY = 8;
        addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? '' + y : '+' + y;
        });
        addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
        });
        addFormatToken(0, ['YYYY', 4], 0, 'year');
        addFormatToken(0, ['YYYYY', 5], 0, 'year');
        addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
        addUnitAlias('year', 'y');
        addUnitPriority('year', 1);
        addRegexToken('Y', matchSigned);
        addRegexToken('YY', match1to2, match2);
        addRegexToken('YYYY', match1to4, match4);
        addRegexToken('YYYYY', match1to6, match6);
        addRegexToken('YYYYYY', match1to6, match6);
        addParseToken(['YYYYY', 'YYYYYY'], YEAR);
        addParseToken('YYYY', function (input, array) {
            array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
        });
        addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
        });

        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }

        function isLeapYear(year) {
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        }

        hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
        };

        var getSetYear = makeGetSet('FullYear', true);

        function getIsLeapYear() {
            return isLeapYear(this.year());
        }

        function makeGetSet(unit, keepTime) {
            return function (value) {
                if (value != null) {
                    set$1(this, unit, value);
                    hooks.updateOffset(this, keepTime);
                    return this;
                } else {
                    return get(this, unit);
                }
            };
        }

        function get(mom, unit) {
            return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
        }

        function set$1(mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
                if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
                } else {
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                }
            }
        }

        function stringGet(units) {
            units = normalizeUnits(units);

            if (isFunction(this[units])) {
                return this[units]();
            }

            return this;
        }

        function stringSet(units, value) {
            if ((typeof units === "undefined" ? "undefined" : _typeof(units)) === 'object') {
                units = normalizeObjectUnits(units);
                var prioritized = getPrioritizedUnits(units);

                for (var i = 0; i < prioritized.length; i++) {
                    this[prioritized[i].unit](units[prioritized[i].unit]);
                }
            } else {
                units = normalizeUnits(units);

                if (isFunction(this[units])) {
                    return this[units](value);
                }
            }

            return this;
        }

        function mod(n, x) {
            return (n % x + x) % x;
        }

        var indexOf;

        if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
        } else {
            indexOf = function indexOf(o) {
                var i;

                for (i = 0; i < this.length; ++i) {
                    if (this[i] === o) {
                        return i;
                    }
                }

                return -1;
            };
        }

        function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
                return NaN;
            }

            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
        }

        addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
        });
        addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
        });
        addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
        });
        addUnitAlias('month', 'M');
        addUnitPriority('month', 8);
        addRegexToken('M', match1to2);
        addRegexToken('MM', match1to2, match2);
        addRegexToken('MMM', function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
        });
        addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
        });
        addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
        });
        addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);

            if (month != null) {
                array[MONTH] = month;
            } else {
                getParsingFlags(config).invalidMonth = input;
            }
        });
        var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
        var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

        function localeMonths(m, format) {
            if (!m) {
                return isArray(this._months) ? this._months : this._months['standalone'];
            }

            return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
        }

        var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

        function localeMonthsShort(m, format) {
            if (!m) {
                return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
            }

            return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
        }

        function handleStrictParse(monthName, format, strict) {
            var i,
                ii,
                mom,
                llc = monthName.toLocaleLowerCase();

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];

                for (i = 0; i < 12; ++i) {
                    mom = createUTC([2000, i]);
                    this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                    this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;

            if (this._monthsParseExact) {
                return handleStrictParse.call(this, monthName, format, strict);
            }

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                mom = createUTC([2000, i]);

                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
                }

                if (!strict && !this._monthsParse[i]) {
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }

                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                    return i;
                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        }

        function setMonth(mom, value) {
            var dayOfMonth;

            if (!mom.isValid()) {
                return mom;
            }

            if (typeof value === 'string') {
                if (/^\d+$/.test(value)) {
                    value = toInt(value);
                } else {
                    value = mom.localeData().monthsParse(value);

                    if (!isNumber(value)) {
                        return mom;
                    }
                }
            }

            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));

            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);

            return mom;
        }

        function getSetMonth(value) {
            if (value != null) {
                setMonth(this, value);
                hooks.updateOffset(this, true);
                return this;
            } else {
                return get(this, 'Month');
            }
        }

        function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
        }

        var defaultMonthsShortRegex = matchWord;

        function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }

                if (isStrict) {
                    return this._monthsShortStrictRegex;
                } else {
                    return this._monthsShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsShortRegex')) {
                    this._monthsShortRegex = defaultMonthsShortRegex;
                }

                return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
            }
        }

        var defaultMonthsRegex = matchWord;

        function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }

                if (isStrict) {
                    return this._monthsStrictRegex;
                } else {
                    return this._monthsRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    this._monthsRegex = defaultMonthsRegex;
                }

                return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
            }
        }

        function computeMonthsParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom;

            for (i = 0; i < 12; i++) {
                mom = createUTC([2000, i]);
                shortPieces.push(this.monthsShort(mom, ''));
                longPieces.push(this.months(mom, ''));
                mixedPieces.push(this.months(mom, ''));
                mixedPieces.push(this.monthsShort(mom, ''));
            }

            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);

            for (i = 0; i < 12; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
            }

            for (i = 0; i < 24; i++) {
                mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        }

        function createDate(y, m, d, h, M, s, ms) {
            var date = new Date(y, m, d, h, M, s, ms);

            if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }

            return date;
        }

        function createUTCDate(y) {
            var date = new Date(Date.UTC.apply(null, arguments));

            if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }

            return date;
        }

        function firstWeekOffset(year, dow, doy) {
            var fwd = 7 + dow - doy,
                fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
            return -fwdlw + fwd - 1;
        }

        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear,
                resDayOfYear;

            if (dayOfYear <= 0) {
                resYear = year - 1;
                resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
                resYear = year + 1;
                resDayOfYear = dayOfYear - daysInYear(year);
            } else {
                resYear = year;
                resDayOfYear = dayOfYear;
            }

            return {
                year: resYear,
                dayOfYear: resDayOfYear
            };
        }

        function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek,
                resYear;

            if (week < 1) {
                resYear = mom.year() - 1;
                resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
                resWeek = week - weeksInYear(mom.year(), dow, doy);
                resYear = mom.year() + 1;
            } else {
                resYear = mom.year();
                resWeek = week;
            }

            return {
                week: resWeek,
                year: resYear
            };
        }

        function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }

        addFormatToken('w', ['ww', 2], 'wo', 'week');
        addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
        addUnitAlias('week', 'w');
        addUnitAlias('isoWeek', 'W');
        addUnitPriority('week', 5);
        addUnitPriority('isoWeek', 5);
        addRegexToken('w', match1to2);
        addRegexToken('ww', match1to2, match2);
        addRegexToken('W', match1to2);
        addRegexToken('WW', match1to2, match2);
        addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
        });

        function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }

        var defaultLocaleWeek = {
            dow: 0,
            doy: 6
        };

        function localeFirstDayOfWeek() {
            return this._week.dow;
        }

        function localeFirstDayOfYear() {
            return this._week.doy;
        }

        function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        addFormatToken('d', 0, 'do', 'day');
        addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
        });
        addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
        });
        addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
        });
        addFormatToken('e', 0, 0, 'weekday');
        addFormatToken('E', 0, 0, 'isoWeekday');
        addUnitAlias('day', 'd');
        addUnitAlias('weekday', 'e');
        addUnitAlias('isoWeekday', 'E');
        addUnitPriority('day', 11);
        addUnitPriority('weekday', 11);
        addUnitPriority('isoWeekday', 11);
        addRegexToken('d', match1to2);
        addRegexToken('e', match1to2);
        addRegexToken('E', match1to2);
        addRegexToken('dd', function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
        });
        addRegexToken('ddd', function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
        });
        addRegexToken('dddd', function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
        });
        addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);

            if (weekday != null) {
                week.d = weekday;
            } else {
                getParsingFlags(config).invalidWeekday = input;
            }
        });
        addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
        });

        function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
                return input;
            }

            if (!isNaN(input)) {
                return parseInt(input, 10);
            }

            input = locale.weekdaysParse(input);

            if (typeof input === 'number') {
                return input;
            }

            return null;
        }

        function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
                return locale.weekdaysParse(input) % 7 || 7;
            }

            return isNaN(input) ? null : input;
        }

        var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

        function localeWeekdays(m, format) {
            if (!m) {
                return isArray(this._weekdays) ? this._weekdays : this._weekdays['standalone'];
            }

            return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
        }

        var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

        function localeWeekdaysShort(m) {
            return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
        }

        var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

        function localeWeekdaysMin(m) {
            return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
        }

        function handleStrictParse$1(weekdayName, format, strict) {
            var i,
                ii,
                mom,
                llc = weekdayName.toLocaleLowerCase();

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._minWeekdaysParse = [];

                for (i = 0; i < 7; ++i) {
                    mom = createUTC([2000, 1]).day(i);
                    this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                    this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                    this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._shortWeekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._weekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._weekdaysParse, llc);

                    if (ii !== -1) {
                        return ii;
                    }

                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;

            if (this._weekdaysParseExact) {
                return handleStrictParse$1.call(this, weekdayName, format, strict);
            }

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._minWeekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._fullWeekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                mom = createUTC([2000, 1]).day(i);

                if (strict && !this._fullWeekdaysParse[i]) {
                    this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                    this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                    this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
                }

                if (!this._weekdaysParse[i]) {
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }

                if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                    return i;
                } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                    return i;
                } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                    return i;
                } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        }

        function getSetDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();

            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        }

        function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        }

        function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            if (input != null) {
                var weekday = parseIsoWeekday(input, this.localeData());
                return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
                return this.day() || 7;
            }
        }

        var defaultWeekdaysRegex = matchWord;

        function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }

                if (isStrict) {
                    return this._weekdaysStrictRegex;
                } else {
                    return this._weekdaysRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    this._weekdaysRegex = defaultWeekdaysRegex;
                }

                return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
            }
        }

        var defaultWeekdaysShortRegex = matchWord;

        function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }

                if (isStrict) {
                    return this._weekdaysShortStrictRegex;
                } else {
                    return this._weekdaysShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                    this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                }

                return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
            }
        }

        var defaultWeekdaysMinRegex = matchWord;

        function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }

                if (isStrict) {
                    return this._weekdaysMinStrictRegex;
                } else {
                    return this._weekdaysMinRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                    this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                }

                return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
            }
        }

        function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var minPieces = [],
                shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                minp,
                shortp,
                longp;

            for (i = 0; i < 7; i++) {
                mom = createUTC([2000, 1]).day(i);
                minp = this.weekdaysMin(mom, '');
                shortp = this.weekdaysShort(mom, '');
                longp = this.weekdays(mom, '');
                minPieces.push(minp);
                shortPieces.push(shortp);
                longPieces.push(longp);
                mixedPieces.push(minp);
                mixedPieces.push(shortp);
                mixedPieces.push(longp);
            }

            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);

            for (i = 0; i < 7; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
                mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;
            this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
            this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
        }

        function hFormat() {
            return this.hours() % 12 || 12;
        }

        function kFormat() {
            return this.hours() || 24;
        }

        addFormatToken('H', ['HH', 2], 0, 'hour');
        addFormatToken('h', ['hh', 2], 0, hFormat);
        addFormatToken('k', ['kk', 2], 0, kFormat);
        addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });
        addFormatToken('hmmss', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });
        addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
        });
        addFormatToken('Hmmss', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });

        function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
            });
        }

        meridiem('a', true);
        meridiem('A', false);
        addUnitAlias('hour', 'h');
        addUnitPriority('hour', 13);

        function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
        }

        addRegexToken('a', matchMeridiem);
        addRegexToken('A', matchMeridiem);
        addRegexToken('H', match1to2);
        addRegexToken('h', match1to2);
        addRegexToken('k', match1to2);
        addRegexToken('HH', match1to2, match2);
        addRegexToken('hh', match1to2, match2);
        addRegexToken('kk', match1to2, match2);
        addRegexToken('hmm', match3to4);
        addRegexToken('hmmss', match5to6);
        addRegexToken('Hmm', match3to4);
        addRegexToken('Hmmss', match5to6);
        addParseToken(['H', 'HH'], HOUR);
        addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
        });
        addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4;
            var pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4;
            var pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
        });

        function localeIsPM(input) {
            return (input + '').toLowerCase().charAt(0) === 'p';
        }

        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

        function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        }

        var getSetHour = makeGetSet('Hours', true);
        var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,
            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,
            week: defaultLocaleWeek,
            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,
            meridiemParse: defaultLocaleMeridiemParse
        };
        var locales = {};
        var localeFamilies = {};
        var globalLocale;

        function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
        }

        function chooseLocale(names) {
            var i = 0,
                j,
                next,
                locale,
                split;

            while (i < names.length) {
                split = normalizeLocale(names[i]).split('-');
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split('-') : null;

                while (j > 0) {
                    locale = loadLocale(split.slice(0, j).join('-'));

                    if (locale) {
                        return locale;
                    }

                    if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                        break;
                    }

                    j--;
                }

                i++;
            }

            return globalLocale;
        }

        function loadLocale(name) {
            var oldLocale = null;

            if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
                try {
                    oldLocale = globalLocale._abbr;
                    var aliasedRequire = _require;
                    aliasedRequire('./locale/' + name);
                    getSetGlobalLocale(oldLocale);
                } catch (e) {}
            }

            return locales[name];
        }

        function getSetGlobalLocale(key, values) {
            var data;

            if (key) {
                if (isUndefined(values)) {
                    data = getLocale(key);
                } else {
                    data = defineLocale(key, values);
                }

                if (data) {
                    globalLocale = data;
                } else {
                    if (typeof console !== 'undefined' && console.warn) {
                        console.warn('Locale ' + key + ' not found. Did you forget to load it?');
                    }
                }
            }

            return globalLocale._abbr;
        }

        function defineLocale(name, config) {
            if (config !== null) {
                var locale,
                    parentConfig = baseConfig;
                config.abbr = name;

                if (locales[name] != null) {
                    deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                    parentConfig = locales[name]._config;
                } else if (config.parentLocale != null) {
                    if (locales[config.parentLocale] != null) {
                        parentConfig = locales[config.parentLocale]._config;
                    } else {
                        locale = loadLocale(config.parentLocale);

                        if (locale != null) {
                            parentConfig = locale._config;
                        } else {
                            if (!localeFamilies[config.parentLocale]) {
                                localeFamilies[config.parentLocale] = [];
                            }

                            localeFamilies[config.parentLocale].push({
                                name: name,
                                config: config
                            });
                            return null;
                        }
                    }
                }

                locales[name] = new Locale(mergeConfigs(parentConfig, config));

                if (localeFamilies[name]) {
                    localeFamilies[name].forEach(function (x) {
                        defineLocale(x.name, x.config);
                    });
                }

                getSetGlobalLocale(name);
                return locales[name];
            } else {
                delete locales[name];
                return null;
            }
        }

        function updateLocale(name, config) {
            if (config != null) {
                var locale,
                    tmpLocale,
                    parentConfig = baseConfig;
                tmpLocale = loadLocale(name);

                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }

                config = mergeConfigs(parentConfig, config);
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
                getSetGlobalLocale(name);
            } else {
                if (locales[name] != null) {
                    if (locales[name].parentLocale != null) {
                        locales[name] = locales[name].parentLocale;
                    } else if (locales[name] != null) {
                        delete locales[name];
                    }
                }
            }

            return locales[name];
        }

        function getLocale(key) {
            var locale;

            if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
            }

            if (!key) {
                return globalLocale;
            }

            if (!isArray(key)) {
                locale = loadLocale(key);

                if (locale) {
                    return locale;
                }

                key = [key];
            }

            return chooseLocale(key);
        }

        function listLocales() {
            return keys(locales);
        }

        function checkOverflow(m) {
            var overflow;
            var a = m._a;

            if (a && getParsingFlags(m).overflow === -2) {
                overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

                if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                    overflow = DATE;
                }

                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                    overflow = WEEK;
                }

                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                    overflow = WEEKDAY;
                }

                getParsingFlags(m).overflow = overflow;
            }

            return m;
        }

        function defaults(a, b, c) {
            if (a != null) {
                return a;
            }

            if (b != null) {
                return b;
            }

            return c;
        }

        function currentDateArray(config) {
            var nowValue = new Date(hooks.now());

            if (config._useUTC) {
                return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
            }

            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }

        function configFromArray(config) {
            var i,
                date,
                input = [],
                currentDate,
                expectedWeekday,
                yearToUse;

            if (config._d) {
                return;
            }

            currentDate = currentDateArray(config);

            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }

            if (config._dayOfYear != null) {
                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                    getParsingFlags(config)._overflowDayOfYear = true;
                }

                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }

            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }

            for (; i < 7; i++) {
                config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
            }

            if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
                config._nextDay = true;
                config._a[HOUR] = 0;
            }

            config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
            expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }

            if (config._nextDay) {
                config._a[HOUR] = 24;
            }

            if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
                getParsingFlags(config).weekdayMismatch = true;
            }
        }

        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
            w = config._w;

            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;
                weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
                week = defaults(w.W, 1);
                weekday = defaults(w.E, 1);

                if (weekday < 1 || weekday > 7) {
                    weekdayOverflow = true;
                }
            } else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;
                var curWeek = weekOfYear(createLocal(), dow, doy);
                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
                week = defaults(w.w, curWeek.week);

                if (w.d != null) {
                    weekday = w.d;

                    if (weekday < 0 || weekday > 6) {
                        weekdayOverflow = true;
                    }
                } else if (w.e != null) {
                    weekday = w.e + dow;

                    if (w.e < 0 || w.e > 6) {
                        weekdayOverflow = true;
                    }
                } else {
                    weekday = dow;
                }
            }

            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
                getParsingFlags(config)._overflowWeekday = true;
            } else {
                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
            }
        }

        var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
        var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
        var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
        var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]];
        var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];
        var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

        function configFromISO(config) {
            var i,
                l,
                string = config._i,
                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime,
                dateFormat,
                timeFormat,
                tzFormat;

            if (match) {
                getParsingFlags(config).iso = true;

                for (i = 0, l = isoDates.length; i < l; i++) {
                    if (isoDates[i][1].exec(match[1])) {
                        dateFormat = isoDates[i][0];
                        allowTime = isoDates[i][2] !== false;
                        break;
                    }
                }

                if (dateFormat == null) {
                    config._isValid = false;
                    return;
                }

                if (match[3]) {
                    for (i = 0, l = isoTimes.length; i < l; i++) {
                        if (isoTimes[i][1].exec(match[3])) {
                            timeFormat = (match[2] || ' ') + isoTimes[i][0];
                            break;
                        }
                    }

                    if (timeFormat == null) {
                        config._isValid = false;
                        return;
                    }
                }

                if (!allowTime && timeFormat != null) {
                    config._isValid = false;
                    return;
                }

                if (match[4]) {
                    if (tzRegex.exec(match[4])) {
                        tzFormat = 'Z';
                    } else {
                        config._isValid = false;
                        return;
                    }
                }

                config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                configFromStringAndFormat(config);
            } else {
                config._isValid = false;
            }
        }

        var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

        function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
            var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

            if (secondStr) {
                result.push(parseInt(secondStr, 10));
            }

            return result;
        }

        function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);

            if (year <= 49) {
                return 2000 + year;
            } else if (year <= 999) {
                return 1900 + year;
            }

            return year;
        }

        function preprocessRFC2822(s) {
            return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
        }

        function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
                var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                    weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();

                if (weekdayProvided !== weekdayActual) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return false;
                }
            }

            return true;
        }

        var obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60
        };

        function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
                return obsOffsets[obsOffset];
            } else if (militaryOffset) {
                return 0;
            } else {
                var hm = parseInt(numOffset, 10);
                var m = hm % 100,
                    h = (hm - m) / 100;
                return h * 60 + m;
            }
        }

        function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i));

            if (match) {
                var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);

                if (!checkWeekday(match[1], parsedArray, config)) {
                    return;
                }

                config._a = parsedArray;
                config._tzm = calculateOffset(match[8], match[9], match[10]);
                config._d = createUTCDate.apply(null, config._a);

                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

                getParsingFlags(config).rfc2822 = true;
            } else {
                config._isValid = false;
            }
        }

        function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);

            if (matched !== null) {
                config._d = new Date(+matched[1]);
                return;
            }

            configFromISO(config);

            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            configFromRFC2822(config);

            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            hooks.createFromInputFallback(config);
        }

        hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        });

        hooks.ISO_8601 = function () {};

        hooks.RFC_2822 = function () {};

        function configFromStringAndFormat(config) {
            if (config._f === hooks.ISO_8601) {
                configFromISO(config);
                return;
            }

            if (config._f === hooks.RFC_2822) {
                configFromRFC2822(config);
                return;
            }

            config._a = [];
            getParsingFlags(config).empty = true;
            var string = '' + config._i,
                i,
                parsedInput,
                tokens,
                token,
                skipped,
                stringLength = string.length,
                totalParsedInputLength = 0;
            tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

            for (i = 0; i < tokens.length; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];

                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));

                    if (skipped.length > 0) {
                        getParsingFlags(config).unusedInput.push(skipped);
                    }

                    string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                    totalParsedInputLength += parsedInput.length;
                }

                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        getParsingFlags(config).empty = false;
                    } else {
                        getParsingFlags(config).unusedTokens.push(token);
                    }

                    addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                    getParsingFlags(config).unusedTokens.push(token);
                }
            }

            getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;

            if (string.length > 0) {
                getParsingFlags(config).unusedInput.push(string);
            }

            if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
                getParsingFlags(config).bigHour = undefined;
            }

            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
            configFromArray(config);
            checkOverflow(config);
        }

        function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;

            if (meridiem == null) {
                return hour;
            }

            if (locale.meridiemHour != null) {
                return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
                isPm = locale.isPM(meridiem);

                if (isPm && hour < 12) {
                    hour += 12;
                }

                if (!isPm && hour === 12) {
                    hour = 0;
                }

                return hour;
            } else {
                return hour;
            }
        }

        function configFromStringAndArray(config) {
            var tempConfig, bestMoment, scoreToBeat, i, currentScore;

            if (config._f.length === 0) {
                getParsingFlags(config).invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }

            for (i = 0; i < config._f.length; i++) {
                currentScore = 0;
                tempConfig = copyConfig({}, config);

                if (config._useUTC != null) {
                    tempConfig._useUTC = config._useUTC;
                }

                tempConfig._f = config._f[i];
                configFromStringAndFormat(tempConfig);

                if (!isValid(tempConfig)) {
                    continue;
                }

                currentScore += getParsingFlags(tempConfig).charsLeftOver;
                currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
                getParsingFlags(tempConfig).score = currentScore;

                if (scoreToBeat == null || currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }

            extend(config, bestMoment || tempConfig);
        }

        function configFromObject(config) {
            if (config._d) {
                return;
            }

            var i = normalizeObjectUnits(config._i);
            config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
                return obj && parseInt(obj, 10);
            });
            configFromArray(config);
        }

        function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));

            if (res._nextDay) {
                res.add(1, 'd');
                res._nextDay = undefined;
            }

            return res;
        }

        function prepareConfig(config) {
            var input = config._i,
                format = config._f;
            config._locale = config._locale || getLocale(config._l);

            if (input === null || format === undefined && input === '') {
                return createInvalid({
                    nullInput: true
                });
            }

            if (typeof input === 'string') {
                config._i = input = config._locale.preparse(input);
            }

            if (isMoment(input)) {
                return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
                config._d = input;
            } else if (isArray(format)) {
                configFromStringAndArray(config);
            } else if (format) {
                configFromStringAndFormat(config);
            } else {
                configFromInput(config);
            }

            if (!isValid(config)) {
                config._d = null;
            }

            return config;
        }

        function configFromInput(config) {
            var input = config._i;

            if (isUndefined(input)) {
                config._d = new Date(hooks.now());
            } else if (isDate(input)) {
                config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
                configFromString(config);
            } else if (isArray(input)) {
                config._a = map(input.slice(0), function (obj) {
                    return parseInt(obj, 10);
                });
                configFromArray(config);
            } else if (isObject(input)) {
                configFromObject(config);
            } else if (isNumber(input)) {
                config._d = new Date(input);
            } else {
                hooks.createFromInputFallback(config);
            }
        }

        function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};

            if (locale === true || locale === false) {
                strict = locale;
                locale = undefined;
            }

            if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
                input = undefined;
            }

            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;
            return createFromConfig(c);
        }

        function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
        }

        var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
            var other = createLocal.apply(null, arguments);

            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        });
        var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
            var other = createLocal.apply(null, arguments);

            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        });

        function pickBy(fn, moments) {
            var res, i;

            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }

            if (!moments.length) {
                return createLocal();
            }

            res = moments[0];

            for (i = 1; i < moments.length; ++i) {
                if (!moments[i].isValid() || moments[i][fn](res)) {
                    res = moments[i];
                }
            }

            return res;
        }

        function min() {
            var args = [].slice.call(arguments, 0);
            return pickBy('isBefore', args);
        }

        function max() {
            var args = [].slice.call(arguments, 0);
            return pickBy('isAfter', args);
        }

        var now = function now() {
            return Date.now ? Date.now() : +new Date();
        };

        var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

        function isDurationValid(m) {
            for (var key in m) {
                if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                    return false;
                }
            }

            var unitHasDecimal = false;

            for (var i = 0; i < ordering.length; ++i) {
                if (m[ordering[i]]) {
                    if (unitHasDecimal) {
                        return false;
                    }

                    if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                        unitHasDecimal = true;
                    }
                }
            }

            return true;
        }

        function isValid$1() {
            return this._isValid;
        }

        function createInvalid$1() {
            return createDuration(NaN);
        }

        function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;
            this._isValid = isDurationValid(normalizedInput);
            this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 1000 * 60 * 60;
            this._days = +days + weeks * 7;
            this._months = +months + quarters * 3 + years * 12;
            this._data = {};
            this._locale = getLocale();

            this._bubble();
        }

        function isDuration(obj) {
            return obj instanceof Duration;
        }

        function absRound(number) {
            if (number < 0) {
                return Math.round(-1 * number) * -1;
            } else {
                return Math.round(number);
            }
        }

        function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
                var offset = this.utcOffset();
                var sign = '+';

                if (offset < 0) {
                    offset = -offset;
                    sign = '-';
                }

                return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
            });
        }

        offset('Z', ':');
        offset('ZZ', '');
        addRegexToken('Z', matchShortOffset);
        addRegexToken('ZZ', matchShortOffset);
        addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
        });
        var chunkOffset = /([\+\-]|\d\d)/gi;

        function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher);

            if (matches === null) {
                return null;
            }

            var chunk = matches[matches.length - 1] || [];
            var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            var minutes = +(parts[1] * 60) + toInt(parts[2]);
            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
        }

        function cloneWithOffset(input, model) {
            var res, diff;

            if (model._isUTC) {
                res = model.clone();
                diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();

                res._d.setTime(res._d.valueOf() + diff);

                hooks.updateOffset(res, false);
                return res;
            } else {
                return createLocal(input).local();
            }
        }

        function getDateOffset(m) {
            return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
        }

        hooks.updateOffset = function () {};

        function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
                localAdjust;

            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            if (input != null) {
                if (typeof input === 'string') {
                    input = offsetFromString(matchShortOffset, input);

                    if (input === null) {
                        return this;
                    }
                } else if (Math.abs(input) < 16 && !keepMinutes) {
                    input = input * 60;
                }

                if (!this._isUTC && keepLocalTime) {
                    localAdjust = getDateOffset(this);
                }

                this._offset = input;
                this._isUTC = true;

                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }

                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        hooks.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }

                return this;
            } else {
                return this._isUTC ? offset : getDateOffset(this);
            }
        }

        function getSetZone(input, keepLocalTime) {
            if (input != null) {
                if (typeof input !== 'string') {
                    input = -input;
                }

                this.utcOffset(input, keepLocalTime);
                return this;
            } else {
                return -this.utcOffset();
            }
        }

        function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        }

        function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.subtract(getDateOffset(this), 'm');
                }
            }

            return this;
        }

        function setOffsetToParsedOffset() {
            if (this._tzm != null) {
                this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
                var tZone = offsetFromString(matchOffset, this._i);

                if (tZone != null) {
                    this.utcOffset(tZone);
                } else {
                    this.utcOffset(0, true);
                }
            }

            return this;
        }

        function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
                return false;
            }

            input = input ? createLocal(input).utcOffset() : 0;
            return (this.utcOffset() - input) % 60 === 0;
        }

        function isDaylightSavingTime() {
            return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
        }

        function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
                return this._isDSTShifted;
            }

            var c = {};
            copyConfig(c, this);
            c = prepareConfig(c);

            if (c._a) {
                var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
                this._isDSTShifted = false;
            }

            return this._isDSTShifted;
        }

        function isLocal() {
            return this.isValid() ? !this._isUTC : false;
        }

        function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
        }

        function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }

        var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
        var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

        function createDuration(input, key) {
            var duration = input,
                match = null,
                sign,
                ret,
                diffRes;

            if (isDuration(input)) {
                duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months
                };
            } else if (isNumber(input)) {
                duration = {};

                if (key) {
                    duration[key] = input;
                } else {
                    duration.milliseconds = input;
                }
            } else if (!!(match = aspNetRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign
                };
            } else if (!!(match = isoRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : match[1] === '+' ? 1 : 1;
                duration = {
                    y: parseIso(match[2], sign),
                    M: parseIso(match[3], sign),
                    w: parseIso(match[4], sign),
                    d: parseIso(match[5], sign),
                    h: parseIso(match[6], sign),
                    m: parseIso(match[7], sign),
                    s: parseIso(match[8], sign)
                };
            } else if (duration == null) {
                duration = {};
            } else if ((typeof duration === "undefined" ? "undefined" : _typeof(duration)) === 'object' && ('from' in duration || 'to' in duration)) {
                diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
            }

            ret = new Duration(duration);

            if (isDuration(input) && hasOwnProp(input, '_locale')) {
                ret._locale = input._locale;
            }

            return ret;
        }

        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;

        function parseIso(inp, sign) {
            var res = inp && parseFloat(inp.replace(',', '.'));
            return (isNaN(res) ? 0 : res) * sign;
        }

        function positiveMomentsDifference(base, other) {
            var res = {
                milliseconds: 0,
                months: 0
            };
            res.months = other.month() - base.month() + (other.year() - base.year()) * 12;

            if (base.clone().add(res.months, 'M').isAfter(other)) {
                --res.months;
            }

            res.milliseconds = +other - +base.clone().add(res.months, 'M');
            return res;
        }

        function momentsDifference(base, other) {
            var res;

            if (!(base.isValid() && other.isValid())) {
                return {
                    milliseconds: 0,
                    months: 0
                };
            }

            other = cloneWithOffset(other, base);

            if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
            } else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
            }

            return res;
        }

        function createAdder(direction, name) {
            return function (val, period) {
                var dur, tmp;

                if (period !== null && !isNaN(+period)) {
                    deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                    tmp = val;
                    val = period;
                    period = tmp;
                }

                val = typeof val === 'string' ? +val : val;
                dur = createDuration(val, period);
                addSubtract(this, dur, direction);
                return this;
            };
        }

        function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);

            if (!mom.isValid()) {
                return;
            }

            updateOffset = updateOffset == null ? true : updateOffset;

            if (months) {
                setMonth(mom, get(mom, 'Month') + months * isAdding);
            }

            if (days) {
                set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }

            if (milliseconds) {
                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }

            if (updateOffset) {
                hooks.updateOffset(mom, days || months);
            }
        }

        var add = createAdder(1, 'add');
        var subtract = createAdder(-1, 'subtract');

        function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
        }

        function calendar$1(time, formats) {
            var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf('day'),
                format = hooks.calendarFormat(this, sod) || 'sameElse';
            var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
            return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
        }

        function clone() {
            return new Moment(this);
        }

        function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);

            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }

            units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');

            if (units === 'millisecond') {
                return this.valueOf() > localInput.valueOf();
            } else {
                return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
        }

        function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);

            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }

            units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');

            if (units === 'millisecond') {
                return this.valueOf() < localInput.valueOf();
            } else {
                return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
        }

        function isBetween(from, to, units, inclusivity) {
            inclusivity = inclusivity || '()';
            return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
        }

        function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;

            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }

            units = normalizeUnits(units || 'millisecond');

            if (units === 'millisecond') {
                return this.valueOf() === localInput.valueOf();
            } else {
                inputMs = localInput.valueOf();
                return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
            }
        }

        function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
        }

        function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
        }

        function diff(input, units, asFloat) {
            var that, zoneDelta, output;

            if (!this.isValid()) {
                return NaN;
            }

            that = cloneWithOffset(input, this);

            if (!that.isValid()) {
                return NaN;
            }

            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
            units = normalizeUnits(units);

            switch (units) {
                case 'year':
                    output = monthDiff(this, that) / 12;
                    break;

                case 'month':
                    output = monthDiff(this, that);
                    break;

                case 'quarter':
                    output = monthDiff(this, that) / 3;
                    break;

                case 'second':
                    output = (this - that) / 1e3;
                    break;

                case 'minute':
                    output = (this - that) / 6e4;
                    break;

                case 'hour':
                    output = (this - that) / 36e5;
                    break;

                case 'day':
                    output = (this - that - zoneDelta) / 864e5;
                    break;

                case 'week':
                    output = (this - that - zoneDelta) / 6048e5;
                    break;

                default:
                    output = this - that;
            }

            return asFloat ? output : absFloor(output);
        }

        function monthDiff(a, b) {
            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                anchor = a.clone().add(wholeMonthDiff, 'months'),
                anchor2,
                adjust;

            if (b - anchor < 0) {
                anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                adjust = (b - anchor) / (anchor - anchor2);
            } else {
                anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                adjust = (b - anchor) / (anchor2 - anchor);
            }

            return -(wholeMonthDiff + adjust) || 0;
        }

        hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
        hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

        function toString() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        }

        function toISOString(keepOffset) {
            if (!this.isValid()) {
                return null;
            }

            var utc = keepOffset !== true;
            var m = utc ? this.clone().utc() : this;

            if (m.year() < 0 || m.year() > 9999) {
                return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
            }

            if (isFunction(Date.prototype.toISOString)) {
                if (utc) {
                    return this.toDate().toISOString();
                } else {
                    return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
                }
            }

            return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }

        function inspect() {
            if (!this.isValid()) {
                return 'moment.invalid(/* ' + this._i + ' */)';
            }

            var func = 'moment';
            var zone = '';

            if (!this.isLocal()) {
                func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                zone = 'Z';
            }

            var prefix = '[' + func + '("]';
            var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            var datetime = '-MM-DD[T]HH:mm:ss.SSS';
            var suffix = zone + '[")]';
            return this.format(prefix + year + datetime + suffix);
        }

        function format(inputString) {
            if (!inputString) {
                inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
            }

            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
        }

        function from(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
                return createDuration({
                    to: this,
                    from: time
                }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
        }

        function to(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
                return createDuration({
                    from: this,
                    to: time
                }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
        }

        function locale(key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = getLocale(key);

                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }

                return this;
            }
        }

        var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        });

        function localeData() {
            return this._locale;
        }

        function startOf(units) {
            units = normalizeUnits(units);

            switch (units) {
                case 'year':
                    this.month(0);

                case 'quarter':
                case 'month':
                    this.date(1);

                case 'week':
                case 'isoWeek':
                case 'day':
                case 'date':
                    this.hours(0);

                case 'hour':
                    this.minutes(0);

                case 'minute':
                    this.seconds(0);

                case 'second':
                    this.milliseconds(0);
            }

            if (units === 'week') {
                this.weekday(0);
            }

            if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
        }

        function endOf(units) {
            units = normalizeUnits(units);

            if (units === undefined || units === 'millisecond') {
                return this;
            }

            if (units === 'date') {
                units = 'day';
            }

            return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
        }

        function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
        }

        function unix() {
            return Math.floor(this.valueOf() / 1000);
        }

        function toDate() {
            return new Date(this.valueOf());
        }

        function toArray() {
            var m = this;
            return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
        }

        function toObject() {
            var m = this;
            return {
                years: m.year(),
                months: m.month(),
                date: m.date(),
                hours: m.hours(),
                minutes: m.minutes(),
                seconds: m.seconds(),
                milliseconds: m.milliseconds()
            };
        }

        function toJSON() {
            return this.isValid() ? this.toISOString() : null;
        }

        function isValid$2() {
            return isValid(this);
        }

        function parsingFlags() {
            return extend({}, getParsingFlags(this));
        }

        function invalidAt() {
            return getParsingFlags(this).overflow;
        }

        function creationData() {
            return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict
            };
        }

        addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
        });
        addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
        });

        function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
        }

        addWeekYearFormatToken('gggg', 'weekYear');
        addWeekYearFormatToken('ggggg', 'weekYear');
        addWeekYearFormatToken('GGGG', 'isoWeekYear');
        addWeekYearFormatToken('GGGGG', 'isoWeekYear');
        addUnitAlias('weekYear', 'gg');
        addUnitAlias('isoWeekYear', 'GG');
        addUnitPriority('weekYear', 1);
        addUnitPriority('isoWeekYear', 1);
        addRegexToken('G', matchSigned);
        addRegexToken('g', matchSigned);
        addRegexToken('GG', match1to2, match2);
        addRegexToken('gg', match1to2, match2);
        addRegexToken('GGGG', match1to4, match4);
        addRegexToken('gggg', match1to4, match4);
        addRegexToken('GGGGG', match1to6, match6);
        addRegexToken('ggggg', match1to6, match6);
        addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
        });
        addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
        });

        function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
        }

        function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
        }

        function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
        }

        function getWeeksInYear() {
            var weekInfo = this.localeData()._week;

            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }

        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;

            if (input == null) {
                return weekOfYear(this, dow, doy).year;
            } else {
                weeksTarget = weeksInYear(input, dow, doy);

                if (week > weeksTarget) {
                    week = weeksTarget;
                }

                return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
        }

        function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
        }

        addFormatToken('Q', 0, 'Qo', 'quarter');
        addUnitAlias('quarter', 'Q');
        addUnitPriority('quarter', 7);
        addRegexToken('Q', match1);
        addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
        });

        function getSetQuarter(input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        }

        addFormatToken('D', ['DD', 2], 'Do', 'date');
        addUnitAlias('date', 'D');
        addUnitPriority('date', 9);
        addRegexToken('D', match1to2);
        addRegexToken('DD', match1to2, match2);
        addRegexToken('Do', function (isStrict, locale) {
            return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
        });
        addParseToken(['D', 'DD'], DATE);
        addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
        });
        var getSetDayOfMonth = makeGetSet('Date', true);
        addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
        addUnitAlias('dayOfYear', 'DDD');
        addUnitPriority('dayOfYear', 4);
        addRegexToken('DDD', match1to3);
        addRegexToken('DDDD', match3);
        addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
        });

        function getSetDayOfYear(input) {
            var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
        }

        addFormatToken('m', ['mm', 2], 0, 'minute');
        addUnitAlias('minute', 'm');
        addUnitPriority('minute', 14);
        addRegexToken('m', match1to2);
        addRegexToken('mm', match1to2, match2);
        addParseToken(['m', 'mm'], MINUTE);
        var getSetMinute = makeGetSet('Minutes', false);
        addFormatToken('s', ['ss', 2], 0, 'second');
        addUnitAlias('second', 's');
        addUnitPriority('second', 15);
        addRegexToken('s', match1to2);
        addRegexToken('ss', match1to2, match2);
        addParseToken(['s', 'ss'], SECOND);
        var getSetSecond = makeGetSet('Seconds', false);
        addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
        });
        addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
        });
        addFormatToken(0, ['SSS', 3], 0, 'millisecond');
        addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
        });
        addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
        });
        addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
        });
        addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
        });
        addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
        });
        addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
        });
        addUnitAlias('millisecond', 'ms');
        addUnitPriority('millisecond', 16);
        addRegexToken('S', match1to3, match1);
        addRegexToken('SS', match1to3, match2);
        addRegexToken('SSS', match1to3, match3);
        var token;

        for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
        }

        function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
        }

        for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
        }

        var getSetMillisecond = makeGetSet('Milliseconds', false);
        addFormatToken('z', 0, 0, 'zoneAbbr');
        addFormatToken('zz', 0, 0, 'zoneName');

        function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
        }

        function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        }

        var proto = Moment.prototype;
        proto.add = add;
        proto.calendar = calendar$1;
        proto.clone = clone;
        proto.diff = diff;
        proto.endOf = endOf;
        proto.format = format;
        proto.from = from;
        proto.fromNow = fromNow;
        proto.to = to;
        proto.toNow = toNow;
        proto.get = stringGet;
        proto.invalidAt = invalidAt;
        proto.isAfter = isAfter;
        proto.isBefore = isBefore;
        proto.isBetween = isBetween;
        proto.isSame = isSame;
        proto.isSameOrAfter = isSameOrAfter;
        proto.isSameOrBefore = isSameOrBefore;
        proto.isValid = isValid$2;
        proto.lang = lang;
        proto.locale = locale;
        proto.localeData = localeData;
        proto.max = prototypeMax;
        proto.min = prototypeMin;
        proto.parsingFlags = parsingFlags;
        proto.set = stringSet;
        proto.startOf = startOf;
        proto.subtract = subtract;
        proto.toArray = toArray;
        proto.toObject = toObject;
        proto.toDate = toDate;
        proto.toISOString = toISOString;
        proto.inspect = inspect;
        proto.toJSON = toJSON;
        proto.toString = toString;
        proto.unix = unix;
        proto.valueOf = valueOf;
        proto.creationData = creationData;
        proto.year = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week = proto.weeks = getSetWeek;
        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
        proto.weeksInYear = getWeeksInYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.date = getSetDayOfMonth;
        proto.day = proto.days = getSetDayOfWeek;
        proto.weekday = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset = getSetOffset;
        proto.utc = setOffsetToUTC;
        proto.local = setOffsetToLocal;
        proto.parseZone = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST = isDaylightSavingTime;
        proto.isLocal = isLocal;
        proto.isUtcOffset = isUtcOffset;
        proto.isUtc = isUtc;
        proto.isUTC = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
        proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
        proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
        proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
        proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

        function createUnix(input) {
            return createLocal(input * 1000);
        }

        function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
        }

        function preParsePostFormat(string) {
            return string;
        }

        var proto$1 = Locale.prototype;
        proto$1.calendar = calendar;
        proto$1.longDateFormat = longDateFormat;
        proto$1.invalidDate = invalidDate;
        proto$1.ordinal = ordinal;
        proto$1.preparse = preParsePostFormat;
        proto$1.postformat = preParsePostFormat;
        proto$1.relativeTime = relativeTime;
        proto$1.pastFuture = pastFuture;
        proto$1.set = set;
        proto$1.months = localeMonths;
        proto$1.monthsShort = localeMonthsShort;
        proto$1.monthsParse = localeMonthsParse;
        proto$1.monthsRegex = monthsRegex;
        proto$1.monthsShortRegex = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;
        proto$1.weekdays = localeWeekdays;
        proto$1.weekdaysMin = localeWeekdaysMin;
        proto$1.weekdaysShort = localeWeekdaysShort;
        proto$1.weekdaysParse = localeWeekdaysParse;
        proto$1.weekdaysRegex = weekdaysRegex;
        proto$1.weekdaysShortRegex = weekdaysShortRegex;
        proto$1.weekdaysMinRegex = weekdaysMinRegex;
        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;

        function get$1(format, index, field, setter) {
            var locale = getLocale();
            var utc = createUTC().set(setter, index);
            return locale[field](utc, format);
        }

        function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';

            if (index != null) {
                return get$1(format, index, field, 'month');
            }

            var i;
            var out = [];

            for (i = 0; i < 12; i++) {
                out[i] = get$1(format, i, field, 'month');
            }

            return out;
        }

        function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            } else {
                format = localeSorted;
                index = format;
                localeSorted = false;

                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            }

            var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0;

            if (index != null) {
                return get$1(format, (index + shift) % 7, field, 'day');
            }

            var i;
            var out = [];

            for (i = 0; i < 7; i++) {
                out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }

            return out;
        }

        function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
        }

        function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
        }

        function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
        }

        function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
        }

        function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
        }

        getSetGlobalLocale('en', {
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function ordinal(number) {
                var b = number % 10,
                    output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
                return number + output;
            }
        });
        hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
        hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
        var mathAbs = Math.abs;

        function abs() {
            var data = this._data;
            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);
            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);
            return this;
        }

        function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);
            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;
            return duration._bubble();
        }

        function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
        }

        function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
        }

        function absCeil(number) {
            if (number < 0) {
                return Math.floor(number);
            } else {
                return Math.ceil(number);
            }
        }

        function bubble() {
            var milliseconds = this._milliseconds;
            var days = this._days;
            var months = this._months;
            var data = this._data;
            var seconds, minutes, hours, years, monthsFromDays;

            if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                days = 0;
                months = 0;
            }

            data.milliseconds = milliseconds % 1000;
            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;
            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;
            hours = absFloor(minutes / 60);
            data.hours = hours % 24;
            days += absFloor(hours / 24);
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));
            years = absFloor(months / 12);
            months %= 12;
            data.days = days;
            data.months = months;
            data.years = years;
            return this;
        }

        function daysToMonths(days) {
            return days * 4800 / 146097;
        }

        function monthsToDays(months) {
            return months * 146097 / 4800;
        }

        function as(units) {
            if (!this.isValid()) {
                return NaN;
            }

            var days;
            var months;
            var milliseconds = this._milliseconds;
            units = normalizeUnits(units);

            if (units === 'month' || units === 'year') {
                days = this._days + milliseconds / 864e5;
                months = this._months + daysToMonths(days);
                return units === 'month' ? months : months / 12;
            } else {
                days = this._days + Math.round(monthsToDays(this._months));

                switch (units) {
                    case 'week':
                        return days / 7 + milliseconds / 6048e5;

                    case 'day':
                        return days + milliseconds / 864e5;

                    case 'hour':
                        return days * 24 + milliseconds / 36e5;

                    case 'minute':
                        return days * 1440 + milliseconds / 6e4;

                    case 'second':
                        return days * 86400 + milliseconds / 1000;

                    case 'millisecond':
                        return Math.floor(days * 864e5) + milliseconds;

                    default:
                        throw new Error('Unknown unit ' + units);
                }
            }
        }

        function valueOf$1() {
            if (!this.isValid()) {
                return NaN;
            }

            return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
        }

        function makeAs(alias) {
            return function () {
                return this.as(alias);
            };
        }

        var asMilliseconds = makeAs('ms');
        var asSeconds = makeAs('s');
        var asMinutes = makeAs('m');
        var asHours = makeAs('h');
        var asDays = makeAs('d');
        var asWeeks = makeAs('w');
        var asMonths = makeAs('M');
        var asYears = makeAs('y');

        function clone$1() {
            return createDuration(this);
        }

        function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
        }

        function makeGetter(name) {
            return function () {
                return this.isValid() ? this._data[name] : NaN;
            };
        }

        var milliseconds = makeGetter('milliseconds');
        var seconds = makeGetter('seconds');
        var minutes = makeGetter('minutes');
        var hours = makeGetter('hours');
        var days = makeGetter('days');
        var months = makeGetter('months');
        var years = makeGetter('years');

        function weeks() {
            return absFloor(this.days() / 7);
        }

        var round = Math.round;
        var thresholds = {
            ss: 44,
            s: 45,
            m: 45,
            h: 22,
            d: 26,
            M: 11
        };

        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }

        function relativeTime$1(posNegDuration, withoutSuffix, locale) {
            var duration = createDuration(posNegDuration).abs();
            var seconds = round(duration.as('s'));
            var minutes = round(duration.as('m'));
            var hours = round(duration.as('h'));
            var days = round(duration.as('d'));
            var months = round(duration.as('M'));
            var years = round(duration.as('y'));
            var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
        }

        function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
                return round;
            }

            if (typeof roundingFunction === 'function') {
                round = roundingFunction;
                return true;
            }

            return false;
        }

        function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
                return false;
            }

            if (limit === undefined) {
                return thresholds[threshold];
            }

            thresholds[threshold] = limit;

            if (threshold === 's') {
                thresholds.ss = limit - 1;
            }

            return true;
        }

        function humanize(withSuffix) {
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var locale = this.localeData();
            var output = relativeTime$1(this, !withSuffix, locale);

            if (withSuffix) {
                output = locale.pastFuture(+this, output);
            }

            return locale.postformat(output);
        }

        var abs$1 = Math.abs;

        function sign(x) {
            return (x > 0) - (x < 0) || +x;
        }

        function toISOString$1() {
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var seconds = abs$1(this._milliseconds) / 1000;
            var days = abs$1(this._days);
            var months = abs$1(this._months);
            var minutes, hours, years;
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;
            years = absFloor(months / 12);
            months %= 12;
            var Y = years;
            var M = months;
            var D = days;
            var h = hours;
            var m = minutes;
            var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
            var total = this.asSeconds();

            if (!total) {
                return 'P0D';
            }

            var totalSign = total < 0 ? '-' : '';
            var ymSign = sign(this._months) !== sign(total) ? '-' : '';
            var daysSign = sign(this._days) !== sign(total) ? '-' : '';
            var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
            return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
        }

        var proto$2 = Duration.prototype;
        proto$2.isValid = isValid$1;
        proto$2.abs = abs;
        proto$2.add = add$1;
        proto$2.subtract = subtract$1;
        proto$2.as = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds = asSeconds;
        proto$2.asMinutes = asMinutes;
        proto$2.asHours = asHours;
        proto$2.asDays = asDays;
        proto$2.asWeeks = asWeeks;
        proto$2.asMonths = asMonths;
        proto$2.asYears = asYears;
        proto$2.valueOf = valueOf$1;
        proto$2._bubble = bubble;
        proto$2.clone = clone$1;
        proto$2.get = get$2;
        proto$2.milliseconds = milliseconds;
        proto$2.seconds = seconds;
        proto$2.minutes = minutes;
        proto$2.hours = hours;
        proto$2.days = days;
        proto$2.weeks = weeks;
        proto$2.months = months;
        proto$2.years = years;
        proto$2.humanize = humanize;
        proto$2.toISOString = toISOString$1;
        proto$2.toString = toISOString$1;
        proto$2.toJSON = toISOString$1;
        proto$2.locale = locale;
        proto$2.localeData = localeData;
        proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
        proto$2.lang = lang;
        addFormatToken('X', 0, 0, 'unix');
        addFormatToken('x', 0, 0, 'valueOf');
        addRegexToken('x', matchSigned);
        addRegexToken('X', matchTimestamp);
        addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input, 10) * 1000);
        });
        addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
        });
        hooks.version = '2.22.1';
        setHookCallback(createLocal);
        hooks.fn = proto;
        hooks.min = min;
        hooks.max = max;
        hooks.now = now;
        hooks.utc = createUTC;
        hooks.unix = createUnix;
        hooks.months = listMonths;
        hooks.isDate = isDate;
        hooks.locale = getSetGlobalLocale;
        hooks.invalid = createInvalid;
        hooks.duration = createDuration;
        hooks.isMoment = isMoment;
        hooks.weekdays = listWeekdays;
        hooks.parseZone = createInZone;
        hooks.localeData = getLocale;
        hooks.isDuration = isDuration;
        hooks.monthsShort = listMonthsShort;
        hooks.weekdaysMin = listWeekdaysMin;
        hooks.defineLocale = defineLocale;
        hooks.updateLocale = updateLocale;
        hooks.locales = listLocales;
        hooks.weekdaysShort = listWeekdaysShort;
        hooks.normalizeUnits = normalizeUnits;
        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat = getCalendarFormat;
        hooks.prototype = proto;
        hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
            DATE: 'YYYY-MM-DD',
            TIME: 'HH:mm',
            TIME_SECONDS: 'HH:mm:ss',
            TIME_MS: 'HH:mm:ss.SSS',
            WEEK: 'YYYY-[W]WW',
            MONTH: 'YYYY-MM'
        };
        return hooks;
    });
},546,[],"node_modules/moment/moment.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var v1 = _require(_dependencyMap[0], './v1');

  var v4 = _require(_dependencyMap[1], './v4');

  var uuid = v4;
  uuid.v1 = v1;
  uuid.v4 = v4;
  module.exports = uuid;
},547,[548,551],"node_modules/react-native-gifted-chat/node_modules/uuid/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var rng = _require(_dependencyMap[0], './lib/rng');

  var bytesToUuid = _require(_dependencyMap[1], './lib/bytesToUuid');

  var _nodeId;

  var _clockseq;

  var _lastMSecs = 0;
  var _lastNSecs = 0;

  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];
    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

    if (node == null || clockseq == null) {
      var seedBytes = rng();

      if (node == null) {
        node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
      }

      if (clockseq == null) {
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    }

    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }

    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    msecs += 12219292800000;
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;
    var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;
    b[i++] = tmh >>> 24 & 0xf | 0x10;
    b[i++] = tmh >>> 16 & 0xff;
    b[i++] = clockseq >>> 8 | 0x80;
    b[i++] = clockseq & 0xff;

    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }

    return buf ? buf : bytesToUuid(b);
  }

  module.exports = v1;
},548,[549,550],"node_modules/react-native-gifted-chat/node_modules/uuid/v1.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && msCrypto.getRandomValues.bind(msCrypto);

  if (getRandomValues) {
    var rnds8 = new Uint8Array(16);

    module.exports = function whatwgRNG() {
      getRandomValues(rnds8);
      return rnds8;
    };
  } else {
    var rnds = new Array(16);

    module.exports = function mathRNG() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return rnds;
    };
  }
},549,[],"node_modules/react-native-gifted-chat/node_modules/uuid/lib/rng-browser.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var byteToHex = [];

  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 0x100).toString(16).substr(1);
  }

  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
  }

  module.exports = bytesToUuid;
},550,[],"node_modules/react-native-gifted-chat/node_modules/uuid/lib/bytesToUuid.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var rng = _require(_dependencyMap[0], './lib/rng');

  var bytesToUuid = _require(_dependencyMap[1], './lib/bytesToUuid');

  function v4(options, buf, offset) {
    var i = buf && offset || 0;

    if (typeof options == 'string') {
      buf = options === 'binary' ? new Array(16) : null;
      options = null;
    }

    options = options || {};
    var rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80;

    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || bytesToUuid(rnds);
  }

  module.exports = v4;
},551,[549,550],"node_modules/react-native-gifted-chat/node_modules/uuid/v4.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isSameDay = isSameDay;
  exports.isSameUser = isSameUser;
  exports.warnDeprecated = warnDeprecated;

  var _moment = _require(_dependencyMap[0], "moment");

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var DEPRECATION_MESSAGE = 'isSameUser and isSameDay should be imported from the utils module instead of using the props functions';

  function isSameDay() {
    var currentMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var diffMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!diffMessage.createdAt) {
      return false;
    }

    var currentCreatedAt = (0, _moment2.default)(currentMessage.createdAt);
    var diffCreatedAt = (0, _moment2.default)(diffMessage.createdAt);

    if (!currentCreatedAt.isValid() || !diffCreatedAt.isValid()) {
      return false;
    }

    return currentCreatedAt.isSame(diffCreatedAt, 'day');
  }

  function isSameUser() {
    var currentMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var diffMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return !!(diffMessage.user && currentMessage.user && diffMessage.user._id === currentMessage.user._id);
  }

  function warnDeprecated(fn) {
    return function () {
      console.warn(DEPRECATION_MESSAGE);
      return fn.apply(undefined, arguments);
    };
  }
},552,[546],"node_modules/react-native-gifted-chat/src/utils.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Actions.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _Color = _require(_dependencyMap[4], "./Color");

  var _Color2 = _interopRequireDefault(_Color);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Actions: {
      displayName: "Actions"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Actions.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Actions = _wrapComponent("Actions")(function (_React$Component) {
    _inherits(Actions, _React$Component);

    function Actions(props) {
      _classCallCheck(this, Actions);

      var _this = _possibleConstructorReturn(this, (Actions.__proto__ || Object.getPrototypeOf(Actions)).call(this, props));

      _this.onActionsPress = _this.onActionsPress.bind(_this);
      return _this;
    }

    _createClass(Actions, [{
      key: "onActionsPress",
      value: function onActionsPress() {
        var _this2 = this;

        var options = Object.keys(this.props.options);
        var cancelButtonIndex = Object.keys(this.props.options).length - 1;
        this.context.actionSheet().showActionSheetWithOptions({
          options: options,
          cancelButtonIndex: cancelButtonIndex,
          tintColor: this.props.optionTintColor
        }, function (buttonIndex) {
          var i = 0;
          Object.keys(_this2.props.options).forEach(function (key) {
            if (_this2.props.options[key]) {
              if (buttonIndex === i) {
                _this2.props.options[key](_this2.props);

                return;
              }

              i += 1;
            }
          });
        });
      }
    }, {
      key: "renderIcon",
      value: function renderIcon() {
        if (this.props.icon) {
          return this.props.icon();
        }

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: [styles.wrapper, this.props.wrapperStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 44
            }
          },
          _react3.default.createElement(
            _reactNative.Text,
            {
              style: [styles.iconText, this.props.iconTextStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 45
              }
            },
            "+"
          )
        );
      }
    }, {
      key: "render",
      value: function render() {
        return _react3.default.createElement(
          _reactNative.TouchableOpacity,
          {
            style: [styles.container, this.props.containerStyle],
            onPress: this.props.onPressActionButton || this.onActionsPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 52
            }
          },
          this.renderIcon()
        );
      }
    }]);

    return Actions;
  }(_react3.default.Component));

  exports.default = Actions;

  var styles = _reactNative.StyleSheet.create({
    container: {
      width: 26,
      height: 26,
      marginLeft: 10,
      marginBottom: 10
    },
    wrapper: {
      borderRadius: 13,
      borderColor: _Color2.default.defaultColor,
      borderWidth: 2,
      flex: 1
    },
    iconText: {
      color: _Color2.default.defaultColor,
      fontWeight: 'bold',
      fontSize: 16,
      backgroundColor: _Color2.default.backgroundTransparent,
      textAlign: 'center'
    }
  });

  Actions.contextTypes = {
    actionSheet: _propTypes2.default.func
  };
  Actions.defaultProps = {
    onSend: function onSend() {},
    options: {},
    optionTintColor: _Color2.default.optionTintColor,
    icon: null,
    containerStyle: {},
    iconTextStyle: {},
    wrapperStyle: {}
  };
  Actions.propTypes = {
    onSend: _propTypes2.default.func,
    options: _propTypes2.default.object,
    optionTintColor: _propTypes2.default.string,
    icon: _propTypes2.default.func,
    onPressActionButton: _propTypes2.default.func,
    wrapperStyle: _reactNative.ViewPropTypes.style,
    containerStyle: _reactNative.ViewPropTypes.style,
    iconTextStyle: _reactNative.Text.propTypes.style
  };
},553,[13,219,25,65,554],"node_modules/react-native-gifted-chat/src/Actions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    defaultColor: '#b2b2b2',
    backgroundTransparent: 'transparent',
    defaultBlue: '#0084ff',
    leftBubbleBackground: '#f0f0f0',
    white: '#fff',
    carrot: '#e67e22',
    emerald: '#2ecc71',
    peterRiver: '#3498db',
    wisteria: '#8e44ad',
    alizarin: '#e74c3c',
    turquoise: '#1abc9c',
    midnightBlue: '#2c3e50',
    optionTintColor: '#007AFF',
    timeTextColor: '#aaa'
  };
},554,[],"node_modules/react-native-gifted-chat/src/Color.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Avatar.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _GiftedAvatar = _require(_dependencyMap[4], "./GiftedAvatar");

  var _GiftedAvatar2 = _interopRequireDefault(_GiftedAvatar);

  var _utils = _require(_dependencyMap[5], "./utils");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Avatar: {
      displayName: "Avatar"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Avatar.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Avatar = _wrapComponent("Avatar")(function (_React$Component) {
    _inherits(Avatar, _React$Component);

    function Avatar() {
      _classCallCheck(this, Avatar);

      return _possibleConstructorReturn(this, (Avatar.__proto__ || Object.getPrototypeOf(Avatar)).apply(this, arguments));
    }

    _createClass(Avatar, [{
      key: "renderAvatar",
      value: function renderAvatar() {
        var _this2 = this;

        if (this.props.renderAvatar) {
          var _props = this.props,
              renderAvatar = _props.renderAvatar,
              avatarProps = _objectWithoutProperties(_props, ["renderAvatar"]);

          return this.props.renderAvatar(avatarProps);
        }

        return _react3.default.createElement(_GiftedAvatar2.default, {
          avatarStyle: _reactNative.StyleSheet.flatten([styles[this.props.position].image, this.props.imageStyle[this.props.position]]),
          user: this.props.currentMessage.user,
          onPress: function onPress() {
            return _this2.props.onPressAvatar && _this2.props.onPressAvatar(_this2.props.currentMessage.user);
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 17
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props2 = this.props,
            renderAvatarOnTop = _props2.renderAvatarOnTop,
            showAvatarForEveryMessage = _props2.showAvatarForEveryMessage;
        var messageToCompare = renderAvatarOnTop ? this.props.previousMessage : this.props.nextMessage;
        var computedStyle = renderAvatarOnTop ? 'onTop' : 'onBottom';

        if (this.props.renderAvatar === null) {
          return null;
        }

        if (!showAvatarForEveryMessage && (0, _utils.isSameUser)(this.props.currentMessage, messageToCompare) && (0, _utils.isSameDay)(this.props.currentMessage, messageToCompare)) {
          return _react3.default.createElement(
            _reactNative.View,
            {
              style: [styles[this.props.position].container, this.props.containerStyle[this.props.position]],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 43
              }
            },
            _react3.default.createElement(_GiftedAvatar2.default, {
              avatarStyle: _reactNative.StyleSheet.flatten([styles[this.props.position].image, this.props.imageStyle[this.props.position]]),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 44
              }
            })
          );
        }

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: [styles[this.props.position].container, styles[this.props.position][computedStyle], this.props.containerStyle[this.props.position]],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 55
            }
          },
          this.renderAvatar()
        );
      }
    }]);

    return Avatar;
  }(_react3.default.Component));

  exports.default = Avatar;
  var styles = {
    left: _reactNative.StyleSheet.create({
      container: {
        marginRight: 8
      },
      onTop: {
        alignSelf: 'flex-start'
      },
      onBottom: {},
      image: {
        height: 36,
        width: 36,
        borderRadius: 18
      }
    }),
    right: _reactNative.StyleSheet.create({
      container: {
        marginLeft: 8
      },
      onTop: {
        alignSelf: 'flex-start'
      },
      onBottom: {},
      image: {
        height: 36,
        width: 36,
        borderRadius: 18
      }
    })
  };
  Avatar.defaultProps = {
    renderAvatarOnTop: false,
    showAvatarForEveryMessage: false,
    position: 'left',
    currentMessage: {
      user: null
    },
    previousMessage: {},
    nextMessage: {},
    containerStyle: {},
    imageStyle: {},
    onPressAvatar: function onPressAvatar() {},
    isSameDay: (0, _utils.warnDeprecated)(_utils.isSameDay),
    isSameUser: (0, _utils.warnDeprecated)(_utils.isSameUser)
  };
  Avatar.propTypes = {
    renderAvatarOnTop: _propTypes2.default.bool,
    showAvatarForEveryMessage: _propTypes2.default.bool,
    position: _propTypes2.default.oneOf(['left', 'right']),
    currentMessage: _propTypes2.default.object,
    previousMessage: _propTypes2.default.object,
    nextMessage: _propTypes2.default.object,
    onPressAvatar: _propTypes2.default.func,
    renderAvatar: _propTypes2.default.func,
    containerStyle: _propTypes2.default.shape({
      left: _reactNative.ViewPropTypes.style,
      right: _reactNative.ViewPropTypes.style
    }),
    imageStyle: _propTypes2.default.shape({
      left: _reactNative.ViewPropTypes.style,
      right: _reactNative.ViewPropTypes.style
    }),
    isSameDay: _propTypes2.default.func,
    isSameUser: _propTypes2.default.func
  };
},555,[13,219,25,65,556,552],"node_modules/react-native-gifted-chat/src/Avatar.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/GiftedAvatar.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _Color = _require(_dependencyMap[4], "./Color");

  var _Color2 = _interopRequireDefault(_Color);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    GiftedAvatar: {
      displayName: "GiftedAvatar"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/GiftedAvatar.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var carrot = _Color2.default.carrot,
      emerald = _Color2.default.emerald,
      peterRiver = _Color2.default.peterRiver,
      wisteria = _Color2.default.wisteria,
      alizarin = _Color2.default.alizarin,
      turquoise = _Color2.default.turquoise,
      midnightBlue = _Color2.default.midnightBlue;

  var GiftedAvatar = _wrapComponent("GiftedAvatar")(function (_React$PureComponent) {
    _inherits(GiftedAvatar, _React$PureComponent);

    function GiftedAvatar() {
      _classCallCheck(this, GiftedAvatar);

      return _possibleConstructorReturn(this, (GiftedAvatar.__proto__ || Object.getPrototypeOf(GiftedAvatar)).apply(this, arguments));
    }

    _createClass(GiftedAvatar, [{
      key: "setAvatarColor",
      value: function setAvatarColor() {
        var userName = this.props.user.name || '';
        var name = userName.toUpperCase().split(' ');

        if (name.length === 1) {
          this.avatarName = "" + name[0].charAt(0);
        } else if (name.length > 1) {
          this.avatarName = "" + name[0].charAt(0) + name[1].charAt(0);
        } else {
          this.avatarName = '';
        }

        var sumChars = 0;

        for (var i = 0; i < userName.length; i += 1) {
          sumChars += userName.charCodeAt(i);
        }

        var colors = [carrot, emerald, peterRiver, wisteria, alizarin, turquoise, midnightBlue];
        this.avatarColor = colors[sumChars % colors.length];
      }
    }, {
      key: "renderAvatar",
      value: function renderAvatar() {
        if (typeof this.props.user.avatar === 'function') {
          return this.props.user.avatar();
        } else if (typeof this.props.user.avatar === 'string') {
          return _react3.default.createElement(_reactNative.Image, {
            source: {
              uri: this.props.user.avatar
            },
            style: [styles.avatarStyle, this.props.avatarStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 42
            }
          });
        } else if (typeof this.props.user.avatar === 'number') {
          return _react3.default.createElement(_reactNative.Image, {
            source: this.props.user.avatar,
            style: [styles.avatarStyle, this.props.avatarStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 49
            }
          });
        }

        return null;
      }
    }, {
      key: "renderInitials",
      value: function renderInitials() {
        return _react3.default.createElement(
          _reactNative.Text,
          {
            style: [styles.textStyle, this.props.textStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 59
            }
          },
          this.avatarName
        );
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        if (!this.props.user.name && !this.props.user.avatar) {
          return _react3.default.createElement(_reactNative.View, {
            style: [styles.avatarStyle, styles.avatarTransparent, this.props.avatarStyle],
            accessibilityTraits: "image",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          });
        }

        if (this.props.user.avatar) {
          return _react3.default.createElement(
            _reactNative.TouchableOpacity,
            {
              disabled: !this.props.onPress,
              onPress: function onPress() {
                var _props = _this2.props,
                    onPress = _props.onPress,
                    other = _objectWithoutProperties(_props, ["onPress"]);

                if (_this2.props.onPress) {
                  _this2.props.onPress(other);
                }
              },
              accessibilityTraits: "image",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 74
              }
            },
            this.renderAvatar()
          );
        }

        this.setAvatarColor();
        return _react3.default.createElement(
          _reactNative.TouchableOpacity,
          {
            disabled: !this.props.onPress,
            onPress: function onPress() {
              var _props2 = _this2.props,
                  onPress = _props2.onPress,
                  other = _objectWithoutProperties(_props2, ["onPress"]);

              if (_this2.props.onPress) {
                _this2.props.onPress(other);
              }
            },
            style: [styles.avatarStyle, {
              backgroundColor: this.avatarColor
            }, this.props.avatarStyle],
            accessibilityTraits: "image",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 92
            }
          },
          this.renderInitials()
        );
      }
    }]);

    return GiftedAvatar;
  }(_react3.default.PureComponent));

  exports.default = GiftedAvatar;
  var styles = {
    avatarStyle: {
      justifyContent: 'center',
      alignItems: 'center',
      width: 40,
      height: 40,
      borderRadius: 20
    },
    avatarTransparent: {
      backgroundColor: _Color2.default.backgroundTransparent
    },
    textStyle: {
      color: _Color2.default.white,
      fontSize: 16,
      backgroundColor: _Color2.default.backgroundTransparent,
      fontWeight: '100'
    }
  };
  GiftedAvatar.defaultProps = {
    user: {
      name: null,
      avatar: null
    },
    onPress: null,
    avatarStyle: {},
    textStyle: {}
  };
  GiftedAvatar.propTypes = {
    user: _propTypes2.default.object,
    onPress: _propTypes2.default.func,
    avatarStyle: _reactNative.Image.propTypes.style,
    textStyle: _reactNative.Text.propTypes.style
  };
},556,[13,219,25,65,554],"node_modules/react-native-gifted-chat/src/GiftedAvatar.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Bubble.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _MessageText = _require(_dependencyMap[4], "./MessageText");

  var _MessageText2 = _interopRequireDefault(_MessageText);

  var _MessageImage = _require(_dependencyMap[5], "./MessageImage");

  var _MessageImage2 = _interopRequireDefault(_MessageImage);

  var _Time = _require(_dependencyMap[6], "./Time");

  var _Time2 = _interopRequireDefault(_Time);

  var _Color = _require(_dependencyMap[7], "./Color");

  var _Color2 = _interopRequireDefault(_Color);

  var _utils = _require(_dependencyMap[8], "./utils");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Bubble: {
      displayName: "Bubble"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Bubble.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Bubble = _wrapComponent("Bubble")(function (_React$Component) {
    _inherits(Bubble, _React$Component);

    function Bubble(props) {
      _classCallCheck(this, Bubble);

      var _this = _possibleConstructorReturn(this, (Bubble.__proto__ || Object.getPrototypeOf(Bubble)).call(this, props));

      _this.onLongPress = _this.onLongPress.bind(_this);
      return _this;
    }

    _createClass(Bubble, [{
      key: "onLongPress",
      value: function onLongPress() {
        var _this2 = this;

        if (this.props.onLongPress) {
          this.props.onLongPress(this.context, this.props.currentMessage);
        } else if (this.props.currentMessage.text) {
          var options = ['Copy Text', 'Cancel'];
          var cancelButtonIndex = options.length - 1;
          this.context.actionSheet().showActionSheetWithOptions({
            options: options,
            cancelButtonIndex: cancelButtonIndex
          }, function (buttonIndex) {
            switch (buttonIndex) {
              case 0:
                _reactNative.Clipboard.setString(_this2.props.currentMessage.text);

                break;

              default:
                break;
            }
          });
        }
      }
    }, {
      key: "handleBubbleToNext",
      value: function handleBubbleToNext() {
        if ((0, _utils.isSameUser)(this.props.currentMessage, this.props.nextMessage) && (0, _utils.isSameDay)(this.props.currentMessage, this.props.nextMessage)) {
          return _reactNative.StyleSheet.flatten([styles[this.props.position].containerToNext, this.props.containerToNextStyle[this.props.position]]);
        }

        return null;
      }
    }, {
      key: "handleBubbleToPrevious",
      value: function handleBubbleToPrevious() {
        if ((0, _utils.isSameUser)(this.props.currentMessage, this.props.previousMessage) && (0, _utils.isSameDay)(this.props.currentMessage, this.props.previousMessage)) {
          return _reactNative.StyleSheet.flatten([styles[this.props.position].containerToPrevious, this.props.containerToPreviousStyle[this.props.position]]);
        }

        return null;
      }
    }, {
      key: "renderMessageText",
      value: function renderMessageText() {
        if (this.props.currentMessage.text) {
          var _props = this.props,
              containerStyle = _props.containerStyle,
              wrapperStyle = _props.wrapperStyle,
              messageTextProps = _objectWithoutProperties(_props, ["containerStyle", "wrapperStyle"]);

          if (this.props.renderMessageText) {
            return this.props.renderMessageText(messageTextProps);
          }

          return _react3.default.createElement(_MessageText2.default, _extends({}, messageTextProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 84
            }
          }));
        }

        return null;
      }
    }, {
      key: "renderMessageImage",
      value: function renderMessageImage() {
        if (this.props.currentMessage.image) {
          var _props2 = this.props,
              containerStyle = _props2.containerStyle,
              wrapperStyle = _props2.wrapperStyle,
              messageImageProps = _objectWithoutProperties(_props2, ["containerStyle", "wrapperStyle"]);

          if (this.props.renderMessageImage) {
            return this.props.renderMessageImage(messageImageProps);
          }

          return _react3.default.createElement(_MessageImage2.default, _extends({}, messageImageProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 95
            }
          }));
        }

        return null;
      }
    }, {
      key: "renderTicks",
      value: function renderTicks() {
        var currentMessage = this.props.currentMessage;

        if (this.props.renderTicks) {
          return this.props.renderTicks(currentMessage);
        }

        if (currentMessage.user._id !== this.props.user._id) {
          return null;
        }

        if (currentMessage.sent || currentMessage.received) {
          return _react3.default.createElement(
            _reactNative.View,
            {
              style: styles.tickView,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 110
              }
            },
            currentMessage.sent && _react3.default.createElement(
              _reactNative.Text,
              {
                style: [styles.tick, this.props.tickStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 111
                }
              },
              "\u2713"
            ),
            currentMessage.received && _react3.default.createElement(
              _reactNative.Text,
              {
                style: [styles.tick, this.props.tickStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 112
                }
              },
              "\u2713"
            )
          );
        }

        return null;
      }
    }, {
      key: "renderTime",
      value: function renderTime() {
        if (this.props.currentMessage.createdAt) {
          var _props3 = this.props,
              containerStyle = _props3.containerStyle,
              wrapperStyle = _props3.wrapperStyle,
              timeProps = _objectWithoutProperties(_props3, ["containerStyle", "wrapperStyle"]);

          if (this.props.renderTime) {
            return this.props.renderTime(timeProps);
          }

          return _react3.default.createElement(_Time2.default, _extends({}, timeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 125
            }
          }));
        }

        return null;
      }
    }, {
      key: "renderCustomView",
      value: function renderCustomView() {
        if (this.props.renderCustomView) {
          return this.props.renderCustomView(this.props);
        }

        return null;
      }
    }, {
      key: "render",
      value: function render() {
        return _react3.default.createElement(
          _reactNative.View,
          {
            style: [styles[this.props.position].container, this.props.containerStyle[this.props.position]],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 139
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: [styles[this.props.position].wrapper, this.props.wrapperStyle[this.props.position], this.handleBubbleToNext(), this.handleBubbleToPrevious()],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 145
              }
            },
            _react3.default.createElement(
              _reactNative.TouchableWithoutFeedback,
              _extends({
                onLongPress: this.onLongPress,
                accessibilityTraits: "text"
              }, this.props.touchableProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 153
                }
              }),
              _react3.default.createElement(
                _reactNative.View,
                {
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 158
                  }
                },
                this.renderCustomView(),
                this.renderMessageImage(),
                this.renderMessageText(),
                _react3.default.createElement(
                  _reactNative.View,
                  {
                    style: [styles.bottom, this.props.bottomContainerStyle[this.props.position]],
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 162
                    }
                  },
                  this.renderTime(),
                  this.renderTicks()
                )
              )
            )
          )
        );
      }
    }]);

    return Bubble;
  }(_react3.default.Component));

  exports.default = Bubble;
  var styles = {
    left: _reactNative.StyleSheet.create({
      container: {
        flex: 1,
        alignItems: 'flex-start'
      },
      wrapper: {
        borderRadius: 15,
        backgroundColor: _Color2.default.leftBubbleBackground,
        marginRight: 60,
        minHeight: 20,
        justifyContent: 'flex-end'
      },
      containerToNext: {
        borderBottomLeftRadius: 3
      },
      containerToPrevious: {
        borderTopLeftRadius: 3
      }
    }),
    right: _reactNative.StyleSheet.create({
      container: {
        flex: 1,
        alignItems: 'flex-end'
      },
      wrapper: {
        borderRadius: 15,
        backgroundColor: _Color2.default.defaultBlue,
        marginLeft: 60,
        minHeight: 20,
        justifyContent: 'flex-end'
      },
      containerToNext: {
        borderBottomRightRadius: 3
      },
      containerToPrevious: {
        borderTopRightRadius: 3
      }
    }),
    bottom: {
      flexDirection: 'row',
      justifyContent: 'flex-end'
    },
    tick: {
      fontSize: 10,
      backgroundColor: _Color2.default.backgroundTransparent,
      color: _Color2.default.white
    },
    tickView: {
      flexDirection: 'row',
      marginRight: 10
    }
  };
  Bubble.contextTypes = {
    actionSheet: _propTypes2.default.func
  };
  Bubble.defaultProps = {
    touchableProps: {},
    onLongPress: null,
    renderMessageImage: null,
    renderMessageText: null,
    renderCustomView: null,
    renderTicks: null,
    renderTime: null,
    position: 'left',
    currentMessage: {
      text: null,
      createdAt: null,
      image: null
    },
    nextMessage: {},
    previousMessage: {},
    containerStyle: {},
    wrapperStyle: {},
    bottomContainerStyle: {},
    tickStyle: {},
    containerToNextStyle: {},
    containerToPreviousStyle: {},
    isSameDay: (0, _utils.warnDeprecated)(_utils.isSameDay),
    isSameUser: (0, _utils.warnDeprecated)(_utils.isSameUser)
  };
  Bubble.propTypes = {
    user: _propTypes2.default.object.isRequired,
    touchableProps: _propTypes2.default.object,
    onLongPress: _propTypes2.default.func,
    renderMessageImage: _propTypes2.default.func,
    renderMessageText: _propTypes2.default.func,
    renderCustomView: _propTypes2.default.func,
    renderTime: _propTypes2.default.func,
    renderTicks: _propTypes2.default.func,
    position: _propTypes2.default.oneOf(['left', 'right']),
    currentMessage: _propTypes2.default.object,
    nextMessage: _propTypes2.default.object,
    previousMessage: _propTypes2.default.object,
    containerStyle: _propTypes2.default.shape({
      left: _reactNative.ViewPropTypes.style,
      right: _reactNative.ViewPropTypes.style
    }),
    wrapperStyle: _propTypes2.default.shape({
      left: _reactNative.ViewPropTypes.style,
      right: _reactNative.ViewPropTypes.style
    }),
    bottomContainerStyle: _propTypes2.default.shape({
      left: _reactNative.ViewPropTypes.style,
      right: _reactNative.ViewPropTypes.style
    }),
    tickStyle: _reactNative.Text.propTypes.style,
    containerToNextStyle: _propTypes2.default.shape({
      left: _reactNative.ViewPropTypes.style,
      right: _reactNative.ViewPropTypes.style
    }),
    containerToPreviousStyle: _propTypes2.default.shape({
      left: _reactNative.ViewPropTypes.style,
      right: _reactNative.ViewPropTypes.style
    }),
    isSameDay: _propTypes2.default.func,
    isSameUser: _propTypes2.default.func
  };
},557,[13,219,25,65,558,562,565,554,552],"node_modules/react-native-gifted-chat/src/Bubble.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/MessageText.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _reactNativeParsedText = _require(_dependencyMap[4], "react-native-parsed-text");

  var _reactNativeParsedText2 = _interopRequireDefault(_reactNativeParsedText);

  var _reactNativeCommunications = _require(_dependencyMap[5], "react-native-communications");

  var _reactNativeCommunications2 = _interopRequireDefault(_reactNativeCommunications);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MessageText: {
      displayName: "MessageText"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/MessageText.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var WWW_URL_PATTERN = /^www\./i;

  var MessageText = _wrapComponent("MessageText")(function (_React$Component) {
    _inherits(MessageText, _React$Component);

    function MessageText(props) {
      _classCallCheck(this, MessageText);

      var _this = _possibleConstructorReturn(this, (MessageText.__proto__ || Object.getPrototypeOf(MessageText)).call(this, props));

      _this.onUrlPress = _this.onUrlPress.bind(_this);
      _this.onPhonePress = _this.onPhonePress.bind(_this);
      _this.onEmailPress = _this.onEmailPress.bind(_this);
      return _this;
    }

    _createClass(MessageText, [{
      key: "onUrlPress",
      value: function onUrlPress(url) {
        if (WWW_URL_PATTERN.test(url)) {
          this.onUrlPress("http://" + url);
        } else {
          _reactNative.Linking.canOpenURL(url).then(function (supported) {
            if (!supported) {
              console.error('No handler for URL:', url);
            } else {
              _reactNative.Linking.openURL(url);
            }
          });
        }
      }
    }, {
      key: "onPhonePress",
      value: function onPhonePress(phone) {
        var options = ['Call', 'Text', 'Cancel'];
        var cancelButtonIndex = options.length - 1;
        this.context.actionSheet().showActionSheetWithOptions({
          options: options,
          cancelButtonIndex: cancelButtonIndex
        }, function (buttonIndex) {
          switch (buttonIndex) {
            case 0:
              _reactNativeCommunications2.default.phonecall(phone, true);

              break;

            case 1:
              _reactNativeCommunications2.default.text(phone);

              break;

            default:
              break;
          }
        });
      }
    }, {
      key: "onEmailPress",
      value: function onEmailPress(email) {
        _reactNativeCommunications2.default.email([email], null, null, null, null);
      }
    }, {
      key: "render",
      value: function render() {
        var linkStyle = _reactNative.StyleSheet.flatten([styles[this.props.position].link, this.props.linkStyle[this.props.position]]);

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: [styles[this.props.position].container, this.props.containerStyle[this.props.position]],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 70
            }
          },
          _react3.default.createElement(
            _reactNativeParsedText2.default,
            {
              style: [styles[this.props.position].text, this.props.textStyle[this.props.position], this.props.customTextStyle],
              parse: [].concat(_toConsumableArray(this.props.parsePatterns(linkStyle)), [{
                type: 'url',
                style: linkStyle,
                onPress: this.onUrlPress
              }, {
                type: 'phone',
                style: linkStyle,
                onPress: this.onPhonePress
              }, {
                type: 'email',
                style: linkStyle,
                onPress: this.onEmailPress
              }]),
              childrenProps: _extends({}, this.props.textProps),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 76
              }
            },
            this.props.currentMessage.text
          )
        );
      }
    }]);

    return MessageText;
  }(_react3.default.Component));

  exports.default = MessageText;
  var textStyle = {
    fontSize: 16,
    lineHeight: 20,
    marginTop: 5,
    marginBottom: 5,
    marginLeft: 10,
    marginRight: 10
  };
  var styles = {
    left: _reactNative.StyleSheet.create({
      container: {},
      text: _extends({
        color: 'black'
      }, textStyle),
      link: {
        color: 'black',
        textDecorationLine: 'underline'
      }
    }),
    right: _reactNative.StyleSheet.create({
      container: {},
      text: _extends({
        color: 'white'
      }, textStyle),
      link: {
        color: 'white',
        textDecorationLine: 'underline'
      }
    })
  };
  MessageText.contextTypes = {
    actionSheet: _propTypes2.default.func
  };
  MessageText.defaultProps = {
    position: 'left',
    currentMessage: {
      text: ''
    },
    containerStyle: {},
    textStyle: {},
    linkStyle: {},
    customTextStyle: {},
    textProps: {},
    parsePatterns: function parsePatterns() {
      return [];
    }
  };
  MessageText.propTypes = {
    position: _propTypes2.default.oneOf(['left', 'right']),
    currentMessage: _propTypes2.default.object,
    containerStyle: _propTypes2.default.shape({
      left: _reactNative.ViewPropTypes.style,
      right: _reactNative.ViewPropTypes.style
    }),
    textStyle: _propTypes2.default.shape({
      left: _reactNative.Text.propTypes.style,
      right: _reactNative.Text.propTypes.style
    }),
    linkStyle: _propTypes2.default.shape({
      left: _reactNative.Text.propTypes.style,
      right: _reactNative.Text.propTypes.style
    }),
    parsePatterns: _propTypes2.default.func,
    textProps: _propTypes2.default.object,
    customTextStyle: _reactNative.Text.propTypes.style
  };
},558,[13,219,25,65,559,561],"node_modules/react-native-gifted-chat/src/MessageText.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-parsed-text/src/ParsedText.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _reactNative2 = _interopRequireDefault(_reactNative);

  var _propTypes = _require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _TextExtraction = _require(_dependencyMap[4], "./lib/TextExtraction");

  var _TextExtraction2 = _interopRequireDefault(_TextExtraction);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ParsedText: {
      displayName: "ParsedText"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-parsed-text/src/ParsedText.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var PATTERNS = {
    url: /(https?:\/\/|www\.)[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/i,
    phone: /[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,7}/,
    email: /\S+@\S+\.\S+/
  };

  var defaultParseShape = _propTypes2.default.shape(_extends({}, _reactNative2.default.Text.propTypes, {
    type: _propTypes2.default.oneOf(Object.keys(PATTERNS)).isRequired
  }));

  var customParseShape = _propTypes2.default.shape(_extends({}, _reactNative2.default.Text.propTypes, {
    pattern: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(RegExp)]).isRequired
  }));

  var ParsedText = _wrapComponent("ParsedText")((_temp = _class = function (_React$Component) {
    _inherits(ParsedText, _React$Component);

    function ParsedText() {
      _classCallCheck(this, ParsedText);

      return _possibleConstructorReturn(this, (ParsedText.__proto__ || Object.getPrototypeOf(ParsedText)).apply(this, arguments));
    }

    _createClass(ParsedText, [{
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        this._root.setNativeProps(nativeProps);
      }
    }, {
      key: "getPatterns",
      value: function getPatterns() {
        return this.props.parse.map(function (option) {
          var type = option.type,
              patternOption = _objectWithoutProperties(option, ["type"]);

          if (type) {
            if (!PATTERNS[type]) {
              throw new Error(option.type + " is not a supported type");
            }

            patternOption.pattern = PATTERNS[type];
          }

          return patternOption;
        });
      }
    }, {
      key: "getParsedText",
      value: function getParsedText() {
        var _this2 = this;

        if (!this.props.parse) {
          return this.props.children;
        }

        if (typeof this.props.children !== 'string') {
          return this.props.children;
        }

        var textExtraction = new _TextExtraction2.default(this.props.children, this.getPatterns());
        return textExtraction.parse().map(function (props, index) {
          return _react3.default.createElement(_reactNative2.default.Text, _extends({
            key: "parsedText-" + index
          }, _this2.props.childrenProps, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          }));
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        return _react3.default.createElement(
          _reactNative2.default.Text,
          _extends({
            ref: function ref(_ref) {
              return _this3._root = _ref;
            }
          }, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 77
            }
          }),
          this.getParsedText()
        );
      }
    }]);

    return ParsedText;
  }(_react3.default.Component), _class.displayName = 'ParsedText', _class.propTypes = _extends({}, _reactNative2.default.Text.propTypes, {
    parse: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([defaultParseShape, customParseShape])),
    childrenProps: _propTypes2.default.shape(_reactNative2.default.Text.propTypes)
  }), _class.defaultProps = {
    parse: null,
    childrenProps: {}
  }, _temp));

  exports.default = ParsedText;
},559,[13,219,65,25,560],"node_modules/react-native-parsed-text/src/ParsedText.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var TextExtraction = function () {
    function TextExtraction(text, patterns) {
      _classCallCheck(this, TextExtraction);

      this.text = text;
      this.patterns = patterns || [];
    }

    _createClass(TextExtraction, [{
      key: "parse",
      value: function parse() {
        var _this = this;

        var parsedTexts = [{
          children: this.text
        }];
        this.patterns.forEach(function (pattern) {
          var newParts = [];
          parsedTexts.forEach(function (parsedText) {
            if (parsedText._matched) {
              newParts.push(parsedText);
              return;
            }

            var parts = [];
            var textLeft = parsedText.children;

            while (textLeft) {
              var matches = pattern.pattern.exec(textLeft);

              if (!matches) {
                break;
              }

              var previousText = textLeft.substr(0, matches.index);
              parts.push({
                children: previousText
              });
              parts.push(_this.getMatchedPart(pattern, matches[0], matches));
              textLeft = textLeft.substr(matches.index + matches[0].length);
            }

            parts.push({
              children: textLeft
            });
            newParts.push.apply(newParts, parts);
          });
          parsedTexts = newParts;
        });
        parsedTexts.forEach(function (parsedText) {
          return delete parsedText._matched;
        });
        return parsedTexts.filter(function (t) {
          return !!t.children;
        });
      }
    }, {
      key: "getMatchedPart",
      value: function getMatchedPart(matchedPattern, text, matches) {
        var props = {};
        Object.keys(matchedPattern).forEach(function (key) {
          if (key === 'pattern' || key === 'renderText') {
            return;
          }

          if (typeof matchedPattern[key] === 'function') {
            props[key] = function () {
              return matchedPattern[key](text);
            };
          } else {
            props[key] = matchedPattern[key];
          }
        });
        var children = text;

        if (matchedPattern.renderText && typeof matchedPattern.renderText === 'function') {
          children = matchedPattern.renderText(text, matches);
        }

        return _extends({}, props, {
          children: children,
          _matched: true
        });
      }
    }]);

    return TextExtraction;
  }();

  exports.default = TextExtraction;
},560,[],"node_modules/react-native-parsed-text/src/lib/TextExtraction.js");
__d(function (global, _require, module, exports, _dependencyMap) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.web = exports.textWithoutEncoding = exports.text = exports.email = exports.phonecall = undefined;

	var _reactNative = _require(_dependencyMap[0], "react-native");

	var phonecall = exports.phonecall = function phonecall(phoneNumber, prompt) {
		if (arguments.length !== 2) {
			console.log('you must supply exactly 2 arguments');
			return;
		}

		if (!isCorrectType('String', phoneNumber)) {
			console.log('the phone number must be provided as a String value');
			return;
		}

		if (!isCorrectType('Boolean', prompt)) {
			console.log('the prompt parameter must be a Boolean');
			return;
		}

		var url = void 0;

		if (_reactNative.Platform.OS !== 'android') {
			url = prompt ? 'telprompt:' : 'tel:';
		} else {
			url = 'tel:';
		}

		url += phoneNumber;
		LaunchURL(url);
	};

	var email = exports.email = function email(to, cc, bcc, subject, body) {
		var url = 'mailto:';
		var argLength = arguments.length;

		switch (argLength) {
			case 0:
				LaunchURL(url);
				return;

			case 5:
				break;

			default:
				console.log('you must supply either 0 or 5 arguments. You supplied ' + argLength);
				return;
		}

		var valueAdded = false;

		if (isCorrectType('Array', arguments[0])) {
			var validAddresses = getValidArgumentsFromArray(arguments[0], 'String');

			if (validAddresses.length > 0) {
				url += encodeURIComponent(validAddresses.join(','));
			}
		}

		url += '?';

		if (isCorrectType('Array', arguments[1])) {
			var _validAddresses = getValidArgumentsFromArray(arguments[1], 'String');

			if (_validAddresses.length > 0) {
				valueAdded = true;
				url += 'cc=' + encodeURIComponent(_validAddresses.join(','));
			}
		}

		if (isCorrectType('Array', arguments[2])) {
			if (valueAdded) {
				url += '&';
			}

			var _validAddresses2 = getValidArgumentsFromArray(arguments[2], 'String');

			if (_validAddresses2.length > 0) {
				valueAdded = true;
				url += 'bcc=' + encodeURIComponent(_validAddresses2.join(','));
			}
		}

		if (isCorrectType('String', arguments[3])) {
			if (valueAdded) {
				url += '&';
			}

			valueAdded = true;
			url += 'subject=' + encodeURIComponent(arguments[3]);
		}

		if (isCorrectType('String', arguments[4])) {
			if (valueAdded) {
				url += '&';
			}

			url += 'body=' + encodeURIComponent(arguments[4]);
		}

		LaunchURL(url);
	};

	var text = exports.text = function text() {
		var phoneNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

		if (arguments.length > 2) {
			console.log('you supplied too many arguments. You can either supply 0 or 1 or 2');
			return;
		}

		var url = 'sms:';

		if (phoneNumber) {
			if (isCorrectType('String', phoneNumber)) {
				url += phoneNumber;
			} else {
				console.log('the phone number should be provided as a string. It was provided as ' + Object.prototype.toString.call(phoneNumber).slice(8, -1) + ',ignoring the value provided');
			}
		}

		if (body) {
			if (isCorrectType('String', body)) {
				if (_reactNative.Platform.OS === 'android') body = encodeURIComponent(body);
				url += _reactNative.Platform.OS === 'ios' ? "&body=" + encodeURIComponent(body) : "?body=" + encodeURIComponent(body);
			} else {
				console.log('the body should be provided as a string. It was provided as ' + Object.prototype.toString.call(body).slice(8, -1) + ',ignoring the value provided');
			}
		}

		LaunchURL(url);
	};

	var textWithoutEncoding = exports.textWithoutEncoding = function textWithoutEncoding() {
		var phoneNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

		if (arguments.length > 2) {
			console.log('you supplied too many arguments. You can either supply 0 or 1 or 2');
			return;
		}

		var url = 'sms:';

		if (phoneNumber) {
			if (isCorrectType('String', phoneNumber)) {
				url += phoneNumber;
			} else {
				console.log('the phone number should be provided as a string. It was provided as ' + Object.prototype.toString.call(phoneNumber).slice(8, -1) + ',ignoring the value provided');
			}
		}

		if (body) {
			if (isCorrectType('String', body)) {
				url += _reactNative.Platform.OS === 'ios' ? "&body=" + body : "?body=" + body;
			} else {
				console.log('the body should be provided as a string. It was provided as ' + Object.prototype.toString.call(body).slice(8, -1) + ',ignoring the value provided');
			}
		}

		LaunchURL(url);
	};

	var web = exports.web = function web() {
		var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

		if (!address) {
			console.log('Missing address argument');
			return;
		}

		if (!isCorrectType('String', address)) {
			console.log('address was not provided as a string, it was provided as ' + Object.prototype.toString.call(address).slice(8, -1));
			return;
		}

		LaunchURL(address);
	};

	var LaunchURL = function LaunchURL(url) {
		_reactNative.Linking.canOpenURL(url).then(function (supported) {
			if (!supported) {
				console.log('Can\'t handle url: ' + url);
			} else {
				_reactNative.Linking.openURL(url).catch(function (err) {
					if (url.includes('telprompt')) {} else {
						console.warn('openURL error', err);
					}
				});
			}
		}).catch(function (err) {
			return console.warn('An unexpected error happened', err);
		});
	};

	var getValidArgumentsFromArray = function getValidArgumentsFromArray(array, type) {
		var validValues = [];
		array.forEach(function (value) {
			if (isCorrectType(type, value)) {
				validValues.push(value);
			}
		});
		return validValues;
	};

	var isCorrectType = function isCorrectType(expected, actual) {
		return Object.prototype.toString.call(actual).slice(8, -1) === expected;
	};

	exports.default = {
		phonecall: phonecall,
		text: text,
		textWithoutEncoding: textWithoutEncoding,
		email: email,
		web: web
	};
},561,[65],"node_modules/react-native-communications/AKCommunications.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/MessageImage.js";
  exports.default = MessageImage;

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _reactNativeLightbox = _require(_dependencyMap[3], "react-native-lightbox");

  var _reactNativeLightbox2 = _interopRequireDefault(_reactNativeLightbox);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function MessageImage(_ref) {
    var containerStyle = _ref.containerStyle,
        lightboxProps = _ref.lightboxProps,
        imageProps = _ref.imageProps,
        imageStyle = _ref.imageStyle,
        currentMessage = _ref.currentMessage;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [styles.container, containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 16
        }
      },
      _react2.default.createElement(
        _reactNativeLightbox2.default,
        _extends({
          activeProps: {
            style: styles.imageActive
          }
        }, lightboxProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 17
          }
        }),
        _react2.default.createElement(_reactNative.Image, _extends({}, imageProps, {
          style: [styles.image, imageStyle],
          source: {
            uri: currentMessage.image
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 23
          }
        }))
      )
    );
  }

  var styles = _reactNative.StyleSheet.create({
    container: {},
    image: {
      width: 150,
      height: 100,
      borderRadius: 13,
      margin: 3,
      resizeMode: 'cover'
    },
    imageActive: {
      flex: 1,
      resizeMode: 'contain'
    }
  });

  MessageImage.defaultProps = {
    currentMessage: {
      image: null
    },
    containerStyle: {},
    imageStyle: {},
    imageProps: {},
    lightboxProps: {}
  };
  MessageImage.propTypes = {
    currentMessage: _propTypes2.default.object,
    containerStyle: _reactNative.ViewPropTypes.style,
    imageStyle: _reactNative.Image.propTypes.style,
    imageProps: _propTypes2.default.object,
    lightboxProps: _propTypes2.default.object
  };
},562,[25,13,65,563],"node_modules/react-native-gifted-chat/src/MessageImage.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-lightbox/Lightbox.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _LightboxOverlay = _require(_dependencyMap[4], "./LightboxOverlay");

  var _LightboxOverlay2 = _interopRequireDefault(_LightboxOverlay);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Lightbox: {
      displayName: "Lightbox"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-lightbox/Lightbox.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Lightbox = _wrapComponent("Lightbox")((_temp2 = _class = function (_Component) {
    _inherits(Lightbox, _Component);

    function Lightbox() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, Lightbox);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Lightbox.__proto__ || Object.getPrototypeOf(Lightbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        isOpen: false,
        origin: {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        },
        layoutOpacity: new _reactNative.Animated.Value(1)
      }, _this.getContent = function () {
        if (_this.props.renderContent) {
          return _this.props.renderContent();
        } else if (_this.props.activeProps) {
          return (0, _react2.cloneElement)(_react2.Children.only(_this.props.children), _this.props.activeProps);
        }

        return _this.props.children;
      }, _this.getOverlayProps = function () {
        return {
          isOpen: _this.state.isOpen,
          origin: _this.state.origin,
          renderHeader: _this.props.renderHeader,
          swipeToDismiss: _this.props.swipeToDismiss,
          springConfig: _this.props.springConfig,
          backgroundColor: _this.props.backgroundColor,
          children: _this.getContent(),
          onClose: _this.onClose
        };
      }, _this.open = function () {
        _this._root.measure(function (ox, oy, width, height, px, py) {
          _this.props.onOpen();

          _this.setState({
            isOpen: _this.props.navigator ? true : false,
            isAnimating: true,
            origin: {
              width: width,
              height: height,
              x: px,
              y: py
            }
          }, function () {
            if (_this.props.navigator) {
              var route = {
                component: _LightboxOverlay2.default,
                passProps: _this.getOverlayProps()
              };

              var routes = _this.props.navigator.getCurrentRoutes();

              routes.push(route);

              _this.props.navigator.immediatelyResetRouteStack(routes);
            } else {
              _this.setState({
                isOpen: true
              });
            }

            setTimeout(function () {
              _this._root && _this.state.layoutOpacity.setValue(0);
            });
          });
        });
      }, _this.close = function () {
        throw new Error('Lightbox.close method is deprecated. Use renderHeader(close) prop instead.');
      }, _this.onClose = function () {
        _this.state.layoutOpacity.setValue(1);

        _this.setState({
          isOpen: false
        }, _this.props.onClose);

        if (_this.props.navigator) {
          var routes = _this.props.navigator.getCurrentRoutes();

          routes.pop();

          _this.props.navigator.immediatelyResetRouteStack(routes);
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Lightbox, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react3.default.createElement(
          _reactNative.View,
          {
            ref: function ref(component) {
              return _this2._root = component;
            },
            style: this.props.style,
            onLayout: function onLayout() {},
            __source: {
              fileName: _jsxFileName,
              lineNumber: 116
            }
          },
          _react3.default.createElement(
            _reactNative.Animated.View,
            {
              style: {
                opacity: this.state.layoutOpacity
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 121
              }
            },
            _react3.default.createElement(
              _reactNative.TouchableHighlight,
              {
                underlayColor: this.props.underlayColor,
                onPress: this.open,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 122
                }
              },
              this.props.children
            )
          ),
          this.props.navigator ? false : _react3.default.createElement(_LightboxOverlay2.default, _extends({}, this.getOverlayProps(), {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 129
            }
          }))
        );
      }
    }]);

    return Lightbox;
  }(_react2.Component), _class.propTypes = {
    activeProps: _propTypes2.default.object,
    renderHeader: _propTypes2.default.func,
    renderContent: _propTypes2.default.func,
    underlayColor: _propTypes2.default.string,
    backgroundColor: _propTypes2.default.string,
    onOpen: _propTypes2.default.func,
    onClose: _propTypes2.default.func,
    springConfig: _propTypes2.default.shape({
      tension: _propTypes2.default.number,
      friction: _propTypes2.default.number
    }),
    swipeToDismiss: _propTypes2.default.bool
  }, _class.defaultProps = {
    swipeToDismiss: true,
    onOpen: function onOpen() {},
    onClose: function onClose() {}
  }, _temp2));

  exports.default = Lightbox;
},563,[13,219,25,65,564],"node_modules/react-native-lightbox/Lightbox.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-lightbox/LightboxOverlay.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    LightboxOverlay: {
      displayName: "LightboxOverlay"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-lightbox/LightboxOverlay.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var WINDOW_HEIGHT = _reactNative.Dimensions.get('window').height;

  var WINDOW_WIDTH = _reactNative.Dimensions.get('window').width;

  var DRAG_DISMISS_THRESHOLD = 150;
  var STATUS_BAR_OFFSET = _reactNative.Platform.OS === 'android' ? -25 : 0;
  var isIOS = _reactNative.Platform.OS === 'ios';

  var styles = _reactNative.StyleSheet.create({
    background: {
      position: 'absolute',
      top: 0,
      left: 0,
      width: WINDOW_WIDTH,
      height: WINDOW_HEIGHT
    },
    open: {
      position: 'absolute',
      flex: 1,
      justifyContent: 'center',
      backgroundColor: 'transparent'
    },
    header: {
      position: 'absolute',
      top: 0,
      left: 0,
      width: WINDOW_WIDTH,
      backgroundColor: 'transparent'
    },
    closeButton: {
      fontSize: 35,
      color: 'white',
      lineHeight: 40,
      width: 40,
      textAlign: 'center',
      shadowOffset: {
        width: 0,
        height: 0
      },
      shadowRadius: 1.5,
      shadowColor: 'black',
      shadowOpacity: 0.8
    }
  });

  var LightboxOverlay = _wrapComponent("LightboxOverlay")((_temp2 = _class = function (_Component) {
    _inherits(LightboxOverlay, _Component);

    function LightboxOverlay() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, LightboxOverlay);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LightboxOverlay.__proto__ || Object.getPrototypeOf(LightboxOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        isAnimating: false,
        isPanning: false,
        target: {
          x: 0,
          y: 0,
          opacity: 1
        },
        pan: new _reactNative.Animated.Value(0),
        openVal: new _reactNative.Animated.Value(0)
      }, _this.open = function () {
        if (isIOS) {
          _reactNative.StatusBar.setHidden(true, 'fade');
        }

        _this.state.pan.setValue(0);

        _this.setState({
          isAnimating: true,
          target: {
            x: 0,
            y: 0,
            opacity: 1
          }
        });

        _reactNative.Animated.spring(_this.state.openVal, _extends({
          toValue: 1
        }, _this.props.springConfig)).start(function () {
          return _this.setState({
            isAnimating: false
          });
        });
      }, _this.close = function () {
        if (isIOS) {
          _reactNative.StatusBar.setHidden(false, 'fade');
        }

        _this.setState({
          isAnimating: true
        });

        _reactNative.Animated.spring(_this.state.openVal, _extends({
          toValue: 0
        }, _this.props.springConfig)).start(function () {
          _this.setState({
            isAnimating: false
          });

          _this.props.onClose();
        });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(LightboxOverlay, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        this._panResponder = _reactNative.PanResponder.create({
          onStartShouldSetPanResponder: function onStartShouldSetPanResponder(evt, gestureState) {
            return !_this2.state.isAnimating;
          },
          onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture(evt, gestureState) {
            return !_this2.state.isAnimating;
          },
          onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {
            return !_this2.state.isAnimating;
          },
          onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(evt, gestureState) {
            return !_this2.state.isAnimating;
          },
          onPanResponderGrant: function onPanResponderGrant(evt, gestureState) {
            _this2.state.pan.setValue(0);

            _this2.setState({
              isPanning: true
            });
          },
          onPanResponderMove: _reactNative.Animated.event([null, {
            dy: this.state.pan
          }]),
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest(evt, gestureState) {
            return true;
          },
          onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {
            if (Math.abs(gestureState.dy) > DRAG_DISMISS_THRESHOLD) {
              _this2.setState({
                isPanning: false,
                target: {
                  y: gestureState.dy,
                  x: gestureState.dx,
                  opacity: 1 - Math.abs(gestureState.dy / WINDOW_HEIGHT)
                }
              });

              _this2.close();
            } else {
              _reactNative.Animated.spring(_this2.state.pan, _extends({
                toValue: 0
              }, _this2.props.springConfig)).start(function () {
                _this2.setState({
                  isPanning: false
                });
              });
            }
          }
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.isOpen) {
          this.open();
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(props) {
        if (this.props.isOpen != props.isOpen && props.isOpen) {
          this.open();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _props = this.props,
            isOpen = _props.isOpen,
            renderHeader = _props.renderHeader,
            swipeToDismiss = _props.swipeToDismiss,
            origin = _props.origin,
            backgroundColor = _props.backgroundColor;
        var _state = this.state,
            isPanning = _state.isPanning,
            isAnimating = _state.isAnimating,
            openVal = _state.openVal,
            target = _state.target;
        var lightboxOpacityStyle = {
          opacity: openVal.interpolate({
            inputRange: [0, 1],
            outputRange: [0, target.opacity]
          })
        };
        var handlers = void 0;

        if (swipeToDismiss) {
          handlers = this._panResponder.panHandlers;
        }

        var dragStyle = void 0;

        if (isPanning) {
          dragStyle = {
            top: this.state.pan
          };
          lightboxOpacityStyle.opacity = this.state.pan.interpolate({
            inputRange: [-WINDOW_HEIGHT, 0, WINDOW_HEIGHT],
            outputRange: [0, 1, 0]
          });
        }

        var openStyle = [styles.open, {
          left: openVal.interpolate({
            inputRange: [0, 1],
            outputRange: [origin.x, target.x]
          }),
          top: openVal.interpolate({
            inputRange: [0, 1],
            outputRange: [origin.y + STATUS_BAR_OFFSET, target.y + STATUS_BAR_OFFSET]
          }),
          width: openVal.interpolate({
            inputRange: [0, 1],
            outputRange: [origin.width, WINDOW_WIDTH]
          }),
          height: openVal.interpolate({
            inputRange: [0, 1],
            outputRange: [origin.height, WINDOW_HEIGHT]
          })
        }];

        var background = _react3.default.createElement(_reactNative.Animated.View, {
          style: [styles.background, {
            backgroundColor: backgroundColor
          }, lightboxOpacityStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 214
          }
        });

        var header = _react3.default.createElement(
          _reactNative.Animated.View,
          {
            style: [styles.header, lightboxOpacityStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 215
            }
          },
          renderHeader ? renderHeader(this.close) : _react3.default.createElement(
            _reactNative.TouchableOpacity,
            {
              onPress: this.close,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 218
              }
            },
            _react3.default.createElement(
              _reactNative.Text,
              {
                style: styles.closeButton,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 219
                }
              },
              "\xD7"
            )
          )
        );

        var content = _react3.default.createElement(
          _reactNative.Animated.View,
          _extends({
            style: [openStyle, dragStyle]
          }, handlers, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 224
            }
          }),
          this.props.children
        );

        if (this.props.navigator) {
          return _react3.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 231
              }
            },
            background,
            content,
            header
          );
        }

        return _react3.default.createElement(
          _reactNative.Modal,
          {
            visible: isOpen,
            transparent: true,
            onRequestClose: function onRequestClose() {
              return _this3.close();
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 240
            }
          },
          background,
          content,
          header
        );
      }
    }]);

    return LightboxOverlay;
  }(_react2.Component), _class.propTypes = {
    origin: _propTypes2.default.shape({
      x: _propTypes2.default.number,
      y: _propTypes2.default.number,
      width: _propTypes2.default.number,
      height: _propTypes2.default.number
    }),
    springConfig: _propTypes2.default.shape({
      tension: _propTypes2.default.number,
      friction: _propTypes2.default.number
    }),
    backgroundColor: _propTypes2.default.string,
    isOpen: _propTypes2.default.bool,
    renderHeader: _propTypes2.default.func,
    onOpen: _propTypes2.default.func,
    onClose: _propTypes2.default.func,
    swipeToDismiss: _propTypes2.default.bool
  }, _class.defaultProps = {
    springConfig: {
      tension: 30,
      friction: 7
    },
    backgroundColor: 'black'
  }, _temp2));

  exports.default = LightboxOverlay;
},564,[13,219,25,65],"node_modules/react-native-lightbox/LightboxOverlay.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Time.js";
  exports.default = Time;

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _moment = _require(_dependencyMap[3], "moment");

  var _moment2 = _interopRequireDefault(_moment);

  var _Color = _require(_dependencyMap[4], "./Color");

  var _Color2 = _interopRequireDefault(_Color);

  var _Constant = _require(_dependencyMap[5], "./Constant");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function Time(_ref, context) {
    var position = _ref.position,
        containerStyle = _ref.containerStyle,
        currentMessage = _ref.currentMessage,
        timeFormat = _ref.timeFormat;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [styles[position].container, containerStyle[position]],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 14
        }
      },
      _react2.default.createElement(
        _reactNative.Text,
        {
          style: [styles[position].text, textStyle[position]],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 15
          }
        },
        (0, _moment2.default)(currentMessage.createdAt).locale(context.getLocale()).format(timeFormat)
      )
    );
  }

  var containerStyle = {
    marginLeft: 10,
    marginRight: 10,
    marginBottom: 5
  };
  var textStyle = {
    fontSize: 10,
    backgroundColor: 'transparent',
    textAlign: 'right'
  };
  var styles = {
    left: _reactNative.StyleSheet.create({
      container: _extends({}, containerStyle),
      text: _extends({
        color: _Color2.default.timeTextColor
      }, textStyle)
    }),
    right: _reactNative.StyleSheet.create({
      container: _extends({}, containerStyle),
      text: _extends({
        color: _Color2.default.white
      }, textStyle)
    })
  };
  Time.contextTypes = {
    getLocale: _propTypes2.default.func
  };
  Time.defaultProps = {
    position: 'left',
    currentMessage: {
      createdAt: null
    },
    containerStyle: {},
    textStyle: {},
    timeFormat: _Constant.TIME_FORMAT
  };
  Time.propTypes = {
    position: _propTypes2.default.oneOf(['left', 'right']),
    currentMessage: _propTypes2.default.object,
    containerStyle: _propTypes2.default.shape({
      left: _reactNative.ViewPropTypes.style,
      right: _reactNative.ViewPropTypes.style
    }),
    textStyle: _propTypes2.default.shape({
      left: _reactNative.Text.propTypes.style,
      right: _reactNative.Text.propTypes.style
    }),
    timeFormat: _propTypes2.default.string
  };
},565,[25,13,65,546,554,566],"node_modules/react-native-gifted-chat/src/Time.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TIME_FORMAT = exports.DATE_FORMAT = exports.DEFAULT_PLACEHOLDER = exports.MAX_COMPOSER_HEIGHT = exports.MIN_COMPOSER_HEIGHT = undefined;

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var MIN_COMPOSER_HEIGHT = exports.MIN_COMPOSER_HEIGHT = _reactNative.Platform.select({
    ios: 33,
    android: 41
  });

  var MAX_COMPOSER_HEIGHT = exports.MAX_COMPOSER_HEIGHT = 200;
  var DEFAULT_PLACEHOLDER = exports.DEFAULT_PLACEHOLDER = 'Type a message...';
  var DATE_FORMAT = exports.DATE_FORMAT = 'll';
  var TIME_FORMAT = exports.TIME_FORMAT = 'LT';
},566,[65],"node_modules/react-native-gifted-chat/src/Constant.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/SystemMessage.js";
  exports.default = SystemMessage;

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _Color = _require(_dependencyMap[3], "./Color");

  var _Color2 = _interopRequireDefault(_Color);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function SystemMessage(_ref) {
    var currentMessage = _ref.currentMessage,
        containerStyle = _ref.containerStyle,
        wrapperStyle = _ref.wrapperStyle,
        textStyle = _ref.textStyle;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [styles.container, containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 10
        }
      },
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, wrapperStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 11
          }
        },
        _react2.default.createElement(
          _reactNative.Text,
          {
            style: [styles.text, textStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 12
            }
          },
          currentMessage.text
        )
      )
    );
  }

  var styles = _reactNative.StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center',
      flex: 1,
      marginTop: 5,
      marginBottom: 10
    },
    text: {
      backgroundColor: _Color2.default.backgroundTransparent,
      color: _Color2.default.defaultColor,
      fontSize: 12,
      fontWeight: '300'
    }
  });

  SystemMessage.defaultProps = {
    currentMessage: {
      system: false
    },
    containerStyle: {},
    wrapperStyle: {},
    textStyle: {}
  };
  SystemMessage.propTypes = {
    currentMessage: _propTypes2.default.object,
    containerStyle: _reactNative.ViewPropTypes.style,
    wrapperStyle: _reactNative.ViewPropTypes.style,
    textStyle: _reactNative.Text.propTypes.style
  };
},567,[13,65,25,554],"node_modules/react-native-gifted-chat/src/SystemMessage.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Composer.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _Constant = _require(_dependencyMap[4], "./Constant");

  var _Color = _require(_dependencyMap[5], "./Color");

  var _Color2 = _interopRequireDefault(_Color);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Composer: {
      displayName: "Composer"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Composer.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Composer = _wrapComponent("Composer")(function (_React$Component) {
    _inherits(Composer, _React$Component);

    function Composer() {
      _classCallCheck(this, Composer);

      return _possibleConstructorReturn(this, (Composer.__proto__ || Object.getPrototypeOf(Composer)).apply(this, arguments));
    }

    _createClass(Composer, [{
      key: "onContentSizeChange",
      value: function onContentSizeChange(e) {
        var contentSize = e.nativeEvent.contentSize;
        if (!contentSize) return;

        if (!this.contentSize || this.contentSize.width !== contentSize.width || this.contentSize.height !== contentSize.height) {
          this.contentSize = contentSize;
          this.props.onInputSizeChanged(this.contentSize);
        }
      }
    }, {
      key: "onChangeText",
      value: function onChangeText(text) {
        this.props.onTextChanged(text);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react3.default.createElement(_reactNative.TextInput, _extends({
          placeholder: this.props.placeholder,
          placeholderTextColor: this.props.placeholderTextColor,
          multiline: this.props.multiline,
          onChange: function onChange(e) {
            return _this2.onContentSizeChange(e);
          },
          onContentSizeChange: function onContentSizeChange(e) {
            return _this2.onContentSizeChange(e);
          },
          onChangeText: function onChangeText(text) {
            return _this2.onChangeText(text);
          },
          style: [styles.textInput, this.props.textInputStyle, {
            height: this.props.composerHeight
          }],
          autoFocus: this.props.textInputAutoFocus,
          value: this.props.text,
          accessibilityLabel: this.props.text || this.props.placeholder,
          enablesReturnKeyAutomatically: true,
          underlineColorAndroid: "transparent",
          keyboardAppearance: this.props.keyboardAppearance
        }, this.props.textInputProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 34
          }
        }));
      }
    }]);

    return Composer;
  }(_react3.default.Component));

  exports.default = Composer;

  var styles = _reactNative.StyleSheet.create({
    textInput: {
      flex: 1,
      marginLeft: 10,
      fontSize: 16,
      lineHeight: 16,
      marginTop: _reactNative.Platform.select({
        ios: 6,
        android: 0
      }),
      marginBottom: _reactNative.Platform.select({
        ios: 5,
        android: 3
      })
    }
  });

  Composer.defaultProps = {
    composerHeight: _Constant.MIN_COMPOSER_HEIGHT,
    text: '',
    placeholderTextColor: _Color2.default.defaultProps,
    placeholder: _Constant.DEFAULT_PLACEHOLDER,
    textInputProps: null,
    multiline: true,
    textInputStyle: {},
    textInputAutoFocus: false,
    keyboardAppearance: 'default',
    onTextChanged: function onTextChanged() {},
    onInputSizeChanged: function onInputSizeChanged() {}
  };
  Composer.propTypes = {
    composerHeight: _propTypes2.default.number,
    text: _propTypes2.default.string,
    placeholder: _propTypes2.default.string,
    placeholderTextColor: _propTypes2.default.string,
    textInputProps: _propTypes2.default.object,
    onTextChanged: _propTypes2.default.func,
    onInputSizeChanged: _propTypes2.default.func,
    multiline: _propTypes2.default.bool,
    textInputStyle: _reactNative.TextInput.propTypes.style,
    textInputAutoFocus: _propTypes2.default.bool,
    keyboardAppearance: _propTypes2.default.string
  };
},568,[13,219,25,65,566,554],"node_modules/react-native-gifted-chat/src/Composer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Day.js";
  exports.default = Day;

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _moment = _require(_dependencyMap[3], "moment");

  var _moment2 = _interopRequireDefault(_moment);

  var _Color = _require(_dependencyMap[4], "./Color");

  var _Color2 = _interopRequireDefault(_Color);

  var _utils = _require(_dependencyMap[5], "./utils");

  var _Constant = _require(_dependencyMap[6], "./Constant");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function Day(_ref, context) {
    var dateFormat = _ref.dateFormat,
        currentMessage = _ref.currentMessage,
        previousMessage = _ref.previousMessage,
        containerStyle = _ref.containerStyle,
        wrapperStyle = _ref.wrapperStyle,
        textStyle = _ref.textStyle;

    if (!(0, _utils.isSameDay)(currentMessage, previousMessage)) {
      return _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.container, containerStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 19
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            style: wrapperStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 20
            }
          },
          _react2.default.createElement(
            _reactNative.Text,
            {
              style: [styles.text, textStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 21
              }
            },
            (0, _moment2.default)(currentMessage.createdAt).locale(context.getLocale()).format(dateFormat).toUpperCase()
          )
        )
      );
    }

    return null;
  }

  var styles = _reactNative.StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center',
      marginTop: 5,
      marginBottom: 10
    },
    text: {
      backgroundColor: _Color2.default.backgroundTransparent,
      color: _Color2.default.defaultColor,
      fontSize: 12,
      fontWeight: '600'
    }
  });

  Day.contextTypes = {
    getLocale: _propTypes2.default.func
  };
  Day.defaultProps = {
    currentMessage: {
      createdAt: null
    },
    previousMessage: {},
    containerStyle: {},
    wrapperStyle: {},
    textStyle: {},
    isSameDay: (0, _utils.warnDeprecated)(_utils.isSameDay),
    isSameUser: (0, _utils.warnDeprecated)(_utils.isSameUser),
    dateFormat: _Constant.DATE_FORMAT
  };
  Day.propTypes = {
    currentMessage: _propTypes2.default.object,
    previousMessage: _propTypes2.default.object,
    containerStyle: _reactNative.ViewPropTypes.style,
    wrapperStyle: _reactNative.ViewPropTypes.style,
    textStyle: _reactNative.Text.propTypes.style,
    isSameDay: _propTypes2.default.func,
    isSameUser: _propTypes2.default.func,
    dateFormat: _propTypes2.default.string
  };
},569,[25,13,65,546,554,552,566],"node_modules/react-native-gifted-chat/src/Day.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/InputToolbar.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _Composer = _require(_dependencyMap[4], "./Composer");

  var _Composer2 = _interopRequireDefault(_Composer);

  var _Send = _require(_dependencyMap[5], "./Send");

  var _Send2 = _interopRequireDefault(_Send);

  var _Actions = _require(_dependencyMap[6], "./Actions");

  var _Actions2 = _interopRequireDefault(_Actions);

  var _Color = _require(_dependencyMap[7], "./Color");

  var _Color2 = _interopRequireDefault(_Color);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    InputToolbar: {
      displayName: "InputToolbar"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/InputToolbar.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var InputToolbar = _wrapComponent("InputToolbar")(function (_React$Component) {
    _inherits(InputToolbar, _React$Component);

    function InputToolbar(props) {
      _classCallCheck(this, InputToolbar);

      var _this = _possibleConstructorReturn(this, (InputToolbar.__proto__ || Object.getPrototypeOf(InputToolbar)).call(this, props));

      _this.keyboardWillShow = _this.keyboardWillShow.bind(_this);
      _this.keyboardWillHide = _this.keyboardWillHide.bind(_this);
      _this.state = {
        position: 'absolute'
      };
      return _this;
    }

    _createClass(InputToolbar, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.keyboardWillShowListener = _reactNative.Keyboard.addListener('keyboardWillShow', this.keyboardWillShow);
        this.keyboardWillHideListener = _reactNative.Keyboard.addListener('keyboardWillHide', this.keyboardWillHide);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.keyboardWillShowListener.remove();
        this.keyboardWillHideListener.remove();
      }
    }, {
      key: "keyboardWillShow",
      value: function keyboardWillShow() {
        this.setState({
          position: 'relative'
        });
      }
    }, {
      key: "keyboardWillHide",
      value: function keyboardWillHide() {
        this.setState({
          position: 'absolute'
        });
      }
    }, {
      key: "renderActions",
      value: function renderActions() {
        if (this.props.renderActions) {
          return this.props.renderActions(this.props);
        } else if (this.props.onPressActionButton) {
          return _react3.default.createElement(_Actions2.default, _extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 51
            }
          }));
        }

        return null;
      }
    }, {
      key: "renderSend",
      value: function renderSend() {
        if (this.props.renderSend) {
          return this.props.renderSend(this.props);
        }

        return _react3.default.createElement(_Send2.default, _extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 60
          }
        }));
      }
    }, {
      key: "renderComposer",
      value: function renderComposer() {
        if (this.props.renderComposer) {
          return this.props.renderComposer(this.props);
        }

        return _react3.default.createElement(_Composer2.default, _extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        }));
      }
    }, {
      key: "renderAccessory",
      value: function renderAccessory() {
        if (this.props.renderAccessory) {
          return _react3.default.createElement(
            _reactNative.View,
            {
              style: [styles.accessory, this.props.accessoryStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 74
              }
            },
            this.props.renderAccessory(this.props)
          );
        }

        return null;
      }
    }, {
      key: "render",
      value: function render() {
        return _react3.default.createElement(
          _reactNative.View,
          {
            style: [styles.container, this.props.containerStyle, {
              position: this.state.position
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 84
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: [styles.primary, this.props.primaryStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 87
              }
            },
            this.renderActions(),
            this.renderComposer(),
            this.renderSend()
          ),
          this.renderAccessory()
        );
      }
    }]);

    return InputToolbar;
  }(_react3.default.Component));

  exports.default = InputToolbar;

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
      borderTopColor: _Color2.default.defaultColor,
      backgroundColor: _Color2.default.white,
      bottom: 0,
      left: 0,
      right: 0
    },
    primary: {
      flexDirection: 'row',
      alignItems: 'flex-end'
    },
    accessory: {
      height: 44
    }
  });

  InputToolbar.defaultProps = {
    renderAccessory: null,
    renderActions: null,
    renderSend: null,
    renderComposer: null,
    containerStyle: {},
    primaryStyle: {},
    accessoryStyle: {},
    onPressActionButton: function onPressActionButton() {}
  };
  InputToolbar.propTypes = {
    renderAccessory: _propTypes2.default.func,
    renderActions: _propTypes2.default.func,
    renderSend: _propTypes2.default.func,
    renderComposer: _propTypes2.default.func,
    onPressActionButton: _propTypes2.default.func,
    containerStyle: _reactNative.ViewPropTypes.style,
    primaryStyle: _reactNative.ViewPropTypes.style,
    accessoryStyle: _reactNative.ViewPropTypes.style
  };
},570,[13,219,25,65,568,571,553,554],"node_modules/react-native-gifted-chat/src/InputToolbar.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Send.js";
  exports.default = Send;

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _Color = _require(_dependencyMap[3], "./Color");

  var _Color2 = _interopRequireDefault(_Color);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function Send(_ref) {
    var text = _ref.text,
        containerStyle = _ref.containerStyle,
        onSend = _ref.onSend,
        children = _ref.children,
        textStyle = _ref.textStyle,
        label = _ref.label;

    if (text.trim().length > 0) {
      return _react2.default.createElement(
        _reactNative.TouchableOpacity,
        {
          style: [styles.container, containerStyle],
          onPress: function onPress() {
            onSend({
              text: text.trim()
            }, true);
          },
          accessibilityTraits: "button",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 11
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 18
            }
          },
          children || _react2.default.createElement(
            _reactNative.Text,
            {
              style: [styles.text, textStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 18
              }
            },
            label
          )
        )
      );
    }

    return _react2.default.createElement(_reactNative.View, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 22
      }
    });
  }

  var styles = _reactNative.StyleSheet.create({
    container: {
      height: 44,
      justifyContent: 'flex-end'
    },
    text: {
      color: _Color2.default.defaultBlue,
      fontWeight: '600',
      fontSize: 17,
      backgroundColor: _Color2.default.backgroundTransparent,
      marginBottom: 12,
      marginLeft: 10,
      marginRight: 10
    }
  });

  Send.defaultProps = {
    text: '',
    onSend: function onSend() {},
    label: 'Send',
    containerStyle: {},
    textStyle: {},
    children: null
  };
  Send.propTypes = {
    text: _propTypes2.default.string,
    onSend: _propTypes2.default.func,
    label: _propTypes2.default.string,
    containerStyle: _reactNative.ViewPropTypes.style,
    textStyle: _reactNative.Text.propTypes.style,
    children: _propTypes2.default.element
  };
},571,[25,13,65,554],"node_modules/react-native-gifted-chat/src/Send.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/LoadEarlier.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _Color = _require(_dependencyMap[4], "./Color");

  var _Color2 = _interopRequireDefault(_Color);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    LoadEarlier: {
      displayName: "LoadEarlier"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/LoadEarlier.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var LoadEarlier = _wrapComponent("LoadEarlier")(function (_React$Component) {
    _inherits(LoadEarlier, _React$Component);

    function LoadEarlier() {
      _classCallCheck(this, LoadEarlier);

      return _possibleConstructorReturn(this, (LoadEarlier.__proto__ || Object.getPrototypeOf(LoadEarlier)).apply(this, arguments));
    }

    _createClass(LoadEarlier, [{
      key: "renderLoading",
      value: function renderLoading() {
        if (this.props.isLoadingEarlier === false) {
          return _react3.default.createElement(
            _reactNative.Text,
            {
              style: [styles.text, this.props.textStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 21
              }
            },
            this.props.label
          );
        }

        return _react3.default.createElement(
          _reactNative.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          },
          _react3.default.createElement(
            _reactNative.Text,
            {
              style: [styles.text, this.props.textStyle, {
                opacity: 0
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 28
              }
            },
            this.props.label
          ),
          _react3.default.createElement(_reactNative.ActivityIndicator, {
            color: "white",
            size: "small",
            style: [styles.activityIndicator, this.props.activityIndicatorStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          })
        );
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react3.default.createElement(
          _reactNative.TouchableOpacity,
          {
            style: [styles.container, this.props.containerStyle],
            onPress: function onPress() {
              if (_this2.props.onLoadEarlier) {
                _this2.props.onLoadEarlier();
              }
            },
            disabled: this.props.isLoadingEarlier === true,
            accessibilityTraits: "button",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 41
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: [styles.wrapper, this.props.wrapperStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 51
              }
            },
            this.renderLoading()
          )
        );
      }
    }]);

    return LoadEarlier;
  }(_react3.default.Component));

  exports.default = LoadEarlier;

  var styles = _reactNative.StyleSheet.create({
    container: {
      alignItems: 'center',
      marginTop: 5,
      marginBottom: 10
    },
    wrapper: {
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: _Color2.default.defaultColor,
      borderRadius: 15,
      height: 30,
      paddingLeft: 10,
      paddingRight: 10
    },
    text: {
      backgroundColor: _Color2.default.backgroundTransparent,
      color: _Color2.default.white,
      fontSize: 12
    },
    activityIndicator: {
      marginTop: _reactNative.Platform.select({
        ios: -14,
        android: -16
      })
    }
  });

  LoadEarlier.defaultProps = {
    onLoadEarlier: function onLoadEarlier() {},
    isLoadingEarlier: false,
    label: 'Load earlier messages',
    containerStyle: {},
    wrapperStyle: {},
    textStyle: {},
    activityIndicatorStyle: {}
  };
  LoadEarlier.propTypes = {
    onLoadEarlier: _propTypes2.default.func,
    isLoadingEarlier: _propTypes2.default.bool,
    label: _propTypes2.default.string,
    containerStyle: _reactNative.ViewPropTypes.style,
    wrapperStyle: _reactNative.ViewPropTypes.style,
    textStyle: _reactNative.Text.propTypes.style,
    activityIndicatorStyle: _reactNative.ViewPropTypes.style
  };
},572,[13,219,25,65,554],"node_modules/react-native-gifted-chat/src/LoadEarlier.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Message.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _Avatar = _require(_dependencyMap[4], "./Avatar");

  var _Avatar2 = _interopRequireDefault(_Avatar);

  var _Bubble = _require(_dependencyMap[5], "./Bubble");

  var _Bubble2 = _interopRequireDefault(_Bubble);

  var _SystemMessage = _require(_dependencyMap[6], "./SystemMessage");

  var _SystemMessage2 = _interopRequireDefault(_SystemMessage);

  var _Day = _require(_dependencyMap[7], "./Day");

  var _Day2 = _interopRequireDefault(_Day);

  var _utils = _require(_dependencyMap[8], "./utils");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Message: {
      displayName: "Message"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/Message.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Message = _wrapComponent("Message")(function (_React$Component) {
    _inherits(Message, _React$Component);

    function Message() {
      _classCallCheck(this, Message);

      return _possibleConstructorReturn(this, (Message.__proto__ || Object.getPrototypeOf(Message)).apply(this, arguments));
    }

    _createClass(Message, [{
      key: "getInnerComponentProps",
      value: function getInnerComponentProps() {
        var _props = this.props,
            containerStyle = _props.containerStyle,
            props = _objectWithoutProperties(_props, ["containerStyle"]);

        return _extends({}, props, {
          isSameUser: _utils.isSameUser,
          isSameDay: _utils.isSameDay
        });
      }
    }, {
      key: "renderDay",
      value: function renderDay() {
        if (this.props.currentMessage.createdAt) {
          var dayProps = this.getInnerComponentProps();

          if (this.props.renderDay) {
            return this.props.renderDay(dayProps);
          }

          return _react3.default.createElement(_Day2.default, _extends({}, dayProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          }));
        }

        return null;
      }
    }, {
      key: "renderBubble",
      value: function renderBubble() {
        var bubbleProps = this.getInnerComponentProps();

        if (this.props.renderBubble) {
          return this.props.renderBubble(bubbleProps);
        }

        return _react3.default.createElement(_Bubble2.default, _extends({}, bubbleProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 41
          }
        }));
      }
    }, {
      key: "renderSystemMessage",
      value: function renderSystemMessage() {
        var systemMessageProps = this.getInnerComponentProps();

        if (this.props.renderSystemMessage) {
          return this.props.renderSystemMessage(systemMessageProps);
        }

        return _react3.default.createElement(_SystemMessage2.default, _extends({}, systemMessageProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 49
          }
        }));
      }
    }, {
      key: "renderAvatar",
      value: function renderAvatar() {
        if (this.props.user._id === this.props.currentMessage.user._id && !this.props.showUserAvatar) {
          return null;
        }

        var avatarProps = this.getInnerComponentProps();
        var currentMessage = avatarProps.currentMessage;

        if (currentMessage.user.avatar === null) {
          return null;
        }

        return _react3.default.createElement(_Avatar2.default, _extends({}, avatarProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 61
          }
        }));
      }
    }, {
      key: "render",
      value: function render() {
        var sameUser = (0, _utils.isSameUser)(this.props.currentMessage, this.props.nextMessage);
        return _react3.default.createElement(
          _reactNative.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 67
            }
          },
          this.renderDay(),
          this.props.currentMessage.system ? this.renderSystemMessage() : _react3.default.createElement(
            _reactNative.View,
            {
              style: [styles[this.props.position].container, {
                marginBottom: sameUser ? 2 : 10
              }, !this.props.inverted && {
                marginBottom: 2
              }, this.props.containerStyle[this.props.position]],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 72
              }
            },
            this.props.position === 'left' ? this.renderAvatar() : null,
            this.renderBubble(),
            this.props.position === 'right' ? this.renderAvatar() : null
          )
        );
      }
    }]);

    return Message;
  }(_react3.default.Component));

  exports.default = Message;
  var styles = {
    left: _reactNative.StyleSheet.create({
      container: {
        flexDirection: 'row',
        alignItems: 'flex-end',
        justifyContent: 'flex-start',
        marginLeft: 8,
        marginRight: 0
      }
    }),
    right: _reactNative.StyleSheet.create({
      container: {
        flexDirection: 'row',
        alignItems: 'flex-end',
        justifyContent: 'flex-end',
        marginLeft: 0,
        marginRight: 8
      }
    })
  };
  Message.defaultProps = {
    renderAvatar: undefined,
    renderBubble: null,
    renderDay: null,
    renderSystemMessage: null,
    position: 'left',
    currentMessage: {},
    nextMessage: {},
    previousMessage: {},
    user: {},
    containerStyle: {},
    showUserAvatar: true,
    inverted: true
  };
  Message.propTypes = {
    renderAvatar: _propTypes2.default.func,
    showUserAvatar: _propTypes2.default.bool,
    renderBubble: _propTypes2.default.func,
    renderDay: _propTypes2.default.func,
    renderSystemMessage: _propTypes2.default.func,
    position: _propTypes2.default.oneOf(['left', 'right']),
    currentMessage: _propTypes2.default.object,
    nextMessage: _propTypes2.default.object,
    previousMessage: _propTypes2.default.object,
    user: _propTypes2.default.object,
    inverted: _propTypes2.default.bool,
    containerStyle: _propTypes2.default.shape({
      left: _reactNative.ViewPropTypes.style,
      right: _reactNative.ViewPropTypes.style
    })
  };
},573,[13,219,25,65,555,557,567,569,552],"node_modules/react-native-gifted-chat/src/Message.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/MessageContainer.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _shallowequal = _require(_dependencyMap[4], "shallowequal");

  var _shallowequal2 = _interopRequireDefault(_shallowequal);

  var _reactNativeInvertibleScrollView = _require(_dependencyMap[5], "react-native-invertible-scroll-view");

  var _reactNativeInvertibleScrollView2 = _interopRequireDefault(_reactNativeInvertibleScrollView);

  var _md = _require(_dependencyMap[6], "md5");

  var _md2 = _interopRequireDefault(_md);

  var _LoadEarlier = _require(_dependencyMap[7], "./LoadEarlier");

  var _LoadEarlier2 = _interopRequireDefault(_LoadEarlier);

  var _Message = _require(_dependencyMap[8], "./Message");

  var _Message2 = _interopRequireDefault(_Message);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MessageContainer: {
      displayName: "MessageContainer"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-gifted-chat/src/MessageContainer.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var MessageContainer = _wrapComponent("MessageContainer")(function (_React$Component) {
    _inherits(MessageContainer, _React$Component);

    function MessageContainer(props) {
      _classCallCheck(this, MessageContainer);

      var _this = _possibleConstructorReturn(this, (MessageContainer.__proto__ || Object.getPrototypeOf(MessageContainer)).call(this, props));

      _this.renderRow = _this.renderRow.bind(_this);
      _this.renderFooter = _this.renderFooter.bind(_this);
      _this.renderLoadEarlier = _this.renderLoadEarlier.bind(_this);
      _this.renderScrollComponent = _this.renderScrollComponent.bind(_this);
      var dataSource = new _reactNative.ListView.DataSource({
        rowHasChanged: function rowHasChanged(r1, r2) {
          return r1.hash !== r2.hash;
        }
      });

      var messagesData = _this.prepareMessages(props.messages);

      _this.state = {
        dataSource: dataSource.cloneWithRows(messagesData.blob, messagesData.keys)
      };
      return _this;
    }

    _createClass(MessageContainer, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (this.props.messages === nextProps.messages) {
          return;
        }

        var messagesData = this.prepareMessages(nextProps.messages);
        this.setState({
          dataSource: this.state.dataSource.cloneWithRows(messagesData.blob, messagesData.keys)
        });
      }
    }, {
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps, nextState) {
        if (!(0, _shallowequal2.default)(this.props, nextProps)) {
          return true;
        }

        if (!(0, _shallowequal2.default)(this.state, nextState)) {
          return true;
        }

        return false;
      }
    }, {
      key: "prepareMessages",
      value: function prepareMessages(messages) {
        return {
          keys: messages.map(function (m) {
            return m._id;
          }),
          blob: messages.reduce(function (o, m, i) {
            var previousMessage = messages[i + 1] || {};
            var nextMessage = messages[i - 1] || {};

            var toHash = JSON.stringify(m) + previousMessage._id + nextMessage._id;

            o[m._id] = _extends({}, m, {
              previousMessage: previousMessage,
              nextMessage: nextMessage,
              hash: (0, _md2.default)(toHash)
            });
            return o;
          }, {})
        };
      }
    }, {
      key: "scrollTo",
      value: function scrollTo(options) {
        this._invertibleScrollViewRef.scrollTo(options);
      }
    }, {
      key: "renderLoadEarlier",
      value: function renderLoadEarlier() {
        if (this.props.loadEarlier === true) {
          var loadEarlierProps = _extends({}, this.props);

          if (this.props.renderLoadEarlier) {
            return this.props.renderLoadEarlier(loadEarlierProps);
          }

          return _react3.default.createElement(_LoadEarlier2.default, _extends({}, loadEarlierProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 93
            }
          }));
        }

        return null;
      }
    }, {
      key: "renderFooter",
      value: function renderFooter() {
        if (this.props.renderFooter) {
          var footerProps = _extends({}, this.props);

          return this.props.renderFooter(footerProps);
        }

        return null;
      }
    }, {
      key: "renderRow",
      value: function renderRow(message) {
        if (!message._id && message._id !== 0) {
          console.warn('GiftedChat: `_id` is missing for message', JSON.stringify(message));
        }

        if (!message.user) {
          if (!message.system) {
            console.warn('GiftedChat: `user` is missing for message', JSON.stringify(message));
          }

          message.user = {};
        }

        var messageProps = _extends({}, this.props, {
          key: message._id,
          currentMessage: message,
          previousMessage: message.previousMessage,
          nextMessage: message.nextMessage,
          position: message.user._id === this.props.user._id ? 'right' : 'left'
        });

        if (this.props.renderMessage) {
          return this.props.renderMessage(messageProps);
        }

        return _react3.default.createElement(_Message2.default, _extends({}, messageProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 131
          }
        }));
      }
    }, {
      key: "renderScrollComponent",
      value: function renderScrollComponent(props) {
        var _this2 = this;

        var invertibleScrollViewProps = this.props.invertibleScrollViewProps;
        return _react3.default.createElement(_reactNativeInvertibleScrollView2.default, _extends({}, props, invertibleScrollViewProps, {
          ref: function ref(component) {
            return _this2._invertibleScrollViewRef = component;
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 137
          }
        }));
      }
    }, {
      key: "render",
      value: function render() {
        var contentContainerStyle = this.props.inverted ? {} : styles.notInvertedContentContainerStyle;
        return _react3.default.createElement(
          _reactNative.View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 151
            }
          },
          _react3.default.createElement(_reactNative.ListView, _extends({
            enableEmptySections: true,
            automaticallyAdjustContentInsets: false,
            initialListSize: 20,
            pageSize: 20
          }, this.props.listViewProps, {
            dataSource: this.state.dataSource,
            contentContainerStyle: contentContainerStyle,
            renderRow: this.renderRow,
            renderHeader: this.props.inverted ? this.renderFooter : this.renderLoadEarlier,
            renderFooter: this.props.inverted ? this.renderLoadEarlier : this.renderFooter,
            renderScrollComponent: this.renderScrollComponent,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 152
            }
          }))
        );
      }
    }]);

    return MessageContainer;
  }(_react3.default.Component));

  exports.default = MessageContainer;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    notInvertedContentContainerStyle: {
      justifyContent: 'flex-end'
    }
  });

  MessageContainer.defaultProps = {
    messages: [],
    user: {},
    renderFooter: null,
    renderMessage: null,
    onLoadEarlier: function onLoadEarlier() {},
    inverted: true,
    loadEarlier: false,
    listViewProps: {},
    invertibleScrollViewProps: {}
  };
  MessageContainer.propTypes = {
    messages: _propTypes2.default.arrayOf(_propTypes2.default.object),
    user: _propTypes2.default.object,
    renderFooter: _propTypes2.default.func,
    renderMessage: _propTypes2.default.func,
    renderLoadEarlier: _propTypes2.default.func,
    onLoadEarlier: _propTypes2.default.func,
    listViewProps: _propTypes2.default.object,
    inverted: _propTypes2.default.bool,
    loadEarlier: _propTypes2.default.bool,
    invertibleScrollViewProps: _propTypes2.default.object
  };
},574,[13,219,25,65,575,576,578,572,573],"node_modules/react-native-gifted-chat/src/MessageContainer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

    module.exports = function shallowEqual(objA, objB, compare, compareContext) {
        var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

        if (ret !== void 0) {
            return !!ret;
        }

        if (objA === objB) {
            return true;
        }

        if ((typeof objA === "undefined" ? "undefined" : _typeof(objA)) !== 'object' || !objA || (typeof objB === "undefined" ? "undefined" : _typeof(objB)) !== 'object' || !objB) {
            return false;
        }

        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);

        if (keysA.length !== keysB.length) {
            return false;
        }

        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

        for (var idx = 0; idx < keysA.length; idx++) {
            var key = keysA[idx];

            if (!bHasOwnProperty(key)) {
                return false;
            }

            var valueA = objA[key];
            var valueB = objB[key];
            ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

            if (ret === false || ret === void 0 && valueA !== valueB) {
                return false;
            }
        }

        return true;
    };
},575,[],"node_modules/shallowequal/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-invertible-scroll-view/InvertibleScrollView.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createReactClass = _require(_dependencyMap[0], "create-react-class");

  var _createReactClass2 = _interopRequireDefault(_createReactClass);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[2], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactCloneReferencedElement = _require(_dependencyMap[3], "react-clone-referenced-element");

  var _reactCloneReferencedElement2 = _interopRequireDefault(_reactCloneReferencedElement);

  var _reactNative = _require(_dependencyMap[4], "react-native");

  var _reactNativeScrollableMixin = _require(_dependencyMap[5], "react-native-scrollable-mixin");

  var _reactNativeScrollableMixin2 = _interopRequireDefault(_reactNativeScrollableMixin);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var InvertibleScrollView = (0, _createReactClass2.default)({
    displayName: "InvertibleScrollView",
    mixins: [_reactNativeScrollableMixin2.default],
    propTypes: _extends({}, _reactNative.ScrollView.propTypes, {
      inverted: _propTypes2.default.bool,
      renderScrollComponent: _propTypes2.default.func.isRequired
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        renderScrollComponent: function renderScrollComponent(props) {
          return _react2.default.createElement(_reactNative.ScrollView, _extends({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          }));
        }
      };
    },
    getScrollResponder: function getScrollResponder() {
      return this._scrollComponent.getScrollResponder();
    },
    setNativeProps: function setNativeProps(props) {
      this._scrollComponent.setNativeProps(props);
    },
    render: function render() {
      var _this = this;

      var _props = this.props,
          inverted = _props.inverted,
          renderScrollComponent = _props.renderScrollComponent,
          props = _objectWithoutProperties(_props, ["inverted", "renderScrollComponent"]);

      if (inverted) {
        if (this.props.horizontal) {
          props.style = [styles.horizontallyInverted, props.style];
          props.children = this._renderInvertedChildren(props.children, styles.horizontallyInverted);
        } else {
          props.style = [styles.verticallyInverted, props.style];
          props.children = this._renderInvertedChildren(props.children, styles.verticallyInverted);
        }
      }

      return (0, _reactCloneReferencedElement2.default)(renderScrollComponent(props), {
        ref: function ref(component) {
          _this._scrollComponent = component;
        }
      });
    },
    _renderInvertedChildren: function _renderInvertedChildren(children, inversionStyle) {
      return _react2.default.Children.map(children, function (child) {
        return child ? _react2.default.createElement(
          _reactNative.View,
          {
            style: inversionStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 65
            }
          },
          child
        ) : child;
      });
    }
  });

  var styles = _reactNative.StyleSheet.create({
    verticallyInverted: {
      flex: 1,
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      flex: 1,
      transform: [{
        scaleX: -1
      }]
    }
  });

  module.exports = InvertibleScrollView;
},576,[216,25,13,436,65,577],"node_modules/react-native-invertible-scroll-view/InvertibleScrollView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var ScrollableMixin = {
    getInnerViewNode: function getInnerViewNode() {
      return this.getScrollResponder().getInnerViewNode();
    },
    scrollTo: function scrollTo(destY, destX) {
      this.getScrollResponder().scrollTo(destY, destX);
    },
    scrollWithoutAnimationTo: function scrollWithoutAnimationTo(destY, destX) {
      this.getScrollResponder().scrollWithoutAnimationTo(destY, destX);
    }
  };
  module.exports = ScrollableMixin;
},577,[],"node_modules/react-native-scrollable-mixin/ScrollableMixin.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  (function () {
    var crypt = _require(_dependencyMap[0], 'crypt'),
        utf8 = _require(_dependencyMap[1], 'charenc').utf8,
        isBuffer = _require(_dependencyMap[2], 'is-buffer'),
        bin = _require(_dependencyMap[1], 'charenc').bin,
        md5 = function md5(message, options) {
      if (message.constructor == String) {
        if (options && options.encoding === 'binary') message = bin.stringToBytes(message);else message = utf8.stringToBytes(message);
      } else if (isBuffer(message)) message = Array.prototype.slice.call(message, 0);else if (!Array.isArray(message)) message = message.toString();
      var m = crypt.bytesToWords(message),
          l = message.length * 8,
          a = 1732584193,
          b = -271733879,
          c = -1732584194,
          d = 271733878;

      for (var i = 0; i < m.length; i++) {
        m[i] = (m[i] << 8 | m[i] >>> 24) & 0x00FF00FF | (m[i] << 24 | m[i] >>> 8) & 0xFF00FF00;
      }

      m[l >>> 5] |= 0x80 << l % 32;
      m[(l + 64 >>> 9 << 4) + 14] = l;
      var FF = md5._ff,
          GG = md5._gg,
          HH = md5._hh,
          II = md5._ii;

      for (var i = 0; i < m.length; i += 16) {
        var aa = a,
            bb = b,
            cc = c,
            dd = d;
        a = FF(a, b, c, d, m[i + 0], 7, -680876936);
        d = FF(d, a, b, c, m[i + 1], 12, -389564586);
        c = FF(c, d, a, b, m[i + 2], 17, 606105819);
        b = FF(b, c, d, a, m[i + 3], 22, -1044525330);
        a = FF(a, b, c, d, m[i + 4], 7, -176418897);
        d = FF(d, a, b, c, m[i + 5], 12, 1200080426);
        c = FF(c, d, a, b, m[i + 6], 17, -1473231341);
        b = FF(b, c, d, a, m[i + 7], 22, -45705983);
        a = FF(a, b, c, d, m[i + 8], 7, 1770035416);
        d = FF(d, a, b, c, m[i + 9], 12, -1958414417);
        c = FF(c, d, a, b, m[i + 10], 17, -42063);
        b = FF(b, c, d, a, m[i + 11], 22, -1990404162);
        a = FF(a, b, c, d, m[i + 12], 7, 1804603682);
        d = FF(d, a, b, c, m[i + 13], 12, -40341101);
        c = FF(c, d, a, b, m[i + 14], 17, -1502002290);
        b = FF(b, c, d, a, m[i + 15], 22, 1236535329);
        a = GG(a, b, c, d, m[i + 1], 5, -165796510);
        d = GG(d, a, b, c, m[i + 6], 9, -1069501632);
        c = GG(c, d, a, b, m[i + 11], 14, 643717713);
        b = GG(b, c, d, a, m[i + 0], 20, -373897302);
        a = GG(a, b, c, d, m[i + 5], 5, -701558691);
        d = GG(d, a, b, c, m[i + 10], 9, 38016083);
        c = GG(c, d, a, b, m[i + 15], 14, -660478335);
        b = GG(b, c, d, a, m[i + 4], 20, -405537848);
        a = GG(a, b, c, d, m[i + 9], 5, 568446438);
        d = GG(d, a, b, c, m[i + 14], 9, -1019803690);
        c = GG(c, d, a, b, m[i + 3], 14, -187363961);
        b = GG(b, c, d, a, m[i + 8], 20, 1163531501);
        a = GG(a, b, c, d, m[i + 13], 5, -1444681467);
        d = GG(d, a, b, c, m[i + 2], 9, -51403784);
        c = GG(c, d, a, b, m[i + 7], 14, 1735328473);
        b = GG(b, c, d, a, m[i + 12], 20, -1926607734);
        a = HH(a, b, c, d, m[i + 5], 4, -378558);
        d = HH(d, a, b, c, m[i + 8], 11, -2022574463);
        c = HH(c, d, a, b, m[i + 11], 16, 1839030562);
        b = HH(b, c, d, a, m[i + 14], 23, -35309556);
        a = HH(a, b, c, d, m[i + 1], 4, -1530992060);
        d = HH(d, a, b, c, m[i + 4], 11, 1272893353);
        c = HH(c, d, a, b, m[i + 7], 16, -155497632);
        b = HH(b, c, d, a, m[i + 10], 23, -1094730640);
        a = HH(a, b, c, d, m[i + 13], 4, 681279174);
        d = HH(d, a, b, c, m[i + 0], 11, -358537222);
        c = HH(c, d, a, b, m[i + 3], 16, -722521979);
        b = HH(b, c, d, a, m[i + 6], 23, 76029189);
        a = HH(a, b, c, d, m[i + 9], 4, -640364487);
        d = HH(d, a, b, c, m[i + 12], 11, -421815835);
        c = HH(c, d, a, b, m[i + 15], 16, 530742520);
        b = HH(b, c, d, a, m[i + 2], 23, -995338651);
        a = II(a, b, c, d, m[i + 0], 6, -198630844);
        d = II(d, a, b, c, m[i + 7], 10, 1126891415);
        c = II(c, d, a, b, m[i + 14], 15, -1416354905);
        b = II(b, c, d, a, m[i + 5], 21, -57434055);
        a = II(a, b, c, d, m[i + 12], 6, 1700485571);
        d = II(d, a, b, c, m[i + 3], 10, -1894986606);
        c = II(c, d, a, b, m[i + 10], 15, -1051523);
        b = II(b, c, d, a, m[i + 1], 21, -2054922799);
        a = II(a, b, c, d, m[i + 8], 6, 1873313359);
        d = II(d, a, b, c, m[i + 15], 10, -30611744);
        c = II(c, d, a, b, m[i + 6], 15, -1560198380);
        b = II(b, c, d, a, m[i + 13], 21, 1309151649);
        a = II(a, b, c, d, m[i + 4], 6, -145523070);
        d = II(d, a, b, c, m[i + 11], 10, -1120210379);
        c = II(c, d, a, b, m[i + 2], 15, 718787259);
        b = II(b, c, d, a, m[i + 9], 21, -343485551);
        a = a + aa >>> 0;
        b = b + bb >>> 0;
        c = c + cc >>> 0;
        d = d + dd >>> 0;
      }

      return crypt.endian([a, b, c, d]);
    };

    md5._ff = function (a, b, c, d, x, s, t) {
      var n = a + (b & c | ~b & d) + (x >>> 0) + t;
      return (n << s | n >>> 32 - s) + b;
    };

    md5._gg = function (a, b, c, d, x, s, t) {
      var n = a + (b & d | c & ~d) + (x >>> 0) + t;
      return (n << s | n >>> 32 - s) + b;
    };

    md5._hh = function (a, b, c, d, x, s, t) {
      var n = a + (b ^ c ^ d) + (x >>> 0) + t;
      return (n << s | n >>> 32 - s) + b;
    };

    md5._ii = function (a, b, c, d, x, s, t) {
      var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
      return (n << s | n >>> 32 - s) + b;
    };

    md5._blocksize = 16;
    md5._digestsize = 16;

    module.exports = function (message, options) {
      if (message === undefined || message === null) throw new Error('Illegal argument ' + message);
      var digestbytes = crypt.wordsToBytes(md5(message, options));
      return options && options.asBytes ? digestbytes : options && options.asString ? bin.bytesToString(digestbytes) : crypt.bytesToHex(digestbytes);
    };
  })();
},578,[579,580,581],"node_modules/md5/md5.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  (function () {
    var base64map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
        crypt = {
      rotl: function rotl(n, b) {
        return n << b | n >>> 32 - b;
      },
      rotr: function rotr(n, b) {
        return n << 32 - b | n >>> b;
      },
      endian: function endian(n) {
        if (n.constructor == Number) {
          return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
        }

        for (var i = 0; i < n.length; i++) {
          n[i] = crypt.endian(n[i]);
        }

        return n;
      },
      randomBytes: function randomBytes(n) {
        for (var bytes = []; n > 0; n--) {
          bytes.push(Math.floor(Math.random() * 256));
        }

        return bytes;
      },
      bytesToWords: function bytesToWords(bytes) {
        for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8) {
          words[b >>> 5] |= bytes[i] << 24 - b % 32;
        }

        return words;
      },
      wordsToBytes: function wordsToBytes(words) {
        for (var bytes = [], b = 0; b < words.length * 32; b += 8) {
          bytes.push(words[b >>> 5] >>> 24 - b % 32 & 0xFF);
        }

        return bytes;
      },
      bytesToHex: function bytesToHex(bytes) {
        for (var hex = [], i = 0; i < bytes.length; i++) {
          hex.push((bytes[i] >>> 4).toString(16));
          hex.push((bytes[i] & 0xF).toString(16));
        }

        return hex.join('');
      },
      hexToBytes: function hexToBytes(hex) {
        for (var bytes = [], c = 0; c < hex.length; c += 2) {
          bytes.push(parseInt(hex.substr(c, 2), 16));
        }

        return bytes;
      },
      bytesToBase64: function bytesToBase64(bytes) {
        for (var base64 = [], i = 0; i < bytes.length; i += 3) {
          var triplet = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];

          for (var j = 0; j < 4; j++) {
            if (i * 8 + j * 6 <= bytes.length * 8) base64.push(base64map.charAt(triplet >>> 6 * (3 - j) & 0x3F));else base64.push('=');
          }
        }

        return base64.join('');
      },
      base64ToBytes: function base64ToBytes(base64) {
        base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

        for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {
          if (imod4 == 0) continue;
          bytes.push((base64map.indexOf(base64.charAt(i - 1)) & Math.pow(2, -2 * imod4 + 8) - 1) << imod4 * 2 | base64map.indexOf(base64.charAt(i)) >>> 6 - imod4 * 2);
        }

        return bytes;
      }
    };
    module.exports = crypt;
  })();
},579,[],"node_modules/crypt/crypt.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var charenc = {
    utf8: {
      stringToBytes: function stringToBytes(str) {
        return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
      },
      bytesToString: function bytesToString(bytes) {
        return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
      }
    },
    bin: {
      stringToBytes: function stringToBytes(str) {
        for (var bytes = [], i = 0; i < str.length; i++) {
          bytes.push(str.charCodeAt(i) & 0xFF);
        }

        return bytes;
      },
      bytesToString: function bytesToString(bytes) {
        for (var str = [], i = 0; i < bytes.length; i++) {
          str.push(String.fromCharCode(bytes[i]));
        }

        return str.join('');
      }
    }
  };
  module.exports = charenc;
},580,[],"node_modules/charenc/charenc.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  /*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */module.exports = function (obj) {
    return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
  };

  function isBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
  }

  function isSlowBuffer(obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
  }
},581,[],"node_modules/is-buffer/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var SEND_MESSAGE = exports.SEND_MESSAGE = 'SEND_MESSAGE';
    var RECEIVE_MESSAGE = exports.RECEIVE_MESSAGE = 'RECEIVE_MESSAGE';
    var LOAD_OLD_MESSAGE_REQUEST = exports.LOAD_OLD_MESSAGE_REQUEST = 'LOAD_OLD_MESSAGE_REQUEST';
    var LOAD_OLD_MESSAGE_SUCCESS = exports.LOAD_OLD_MESSAGE_SUCCESS = 'LOAD_OLD_MESSAGE_SUCCESS';

    var sendMessageAction = exports.sendMessageAction = function sendMessageAction(messagesValue) {
        return {
            type: SEND_MESSAGE,
            payload: {
                messages: messagesValue
            },
            meta: {}
        };
    };

    var receiveMessageAction = exports.receiveMessageAction = function receiveMessageAction(messagesValue) {
        return {
            type: RECEIVE_MESSAGE,
            payload: {
                messages: messagesValue
            },
            meta: {}
        };
    };

    var loadOldMessageRequestAction = exports.loadOldMessageRequestAction = function loadOldMessageRequestAction() {
        return {
            type: LOAD_OLD_MESSAGE_REQUEST,
            payload: {},
            meta: {}
        };
    };

    var loadOldMessageSuccessAction = exports.loadOldMessageSuccessAction = function loadOldMessageSuccessAction(oldMessage) {
        return {
            type: LOAD_OLD_MESSAGE_SUCCESS,
            payload: {
                messages: oldMessage
            },
            meta: {}
        };
    };
},582,[],"src/state/screen/square/actions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.registerScreens = undefined;

    var _reactNativeNavigation = _require(_dependencyMap[0], "react-native-navigation");

    var _tabBarContainer = _require(_dependencyMap[1], "./home/tab-bar/tab-bar-container");

    var _tabBarContainer2 = _interopRequireDefault(_tabBarContainer);

    var _screenHomeContainer = _require(_dependencyMap[2], "./home/screen-home-container");

    var _screenHomeContainer2 = _interopRequireDefault(_screenHomeContainer);

    var _screenProfileContainer = _require(_dependencyMap[3], "./profile/screen-profile-container");

    var _screenProfileContainer2 = _interopRequireDefault(_screenProfileContainer);

    var _modal = _require(_dependencyMap[4], "./components/modal/modal");

    var _modal2 = _interopRequireDefault(_modal);

    var _lightBoxContainer = _require(_dependencyMap[5], "./components/light-box/light-box-container");

    var _lightBoxContainer2 = _interopRequireDefault(_lightBoxContainer);

    var _squareTab = _require(_dependencyMap[6], "./footer/tabs/square-tab");

    var _squareTab2 = _interopRequireDefault(_squareTab);

    var _homeTab = _require(_dependencyMap[7], "./footer/tabs/home-tab");

    var _homeTab2 = _interopRequireDefault(_homeTab);

    var _messageTab = _require(_dependencyMap[8], "./footer/tabs/message-tab");

    var _messageTab2 = _interopRequireDefault(_messageTab);

    var _profileTab = _require(_dependencyMap[9], "./footer/tabs/profile-tab");

    var _profileTab2 = _interopRequireDefault(_profileTab);

    var _productDetailContainer = _require(_dependencyMap[10], "./product/product-detail/product-detail-container");

    var _productDetailContainer2 = _interopRequireDefault(_productDetailContainer);

    var _tabBarContainer3 = _require(_dependencyMap[11], "./product/product-detail/tab-bar/tab-bar-container");

    var _tabBarContainer4 = _interopRequireDefault(_tabBarContainer3);

    var _productOrderContainer = _require(_dependencyMap[12], "./product/product-order/product-order-container");

    var _productOrderContainer2 = _interopRequireDefault(_productOrderContainer);

    var _squareContainer = _require(_dependencyMap[13], "./square/square-container");

    var _squareContainer2 = _interopRequireDefault(_squareContainer);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var registerScreens = exports.registerScreens = function registerScreens(store, provider) {
        _reactNativeNavigation.Navigation.registerComponent('screen.Square', function () {
            return _squareContainer2.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('screen.Product.Order', function () {
            return _productOrderContainer2.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('screen.Product.Detail.TabBar', function () {
            return _tabBarContainer4.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('screen.Product.Detail', function () {
            return _productDetailContainer2.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('screen.Component.Modal', function () {
            return _modal2.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('screen.Component.LightBox', function () {
            return _lightBoxContainer2.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('screen.Home.TopBar', function () {
            return _tabBarContainer2.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('screen.Home', function () {
            return _screenHomeContainer2.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('screen.Profile', function () {
            return _screenProfileContainer2.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('footer.Tabs.HomeTab', function () {
            return _homeTab2.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('footer.Tabs.SquareTab', function () {
            return _squareTab2.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('footer.Tabs.MessageTab', function () {
            return _messageTab2.default;
        }, store, provider);

        _reactNativeNavigation.Navigation.registerComponent('footer.Tabs.ProfileTab', function () {
            return _profileTab2.default;
        }, store, provider);
    };

    exports.default = registerScreens;
},583,[62,584,587,788,790,792,795,796,797,798,799,811,814,820],"src/screen/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/tab-bar/tab-bar-container.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactRedux = _require(_dependencyMap[2], "react-redux");

    var _reactNativeNavigation = _require(_dependencyMap[3], "react-native-navigation");

    var _tabBar = _require(_dependencyMap[4], "./tab-bar");

    var _tabBar2 = _interopRequireDefault(_tabBar);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Container: {
            displayName: "Container"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/hayden/Applications/HelloWorldProject/src/screen/home/tab-bar/tab-bar-container.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var Container = _wrapComponent("Container")(function (_Component) {
        _inherits(Container, _Component);

        function Container(props) {
            _classCallCheck(this, Container);

            var _this = _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props));

            _this.openOption = _this.openOption.bind(_this);
            return _this;
        }

        _createClass(Container, [{
            key: "openOption",
            value: function openOption() {
                _reactNativeNavigation.Navigation.showLightBox({
                    screen: 'screen.Component.LightBox',
                    passProps: {
                        title: this.props.homeTitle,
                        content: [1, 2, 3, 4, 5],
                        onClose: _reactNativeNavigation.Navigation.dismissLightBox
                    },
                    style: {
                        backgroundBlur: 'dark',
                        backgroundColor: 'rgba(0, 0, 0, 0.7)',
                        tapBackgroundToDismiss: true
                    }
                });
            }
        }, {
            key: "render",
            value: function render() {
                return _react3.default.createElement(_tabBar2.default, _extends({}, this.props, {
                    openOption: this.openOption,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 28
                    }
                }));
            }
        }]);

        return Container;
    }(_react2.Component));

    var stateToProps = function stateToProps(state) {
        return {
            homeTitle: state.home.homeTitle
        };
    };

    var HomeTabBarContainer = (0, _reactRedux.connect)(stateToProps)(Container);
    exports.default = HomeTabBarContainer;
},584,[13,219,23,62,585],"src/screen/home/tab-bar/tab-bar-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/tab-bar/tab-bar.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _styles = _require(_dependencyMap[3], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var HomeTabBar = function HomeTabBar(_ref) {
        var homeTitle = _ref.homeTitle,
            openOption = _ref.openOption;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 7
                }
            },
            _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                    style: _styles2.default.button,
                    onPress: function onPress() {
                        return openOption();
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 8
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        style: _styles2.default.text,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 9
                        }
                    },
                    homeTitle
                )
            )
        );
    };

    HomeTabBar.propTypes = {
        homeTitle: _propTypes2.default.string,
        openOption: _propTypes2.default.func
    };
    HomeTabBar.defaultProps = {
        homeTitle: 'test title',
        openOption: function openOption() {}
    };
    exports.default = HomeTabBar;
},585,[13,25,65,586],"src/screen/home/tab-bar/tab-bar.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _reactNative = _require(_dependencyMap[0], "react-native");

    var styles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center'
        },
        button: {
            alignSelf: 'center'
        },
        text: {
            alignSelf: 'center',
            color: 'black'
        }
    });

    exports.default = styles;
},586,[65],"src/screen/home/tab-bar/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _class,
        _temp,
        _initialiseProps,
        _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/screen-home-container.js";

    var _reactRedux = _require(_dependencyMap[2], "react-redux");

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _reactNativeTabView = _require(_dependencyMap[4], "react-native-tab-view");

    var _propTypes = _require(_dependencyMap[5], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _buyListContainer = _require(_dependencyMap[6], "./buy-list/buy-list-container");

    var _buyListContainer2 = _interopRequireDefault(_buyListContainer);

    var _sellListContainer = _require(_dependencyMap[7], "./sell-list/sell-list-container");

    var _sellListContainer2 = _interopRequireDefault(_sellListContainer);

    var _productListContainer = _require(_dependencyMap[8], "./product-list/product-list-container");

    var _productListContainer2 = _interopRequireDefault(_productListContainer);

    var _daigouListContainer = _require(_dependencyMap[9], "./daigou-list/daigou-list-container");

    var _daigouListContainer2 = _interopRequireDefault(_daigouListContainer);

    var _screenHome = _require(_dependencyMap[10], "./screen-home");

    var _screenHome2 = _interopRequireDefault(_screenHome);

    var _styles = _require(_dependencyMap[11], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Container: {
            displayName: "Container"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/hayden/Applications/HelloWorldProject/src/screen/home/screen-home-container.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var homeTitle = '';
    var homeNavigator = void 0;

    var Container = _wrapComponent("Container")((_temp = _class = function (_Component) {
        _inherits(Container, _Component);

        function Container(props) {
            _classCallCheck(this, Container);

            var _this = _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props));

            _initialiseProps.call(_this);

            homeTitle = _this.props.homeTitle;
            homeNavigator = _this.props.navigator;
            _this.state = {
                index: 0,
                routes: [{
                    key: 'sell',
                    title: '求购'
                }, {
                    key: 'buy',
                    title: '出售'
                }, {
                    key: 'daigou',
                    title: '代购'
                }]
            };
            return _this;
        }

        _createClass(Container, [{
            key: "render",
            value: function render() {
                return _react3.default.createElement(_screenHome2.default, _extends({}, this.props, {
                    scene: this._renderScene,
                    tabHeader: this._renderHeader,
                    tabRounter: this.state,
                    indexChange: this._handleIndexChange,
                    productItem: this.state.dataSource,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 63
                    }
                }));
            }
        }], [{
            key: "navigatorStyle",
            get: function get() {
                return {
                    navBarCustomView: 'screen.Home.TopBar',
                    navBarComponentAlignment: 'center',
                    navBarNoBorder: true,
                    navBarCustomViewInitialProps: {
                        title: homeTitle,
                        navigator: homeNavigator
                    }
                };
            }
        }]);

        return Container;
    }(_react2.Component), _initialiseProps = function _initialiseProps() {
        var _this2 = this;

        this._handleIndexChange = function (index) {
            return _this2.setState({
                index: index
            });
        };

        this._renderHeader = function (props) {
            return _react3.default.createElement(_reactNativeTabView.TabBar, _extends({}, props, {
                style: {
                    backgroundColor: 'white'
                },
                labelStyle: {
                    color: 'black'
                },
                indicatorStyle: {
                    backgroundColor: 'red'
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            }));
        };

        this._renderScene = (0, _reactNativeTabView.SceneMap)({
            sell: function sell() {
                return _react3.default.createElement(_sellListContainer2.default, {
                    propsNavigatorObject: homeNavigator,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 56
                    }
                });
            },
            buy: function buy() {
                return _react3.default.createElement(_buyListContainer2.default, {
                    propsNavigatorObject: homeNavigator,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 57
                    }
                });
            },
            daigou: function daigou() {
                return _react3.default.createElement(_daigouListContainer2.default, {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 58
                    }
                });
            }
        });
    }, _temp));

    Container.propTypes = {
        homeTitle: _propTypes2.default.string,
        navigator: _propTypes2.default.objectOf(_propTypes2.default.any),
        productItem: _propTypes2.default.arrayOf(_propTypes2.default.object)
    };
    Container.defaultProps = {
        homeTitle: 'Default Home',
        navigator: {},
        productItem: [{}]
    };

    var stateToProps = function stateToProps(state) {
        return {
            home: state.home.home,
            homeTitle: state.home.homeTitle,
            productItem: state.product.products
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var ScreenHomeContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = ScreenHomeContainer;
},587,[13,219,23,65,588,25,598,780,665,783,786,787],"src/screen/home/screen-home-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    get TabViewAnimated() {
      return _require(_dependencyMap[0], './TabViewAnimated').default;
    },

    get TabViewPagerPan() {
      return _require(_dependencyMap[1], './TabViewPagerPan').default;
    },

    get TabViewPagerScroll() {
      return _require(_dependencyMap[2], './TabViewPagerScroll').default;
    },

    get TabViewPagerAndroid() {
      return _require(_dependencyMap[3], './TabViewPagerAndroid').default;
    },

    get TabViewPagerExperimental() {
      return _require(_dependencyMap[4], './TabViewPagerExperimental').default;
    },

    get TabBar() {
      return _require(_dependencyMap[5], './TabBar').default;
    },

    get SceneMap() {
      return _require(_dependencyMap[6], './SceneMap').default;
    }

  };
},588,[589,593,592,591,594,595,597],"node_modules/react-native-tab-view/src/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabViewAnimated.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _TabViewPropTypes = _require(_dependencyMap[4], "./TabViewPropTypes");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    TabViewAnimated: {
      displayName: "TabViewAnimated"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabViewAnimated.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var TabViewPager = void 0;

  switch (_reactNative.Platform.OS) {
    case 'android':
      TabViewPager = _require(_dependencyMap[5], './TabViewPagerAndroid').default;
      break;

    case 'ios':
      TabViewPager = _require(_dependencyMap[6], './TabViewPagerScroll').default;
      break;

    default:
      TabViewPager = _require(_dependencyMap[7], './TabViewPagerPan').default;
      break;
  }

  var TabViewAnimated = _wrapComponent("TabViewAnimated")((_temp = _class = function (_React$Component) {
    _inherits(TabViewAnimated, _React$Component);

    function TabViewAnimated(props) {
      _classCallCheck(this, TabViewAnimated);

      var _this = _possibleConstructorReturn(this, (TabViewAnimated.__proto__ || Object.getPrototypeOf(TabViewAnimated)).call(this, props));

      _initialiseProps.call(_this);

      var navigationState = _this.props.navigationState;

      var layout = _extends({}, _this.props.initialLayout, {
        measured: false
      });

      var panX = new _reactNative.Animated.Value(0);
      var offsetX = new _reactNative.Animated.Value(-navigationState.index * layout.width);
      var layoutXY = new _reactNative.Animated.ValueXY({
        x: layout.width || 0.001,
        y: layout.height || 0.001
      });

      var position = _reactNative.Animated.multiply(_reactNative.Animated.divide(_reactNative.Animated.add(panX, offsetX), layoutXY.x), -1);

      _this.state = {
        layout: layout,
        layoutXY: layoutXY,
        panX: panX,
        offsetX: offsetX,
        position: position
      };
      return _this;
    }

    _createClass(TabViewAnimated, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._mounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._mounted = false;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            navigationState = _props.navigationState,
            onIndexChange = _props.onIndexChange,
            initialLayout = _props.initialLayout,
            renderScene = _props.renderScene,
            renderPager = _props.renderPager,
            renderHeader = _props.renderHeader,
            renderFooter = _props.renderFooter,
            rest = _objectWithoutProperties(_props, ["navigationState", "onIndexChange", "initialLayout", "renderScene", "renderPager", "renderHeader", "renderFooter"]);

        var props = this._buildSceneRendererProps();

        return React.createElement(
          _reactNative.View,
          {
            collapsable: false,
            style: [styles.container, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 209
            }
          },
          renderHeader && renderHeader(props),
          React.createElement(
            _reactNative.View,
            {
              onLayout: this._handleLayout,
              style: styles.pager,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 211
              }
            },
            renderPager(_extends({}, props, rest, {
              panX: this.state.panX,
              offsetX: this.state.offsetX,
              children: navigationState.routes.map(function (route, index) {
                var scene = _this2._renderScene(_extends({}, props, {
                  route: route,
                  index: index,
                  focused: index === navigationState.index
                }));

                if (scene) {
                  return React.cloneElement(scene, {
                    key: route.key
                  });
                }

                return scene;
              })
            }))
          ),
          renderFooter && renderFooter(props)
        );
      }
    }]);

    return TabViewAnimated;
  }(React.Component), _class.propTypes = {
    navigationState: _TabViewPropTypes.NavigationStatePropType.isRequired,
    onIndexChange: _propTypes2.default.func.isRequired,
    initialLayout: _propTypes2.default.shape({
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }),
    canJumpToTab: _propTypes2.default.func.isRequired,
    renderPager: _propTypes2.default.func.isRequired,
    renderScene: _propTypes2.default.func.isRequired,
    renderHeader: _propTypes2.default.func,
    renderFooter: _propTypes2.default.func
  }, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    renderPager: function renderPager(props) {
      return React.createElement(TabViewPager, _extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 74
        }
      }));
    },
    initialLayout: {
      height: 0,
      width: 0
    },
    useNativeDriver: false
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._mounted = false;

    this._renderScene = function (props) {
      return _this3.props.renderScene(props);
    };

    this._handleLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          height = _e$nativeEvent$layout.height,
          width = _e$nativeEvent$layout.width;

      if (_this3.state.layout.width === width && _this3.state.layout.height === height) {
        return;
      }

      _this3.state.offsetX.setValue(-_this3.props.navigationState.index * width);

      _this3.state.layoutXY.setValue({
        x: width || 0.001,
        y: height || 0.001
      });

      _this3.setState({
        layout: {
          measured: true,
          height: height,
          width: width
        }
      });
    };

    this._buildSceneRendererProps = function () {
      return {
        panX: _this3.state.panX,
        offsetX: _this3.state.offsetX,
        position: _this3.state.position,
        layout: _this3.state.layout,
        navigationState: _this3.props.navigationState,
        jumpTo: _this3._jumpTo,
        jumpToIndex: _this3._jumpToIndex,
        useNativeDriver: _this3.props.useNativeDriver === true
      };
    };

    this._jumpToIndex = function (index) {
      var key = _this3.props.navigationState.routes[index].key;
      console.warn('Method `jumpToIndex` is deprecated. Please upgrade your code to use `jumpTo` instead.', "Change your code from `jumpToIndex(" + index + ")` to `jumpTo('" + key + "').`");

      _this3._jumpTo(key);
    };

    this._jumpTo = function (key) {
      if (!_this3._mounted) {
        return;
      }

      var _props2 = _this3.props,
          canJumpToTab = _props2.canJumpToTab,
          navigationState = _props2.navigationState;
      var index = navigationState.routes.findIndex(function (route) {
        return route.key === key;
      });

      if (!canJumpToTab(navigationState.routes[index])) {
        return;
      }

      if (index !== navigationState.index) {
        _this3.props.onIndexChange(index);
      }
    };
  }, _temp));

  exports.default = TabViewAnimated;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    pager: {
      flex: 1
    }
  });
},589,[13,219,25,65,590,591,592,593],"node_modules/react-native-tab-view/src/TabViewAnimated.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PagerRendererPropType = exports.SceneRendererPropType = exports.NavigationStatePropType = exports.NavigationRoutePropType = undefined;

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var NavigationRoutePropType = exports.NavigationRoutePropType = _propTypes2.default.shape({
    title: _propTypes2.default.string,
    key: _propTypes2.default.string.isRequired
  });

  var NavigationStatePropType = exports.NavigationStatePropType = _propTypes2.default.shape({
    routes: _propTypes2.default.arrayOf(NavigationRoutePropType).isRequired,
    index: _propTypes2.default.number.isRequired
  });

  var SceneRendererPropType = exports.SceneRendererPropType = {
    panX: _propTypes2.default.object.isRequired,
    offsetX: _propTypes2.default.object.isRequired,
    layout: _propTypes2.default.shape({
      measured: _propTypes2.default.bool.isRequired,
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    position: _propTypes2.default.object.isRequired,
    jumpTo: _propTypes2.default.func.isRequired,
    jumpToIndex: _propTypes2.default.func.isRequired,
    useNativeDriver: _propTypes2.default.bool
  };
  var PagerRendererPropType = exports.PagerRendererPropType = {
    layout: _propTypes2.default.shape({
      measured: _propTypes2.default.bool.isRequired,
      height: _propTypes2.default.number.isRequired,
      width: _propTypes2.default.number.isRequired
    }).isRequired,
    navigationState: NavigationStatePropType.isRequired,
    panX: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
    offsetX: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
    canJumpToTab: _propTypes2.default.func.isRequired,
    jumpTo: _propTypes2.default.func.isRequired,
    animationEnabled: _propTypes2.default.bool,
    swipeEnabled: _propTypes2.default.bool,
    useNativeDriver: _propTypes2.default.bool,
    onSwipeStart: _propTypes2.default.func,
    onSwipeEnd: _propTypes2.default.func,
    onAnimationEnd: _propTypes2.default.func,
    children: _propTypes2.default.node.isRequired
  };
},590,[25,65],"node_modules/react-native-tab-view/src/TabViewPropTypes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabViewPagerAndroid.js";

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = _require(_dependencyMap[3], "./TabViewPropTypes");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    TabViewPagerAndroid: {
      displayName: "TabViewPagerAndroid"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabViewPagerAndroid.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var TabViewPagerAndroid = _wrapComponent("TabViewPagerAndroid")((_temp = _class = function (_React$Component) {
    _inherits(TabViewPagerAndroid, _React$Component);

    function TabViewPagerAndroid(props) {
      _classCallCheck(this, TabViewPagerAndroid);

      var _this = _possibleConstructorReturn(this, (TabViewPagerAndroid.__proto__ || Object.getPrototypeOf(TabViewPagerAndroid)).call(this, props));

      _this._isIdle = true;
      _this._currentIndex = 0;

      _this._getPageIndex = function (index) {
        return _reactNative.I18nManager.isRTL ? _this.props.navigationState.routes.length - (index + 1) : index;
      };

      _this._setPage = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var pager = _this._viewPager;

        if (pager) {
          var page = _this._getPageIndex(index);

          if (_this.props.animationEnabled === false || animated === false) {
            pager.setPageWithoutAnimation(page);
          } else {
            pager.setPage(page);
          }
        }
      };

      _this._handlePageChange = function (index, animated) {
        if (_this._isIdle && _this._currentIndex !== index) {
          _this._setPage(index, animated);

          _this._currentIndex = index;
        }
      };

      _this._handlePageScroll = function (e) {
        _this.props.offsetX.setValue(e.nativeEvent.position * _this.props.layout.width * (_reactNative.I18nManager.isRTL ? 1 : -1));

        _this.props.panX.setValue(e.nativeEvent.offset * _this.props.layout.width * (_reactNative.I18nManager.isRTL ? 1 : -1));
      };

      _this._handlePageScrollStateChanged = function (e) {
        _this._isIdle = e === 'idle';
        var nextIndex = _this._currentIndex;
        var nextRoute = _this.props.navigationState.routes[nextIndex];

        if (_this.props.canJumpToTab(nextRoute)) {
          _this.props.jumpTo(nextRoute.key);
        } else {
          _this._setPage(_this.props.navigationState.index);

          _this._currentIndex = _this.props.navigationState.index;
        }

        switch (e) {
          case 'dragging':
            _this.props.onSwipeStart && _this.props.onSwipeStart();
            break;

          case 'settling':
            _this.props.onSwipeEnd && _this.props.onSwipeEnd();
            break;

          case 'idle':
            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            break;
        }
      };

      _this._handlePageSelected = function (e) {
        var index = _this._getPageIndex(e.nativeEvent.position);

        _this._currentIndex = index;
      };

      _this._setRef = function (el) {
        return _this._viewPager = el;
      };

      _this._currentIndex = _this.props.navigationState.index;
      return _this;
    }

    _createClass(TabViewPagerAndroid, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._handlePageChange(this.props.navigationState.index, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._handlePageChange(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            navigationState = _props.navigationState,
            swipeEnabled = _props.swipeEnabled,
            keyboardDismissMode = _props.keyboardDismissMode;
        var content = React.Children.map(children, function (child, i) {
          return React.createElement(
            _reactNative.View,
            {
              key: navigationState.routes[i].key,
              testID: navigationState.routes[i].testID,
              style: styles.page,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 135
              }
            },
            child
          );
        });

        if (_reactNative.I18nManager.isRTL) {
          content.reverse();
        }

        var initialPage = this._getPageIndex(navigationState.index);

        return React.createElement(
          _reactNative.ViewPagerAndroid,
          {
            key: navigationState.routes.length,
            keyboardDismissMode: keyboardDismissMode,
            initialPage: initialPage,
            scrollEnabled: swipeEnabled !== false,
            onPageScroll: this._handlePageScroll,
            onPageScrollStateChanged: this._handlePageScrollStateChanged,
            onPageSelected: this._handlePageSelected,
            style: styles.container,
            ref: this._setRef,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 151
            }
          },
          content
        );
      }
    }]);

    return TabViewPagerAndroid;
  }(React.Component), _class.propTypes = _TabViewPropTypes.PagerRendererPropType, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    keyboardDismissMode: 'on-drag'
  }, _temp));

  exports.default = TabViewPagerAndroid;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexGrow: 1
    },
    page: {
      overflow: 'hidden'
    }
  });
},591,[13,219,65,590],"node_modules/react-native-tab-view/src/TabViewPagerAndroid.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabViewPagerScroll.js";

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _TabViewPropTypes = _require(_dependencyMap[3], "./TabViewPropTypes");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    TabViewPagerScroll: {
      displayName: "TabViewPagerScroll"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabViewPagerScroll.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var TabViewPagerScroll = _wrapComponent("TabViewPagerScroll")((_temp = _class = function (_React$Component) {
    _inherits(TabViewPagerScroll, _React$Component);

    function TabViewPagerScroll(props) {
      _classCallCheck(this, TabViewPagerScroll);

      var _this = _possibleConstructorReturn(this, (TabViewPagerScroll.__proto__ || Object.getPrototypeOf(TabViewPagerScroll)).call(this, props));

      _initialiseProps.call(_this);

      var _this$props = _this.props,
          navigationState = _this$props.navigationState,
          layout = _this$props.layout;
      _this.state = {
        initialOffset: {
          x: navigationState.index * layout.width,
          y: 0
        }
      };
      return _this;
    }

    _createClass(TabViewPagerScroll, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._setInitialPage();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var amount = this.props.navigationState.index * this.props.layout.width;

        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._scrollTo(amount, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._scrollTo(amount);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            children = _props.children,
            layout = _props.layout,
            navigationState = _props.navigationState,
            onSwipeStart = _props.onSwipeStart,
            onSwipeEnd = _props.onSwipeEnd;
        return React.createElement(
          _reactNative.ScrollView,
          {
            horizontal: true,
            pagingEnabled: true,
            directionalLockEnabled: true,
            keyboardDismissMode: "on-drag",
            keyboardShouldPersistTaps: "always",
            overScrollMode: "never",
            scrollEnabled: this.props.swipeEnabled,
            automaticallyAdjustContentInsets: false,
            bounces: false,
            alwaysBounceHorizontal: false,
            scrollsToTop: false,
            showsHorizontalScrollIndicator: false,
            scrollEventThrottle: 1,
            onScroll: this._handleScroll,
            onScrollBeginDrag: onSwipeStart,
            onScrollEndDrag: onSwipeEnd,
            onMomentumScrollEnd: this._handleMomentumScrollEnd,
            contentOffset: this.state.initialOffset,
            style: styles.container,
            contentContainerStyle: layout.width ? null : styles.container,
            ref: function ref(el) {
              return _this2._scrollView = el;
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 145
            }
          },
          React.Children.map(children, function (child, i) {
            return React.createElement(
              _reactNative.View,
              {
                key: navigationState.routes[i].key,
                testID: navigationState.routes[i].testID,
                style: layout.width ? {
                  width: layout.width,
                  overflow: 'hidden'
                } : i === navigationState.index ? styles.page : null,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 169
                }
              },
              i === navigationState.index || layout.width ? child : null
            );
          })
        );
      }
    }]);

    return TabViewPagerScroll;
  }(React.Component), _class.propTypes = _TabViewPropTypes.PagerRendererPropType, _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._isIdle = true;
    this._isInitial = true;

    this._setInitialPage = function () {
      if (_this3.props.layout.width) {
        _this3._isInitial = true;

        _this3._scrollTo(_this3.props.navigationState.index * _this3.props.layout.width, false);
      }

      setTimeout(function () {
        _this3._isInitial = false;
      }, 50);
    };

    this._scrollTo = function (x) {
      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (_this3._isIdle && _this3._scrollView) {
        _this3._scrollView.scrollTo({
          x: x,
          animated: animated && _this3.props.animationEnabled !== false
        });
      }
    };

    this._handleMomentumScrollEnd = function (e) {
      var nextIndex = Math.round(e.nativeEvent.contentOffset.x / _this3.props.layout.width);
      var nextRoute = _this3.props.navigationState.routes[nextIndex];

      if (_this3.props.canJumpToTab(nextRoute)) {
        _this3.props.jumpTo(nextRoute.key);

        _this3.props.onAnimationEnd && _this3.props.onAnimationEnd();
      } else {
        global.requestAnimationFrame(function () {
          _this3._scrollTo(_this3.props.navigationState.index * _this3.props.layout.width);
        });
      }
    };

    this._handleScroll = function (e) {
      if (_this3._isInitial || e.nativeEvent.contentSize.width === 0) {
        return;
      }

      var _props2 = _this3.props,
          navigationState = _props2.navigationState,
          layout = _props2.layout;
      var offset = navigationState.index * layout.width;

      _this3.props.offsetX.setValue(-offset);

      _this3.props.panX.setValue(offset - e.nativeEvent.contentOffset.x);

      global.cancelAnimationFrame(_this3._idleCallback);
      _this3._isIdle = false;
      _this3._idleCallback = global.requestAnimationFrame(function () {
        _this3._isIdle = true;
      });
    };
  }, _temp));

  exports.default = TabViewPagerScroll;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    page: {
      flex: 1,
      overflow: 'hidden'
    }
  });
},592,[13,219,65,590],"node_modules/react-native-tab-view/src/TabViewPagerScroll.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabViewPagerPan.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _TabViewPropTypes = _require(_dependencyMap[4], "./TabViewPropTypes");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    TabViewPagerPan: {
      displayName: "TabViewPagerPan"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabViewPagerPan.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var DEAD_ZONE = 12;
  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 300,
    friction: 35
  };

  var TabViewPagerPan = _wrapComponent("TabViewPagerPan")((_temp = _class = function (_React$Component) {
    _inherits(TabViewPagerPan, _React$Component);

    function TabViewPagerPan(props) {
      _classCallCheck(this, TabViewPagerPan);

      var _this = _possibleConstructorReturn(this, (TabViewPagerPan.__proto__ || Object.getPrototypeOf(TabViewPagerPan)).call(this, props));

      _this._isMovingHorizontally = function (evt, gestureState) {
        return Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 2) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy * 2);
      };

      _this._canMoveScreen = function (evt, gestureState) {
        if (_this.props.swipeEnabled === false) {
          return false;
        }

        var routes = _this.props.navigationState.routes;
        return _this._isMovingHorizontally(evt, gestureState) && (gestureState.dx >= DEAD_ZONE && _this._currentIndex > 0 || gestureState.dx <= -DEAD_ZONE && _this._currentIndex < routes.length - 1);
      };

      _this._startGesture = function () {
        _this.props.onSwipeStart && _this.props.onSwipeStart();

        _this.props.panX.stopAnimation();
      };

      _this._respondToGesture = function (evt, gestureState) {
        var _this$props$navigatio = _this.props.navigationState,
            routes = _this$props$navigatio.routes,
            index = _this$props$navigatio.index;

        if (gestureState.dx > 0 && index <= 0 || gestureState.dx < 0 && index >= routes.length - 1) {
          return;
        }

        _this.props.panX.setValue(gestureState.dx);
      };

      _this._finishGesture = function (evt, gestureState) {
        var _this$props = _this.props,
            navigationState = _this$props.navigationState,
            layout = _this$props.layout,
            _this$props$swipeDist = _this$props.swipeDistanceThreshold,
            swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist;
        var _this$props$swipeVelo = _this.props.swipeVelocityThreshold,
            swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 0.15 : _this$props$swipeVelo;
        _this.props.onSwipeEnd && _this.props.onSwipeEnd();

        if (_reactNative.Platform.OS === 'android') {
          swipeVelocityThreshold /= 1000000;
        }

        var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : _this._currentIndex;
        var nextIndex = currentIndex;

        if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy) && (Math.abs(gestureState.dx) > swipeDistanceThreshold || Math.abs(gestureState.vx) > swipeVelocityThreshold)) {
          nextIndex = Math.round(Math.min(Math.max(0, currentIndex - gestureState.dx / Math.abs(gestureState.dx)), navigationState.routes.length - 1));
          _this._currentIndex = nextIndex;
        }

        if (!isFinite(nextIndex) || !_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
          nextIndex = currentIndex;
        }

        _this._transitionTo(nextIndex);
      };

      _this._transitionTo = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var offset = -index * _this.props.layout.width;

        if (_this.props.animationEnabled === false || animated === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = _objectWithoutProperties(DefaultTransitionSpec, ["timing"]);

        _reactNative.Animated.parallel([timing(_this.props.panX, _extends({}, transitionConfig, {
          toValue: 0
        })), timing(_this.props.offsetX, _extends({}, transitionConfig, {
          toValue: offset
        }))]).start(function (_ref) {
          var finished = _ref.finished;

          if (finished) {
            var route = _this.props.navigationState.routes[index];

            _this.props.jumpTo(route.key);

            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      };

      _this._currentIndex = _this.props.navigationState.index;
      return _this;
    }

    _createClass(TabViewPagerPan, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this._panResponder = _reactNative.PanResponder.create({
          onMoveShouldSetPanResponder: this._canMoveScreen,
          onMoveShouldSetPanResponderCapture: this._canMoveScreen,
          onPanResponderGrant: this._startGesture,
          onPanResponderMove: this._respondToGesture,
          onPanResponderTerminate: this._finishGesture,
          onPanResponderRelease: this._finishGesture,
          onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
            return true;
          }
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        this._currentIndex = this.props.navigationState.index;

        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._transitionTo(this.props.navigationState.index, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            panX = _props.panX,
            offsetX = _props.offsetX,
            navigationState = _props.navigationState,
            layout = _props.layout,
            children = _props.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);

        var translateX = _reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        });

        return React.createElement(
          _reactNative.Animated.View,
          _extends({
            style: [styles.sheet, width ? {
              width: routes.length * width,
              transform: [{
                translateX: translateX
              }]
            } : null]
          }, this._panResponder.panHandlers, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 249
            }
          }),
          React.Children.map(children, function (child, i) {
            return React.createElement(
              _reactNative.View,
              {
                key: navigationState.routes[i].key,
                testID: navigationState.routes[i].testID,
                style: width ? {
                  width: width
                } : i === navigationState.index ? _reactNative.StyleSheet.absoluteFill : null,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 262
                }
              },
              i === navigationState.index || width ? child : null
            );
          })
        );
      }
    }]);

    return TabViewPagerPan;
  }(React.Component), _class.propTypes = _extends({}, _TabViewPropTypes.PagerRendererPropType, {
    swipeDistanceThreshold: _propTypes2.default.number,
    swipeVelocityThreshold: _propTypes2.default.number
  }), _class.defaultProps = {
    canJumpToTab: function canJumpToTab() {
      return true;
    },
    initialLayout: {
      height: 0,
      width: 0
    }
  }, _temp));

  exports.default = TabViewPagerPan;

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},593,[13,219,25,65,590],"node_modules/react-native-tab-view/src/TabViewPagerPan.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabViewPagerExperimental.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _TabViewPropTypes = _require(_dependencyMap[4], "./TabViewPropTypes");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    TabViewPagerExperimental: {
      displayName: "TabViewPagerExperimental"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabViewPagerExperimental.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var DefaultTransitionSpec = {
    timing: _reactNative.Animated.spring,
    tension: 75,
    friction: 25
  };

  var TabViewPagerExperimental = _wrapComponent("TabViewPagerExperimental")((_temp2 = _class = function (_React$Component) {
    _inherits(TabViewPagerExperimental, _React$Component);

    function TabViewPagerExperimental() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, TabViewPagerExperimental);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TabViewPagerExperimental.__proto__ || Object.getPrototypeOf(TabViewPagerExperimental)).call.apply(_ref, [this].concat(args))), _this), _this._handleHandlerStateChange = function (event) {
        var GestureHandler = _this.props.GestureHandler;

        if (event.nativeEvent.state === GestureHandler.State.BEGIN) {
          _this.props.onSwipeStart && _this.props.onSwipeStart();
        } else if (event.nativeEvent.state === GestureHandler.State.END) {
          _this.props.onSwipeEnd && _this.props.onSwipeEnd();

          var _this$props = _this.props,
              navigationState = _this$props.navigationState,
              layout = _this$props.layout,
              _this$props$swipeDist = _this$props.swipeDistanceThreshold,
              _swipeDistanceThreshold = _this$props$swipeDist === undefined ? layout.width / 1.75 : _this$props$swipeDist,
              _this$props$swipeVelo = _this$props.swipeVelocityThreshold,
              _swipeVelocityThreshold = _this$props$swipeVelo === undefined ? 150 : _this$props$swipeVelo;

          var _event$nativeEvent = event.nativeEvent,
              translationX = _event$nativeEvent.translationX,
              translationY = _event$nativeEvent.translationY,
              velocityX = _event$nativeEvent.velocityX,
              velocityY = _event$nativeEvent.velocityY;
          var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : navigationState.index;
          var nextIndex = currentIndex;

          if (Math.abs(translationX) > Math.abs(translationY) && Math.abs(velocityX) > Math.abs(velocityY) && (Math.abs(translationX) > _swipeDistanceThreshold || Math.abs(velocityX) > _swipeVelocityThreshold)) {
            nextIndex = Math.round(Math.min(Math.max(0, currentIndex - translationX / Math.abs(translationX)), navigationState.routes.length - 1));
          }

          if (!isFinite(nextIndex) || !_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {
            nextIndex = currentIndex;
          }

          _this._transitionTo(nextIndex, velocityX);
        }
      }, _this._transitionTo = function (index, velocity) {
        var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var offset = -index * _this.props.layout.width;

        if (_this.props.animationEnabled === false || animated === false) {
          _this.props.panX.setValue(0);

          _this.props.offsetX.setValue(offset);

          return;
        }

        var timing = DefaultTransitionSpec.timing,
            transitionConfig = _objectWithoutProperties(DefaultTransitionSpec, ["timing"]);

        var useNativeDriver = _this.props.useNativeDriver;

        _reactNative.Animated.parallel([timing(_this.props.panX, _extends({}, transitionConfig, {
          toValue: 0,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        })), timing(_this.props.offsetX, _extends({}, transitionConfig, {
          toValue: offset,
          velocity: velocity,
          useNativeDriver: useNativeDriver
        }))]).start(function (_ref2) {
          var finished = _ref2.finished;

          if (finished) {
            var route = _this.props.navigationState.routes[index];

            _this.props.jumpTo(route.key);

            _this.props.onAnimationEnd && _this.props.onAnimationEnd();
            _this._pendingIndex = null;
          }
        });

        _this._pendingIndex = index;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(TabViewPagerExperimental, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {
          this._transitionTo(this.props.navigationState.index, undefined, false);
        } else if (prevProps.navigationState.index !== this.props.navigationState.index) {
          this._transitionTo(this.props.navigationState.index);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            GestureHandler = _props.GestureHandler,
            panX = _props.panX,
            offsetX = _props.offsetX,
            layout = _props.layout,
            navigationState = _props.navigationState,
            swipeEnabled = _props.swipeEnabled,
            children = _props.children;
        var width = layout.width;
        var routes = navigationState.routes;
        var maxTranslate = width * (routes.length - 1);

        var translateX = _reactNative.Animated.add(panX, offsetX).interpolate({
          inputRange: [-maxTranslate, 0],
          outputRange: [-maxTranslate, 0],
          extrapolate: 'clamp'
        });

        return React.createElement(
          GestureHandler.PanGestureHandler,
          {
            enabled: layout.width !== 0 && swipeEnabled !== false,
            minDeltaX: 10,
            onGestureEvent: _reactNative.Animated.event([{
              nativeEvent: {
                translationX: this.props.panX
              }
            }], {
              useNativeDriver: this.props.useNativeDriver
            }),
            onHandlerStateChange: this._handleHandlerStateChange,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 167
            }
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.sheet, width ? {
                width: routes.length * width,
                transform: [{
                  translateX: translateX
                }]
              } : null],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 176
              }
            },
            React.Children.map(children, function (child, i) {
              return React.createElement(
                _reactNative.View,
                {
                  key: navigationState.routes[i].key,
                  testID: navigationState.routes[i].testID,
                  style: width ? {
                    width: width
                  } : i === navigationState.index ? _reactNative.StyleSheet.absoluteFill : null,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 185
                  }
                },
                i === navigationState.index || width ? child : null
              );
            })
          )
        );
      }
    }]);

    return TabViewPagerExperimental;
  }(React.Component), _class.propTypes = _extends({}, _TabViewPropTypes.PagerRendererPropType, {
    swipeDistanceThreshold: _propTypes2.default.number,
    swipeVelocityThreshold: _propTypes2.default.number,
    GestureHandler: _propTypes2.default.object
  }), _class.defaultProps = {
    GestureHandler: global.__expo && global.__expo.DangerZone ? global.__expo.DangerZone.GestureHandler : undefined,
    canJumpToTab: function canJumpToTab() {
      return true;
    }
  }, _temp2));

  exports.default = TabViewPagerExperimental;

  var styles = _reactNative.StyleSheet.create({
    sheet: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'stretch'
    }
  });
},594,[13,219,25,65,590],"node_modules/react-native-tab-view/src/TabViewPagerExperimental.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _initialiseProps,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabBar.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _TouchableItem = _require(_dependencyMap[4], "./TouchableItem");

  var _TouchableItem2 = _interopRequireDefault(_TouchableItem);

  var _TabViewPropTypes = _require(_dependencyMap[5], "./TabViewPropTypes");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    TabBar: {
      displayName: "TabBar"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TabBar.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var useNativeDriver = Boolean(_reactNative.NativeModules.NativeAnimatedModule);

  var TabBar = _wrapComponent("TabBar")((_temp = _class = function (_React$Component) {
    _inherits(TabBar, _React$Component);

    function TabBar(props) {
      _classCallCheck(this, TabBar);

      var _this = _possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).call(this, props));

      _initialiseProps.call(_this);

      var initialVisibility = 1;

      if (_this.props.scrollEnabled) {
        var tabWidth = _this._getTabWidth(_this.props);

        if (!tabWidth) {
          initialVisibility = 0;
        }
      }

      var initialOffset = _this.props.scrollEnabled && _this.props.layout.width ? {
        x: _this._getScrollAmount(_this.props, _this.props.navigationState.index),
        y: 0
      } : undefined;
      _this.state = {
        visibility: new _reactNative.Animated.Value(initialVisibility),
        scrollAmount: new _reactNative.Animated.Value(0),
        initialOffset: initialOffset
      };
      return _this;
    }

    _createClass(TabBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.props.scrollEnabled && this._startTrackingPosition();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevTabWidth = this._getTabWidth(prevProps);

        var currentTabWidth = this._getTabWidth(this.props);

        if (prevTabWidth !== currentTabWidth && currentTabWidth) {
          this.state.visibility.setValue(1);
        }

        if ((prevProps.navigationState !== this.props.navigationState || prevProps.layout !== this.props.layout || prevTabWidth !== currentTabWidth) && this.props.navigationState.index !== this._pendingIndex) {
          this._resetScroll(this.props.navigationState.index, Boolean(prevProps.layout.width));

          this._pendingIndex = null;
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._stopTrackingPosition();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            position = _props.position,
            navigationState = _props.navigationState,
            scrollEnabled = _props.scrollEnabled,
            bounces = _props.bounces;
        var routes = navigationState.routes,
            index = navigationState.index;

        var tabWidth = this._getTabWidth(this.props);

        var tabBarWidth = tabWidth * routes.length;
        var inputRange = [-1].concat(_toConsumableArray(routes.map(function (x, i) {
          return i;
        })));

        var translateX = _reactNative.Animated.multiply(this.state.scrollAmount, -1);

        return React.createElement(
          _reactNative.Animated.View,
          {
            style: [styles.tabBar, this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 346
            }
          },
          React.createElement(
            _reactNative.Animated.View,
            {
              pointerEvents: "none",
              style: [styles.indicatorContainer, scrollEnabled ? {
                width: tabBarWidth,
                transform: [{
                  translateX: translateX
                }]
              } : null],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 347
              }
            },
            this._renderIndicator(_extends({}, this.props, {
              width: tabWidth
            }))
          ),
          React.createElement(
            _reactNative.View,
            {
              style: styles.scroll,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 361
              }
            },
            React.createElement(
              _reactNative.Animated.ScrollView,
              {
                horizontal: true,
                keyboardShouldPersistTaps: "handled",
                scrollEnabled: scrollEnabled,
                bounces: bounces,
                alwaysBounceHorizontal: false,
                scrollsToTop: false,
                showsHorizontalScrollIndicator: false,
                automaticallyAdjustContentInsets: false,
                overScrollMode: "never",
                contentContainerStyle: [styles.tabContent, scrollEnabled ? null : styles.container],
                scrollEventThrottle: 1,
                onScroll: _reactNative.Animated.event([{
                  nativeEvent: {
                    contentOffset: {
                      x: this.state.scrollAmount
                    }
                  }
                }], {
                  useNativeDriver: useNativeDriver
                }),
                onScrollBeginDrag: this._handleBeginDrag,
                onScrollEndDrag: this._handleEndDrag,
                onMomentumScrollBegin: this._handleMomentumScrollBegin,
                onMomentumScrollEnd: this._handleMomentumScrollEnd,
                contentOffset: this.state.initialOffset,
                ref: this._setRef,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 362
                }
              },
              routes.map(function (route, i) {
                var focused = index === i;
                var outputRange = inputRange.map(function (inputIndex) {
                  return inputIndex === i ? 1 : 0.7;
                });

                var opacity = _reactNative.Animated.multiply(_this2.state.visibility, position.interpolate({
                  inputRange: inputRange,
                  outputRange: outputRange
                }));

                var scene = {
                  route: route,
                  focused: focused,
                  index: i
                };

                var label = _this2._renderLabel(scene);

                var icon = _this2.props.renderIcon ? _this2.props.renderIcon(scene) : null;
                var badge = _this2.props.renderBadge ? _this2.props.renderBadge(scene) : null;
                var tabStyle = {};
                tabStyle.opacity = opacity;

                if (icon) {
                  if (label) {
                    tabStyle.paddingTop = 8;
                  } else {
                    tabStyle.padding = 12;
                  }
                }

                var passedTabStyle = _reactNative.StyleSheet.flatten(_this2.props.tabStyle);

                var isWidthSet = passedTabStyle && typeof passedTabStyle.width !== 'undefined' || scrollEnabled === true;
                var tabContainerStyle = {};

                if (isWidthSet) {
                  tabStyle.width = tabWidth;
                }

                if (passedTabStyle && typeof passedTabStyle.flex === 'number') {
                  tabContainerStyle.flex = passedTabStyle.flex;
                } else if (!isWidthSet) {
                  tabContainerStyle.flex = 1;
                }

                var accessibilityLabel = route.accessibilityLabel || route.title;
                return React.createElement(
                  _TouchableItem2.default,
                  {
                    borderless: true,
                    key: route.key,
                    testID: route.testID,
                    accessible: route.accessible,
                    accessibilityLabel: accessibilityLabel,
                    accessibilityTraits: "button",
                    pressColor: _this2.props.pressColor,
                    pressOpacity: _this2.props.pressOpacity,
                    delayPressIn: 0,
                    onPress: function onPress() {
                      return _this2._handleTabPress(scene);
                    },
                    style: tabContainerStyle,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 452
                    }
                  },
                  React.createElement(
                    _reactNative.View,
                    {
                      pointerEvents: "none",
                      style: styles.container,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 465
                      }
                    },
                    React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.tabItem, tabStyle, passedTabStyle, styles.container],
                        __source: {
                          fileName: _jsxFileName,
                          lineNumber: 466
                        }
                      },
                      icon,
                      label
                    ),
                    badge ? React.createElement(
                      _reactNative.Animated.View,
                      {
                        style: [styles.badge, {
                          opacity: _this2.state.visibility
                        }],
                        __source: {
                          fileName: _jsxFileName,
                          lineNumber: 478
                        }
                      },
                      badge
                    ) : null
                  )
                );
              })
            )
          )
        );
      }
    }]);

    return TabBar;
  }(React.Component), _class.propTypes = _extends({}, _TabViewPropTypes.SceneRendererPropType, {
    scrollEnabled: _propTypes2.default.bool,
    bounces: _propTypes2.default.bool,
    pressColor: _TouchableItem2.default.propTypes.pressColor,
    pressOpacity: _TouchableItem2.default.propTypes.pressOpacity,
    getLabelText: _propTypes2.default.func,
    renderIcon: _propTypes2.default.func,
    renderLabel: _propTypes2.default.func,
    renderIndicator: _propTypes2.default.func,
    onTabPress: _propTypes2.default.func,
    labelStyle: _propTypes2.default.any,
    style: _propTypes2.default.any
  }), _class.defaultProps = {
    getLabelText: function getLabelText(_ref) {
      var route = _ref.route;
      return typeof route.title === 'string' ? route.title.toUpperCase() : route.title;
    }
  }, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this._isIntial = true;
    this._isManualScroll = false;
    this._isMomentumScroll = false;

    this._startTrackingPosition = function () {
      _this3._offsetXListener = _this3.props.offsetX.addListener(function (_ref2) {
        var value = _ref2.value;
        _this3._lastOffsetX = value;

        _this3._handlePosition();
      });
      _this3._panXListener = _this3.props.panX.addListener(function (_ref3) {
        var value = _ref3.value;
        _this3._lastPanX = value;

        _this3._handlePosition();
      });
    };

    this._stopTrackingPosition = function () {
      _this3.props.offsetX.removeListener(_this3._offsetXListener);

      _this3.props.panX.removeListener(_this3._panXListener);
    };

    this._handlePosition = function () {
      var _props2 = _this3.props,
          navigationState = _props2.navigationState,
          layout = _props2.layout;

      if (layout.width === 0) {
        return;
      }

      var panX = typeof _this3._lastPanX === 'number' ? _this3._lastPanX : 0;
      var offsetX = typeof _this3._lastOffsetX === 'number' ? _this3._lastOffsetX : -navigationState.index * layout.width;
      var value = (panX + offsetX) / -(layout.width || 0.001);

      _this3._adjustScroll(value);
    };

    this._renderLabel = function (scene) {
      if (typeof _this3.props.renderLabel !== 'undefined') {
        return _this3.props.renderLabel(scene);
      }

      var label = _this3.props.getLabelText(scene);

      if (typeof label !== 'string') {
        return null;
      }

      return React.createElement(
        _reactNative.Animated.Text,
        {
          style: [styles.tabLabel, _this3.props.labelStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 187
          }
        },
        label
      );
    };

    this._renderIndicator = function (props) {
      if (typeof _this3.props.renderIndicator !== 'undefined') {
        return _this3.props.renderIndicator(props);
      }

      var width = props.width,
          position = props.position,
          navigationState = props.navigationState;

      var translateX = _reactNative.Animated.multiply(_reactNative.Animated.multiply(position.interpolate({
        inputRange: [0, navigationState.routes.length - 1],
        outputRange: [0, navigationState.routes.length - 1],
        extrapolate: 'clamp'
      }), width), _reactNative.I18nManager.isRTL ? -1 : 1);

      return React.createElement(_reactNative.Animated.View, {
        style: [styles.indicator, {
          width: width,
          transform: [{
            translateX: translateX
          }]
        }, _this3.props.indicatorStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 210
        }
      });
    };

    this._getTabWidth = function (props) {
      var layout = props.layout,
          navigationState = props.navigationState,
          tabStyle = props.tabStyle;

      var flattened = _reactNative.StyleSheet.flatten(tabStyle);

      if (flattened) {
        switch (_typeof(flattened.width)) {
          case 'number':
            return flattened.width;

          case 'string':
            if (flattened.width.endsWith('%')) {
              var _width = parseFloat(flattened.width);

              if (Number.isFinite(_width)) {
                return layout.width * (_width / 100);
              }
            }

        }
      }

      if (props.scrollEnabled) {
        return layout.width / 5 * 2;
      }

      return layout.width / navigationState.routes.length;
    };

    this._handleTabPress = function (scene) {
      _this3._pendingIndex = scene.index;

      _this3.props.jumpTo(scene.route.key);

      if (_this3.props.onTabPress) {
        _this3.props.onTabPress(scene);
      }
    };

    this._normalizeScrollValue = function (props, value) {
      var layout = props.layout,
          navigationState = props.navigationState;

      var tabWidth = _this3._getTabWidth(props);

      var tabBarWidth = Math.max(tabWidth * navigationState.routes.length, layout.width);
      var maxDistance = tabBarWidth - layout.width;
      return Math.max(Math.min(value, maxDistance), 0);
    };

    this._getScrollAmount = function (props, i) {
      var layout = props.layout;

      var tabWidth = _this3._getTabWidth(props);

      var centerDistance = tabWidth * (i + 1 / 2);
      var scrollAmount = centerDistance - layout.width / 2;
      return _this3._normalizeScrollValue(props, scrollAmount);
    };

    this._adjustScroll = function (value) {
      if (_this3.props.scrollEnabled) {
        global.cancelAnimationFrame(_this3._scrollResetCallback);
        _this3._scrollView && _this3._scrollView.scrollTo({
          x: _this3._normalizeScrollValue(_this3.props, _this3._getScrollAmount(_this3.props, value)),
          animated: !_this3._isIntial
        });
        _this3._isIntial = false;
      }
    };

    this._resetScroll = function (value) {
      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (_this3.props.scrollEnabled) {
        global.cancelAnimationFrame(_this3._scrollResetCallback);
        _this3._scrollResetCallback = global.requestAnimationFrame(function () {
          _this3._scrollView && _this3._scrollView.scrollTo({
            x: _this3._getScrollAmount(_this3.props, value),
            animated: animated
          });
        });
      }
    };

    this._handleBeginDrag = function () {
      _this3._isManualScroll = true;
      _this3._isMomentumScroll = false;
    };

    this._handleEndDrag = function () {
      global.requestAnimationFrame(function () {
        if (_this3._isMomentumScroll) {
          return;
        }

        _this3._isManualScroll = false;
      });
    };

    this._handleMomentumScrollBegin = function () {
      _this3._isMomentumScroll = true;
    };

    this._handleMomentumScrollEnd = function () {
      _this3._isMomentumScroll = false;
      _this3._isManualScroll = false;
    };

    this._setRef = function (el) {
      return _this3._scrollView = el && el._component;
    };
  }, _temp));

  exports.default = TabBar;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    scroll: {
      overflow: _reactNative.Platform.OS === 'web' ? 'auto' : 'scroll'
    },
    tabBar: {
      backgroundColor: '#2196f3',
      elevation: 4,
      shadowColor: 'black',
      shadowOpacity: 0.1,
      shadowRadius: _reactNative.StyleSheet.hairlineWidth,
      shadowOffset: {
        height: _reactNative.StyleSheet.hairlineWidth
      },
      zIndex: _reactNative.Platform.OS === 'android' ? 0 : 1
    },
    tabContent: {
      flexDirection: 'row',
      flexWrap: 'nowrap'
    },
    tabLabel: {
      backgroundColor: 'transparent',
      color: 'white',
      margin: 8
    },
    tabItem: {
      flex: 1,
      padding: 8,
      alignItems: 'center',
      justifyContent: 'center'
    },
    badge: {
      position: 'absolute',
      top: 0,
      right: 0
    },
    indicatorContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    indicator: {
      backgroundColor: '#ffeb3b',
      position: 'absolute',
      left: 0,
      bottom: 0,
      right: 0,
      height: 2
    }
  });
},595,[13,219,25,65,596,590],"node_modules/react-native-tab-view/src/TabBar.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TouchableItem.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    TouchableItem: {
      displayName: "TouchableItem"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/TouchableItem.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var LOLLIPOP = 21;

  var TouchableItem = _wrapComponent("TouchableItem")((_temp2 = _class = function (_React$Component) {
    _inherits(TouchableItem, _React$Component);

    function TouchableItem() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, TouchableItem);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).call.apply(_ref, [this].concat(args))), _this), _this._handlePress = function () {
        global.requestAnimationFrame(_this.props.onPress);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(TouchableItem, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            style = _props.style,
            pressOpacity = _props.pressOpacity,
            pressColor = _props.pressColor,
            borderless = _props.borderless,
            rest = _objectWithoutProperties(_props, ["style", "pressOpacity", "pressColor", "borderless"]);

        if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= LOLLIPOP) {
          return React.createElement(
            _reactNative.TouchableNativeFeedback,
            _extends({}, rest, {
              onPress: this._handlePress,
              background: _reactNative.TouchableNativeFeedback.Ripple(pressColor, borderless),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 48
              }
            }),
            React.createElement(
              _reactNative.View,
              {
                style: style,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 53
                }
              },
              React.Children.only(this.props.children)
            )
          );
        } else {
          return React.createElement(
            _reactNative.TouchableOpacity,
            _extends({}, rest, {
              onPress: this._handlePress,
              style: style,
              activeOpacity: pressOpacity,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 58
              }
            }),
            this.props.children
          );
        }
      }
    }]);

    return TouchableItem;
  }(React.Component), _class.propTypes = {
    onPress: _propTypes2.default.func.isRequired,
    delayPressIn: _propTypes2.default.number,
    borderless: _propTypes2.default.bool,
    pressColor: _propTypes2.default.string,
    pressOpacity: _propTypes2.default.number,
    children: _propTypes2.default.node.isRequired
  }, _class.defaultProps = {
    pressColor: 'rgba(255, 255, 255, .4)'
  }, _temp2));

  exports.default = TouchableItem;
},596,[13,219,25,65],"node_modules/react-native-tab-view/src/TouchableItem.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/SceneMap.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  exports.default = SceneMap;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SceneComponent: {
      displayName: "SceneComponent",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-tab-view/src/SceneMap.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  function SceneMap(scenes) {
    var SceneComponent = _wrapComponent("SceneComponent")(function (_React$PureComponent) {
      _inherits(SceneComponent, _React$PureComponent);

      function SceneComponent() {
        _classCallCheck(this, SceneComponent);

        return _possibleConstructorReturn(this, (SceneComponent.__proto__ || Object.getPrototypeOf(SceneComponent)).apply(this, arguments));
      }

      _createClass(SceneComponent, [{
        key: "render",
        value: function render() {
          return React.createElement(scenes[this.props.route.key], this.props);
        }
      }]);

      return SceneComponent;
    }(React.PureComponent));

    return function (_ref) {
      var route = _ref.route,
          jumpTo = _ref.jumpTo,
          jumpToIndex = _ref.jumpToIndex;
      return React.createElement(SceneComponent, {
        key: route.key,
        route: route,
        jumpTo: jumpTo,
        jumpToIndex: jumpToIndex,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 13
        }
      });
    };
  }
},597,[13,219],"node_modules/react-native-tab-view/src/SceneMap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/buy-list/buy-list-container.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactRedux = _require(_dependencyMap[1], "react-redux");

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _buyList = _require(_dependencyMap[3], "./buy-list");

    var _buyList2 = _interopRequireDefault(_buyList);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Container = function Container(props) {
        return _react2.default.createElement(_buyList2.default, _extends({}, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 6
            }
        }));
    };

    Container.propTypes = {
        products: _propTypes2.default.arrayOf(_propTypes2.default.object)
    };
    Container.defaultProps = {
        products: [{}]
    };

    var stateToProps = function stateToProps(state, ownProps) {
        return {
            products: state.product.products,
            navigator: ownProps.propsNavigatorObject
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var BuyListContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = BuyListContainer;
},598,[13,23,25,599],"src/screen/home/buy-list/buy-list-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/buy-list/buy-list.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _styles = _require(_dependencyMap[2], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    var _productListContainer = _require(_dependencyMap[3], "../product-list/product-list-container");

    var _productListContainer2 = _interopRequireDefault(_productListContainer);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var BuyList = function BuyList(_ref) {
        var products = _ref.products,
            navigator = _ref.navigator;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 8
                }
            },
            _react2.default.createElement(_productListContainer2.default, {
                products: products,
                propsNavigatorObject: navigator,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 9
                }
            })
        );
    };

    BuyList.propTypes = {};
    BuyList.defaultProps = {};
    exports.default = BuyList;
},599,[13,65,600,665],"src/screen/home/buy-list/buy-list.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        background-color: #f1f1f1;\n    }\n    "], ["\n    container {\n        background-color: #f1f1f1;\n    }\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject);
    exports.default = styles;
},600,[601],"src/screen/home/buy-list/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _getIterator2 = _require(_dependencyMap[0], 'babel-runtime/core-js/get-iterator');

  var _getIterator3 = _interopRequireDefault(_getIterator2);

  exports.default = toJSS;

  var _parse = _require(_dependencyMap[1], 'css/lib/parse');

  var _parse2 = _interopRequireDefault(_parse);

  var _toCamelCase = _require(_dependencyMap[2], 'to-camel-case');

  var _toCamelCase2 = _interopRequireDefault(_toCamelCase);

  var _lodash = _require(_dependencyMap[3], 'lodash.get');

  var _lodash2 = _interopRequireDefault(_lodash);

  var _lodash3 = _require(_dependencyMap[4], 'lodash.set');

  var _lodash4 = _interopRequireDefault(_lodash3);

  var _utils = _require(_dependencyMap[5], './utils');

  var _utils2 = _interopRequireDefault(_utils);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function toJSS(css) {
    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      values[_key - 1] = arguments[_key];
    }

    var stylesheetString = Array.isArray(css) ? _utils.handleTags.apply(undefined, [css].concat(values)) : css;

    var _ParseCSS = (0, _parse2.default)(_utils2.default.clean(stylesheetString)),
        stylesheet = _ParseCSS.stylesheet;

    var directions = ['top', 'right', 'bottom', 'left'];
    var changeArr = ['margin', 'padding', 'border-width', 'border-radius'];
    var numberize = ['width', 'height', 'font-size', 'line-height'].concat(directions);
    var specialProperties = {};
    ['border', 'border-top', 'border-right', 'border-bottom', 'border-left'].forEach(function (name) {
      specialProperties[name] = {
        regex: /^\s*([0-9]+)(px)?\s+(solid|dotted|dashed)?\s*([a-z0-9#,\(\)\.\s]+)\s*$/i,
        map: {
          1: name + '-width',
          3: name === 'border' ? name + '-style' : null,
          4: name + '-color'
        }
      };
    });
    directions.forEach(function (dir) {
      numberize.push('border-' + dir + '-width');
      changeArr.forEach(function (prop) {
        numberize.push(prop + '-' + dir);
      });
    });
    var directionMaps = {
      'border-radius': {
        Top: 'top-left',
        Right: 'top-right',
        Bottom: 'bottom-right',
        Left: 'bottom-left'
      }
    };

    function directionToPropertyName(property, direction) {
      var names = property.split('-');
      names.splice(1, 0, directionMaps[property] ? directionMaps[property][direction] : direction);
      return (0, _toCamelCase2.default)(names.join('-'));
    }

    var unsupported = ['display'];
    var nonMatching = {
      'flex-grow': 'flex',
      'text-decoration': 'textDecorationLine',
      'vertical-align': 'textVerticalAlign'
    };
    var JSONResult = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = (0, _getIterator3.default)(stylesheet.rules), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var rule = _step.value;
        if (rule.type !== 'rule') continue;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          var _loop = function _loop() {
            var selector = _step2.value;
            selector = selector.replace(/\.|#/g, '');
            var styles = void 0;
            var composedSelector = selector.match(/\s+(\S)+/g);

            if (composedSelector) {
              var selectorPath = selector.match(/^\S+/)[0];

              while (composedSelector.length) {
                var currentSelector = composedSelector.shift().replace(/\s+/, '');
                selectorPath += '[' + currentSelector + ']';
              }

              if (!(0, _lodash2.default)(JSONResult, selectorPath)) {
                (0, _lodash4.default)(JSONResult, selectorPath, {});
              }

              styles = (0, _lodash2.default)(JSONResult, selectorPath);
            } else {
              styles = JSONResult[selector] = JSONResult[selector] || {};
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              var _loop2 = function _loop2() {
                var declaration = _step3.value;
                if (declaration.type !== 'declaration') return 'continue';
                var value = declaration.value;
                var property = declaration.property;

                if (specialProperties[property]) {
                  var special = specialProperties[property];
                  var matches = special.regex.exec(value);

                  if (matches) {
                    if (typeof special.map === 'function') {
                      special.map(matches, styles, rule.declarations);
                    } else {
                      for (var key in special.map) {
                        if (matches[key] && special.map[key]) {
                          rule.declarations.push({
                            property: special.map[key],
                            value: matches[key],
                            type: 'declaration'
                          });
                        }
                      }
                    }

                    return 'continue';
                  }
                }

                if (_utils2.default.arrayContains(property, unsupported)) return 'continue';

                if (nonMatching[property]) {
                  rule.declarations.push({
                    property: nonMatching[property],
                    value: value,
                    type: 'declaration'
                  });
                  return 'continue';
                }

                if (_utils2.default.arrayContains(property, numberize)) {
                  var valueReplaced = value.replace(/px|\s*/g, '');
                  styles[(0, _toCamelCase2.default)(property)] = parseFloat(valueReplaced);
                } else if (_utils2.default.arrayContains(property, changeArr)) {
                  var _values = value.replace(/px/g, '').split(/[\s,]+/);

                  _values.forEach(function (v, index, arr) {
                    arr[index] = parseInt(v);
                    return arr;
                  });

                  var length = _values.length;

                  if (length === 1) {
                    styles[(0, _toCamelCase2.default)(property)] = _values[0];
                  }

                  if (length === 2) {
                    var _arr = ['Top', 'Bottom'];

                    for (var _i = 0; _i < _arr.length; _i++) {
                      var prop = _arr[_i];
                      styles[directionToPropertyName(property, prop)] = _values[0];
                    }

                    var _arr2 = ['Left', 'Right'];

                    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                      var _prop = _arr2[_i2];
                      styles[directionToPropertyName(property, _prop)] = _values[1];
                    }
                  }

                  if (length === 3) {
                    var _arr3 = ['Left', 'Right'];

                    for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                      var _prop2 = _arr3[_i3];
                      styles[directionToPropertyName(property, _prop2)] = _values[1];
                    }

                    styles[directionToPropertyName(property, 'Top')] = _values[0];
                    styles[directionToPropertyName(property, 'Bottom')] = _values[2];
                  }

                  if (length === 4) {
                    ['Top', 'Right', 'Bottom', 'Left'].forEach(function (prop, index) {
                      styles[directionToPropertyName(property, prop)] = _values[index];
                    });
                  }
                } else {
                  if (!isNaN(declaration.value) && property !== 'font-weight') {
                    declaration.value = parseFloat(declaration.value);
                  }

                  styles[(0, _toCamelCase2.default)(property)] = declaration.value;
                }
              };

              for (var _iterator3 = (0, _getIterator3.default)(rule.declarations), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _ret2 = _loop2();

                if (_ret2 === 'continue') continue;
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
          };

          for (var _iterator2 = (0, _getIterator3.default)(rule.selectors), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            _loop();
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return JSONResult;
  }
},601,[602,655,656,659,660,661],"node_modules/react-native-css/build/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "default": _require(_dependencyMap[0], "core-js/library/fn/get-iterator"),
    __esModule: true
  };
},602,[603],"node_modules/babel-runtime/core-js/get-iterator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  _require(_dependencyMap[0], '../modules/web.dom.iterable');

  _require(_dependencyMap[1], '../modules/es6.string.iterator');

  module.exports = _require(_dependencyMap[2], '../modules/core.get-iterator');
},603,[604,650,652],"node_modules/core-js/library/fn/get-iterator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  _require(_dependencyMap[0], './es6.array.iterator');

  var global = _require(_dependencyMap[1], './_global');

  var hide = _require(_dependencyMap[2], './_hide');

  var Iterators = _require(_dependencyMap[3], './_iterators');

  var TO_STRING_TAG = _require(_dependencyMap[4], './_wks')('toStringTag');

  var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');

  for (var i = 0; i < DOMIterables.length; i++) {
    var NAME = DOMIterables[i];
    var Collection = global[NAME];
    var proto = Collection && Collection.prototype;
    if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = Iterators.Array;
  }
},604,[605,616,620,608,647],"node_modules/core-js/library/modules/web.dom.iterable.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var addToUnscopables = _require(_dependencyMap[0], './_add-to-unscopables');

  var step = _require(_dependencyMap[1], './_iter-step');

  var Iterators = _require(_dependencyMap[2], './_iterators');

  var toIObject = _require(_dependencyMap[3], './_to-iobject');

  module.exports = _require(_dependencyMap[4], './_iter-define')(Array, 'Array', function (iterated, kind) {
    this._t = toIObject(iterated);
    this._i = 0;
    this._k = kind;
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;

    if (!O || index >= O.length) {
      this._t = undefined;
      return step(1);
    }

    if (kind == 'keys') return step(0, index);
    if (kind == 'values') return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');
  Iterators.Arguments = Iterators.Array;
  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');
},605,[606,607,608,609,613],"node_modules/core-js/library/modules/es6.array.iterator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = function () {};
},606,[],"node_modules/core-js/library/modules/_add-to-unscopables.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = function (done, value) {
    return {
      value: value,
      done: !!done
    };
  };
},607,[],"node_modules/core-js/library/modules/_iter-step.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {};
},608,[],"node_modules/core-js/library/modules/_iterators.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var IObject = _require(_dependencyMap[0], './_iobject');

  var defined = _require(_dependencyMap[1], './_defined');

  module.exports = function (it) {
    return IObject(defined(it));
  };
},609,[610,612],"node_modules/core-js/library/modules/_to-iobject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var cof = _require(_dependencyMap[0], './_cof');

  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return cof(it) == 'String' ? it.split('') : Object(it);
  };
},610,[611],"node_modules/core-js/library/modules/_iobject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var toString = {}.toString;

  module.exports = function (it) {
    return toString.call(it).slice(8, -1);
  };
},611,[],"node_modules/core-js/library/modules/_cof.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };
},612,[],"node_modules/core-js/library/modules/_defined.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var LIBRARY = _require(_dependencyMap[0], './_library');

  var $export = _require(_dependencyMap[1], './_export');

  var redefine = _require(_dependencyMap[2], './_redefine');

  var hide = _require(_dependencyMap[3], './_hide');

  var Iterators = _require(_dependencyMap[4], './_iterators');

  var $iterCreate = _require(_dependencyMap[5], './_iter-create');

  var setToStringTag = _require(_dependencyMap[6], './_set-to-string-tag');

  var getPrototypeOf = _require(_dependencyMap[7], './_object-gpo');

  var ITERATOR = _require(_dependencyMap[8], './_wks')('iterator');

  var BUGGY = !([].keys && 'next' in [].keys());
  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';

  var returnThis = function returnThis() {
    return this;
  };

  module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    $iterCreate(Constructor, NAME, next);

    var getMethod = function getMethod(kind) {
      if (!BUGGY && kind in proto) return proto[kind];

      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };

        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }

      return function entries() {
        return new Constructor(this, kind);
      };
    };

    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype;

    if ($anyNative) {
      IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        setToStringTag(IteratorPrototype, TAG, true);
        if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
      }
    }

    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;

      $default = function values() {
        return $native.call(this);
      };
    }

    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      hide(proto, ITERATOR, $default);
    }

    Iterators[NAME] = $default;
    Iterators[TAG] = returnThis;

    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) redefine(proto, key, methods[key]);
      } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }

    return methods;
  };
},613,[614,615,631,620,608,632,646,648,647],"node_modules/core-js/library/modules/_iter-define.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = true;
},614,[],"node_modules/core-js/library/modules/_library.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var global = _require(_dependencyMap[0], './_global');

  var core = _require(_dependencyMap[1], './_core');

  var ctx = _require(_dependencyMap[2], './_ctx');

  var hide = _require(_dependencyMap[3], './_hide');

  var has = _require(_dependencyMap[4], './_has');

  var PROTOTYPE = 'prototype';

  var $export = function $export(type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var IS_WRAP = type & $export.W;
    var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
    var expProto = exports[PROTOTYPE];
    var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
    var key, own, out;
    if (IS_GLOBAL) source = name;

    for (key in source) {
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && has(exports, key)) continue;
      out = own ? target[key] : source[key];
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] : IS_BIND && own ? ctx(out, global) : IS_WRAP && target[key] == out ? function (C) {
        var F = function F(a, b, c) {
          if (this instanceof C) {
            switch (arguments.length) {
              case 0:
                return new C();

              case 1:
                return new C(a);

              case 2:
                return new C(a, b);
            }

            return new C(a, b, c);
          }

          return C.apply(this, arguments);
        };

        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;

      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out;
        if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
      }
    }
  };

  $export.F = 1;
  $export.G = 2;
  $export.S = 4;
  $export.P = 8;
  $export.B = 16;
  $export.W = 32;
  $export.U = 64;
  $export.R = 128;
  module.exports = $export;
},615,[616,617,618,620,630],"node_modules/core-js/library/modules/_export.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if (typeof __g == 'number') __g = global;
},616,[],"node_modules/core-js/library/modules/_global.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var core = module.exports = {
    version: '2.5.5'
  };
  if (typeof __e == 'number') __e = core;
},617,[],"node_modules/core-js/library/modules/_core.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var aFunction = _require(_dependencyMap[0], './_a-function');

  module.exports = function (fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;

    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };

      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };

      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }

    return function () {
      return fn.apply(that, arguments);
    };
  };
},618,[619],"node_modules/core-js/library/modules/_ctx.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };
},619,[],"node_modules/core-js/library/modules/_a-function.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var dP = _require(_dependencyMap[0], './_object-dp');

  var createDesc = _require(_dependencyMap[1], './_property-desc');

  module.exports = _require(_dependencyMap[2], './_descriptors') ? function (object, key, value) {
    return dP.f(object, key, createDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };
},620,[621,629,625],"node_modules/core-js/library/modules/_hide.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var anObject = _require(_dependencyMap[0], './_an-object');

  var IE8_DOM_DEFINE = _require(_dependencyMap[1], './_ie8-dom-define');

  var toPrimitive = _require(_dependencyMap[2], './_to-primitive');

  var dP = Object.defineProperty;
  exports.f = _require(_dependencyMap[3], './_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
      return dP(O, P, Attributes);
    } catch (e) {}
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
},621,[622,624,628,625],"node_modules/core-js/library/modules/_object-dp.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isObject = _require(_dependencyMap[0], './_is-object');

  module.exports = function (it) {
    if (!isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };
},622,[623],"node_modules/core-js/library/modules/_an-object.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  module.exports = function (it) {
    return (typeof it === "undefined" ? "undefined" : _typeof(it)) === 'object' ? it !== null : typeof it === 'function';
  };
},623,[],"node_modules/core-js/library/modules/_is-object.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = !_require(_dependencyMap[0], './_descriptors') && !_require(_dependencyMap[1], './_fails')(function () {
    return Object.defineProperty(_require(_dependencyMap[2], './_dom-create')('div'), 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });
},624,[625,626,627],"node_modules/core-js/library/modules/_ie8-dom-define.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = !_require(_dependencyMap[0], './_fails')(function () {
    return Object.defineProperty({}, 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });
},625,[626],"node_modules/core-js/library/modules/_descriptors.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };
},626,[],"node_modules/core-js/library/modules/_fails.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isObject = _require(_dependencyMap[0], './_is-object');

  var document = _require(_dependencyMap[1], './_global').document;

  var is = isObject(document) && isObject(document.createElement);

  module.exports = function (it) {
    return is ? document.createElement(it) : {};
  };
},627,[623,616],"node_modules/core-js/library/modules/_dom-create.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isObject = _require(_dependencyMap[0], './_is-object');

  module.exports = function (it, S) {
    if (!isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };
},628,[623],"node_modules/core-js/library/modules/_to-primitive.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };
},629,[],"node_modules/core-js/library/modules/_property-desc.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var hasOwnProperty = {}.hasOwnProperty;

  module.exports = function (it, key) {
    return hasOwnProperty.call(it, key);
  };
},630,[],"node_modules/core-js/library/modules/_has.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = _require(_dependencyMap[0], './_hide');
},631,[620],"node_modules/core-js/library/modules/_redefine.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var create = _require(_dependencyMap[0], './_object-create');

  var descriptor = _require(_dependencyMap[1], './_property-desc');

  var setToStringTag = _require(_dependencyMap[2], './_set-to-string-tag');

  var IteratorPrototype = {};

  _require(_dependencyMap[3], './_hide')(IteratorPrototype, _require(_dependencyMap[4], './_wks')('iterator'), function () {
    return this;
  });

  module.exports = function (Constructor, NAME, next) {
    Constructor.prototype = create(IteratorPrototype, {
      next: descriptor(1, next)
    });
    setToStringTag(Constructor, NAME + ' Iterator');
  };
},632,[633,629,646,620,647],"node_modules/core-js/library/modules/_iter-create.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var anObject = _require(_dependencyMap[0], './_an-object');

  var dPs = _require(_dependencyMap[1], './_object-dps');

  var enumBugKeys = _require(_dependencyMap[2], './_enum-bug-keys');

  var IE_PROTO = _require(_dependencyMap[3], './_shared-key')('IE_PROTO');

  var Empty = function Empty() {};

  var PROTOTYPE = 'prototype';

  var _createDict = function createDict() {
    var iframe = _require(_dependencyMap[4], './_dom-create')('iframe');

    var i = enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';

    _require(_dependencyMap[5], './_html').appendChild(iframe);

    iframe.src = 'javascript:';
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    _createDict = iframeDocument.F;

    while (i--) {
      delete _createDict[PROTOTYPE][enumBugKeys[i]];
    }

    return _createDict();
  };

  module.exports = Object.create || function create(O, Properties) {
    var result;

    if (O !== null) {
      Empty[PROTOTYPE] = anObject(O);
      result = new Empty();
      Empty[PROTOTYPE] = null;
      result[IE_PROTO] = O;
    } else result = _createDict();

    return Properties === undefined ? result : dPs(result, Properties);
  };
},633,[622,634,644,641,627,645],"node_modules/core-js/library/modules/_object-create.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var dP = _require(_dependencyMap[0], './_object-dp');

  var anObject = _require(_dependencyMap[1], './_an-object');

  var getKeys = _require(_dependencyMap[2], './_object-keys');

  module.exports = _require(_dependencyMap[3], './_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = getKeys(Properties);
    var length = keys.length;
    var i = 0;
    var P;

    while (length > i) {
      dP.f(O, P = keys[i++], Properties[P]);
    }

    return O;
  };
},634,[621,622,635,625],"node_modules/core-js/library/modules/_object-dps.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var $keys = _require(_dependencyMap[0], './_object-keys-internal');

  var enumBugKeys = _require(_dependencyMap[1], './_enum-bug-keys');

  module.exports = Object.keys || function keys(O) {
    return $keys(O, enumBugKeys);
  };
},635,[636,644],"node_modules/core-js/library/modules/_object-keys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var has = _require(_dependencyMap[0], './_has');

  var toIObject = _require(_dependencyMap[1], './_to-iobject');

  var arrayIndexOf = _require(_dependencyMap[2], './_array-includes')(false);

  var IE_PROTO = _require(_dependencyMap[3], './_shared-key')('IE_PROTO');

  module.exports = function (object, names) {
    var O = toIObject(object);
    var i = 0;
    var result = [];
    var key;

    for (key in O) {
      if (key != IE_PROTO) has(O, key) && result.push(key);
    }

    while (names.length > i) {
      if (has(O, key = names[i++])) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
    }

    return result;
  };
},636,[630,609,637,641],"node_modules/core-js/library/modules/_object-keys-internal.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var toIObject = _require(_dependencyMap[0], './_to-iobject');

  var toLength = _require(_dependencyMap[1], './_to-length');

  var toAbsoluteIndex = _require(_dependencyMap[2], './_to-absolute-index');

  module.exports = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIObject($this);
      var length = toLength(O.length);
      var index = toAbsoluteIndex(fromIndex, length);
      var value;
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        if (value != value) return true;
      } else for (; length > index; index++) {
        if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        }
      }
      return !IS_INCLUDES && -1;
    };
  };
},637,[609,638,640],"node_modules/core-js/library/modules/_array-includes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var toInteger = _require(_dependencyMap[0], './_to-integer');

  var min = Math.min;

  module.exports = function (it) {
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
  };
},638,[639],"node_modules/core-js/library/modules/_to-length.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var ceil = Math.ceil;
  var floor = Math.floor;

  module.exports = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };
},639,[],"node_modules/core-js/library/modules/_to-integer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var toInteger = _require(_dependencyMap[0], './_to-integer');

  var max = Math.max;
  var min = Math.min;

  module.exports = function (index, length) {
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };
},640,[639],"node_modules/core-js/library/modules/_to-absolute-index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var shared = _require(_dependencyMap[0], './_shared')('keys');

  var uid = _require(_dependencyMap[1], './_uid');

  module.exports = function (key) {
    return shared[key] || (shared[key] = uid(key));
  };
},641,[642,643],"node_modules/core-js/library/modules/_shared-key.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var global = _require(_dependencyMap[0], './_global');

  var SHARED = '__core-js_shared__';
  var store = global[SHARED] || (global[SHARED] = {});

  module.exports = function (key) {
    return store[key] || (store[key] = {});
  };
},642,[616],"node_modules/core-js/library/modules/_shared.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var id = 0;
  var px = Math.random();

  module.exports = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };
},643,[],"node_modules/core-js/library/modules/_uid.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
},644,[],"node_modules/core-js/library/modules/_enum-bug-keys.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var document = _require(_dependencyMap[0], './_global').document;

  module.exports = document && document.documentElement;
},645,[616],"node_modules/core-js/library/modules/_html.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var def = _require(_dependencyMap[0], './_object-dp').f;

  var has = _require(_dependencyMap[1], './_has');

  var TAG = _require(_dependencyMap[2], './_wks')('toStringTag');

  module.exports = function (it, tag, stat) {
    if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
      configurable: true,
      value: tag
    });
  };
},646,[621,630,647],"node_modules/core-js/library/modules/_set-to-string-tag.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var store = _require(_dependencyMap[0], './_shared')('wks');

  var uid = _require(_dependencyMap[1], './_uid');

  var _Symbol = _require(_dependencyMap[2], './_global').Symbol;

  var USE_SYMBOL = typeof _Symbol == 'function';

  var $exports = module.exports = function (name) {
    return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
  };

  $exports.store = store;
},647,[642,643,616],"node_modules/core-js/library/modules/_wks.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var has = _require(_dependencyMap[0], './_has');

  var toObject = _require(_dependencyMap[1], './_to-object');

  var IE_PROTO = _require(_dependencyMap[2], './_shared-key')('IE_PROTO');

  var ObjectProto = Object.prototype;

  module.exports = Object.getPrototypeOf || function (O) {
    O = toObject(O);
    if (has(O, IE_PROTO)) return O[IE_PROTO];

    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }

    return O instanceof Object ? ObjectProto : null;
  };
},648,[630,649,641],"node_modules/core-js/library/modules/_object-gpo.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var defined = _require(_dependencyMap[0], './_defined');

  module.exports = function (it) {
    return Object(defined(it));
  };
},649,[612],"node_modules/core-js/library/modules/_to-object.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var $at = _require(_dependencyMap[0], './_string-at')(true);

  _require(_dependencyMap[1], './_iter-define')(String, 'String', function (iterated) {
    this._t = String(iterated);
    this._i = 0;
  }, function () {
    var O = this._t;
    var index = this._i;
    var point;
    if (index >= O.length) return {
      value: undefined,
      done: true
    };
    point = $at(O, index);
    this._i += point.length;
    return {
      value: point,
      done: false
    };
  });
},650,[651,613],"node_modules/core-js/library/modules/es6.string.iterator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var toInteger = _require(_dependencyMap[0], './_to-integer');

  var defined = _require(_dependencyMap[1], './_defined');

  module.exports = function (TO_STRING) {
    return function (that, pos) {
      var s = String(defined(that));
      var i = toInteger(pos);
      var l = s.length;
      var a, b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
},651,[639,612],"node_modules/core-js/library/modules/_string-at.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var anObject = _require(_dependencyMap[0], './_an-object');

  var get = _require(_dependencyMap[1], './core.get-iterator-method');

  module.exports = _require(_dependencyMap[2], './_core').getIterator = function (it) {
    var iterFn = get(it);
    if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
    return anObject(iterFn.call(it));
  };
},652,[622,653,617],"node_modules/core-js/library/modules/core.get-iterator.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var classof = _require(_dependencyMap[0], './_classof');

  var ITERATOR = _require(_dependencyMap[1], './_wks')('iterator');

  var Iterators = _require(_dependencyMap[2], './_iterators');

  module.exports = _require(_dependencyMap[3], './_core').getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
  };
},653,[654,647,608,617],"node_modules/core-js/library/modules/core.get-iterator-method.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var cof = _require(_dependencyMap[0], './_cof');

  var TAG = _require(_dependencyMap[1], './_wks')('toStringTag');

  var ARG = cof(function () {
    return arguments;
  }()) == 'Arguments';

  var tryGet = function tryGet(it, key) {
    try {
      return it[key];
    } catch (e) {}
  };

  module.exports = function (it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T : ARG ? cof(O) : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };
},654,[611,647],"node_modules/core-js/library/modules/_classof.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;

  module.exports = function (css, options) {
    options = options || {};
    var lineno = 1;
    var column = 1;

    function updatePosition(str) {
      var lines = str.match(/\n/g);
      if (lines) lineno += lines.length;
      var i = str.lastIndexOf('\n');
      column = ~i ? str.length - i : column + str.length;
    }

    function position() {
      var start = {
        line: lineno,
        column: column
      };
      return function (node) {
        node.position = new Position(start);
        whitespace();
        return node;
      };
    }

    function Position(start) {
      this.start = start;
      this.end = {
        line: lineno,
        column: column
      };
      this.source = options.source;
    }

    Position.prototype.content = css;
    var errorsList = [];

    function error(msg) {
      var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);
      err.reason = msg;
      err.filename = options.source;
      err.line = lineno;
      err.column = column;
      err.source = css;

      if (options.silent) {
        errorsList.push(err);
      } else {
        throw err;
      }
    }

    function stylesheet() {
      var rulesList = rules();
      return {
        type: 'stylesheet',
        stylesheet: {
          rules: rulesList,
          parsingErrors: errorsList
        }
      };
    }

    function open() {
      return match(/^{\s*/);
    }

    function close() {
      return match(/^}/);
    }

    function rules() {
      var node;
      var rules = [];
      whitespace();
      comments(rules);

      while (css.length && css.charAt(0) != '}' && (node = atrule() || rule())) {
        if (node !== false) {
          rules.push(node);
          comments(rules);
        }
      }

      return rules;
    }

    function match(re) {
      var m = re.exec(css);
      if (!m) return;
      var str = m[0];
      updatePosition(str);
      css = css.slice(str.length);
      return m;
    }

    function whitespace() {
      match(/^\s*/);
    }

    function comments(rules) {
      var c;
      rules = rules || [];

      while (c = comment()) {
        if (c !== false) {
          rules.push(c);
        }
      }

      return rules;
    }

    function comment() {
      var pos = position();
      if ('/' != css.charAt(0) || '*' != css.charAt(1)) return;
      var i = 2;

      while ("" != css.charAt(i) && ('*' != css.charAt(i) || '/' != css.charAt(i + 1))) {
        ++i;
      }

      i += 2;

      if ("" === css.charAt(i - 1)) {
        return error('End of comment missing');
      }

      var str = css.slice(2, i - 2);
      column += 2;
      updatePosition(str);
      css = css.slice(i);
      column += 2;
      return pos({
        type: 'comment',
        comment: str
      });
    }

    function selector() {
      var m = match(/^([^{]+)/);
      if (!m) return;
      return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, '').replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function (m) {
        return m.replace(/,/g, "\u200C");
      }).split(/\s*(?![^(]*\)),\s*/).map(function (s) {
        return s.replace(/\u200C/g, ',');
      });
    }

    function declaration() {
      var pos = position();
      var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
      if (!prop) return;
      prop = trim(prop[0]);
      if (!match(/^:\s*/)) return error("property missing ':'");
      var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
      var ret = pos({
        type: 'declaration',
        property: prop.replace(commentre, ''),
        value: val ? trim(val[0]).replace(commentre, '') : ''
      });
      match(/^[;\s]*/);
      return ret;
    }

    function declarations() {
      var decls = [];
      if (!open()) return error("missing '{'");
      comments(decls);
      var decl;

      while (decl = declaration()) {
        if (decl !== false) {
          decls.push(decl);
          comments(decls);
        }
      }

      if (!close()) return error("missing '}'");
      return decls;
    }

    function keyframe() {
      var m;
      var vals = [];
      var pos = position();

      while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
        vals.push(m[1]);
        match(/^,\s*/);
      }

      if (!vals.length) return;
      return pos({
        type: 'keyframe',
        values: vals,
        declarations: declarations()
      });
    }

    function atkeyframes() {
      var pos = position();
      var m = match(/^@([-\w]+)?keyframes\s*/);
      if (!m) return;
      var vendor = m[1];
      var m = match(/^([-\w]+)\s*/);
      if (!m) return error("@keyframes missing name");
      var name = m[1];
      if (!open()) return error("@keyframes missing '{'");
      var frame;
      var frames = comments();

      while (frame = keyframe()) {
        frames.push(frame);
        frames = frames.concat(comments());
      }

      if (!close()) return error("@keyframes missing '}'");
      return pos({
        type: 'keyframes',
        name: name,
        vendor: vendor,
        keyframes: frames
      });
    }

    function atsupports() {
      var pos = position();
      var m = match(/^@supports *([^{]+)/);
      if (!m) return;
      var supports = trim(m[1]);
      if (!open()) return error("@supports missing '{'");
      var style = comments().concat(rules());
      if (!close()) return error("@supports missing '}'");
      return pos({
        type: 'supports',
        supports: supports,
        rules: style
      });
    }

    function athost() {
      var pos = position();
      var m = match(/^@host\s*/);
      if (!m) return;
      if (!open()) return error("@host missing '{'");
      var style = comments().concat(rules());
      if (!close()) return error("@host missing '}'");
      return pos({
        type: 'host',
        rules: style
      });
    }

    function atmedia() {
      var pos = position();
      var m = match(/^@media *([^{]+)/);
      if (!m) return;
      var media = trim(m[1]);
      if (!open()) return error("@media missing '{'");
      var style = comments().concat(rules());
      if (!close()) return error("@media missing '}'");
      return pos({
        type: 'media',
        media: media,
        rules: style
      });
    }

    function atcustommedia() {
      var pos = position();
      var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
      if (!m) return;
      return pos({
        type: 'custom-media',
        name: trim(m[1]),
        media: trim(m[2])
      });
    }

    function atpage() {
      var pos = position();
      var m = match(/^@page */);
      if (!m) return;
      var sel = selector() || [];
      if (!open()) return error("@page missing '{'");
      var decls = comments();
      var decl;

      while (decl = declaration()) {
        decls.push(decl);
        decls = decls.concat(comments());
      }

      if (!close()) return error("@page missing '}'");
      return pos({
        type: 'page',
        selectors: sel,
        declarations: decls
      });
    }

    function atdocument() {
      var pos = position();
      var m = match(/^@([-\w]+)?document *([^{]+)/);
      if (!m) return;
      var vendor = trim(m[1]);
      var doc = trim(m[2]);
      if (!open()) return error("@document missing '{'");
      var style = comments().concat(rules());
      if (!close()) return error("@document missing '}'");
      return pos({
        type: 'document',
        document: doc,
        vendor: vendor,
        rules: style
      });
    }

    function atfontface() {
      var pos = position();
      var m = match(/^@font-face\s*/);
      if (!m) return;
      if (!open()) return error("@font-face missing '{'");
      var decls = comments();
      var decl;

      while (decl = declaration()) {
        decls.push(decl);
        decls = decls.concat(comments());
      }

      if (!close()) return error("@font-face missing '}'");
      return pos({
        type: 'font-face',
        declarations: decls
      });
    }

    var atimport = _compileAtrule('import');

    var atcharset = _compileAtrule('charset');

    var atnamespace = _compileAtrule('namespace');

    function _compileAtrule(name) {
      var re = new RegExp('^@' + name + '\\s*([^;]+);');
      return function () {
        var pos = position();
        var m = match(re);
        if (!m) return;
        var ret = {
          type: name
        };
        ret[name] = m[1].trim();
        return pos(ret);
      };
    }

    function atrule() {
      if (css[0] != '@') return;
      return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();
    }

    function rule() {
      var pos = position();
      var sel = selector();
      if (!sel) return error('selector missing');
      comments();
      return pos({
        type: 'rule',
        selectors: sel,
        declarations: declarations()
      });
    }

    return addParent(stylesheet());
  };

  function trim(str) {
    return str ? str.replace(/^\s+|\s+$/g, '') : '';
  }

  function addParent(obj, parent) {
    var isNode = obj && typeof obj.type === 'string';
    var childParent = isNode ? obj : parent;

    for (var k in obj) {
      var value = obj[k];

      if (Array.isArray(value)) {
        value.forEach(function (v) {
          addParent(v, childParent);
        });
      } else if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
        addParent(value, childParent);
      }
    }

    if (isNode) {
      Object.defineProperty(obj, 'parent', {
        configurable: true,
        writable: true,
        enumerable: false,
        value: parent || null
      });
    }

    return obj;
  }
},655,[],"node_modules/css/lib/parse/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var toSpace = _require(_dependencyMap[0], 'to-space-case');

  module.exports = toCamelCase;

  function toCamelCase(string) {
    return toSpace(string).replace(/\s(\w)/g, function (matches, letter) {
      return letter.toUpperCase();
    });
  }
},656,[657],"node_modules/to-camel-case/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var clean = _require(_dependencyMap[0], 'to-no-case');

  module.exports = toSpaceCase;

  function toSpaceCase(string) {
    return clean(string).replace(/[\W_]+(.|$)/g, function (matches, match) {
      return match ? ' ' + match : '';
    });
  }
},657,[658],"node_modules/to-space-case/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = toNoCase;
  var hasSpace = /\s/;
  var hasCamel = /[a-z][A-Z]/;
  var hasSeparator = /[\W_]/;

  function toNoCase(string) {
    if (hasSpace.test(string)) return string.toLowerCase();
    if (hasSeparator.test(string)) string = unseparate(string);
    if (hasCamel.test(string)) string = uncamelize(string);
    return string.toLowerCase();
  }

  var separatorSplitter = /[\W_]+(.|$)/g;

  function unseparate(string) {
    return string.replace(separatorSplitter, function (m, next) {
      return next ? ' ' + next : '';
    });
  }

  var camelSplitter = /(.)([A-Z]+)/g;

  function uncamelize(string) {
    return string.replace(camelSplitter, function (m, previous, uppers) {
      return previous + ' ' + uppers.toLowerCase().split('').join(' ');
    });
  }
},658,[],"node_modules/to-no-case/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var FUNC_ERROR_TEXT = 'Expected a function';
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var INFINITY = 1 / 0;
  var funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      symbolTag = '[object Symbol]';
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reEscapeChar = /\\(\\)?/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;
  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function isHostObject(value) {
    var result = false;

    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }

    return result;
  }

  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;
  var coreJsData = root['__core-js_shared__'];

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var _Symbol = root.Symbol,
      splice = arrayProto.splice;
  var Map = getNative(root, 'Map'),
      nativeCreate = getNative(Object, 'create');
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function listCacheClear() {
    this.__data__ = [];
  }

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    return true;
  }

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  function baseGet(object, path) {
    path = isKey(path, object) ? [path] : castPath(path);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  function castPath(value) {
    return isArray(value) ? value : stringToPath(value);
  }

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }

    var type = typeof value === "undefined" ? "undefined" : _typeof(value);

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  function isKeyable(value) {
    var type = typeof value === "undefined" ? "undefined" : _typeof(value);
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  var stringToPath = memoize(function (string) {
    string = toString(string);
    var result = [];

    if (reLeadingDot.test(string)) {
      result.push('');
    }

    string.replace(rePropName, function (match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };

    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  var isArray = Array.isArray;

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isObject(value) {
    var type = typeof value === "undefined" ? "undefined" : _typeof(value);
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && (typeof value === "undefined" ? "undefined" : _typeof(value)) == 'object';
  }

  function isSymbol(value) {
    return (typeof value === "undefined" ? "undefined" : _typeof(value)) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  module.exports = get;
},659,[],"node_modules/lodash.get/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var FUNC_ERROR_TEXT = 'Expected a function';
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991;
  var funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      symbolTag = '[object Symbol]';
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reEscapeChar = /\\(\\)?/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;
  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function isHostObject(value) {
    var result = false;

    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }

    return result;
  }

  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;
  var coreJsData = root['__core-js_shared__'];

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var _Symbol = root.Symbol,
      splice = arrayProto.splice;
  var Map = getNative(root, 'Map'),
      nativeCreate = getNative(Object, 'create');
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function listCacheClear() {
    this.__data__ = [];
  }

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    return true;
  }

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      object[key] = value;
    }
  }

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
      return object;
    }

    path = isKey(path, object) ? [path] : castPath(path);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey(path[index]),
          newValue = value;

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;

        if (newValue === undefined) {
          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }

      assignValue(nested, key, newValue);
      nested = nested[key];
    }

    return object;
  }

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  function castPath(value) {
    return isArray(value) ? value : stringToPath(value);
  }

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }

    var type = typeof value === "undefined" ? "undefined" : _typeof(value);

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  function isKeyable(value) {
    var type = typeof value === "undefined" ? "undefined" : _typeof(value);
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  var stringToPath = memoize(function (string) {
    string = toString(string);
    var result = [];

    if (reLeadingDot.test(string)) {
      result.push('');
    }

    string.replace(rePropName, function (match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };

    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  var isArray = Array.isArray;

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isObject(value) {
    var type = typeof value === "undefined" ? "undefined" : _typeof(value);
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && (typeof value === "undefined" ? "undefined" : _typeof(value)) == 'object';
  }

  function isSymbol(value) {
    return (typeof value === "undefined" ? "undefined" : _typeof(value)) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  function set(object, path, value) {
    return object == null ? object : baseSet(object, path, value);
  }

  module.exports = set;
},660,[],"node_modules/lodash.set/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.handleTags = undefined;

  var _defineProperty = _require(_dependencyMap[0], 'babel-runtime/core-js/object/define-property');

  var _defineProperty2 = _interopRequireDefault(_defineProperty);

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        (0, _defineProperty2.default)(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Utils = function () {
    function Utils() {
      _classCallCheck(this, Utils);
    }

    _createClass(Utils, null, [{
      key: 'arrayContains',
      value: function arrayContains(value, arr) {
        for (var i = 0; i < arr.length; i++) {
          if (value === arr[i]) {
            return true;
          }
        }

        return false;
      }
    }, {
      key: 'clean',
      value: function clean(string) {
        return string.replace(/\r?\n|\r/g, '');
      }
    }, {
      key: 'contains',
      value: function contains(string, needle) {
        var search = string.match(needle);
        return search && search.length > 0;
      }
    }]);

    return Utils;
  }();

  exports.default = Utils;

  var handleTags = exports.handleTags = function handleTags(strings) {
    var result = '';

    for (var i = 0; i < strings.length; i++) {
      result += strings[i];

      if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {
        result += arguments.length <= i + 1 ? undefined : arguments[i + 1];
      }
    }

    return result;
  };
},661,[662],"node_modules/react-native-css/build/utils.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "default": _require(_dependencyMap[0], "core-js/library/fn/object/define-property"),
    __esModule: true
  };
},662,[663],"node_modules/babel-runtime/core-js/object/define-property.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  _require(_dependencyMap[0], '../../modules/es6.object.define-property');

  var $Object = _require(_dependencyMap[1], '../../modules/_core').Object;

  module.exports = function defineProperty(it, key, desc) {
    return $Object.defineProperty(it, key, desc);
  };
},663,[664,617],"node_modules/core-js/library/fn/object/define-property.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var $export = _require(_dependencyMap[0], './_export');

  $export($export.S + $export.F * !_require(_dependencyMap[1], './_descriptors'), 'Object', {
    defineProperty: _require(_dependencyMap[2], './_object-dp').f
  });
},664,[615,625,621],"node_modules/core-js/library/modules/es6.object.define-property.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/product-list/product-list-container.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactRedux = _require(_dependencyMap[2], "react-redux");

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _propTypes = _require(_dependencyMap[4], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _actions = _require(_dependencyMap[5], "../../../state/screen/product/actions");

    var _productList = _require(_dependencyMap[6], "./product-list");

    var _productList2 = _interopRequireDefault(_productList);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Container: {
            displayName: "Container"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/hayden/Applications/HelloWorldProject/src/screen/home/product-list/product-list-container.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var Container = _wrapComponent("Container")(function (_Component) {
        _inherits(Container, _Component);

        function Container(props) {
            _classCallCheck(this, Container);

            var _this = _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props));

            _this.goToProductDetail = _this.goToProductDetail.bind(_this);
            return _this;
        }

        _createClass(Container, [{
            key: "goToProductDetail",
            value: function goToProductDetail(product) {
                this.props.propsNavigatorObject.push({
                    screen: 'screen.Product.Detail',
                    animationType: 'slide-up',
                    title: product.title,
                    backButtonTitle: ''
                });
                this.props.productSelect(product);
            }
        }, {
            key: "render",
            value: function render() {
                return _react3.default.createElement(_productList2.default, _extends({}, this.props, {
                    products: this.props.products,
                    onProductPress: this.goToProductDetail,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 26
                    }
                }));
            }
        }]);

        return Container;
    }(_react2.Component));

    var stateToProps = function stateToProps(state) {
        return {
            productItem: state.product.products
        };
    };

    var dispatchToProps = function dispatchToProps(dispatch) {
        return {
            productSelect: function productSelect(product) {
                return dispatch((0, _actions.productSelectAction)(product));
            }
        };
    };

    var ProductListContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = ProductListContainer;
},665,[13,219,23,65,25,538,666],"src/screen/home/product-list/product-list-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/product-list/product-list.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _imageCarouselContainer = _require(_dependencyMap[3], "../image-carousel/image-carousel-container");

    var _imageCarouselContainer2 = _interopRequireDefault(_imageCarouselContainer);

    var _card = _require(_dependencyMap[4], "../../../component/common/card/card");

    var _card2 = _interopRequireDefault(_card);

    var _styles = _require(_dependencyMap[5], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var ProductList = function ProductList(_ref) {
        var products = _ref.products,
            onProductPress = _ref.onProductPress;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 9
                }
            },
            _react2.default.createElement(_reactNative.FlatList, {
                data: products,
                ListHeaderComponent: function ListHeaderComponent() {
                    return _react2.default.createElement(_imageCarouselContainer2.default, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 12
                        }
                    });
                },
                renderItem: function renderItem(_ref2) {
                    var item = _ref2.item;
                    return _react2.default.createElement(_card2.default, {
                        item: item,
                        key: item.id,
                        name: item.user.name,
                        address: item.user.address,
                        onPressCallback: function onPressCallback() {
                            return onProductPress(item);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 14
                        }
                    });
                },
                keyExtractor: function keyExtractor(item) {
                    return item.id;
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 10
                }
            })
        );
    };

    ProductList.propTypes = {
        products: _propTypes2.default.arrayOf(_propTypes2.default.any),
        onProductPress: _propTypes2.default.func
    };
    ProductList.defaultProps = {
        products: [{}],
        onProductPress: function onProductPress() {}
    };
    exports.default = ProductList;
},666,[13,25,65,667,672,779],"src/screen/home/product-list/product-list.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/image-carousel/image-carousel-container.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactRedux = _require(_dependencyMap[1], "react-redux");

    var _imageCarousel = _require(_dependencyMap[2], "./image-carousel");

    var _imageCarousel2 = _interopRequireDefault(_imageCarousel);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Container = function Container(props) {
        return _react2.default.createElement(_imageCarousel2.default, _extends({}, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 5
            }
        }));
    };

    var stateToProps = function stateToProps(state) {
        return {
            productItem: state.product.products
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var ImageCarouselContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = ImageCarouselContainer;
},667,[13,23,668],"src/screen/home/image-carousel/image-carousel-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/image-carousel/image-carousel.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNativeSwiper = _require(_dependencyMap[2], "react-native-swiper");

    var _reactNativeSwiper2 = _interopRequireDefault(_reactNativeSwiper);

    var _styles = _require(_dependencyMap[3], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var ImageCarousel = function ImageCarousel() {
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 7
                }
            },
            _react2.default.createElement(
                _reactNativeSwiper2.default,
                {
                    style: _styles2.default.wrapper,
                    loop: false,
                    index: 0,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 8
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _styles2.default.slider,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 9
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _styles2.default.text,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 10
                            }
                        },
                        "Beautiful"
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _styles2.default.slider,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 12
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            style: _styles2.default.text,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 13
                            }
                        },
                        "And simple"
                    )
                )
            )
        );
    };

    exports.default = ImageCarousel;
},668,[13,65,669,671],"src/screen/home/image-carousel/image-carousel.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _src = _require(_dependencyMap[0], "./src/");

  var _src2 = _interopRequireDefault(_src);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  module.exports = _src2.default;
},669,[670],"node_modules/react-native-swiper/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-swiper/src/index.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    _component: {}
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-swiper/src/index.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var styles = {
    container: {
      backgroundColor: 'transparent',
      position: 'relative',
      flex: 1
    },
    wrapperIOS: {
      backgroundColor: 'transparent'
    },
    wrapperAndroid: {
      backgroundColor: 'transparent',
      flex: 1
    },
    slide: {
      backgroundColor: 'transparent'
    },
    pagination_x: {
      position: 'absolute',
      bottom: 25,
      left: 0,
      right: 0,
      flexDirection: 'row',
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'transparent'
    },
    pagination_y: {
      position: 'absolute',
      right: 15,
      top: 0,
      bottom: 0,
      flexDirection: 'column',
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'transparent'
    },
    title: {
      height: 30,
      justifyContent: 'center',
      position: 'absolute',
      paddingLeft: 10,
      bottom: -30,
      left: 0,
      flexWrap: 'nowrap',
      width: 250,
      backgroundColor: 'transparent'
    },
    buttonWrapper: {
      backgroundColor: 'transparent',
      flexDirection: 'row',
      position: 'absolute',
      top: 0,
      left: 0,
      flex: 1,
      paddingHorizontal: 10,
      paddingVertical: 10,
      justifyContent: 'space-between',
      alignItems: 'center'
    },
    buttonText: {
      fontSize: 50,
      color: '#007aff',
      fontFamily: 'Arial'
    }
  };

  var _component = _wrapComponent("_component")((_temp2 = _class = function (_Component) {
    _inherits(_class, _Component);

    function _class() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this.initState(_this.props), _this.initialRender = true, _this.autoplayTimer = null, _this.loopJumpTimer = null, _this.onLayout = function (event) {
        var _event$nativeEvent$la = event.nativeEvent.layout,
            width = _event$nativeEvent$la.width,
            height = _event$nativeEvent$la.height;
        var offset = _this.internals.offset = {};
        var state = {
          width: width,
          height: height
        };

        if (_this.state.total > 1) {
          var setup = _this.state.index;

          if (_this.props.loop) {
            setup++;
          }

          offset[_this.state.dir] = _this.state.dir === 'y' ? height * setup : width * setup;
        }

        if (!_this.state.offset || width !== _this.state.width || height !== _this.state.height) {
          state.offset = offset;
        }

        if (_reactNative.Platform.OS === 'ios') {
          if (_this.initialRender && _this.state.total > 1) {
            _this.scrollView.scrollTo(_extends({}, offset, {
              animated: false
            }));

            _this.initialRender = false;
          }
        }

        _this.setState(state);
      }, _this.loopJump = function () {
        if (!_this.state.loopJump) return;
        var i = _this.state.index + (_this.props.loop ? 1 : 0);
        var scrollView = _this.scrollView;
        _this.loopJumpTimer = setTimeout(function () {
          return scrollView.setPageWithoutAnimation && scrollView.setPageWithoutAnimation(i);
        }, 50);
      }, _this.autoplay = function () {
        if (!Array.isArray(_this.props.children) || !_this.props.autoplay || _this.internals.isScrolling || _this.state.autoplayEnd) return;
        _this.autoplayTimer && clearTimeout(_this.autoplayTimer);
        _this.autoplayTimer = setTimeout(function () {
          if (!_this.props.loop && (_this.props.autoplayDirection ? _this.state.index === _this.state.total - 1 : _this.state.index === 0)) return _this.setState({
            autoplayEnd: true
          });

          _this.scrollBy(_this.props.autoplayDirection ? 1 : -1);
        }, _this.props.autoplayTimeout * 1000);
      }, _this.onScrollBegin = function (e) {
        _this.internals.isScrolling = true;
        _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e, _this.fullState(), _this);
      }, _this.onScrollEnd = function (e) {
        _this.internals.isScrolling = false;

        if (!e.nativeEvent.contentOffset) {
          if (_this.state.dir === 'x') {
            e.nativeEvent.contentOffset = {
              x: e.nativeEvent.position * _this.state.width
            };
          } else {
            e.nativeEvent.contentOffset = {
              y: e.nativeEvent.position * _this.state.height
            };
          }
        }

        _this.updateIndex(e.nativeEvent.contentOffset, _this.state.dir, function () {
          _this.autoplay();

          _this.loopJump();

          _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e, _this.fullState(), _this);
        });
      }, _this.onScrollEndDrag = function (e) {
        var contentOffset = e.nativeEvent.contentOffset;
        var _this$props = _this.props,
            horizontal = _this$props.horizontal,
            children = _this$props.children;
        var index = _this.state.index;
        var offset = _this.internals.offset;
        var previousOffset = horizontal ? offset.x : offset.y;
        var newOffset = horizontal ? contentOffset.x : contentOffset.y;

        if (previousOffset === newOffset && (index === 0 || index === children.length - 1)) {
          _this.internals.isScrolling = false;
        }
      }, _this.updateIndex = function (offset, dir, cb) {
        var state = _this.state;
        var index = state.index;
        var diff = offset[dir] - _this.internals.offset[dir];
        var step = dir === 'x' ? state.width : state.height;
        var loopJump = false;
        if (!diff) return;
        index = parseInt(index + Math.round(diff / step));

        if (_this.props.loop) {
          if (index <= -1) {
            index = state.total - 1;
            offset[dir] = step * state.total;
            loopJump = true;
          } else if (index >= state.total) {
            index = 0;
            offset[dir] = step;
            loopJump = true;
          }
        }

        var newState = {};
        newState.index = index;
        newState.loopJump = loopJump;
        _this.internals.offset = offset;

        if (loopJump) {
          if (offset[dir] === _this.internals.offset[dir]) {
            newState.offset = {
              x: 0,
              y: 0
            };
            newState.offset[dir] = offset[dir] + 1;

            _this.setState(newState, function () {
              _this.setState({
                offset: offset
              }, cb);
            });
          } else {
            newState.offset = offset;

            _this.setState(newState, cb);
          }
        } else {
          _this.setState(newState, cb);
        }
      }, _this.scrollBy = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        if (_this.internals.isScrolling || _this.state.total < 2) return;
        var state = _this.state;
        var diff = (_this.props.loop ? 1 : 0) + index + _this.state.index;
        var x = 0;
        var y = 0;
        if (state.dir === 'x') x = diff * state.width;
        if (state.dir === 'y') y = diff * state.height;

        if (_reactNative.Platform.OS !== 'ios') {
          _this.scrollView && _this.scrollView[animated ? 'setPage' : 'setPageWithoutAnimation'](diff);
        } else {
          _this.scrollView && _this.scrollView.scrollTo({
            x: x,
            y: y,
            animated: animated
          });
        }

        _this.internals.isScrolling = true;

        _this.setState({
          autoplayEnd: false
        });

        if (!animated || _reactNative.Platform.OS !== 'ios') {
          setImmediate(function () {
            _this.onScrollEnd({
              nativeEvent: {
                position: diff
              }
            });
          });
        }
      }, _this.scrollViewPropOverrides = function () {
        var props = _this.props;
        var overrides = {};

        for (var prop in props) {
          if (typeof props[prop] === 'function' && prop !== 'onMomentumScrollEnd' && prop !== 'renderPagination' && prop !== 'onScrollBeginDrag') {
            (function () {
              var originResponder = props[prop];

              overrides[prop] = function (e) {
                return originResponder(e, _this.fullState(), _this);
              };
            })();
          }
        }

        return overrides;
      }, _this.renderPagination = function () {
        if (_this.state.total <= 1) return null;
        var dots = [];

        var ActiveDot = _this.props.activeDot || _react3.default.createElement(_reactNative.View, {
          style: [{
            backgroundColor: _this.props.activeDotColor || '#007aff',
            width: 8,
            height: 8,
            borderRadius: 4,
            marginLeft: 3,
            marginRight: 3,
            marginTop: 3,
            marginBottom: 3
          }, _this.props.activeDotStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 527
          }
        });

        var Dot = _this.props.dot || _react3.default.createElement(_reactNative.View, {
          style: [{
            backgroundColor: _this.props.dotColor || 'rgba(0,0,0,.2)',
            width: 8,
            height: 8,
            borderRadius: 4,
            marginLeft: 3,
            marginRight: 3,
            marginTop: 3,
            marginBottom: 3
          }, _this.props.dotStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 537
          }
        });

        for (var i = 0; i < _this.state.total; i++) {
          dots.push(i === _this.state.index ? _react3.default.cloneElement(ActiveDot, {
            key: i
          }) : _react3.default.cloneElement(Dot, {
            key: i
          }));
        }

        return _react3.default.createElement(
          _reactNative.View,
          {
            pointerEvents: "none",
            style: [styles['pagination_' + _this.state.dir], _this.props.paginationStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 555
            }
          },
          dots
        );
      }, _this.renderTitle = function () {
        var child = _this.props.children[_this.state.index];
        var title = child && child.props && child.props.title;
        return title ? _react3.default.createElement(
          _reactNative.View,
          {
            style: styles.title,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 565
            }
          },
          _this.props.children[_this.state.index].props.title
        ) : null;
      }, _this.renderNextButton = function () {
        var button = null;

        if (_this.props.loop || _this.state.index !== _this.state.total - 1) {
          button = _this.props.nextButton || _react3.default.createElement(
            _reactNative.Text,
            {
              style: styles.buttonText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 576
              }
            },
            "\u203A"
          );
        }

        return _react3.default.createElement(
          _reactNative.TouchableOpacity,
          {
            onPress: function onPress() {
              return button !== null && _this.scrollBy(1);
            },
            disabled: _this.props.disableNextButton,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 580
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 584
              }
            },
            button
          )
        );
      }, _this.renderPrevButton = function () {
        var button = null;

        if (_this.props.loop || _this.state.index !== 0) {
          button = _this.props.prevButton || _react3.default.createElement(
            _reactNative.Text,
            {
              style: styles.buttonText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 595
              }
            },
            "\u2039"
          );
        }

        return _react3.default.createElement(
          _reactNative.TouchableOpacity,
          {
            onPress: function onPress() {
              return button !== null && _this.scrollBy(-1);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 599
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 600
              }
            },
            button
          )
        );
      }, _this.renderButtons = function () {
        return _react3.default.createElement(
          _reactNative.View,
          {
            pointerEvents: "box-none",
            style: [styles.buttonWrapper, {
              width: _this.state.width,
              height: _this.state.height
            }, _this.props.buttonWrapperStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 609
            }
          },
          _this.renderPrevButton(),
          _this.renderNextButton()
        );
      }, _this.refScrollView = function (view) {
        _this.scrollView = view;
      }, _this.renderScrollView = function (pages) {
        if (_reactNative.Platform.OS === 'ios') {
          return _react3.default.createElement(
            _reactNative.ScrollView,
            _extends({
              ref: _this.refScrollView
            }, _this.props, _this.scrollViewPropOverrides(), {
              contentContainerStyle: [styles.wrapperIOS, _this.props.style],
              contentOffset: _this.state.offset,
              onScrollBeginDrag: _this.onScrollBegin,
              onMomentumScrollEnd: _this.onScrollEnd,
              onScrollEndDrag: _this.onScrollEndDrag,
              style: _this.props.scrollViewStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 626
              }
            }),
            pages
          );
        }

        return _react3.default.createElement(
          _reactNative.ViewPagerAndroid,
          _extends({
            ref: _this.refScrollView
          }, _this.props, {
            initialPage: _this.props.loop ? _this.state.index + 1 : _this.state.index,
            onPageSelected: _this.onScrollEnd,
            key: pages.length,
            style: [styles.wrapperAndroid, _this.props.style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 640
            }
          }),
          pages
        );
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(_class, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (!nextProps.autoplay && this.autoplayTimer) clearTimeout(this.autoplayTimer);
        this.setState(this.initState(nextProps, this.props.index !== nextProps.index));
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.autoplay();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.autoplayTimer && clearTimeout(this.autoplayTimer);
        this.loopJumpTimer && clearTimeout(this.loopJumpTimer);
      }
    }, {
      key: "componentWillUpdate",
      value: function componentWillUpdate(nextProps, nextState) {
        if (this.state.index !== nextState.index) this.props.onIndexChanged(nextState.index);
      }
    }, {
      key: "initState",
      value: function initState(props) {
        var updateIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var state = this.state || {
          width: 0,
          height: 0,
          offset: {
            x: 0,
            y: 0
          }
        };
        var initState = {
          autoplayEnd: false,
          loopJump: false,
          offset: {}
        };
        initState.total = props.children ? props.children.length || 1 : 0;

        if (state.total === initState.total && !updateIndex) {
          initState.index = state.index;
        } else {
          initState.index = initState.total > 1 ? Math.min(props.index, initState.total - 1) : 0;
        }

        var _Dimensions$get = _reactNative.Dimensions.get('window'),
            width = _Dimensions$get.width,
            height = _Dimensions$get.height;

        initState.dir = props.horizontal === false ? 'y' : 'x';

        if (props.width) {
          initState.width = props.width;
        } else if (this.state && this.state.width) {
          initState.width = this.state.width;
        } else {
          initState.width = width;
        }

        if (props.height) {
          initState.height = props.height;
        } else if (this.state && this.state.height) {
          initState.height = this.state.height;
        } else {
          initState.height = height;
        }

        initState.offset[initState.dir] = initState.dir === 'y' ? height * props.index : width * props.index;
        this.internals = _extends({}, this.internals, {
          isScrolling: false
        });
        return initState;
      }
    }, {
      key: "fullState",
      value: function fullState() {
        return _extends({}, this.state, this.internals);
      }
    }, {
      key: "render",
      value: function render() {
        var state = this.state;
        var props = this.props;
        var _state = this.state,
            index = _state.index,
            total = _state.total,
            width = _state.width,
            height = _state.height;
        var _props = this.props,
            children = _props.children,
            containerStyle = _props.containerStyle,
            loop = _props.loop,
            loadMinimal = _props.loadMinimal,
            loadMinimalSize = _props.loadMinimalSize,
            loadMinimalLoader = _props.loadMinimalLoader,
            renderPagination = _props.renderPagination,
            showsButtons = _props.showsButtons,
            showsPagination = _props.showsPagination;
        var loopVal = loop ? 1 : 0;
        var pages = [];
        var pageStyle = [{
          width: width,
          height: height
        }, styles.slide];
        var pageStyleLoading = {
          width: width,
          height: height,
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center'
        };

        if (total > 1) {
          pages = Object.keys(children);

          if (loop) {
            pages.unshift(total - 1 + '');
            pages.push('0');
          }

          pages = pages.map(function (page, i) {
            if (loadMinimal) {
              if (i >= index + loopVal - loadMinimalSize && i <= index + loopVal + loadMinimalSize) {
                return _react3.default.createElement(
                  _reactNative.View,
                  {
                    style: pageStyle,
                    key: i,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 702
                    }
                  },
                  children[page]
                );
              } else {
                return _react3.default.createElement(
                  _reactNative.View,
                  {
                    style: pageStyleLoading,
                    key: i,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 705
                    }
                  },
                  loadMinimalLoader ? loadMinimalLoader : _react3.default.createElement(_reactNative.ActivityIndicator, {
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 706
                    }
                  })
                );
              }
            } else {
              return _react3.default.createElement(
                _reactNative.View,
                {
                  style: pageStyle,
                  key: i,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 711
                  }
                },
                children[page]
              );
            }
          });
        } else {
          pages = _react3.default.createElement(
            _reactNative.View,
            {
              style: pageStyle,
              key: 0,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 715
              }
            },
            children
          );
        }

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: [styles.container, containerStyle],
            onLayout: this.onLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 719
            }
          },
          this.renderScrollView(pages),
          showsPagination && (renderPagination ? renderPagination(index, total, this) : this.renderPagination()),
          this.renderTitle(),
          showsButtons && this.renderButtons()
        );
      }
    }]);

    return _class;
  }(_react2.Component), _class.propTypes = {
    horizontal: _propTypes2.default.bool,
    children: _propTypes2.default.node.isRequired,
    containerStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
    scrollViewStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
    pagingEnabled: _propTypes2.default.bool,
    showsHorizontalScrollIndicator: _propTypes2.default.bool,
    showsVerticalScrollIndicator: _propTypes2.default.bool,
    bounces: _propTypes2.default.bool,
    scrollsToTop: _propTypes2.default.bool,
    removeClippedSubviews: _propTypes2.default.bool,
    automaticallyAdjustContentInsets: _propTypes2.default.bool,
    showsPagination: _propTypes2.default.bool,
    showsButtons: _propTypes2.default.bool,
    disableNextButton: _propTypes2.default.bool,
    loadMinimal: _propTypes2.default.bool,
    loadMinimalSize: _propTypes2.default.number,
    loadMinimalLoader: _propTypes2.default.element,
    loop: _propTypes2.default.bool,
    autoplay: _propTypes2.default.bool,
    autoplayTimeout: _propTypes2.default.number,
    autoplayDirection: _propTypes2.default.bool,
    index: _propTypes2.default.number,
    renderPagination: _propTypes2.default.func,
    dotStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
    activeDotStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number]),
    dotColor: _propTypes2.default.string,
    activeDotColor: _propTypes2.default.string,
    onIndexChanged: _propTypes2.default.func
  }, _class.defaultProps = {
    horizontal: true,
    pagingEnabled: true,
    showsHorizontalScrollIndicator: false,
    showsVerticalScrollIndicator: false,
    bounces: false,
    scrollsToTop: false,
    removeClippedSubviews: true,
    automaticallyAdjustContentInsets: false,
    showsPagination: true,
    showsButtons: false,
    disableNextButton: false,
    loop: true,
    loadMinimal: false,
    loadMinimalSize: 1,
    autoplay: false,
    autoplayTimeout: 2.5,
    autoplayDirection: true,
    index: 0,
    onIndexChanged: function onIndexChanged() {
      return null;
    }
  }, _temp2));

  exports.default = _component;
},670,[13,219,25,65],"node_modules/react-native-swiper/src/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        background-color: white;\n        height: 150;\n        border-bottom: 1px solid grey;\n    }\n    slider: {\n        height: 100;\n        width: 100;\n        flex: 1;\n        justify-content: center;\n        align-items: center;\n        background-color: red;\n    }\n    wrapper: {\n\n    }\n\n    text: {\n        color: #fff,\n        font-size: 30,\n        font-weight: bold,\n      }\n    "], ["\n    container {\n        background-color: white;\n        height: 150;\n        border-bottom: 1px solid grey;\n    }\n    slider: {\n        height: 100;\n        width: 100;\n        flex: 1;\n        justify-content: center;\n        align-items: center;\n        background-color: red;\n    }\n    wrapper: {\n\n    }\n\n    text: {\n        color: #fff,\n        font-size: 30,\n        font-weight: bold,\n      }\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject);
    exports.default = styles;
},671,[601],"src/screen/home/image-carousel/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/component/common/card/card.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _reactNativeElements = _require(_dependencyMap[3], "react-native-elements");

    var _styles = _require(_dependencyMap[4], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var images = [{
        key: '1',
        title: 'Image 1',
        value: 'Test'
    }, {
        key: '2',
        title: 'Image 2',
        value: 'Test'
    }];

    var Card = function Card(_ref) {
        var item = _ref.item,
            name = _ref.name,
            address = _ref.address,
            onPressCallback = _ref.onPressCallback;
        return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
                style: _styles2.default.container,
                onPress: function onPress() {
                    onPressCallback(item);
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 13
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                {
                    style: _styles2.default.container,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 19
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _styles2.default.userContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 20
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _styles2.default.avatar,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 21
                            }
                        },
                        _react2.default.createElement(_reactNativeElements.Avatar, {
                            small: true,
                            rounded: true,
                            activeOpacity: 0.2,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 22
                            }
                        })
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        {
                            style: _styles2.default.name,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 24
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 25
                                }
                            },
                            name
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 26
                                }
                            },
                            address
                        )
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _styles2.default.listContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 29
                        }
                    },
                    images.map(function (img) {
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _styles2.default.imgItem,
                                key: img.key,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 31
                                }
                            },
                            img.title
                        );
                    })
                ),
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        style: _styles2.default.title,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 36
                        }
                    },
                    item.title
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    {
                        style: _styles2.default.listContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 37
                        }
                    },
                    item.tags.map(function (tag) {
                        return _react2.default.createElement(
                            _reactNative.Text,
                            {
                                style: _styles2.default.tagItem,
                                key: tag.id,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 39
                                }
                            },
                            tag.name
                        );
                    })
                ),
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        style: _styles2.default.price,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 44
                        }
                    },
                    item.price
                )
            )
        );
    };

    Card.propTypes = {
        title: _propTypes2.default.string,
        price: _propTypes2.default.string,
        name: _propTypes2.default.string,
        address: _propTypes2.default.string,
        tags: _propTypes2.default.arrayOf(_propTypes2.default.object)
    };
    Card.defaultProps = {
        title: 'title',
        price: '0.00',
        name: 'name',
        address: 'address',
        tags: [{}]
    };
    exports.default = Card;
},672,[13,25,65,673,778],"src/component/common/card/card.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Header = exports.Rating = exports.Avatar = exports.Slider = exports.Tile = exports.normalize = exports.registerCustomIconType = exports.getIconType = exports.colors = exports.Icon = exports.SearchBar = exports.CheckBox = exports.Divider = exports.Text = exports.SocialIcon = exports.PricingCard = exports.ListItem = exports.List = exports.FormValidationMessage = exports.FormLabel = exports.FormInput = exports.Card = exports.ButtonGroup = exports.Button = exports.Badge = undefined;

  var _Button = _require(_dependencyMap[0], "./buttons/Button");

  var _Button2 = _interopRequireDefault(_Button);

  var _Icon = _require(_dependencyMap[1], "./icons/Icon");

  var _Icon2 = _interopRequireDefault(_Icon);

  var _List = _require(_dependencyMap[2], "./list/List");

  var _List2 = _interopRequireDefault(_List);

  var _ListItem = _require(_dependencyMap[3], "./list/ListItem");

  var _ListItem2 = _interopRequireDefault(_ListItem);

  var _SocialIcon = _require(_dependencyMap[4], "./social/SocialIcon");

  var _SocialIcon2 = _interopRequireDefault(_SocialIcon);

  var _badge = _require(_dependencyMap[5], "./badge/badge");

  var _badge2 = _interopRequireDefault(_badge);

  var _CheckBox = _require(_dependencyMap[6], "./checkbox/CheckBox");

  var _CheckBox2 = _interopRequireDefault(_CheckBox);

  var _Divider = _require(_dependencyMap[7], "./divider/Divider");

  var _Divider2 = _interopRequireDefault(_Divider);

  var _Slider = _require(_dependencyMap[8], "./slider/Slider");

  var _Slider2 = _interopRequireDefault(_Slider);

  var _ButtonGroup = _require(_dependencyMap[9], "./buttons/ButtonGroup");

  var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

  var _Card = _require(_dependencyMap[10], "./card/Card");

  var _Card2 = _interopRequireDefault(_Card);

  var _Tile = _require(_dependencyMap[11], "./tile/Tile");

  var _Tile2 = _interopRequireDefault(_Tile);

  var _Avatar = _require(_dependencyMap[12], "./avatar/Avatar");

  var _Avatar2 = _interopRequireDefault(_Avatar);

  var _Rating = _require(_dependencyMap[13], "./rating/Rating");

  var _Rating2 = _interopRequireDefault(_Rating);

  var _Header = _require(_dependencyMap[14], "./header/Header");

  var _Header2 = _interopRequireDefault(_Header);

  var _PricingCard = _require(_dependencyMap[15], "./pricing/PricingCard");

  var _PricingCard2 = _interopRequireDefault(_PricingCard);

  var _FormInput = _require(_dependencyMap[16], "./form/FormInput");

  var _FormInput2 = _interopRequireDefault(_FormInput);

  var _FormLabel = _require(_dependencyMap[17], "./form/FormLabel");

  var _FormLabel2 = _interopRequireDefault(_FormLabel);

  var _FormValidationMessage = _require(_dependencyMap[18], "./form/FormValidationMessage");

  var _FormValidationMessage2 = _interopRequireDefault(_FormValidationMessage);

  var _Search = _require(_dependencyMap[19], "./input/Search");

  var _Search2 = _interopRequireDefault(_Search);

  var _Text = _require(_dependencyMap[20], "./text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _colors = _require(_dependencyMap[21], "./config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _getIconType = _require(_dependencyMap[22], "./helpers/getIconType");

  var _getIconType2 = _interopRequireDefault(_getIconType);

  var _normalizeText = _require(_dependencyMap[23], "./helpers/normalizeText");

  var _normalizeText2 = _interopRequireDefault(_normalizeText);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.Badge = _badge2.default;
  exports.Button = _Button2.default;
  exports.ButtonGroup = _ButtonGroup2.default;
  exports.Card = _Card2.default;
  exports.FormInput = _FormInput2.default;
  exports.FormLabel = _FormLabel2.default;
  exports.FormValidationMessage = _FormValidationMessage2.default;
  exports.List = _List2.default;
  exports.ListItem = _ListItem2.default;
  exports.PricingCard = _PricingCard2.default;
  exports.SocialIcon = _SocialIcon2.default;
  exports.Text = _Text2.default;
  exports.Divider = _Divider2.default;
  exports.CheckBox = _CheckBox2.default;
  exports.SearchBar = _Search2.default;
  exports.Icon = _Icon2.default;
  exports.colors = _colors2.default;
  exports.getIconType = _getIconType2.default;
  exports.registerCustomIconType = _getIconType.registerCustomIconType;
  exports.normalize = _normalizeText2.default;
  exports.Tile = _Tile2.default;
  exports.Slider = _Slider2.default;
  exports.Avatar = _Avatar2.default;
  exports.Rating = _Rating2.default;
  exports.Header = _Header2.default;
},673,[674,748,749,750,753,752,754,755,756,757,758,760,751,762,768,773,774,775,776,777,676,675,726,678],"node_modules/react-native-elements/src/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/buttons/Button.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _colors = _require(_dependencyMap[3], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _Text = _require(_dependencyMap[4], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _MaterialIcons = _require(_dependencyMap[5], "react-native-vector-icons/MaterialIcons");

  var _MaterialIcons2 = _interopRequireDefault(_MaterialIcons);

  var _getIconType = _require(_dependencyMap[6], "../helpers/getIconType");

  var _getIconType2 = _interopRequireDefault(_getIconType);

  var _normalizeText = _require(_dependencyMap[7], "../helpers/normalizeText");

  var _normalizeText2 = _interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[8], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var log = function log() {
    console.log('please attach method to this component');
  };

  var Button = function Button(props) {
    var disabled = props.disabled,
        loading = props.loading,
        loadingRight = props.loadingRight,
        activityIndicatorStyle = props.activityIndicatorStyle,
        buttonStyle = props.buttonStyle,
        borderRadius = props.borderRadius,
        title = props.title,
        onPress = props.onPress,
        icon = props.icon,
        iconComponent = props.iconComponent,
        secondary = props.secondary,
        secondary2 = props.secondary2,
        secondary3 = props.secondary3,
        primary1 = props.primary1,
        primary2 = props.primary2,
        backgroundColor = props.backgroundColor,
        color = props.color,
        fontSize = props.fontSize,
        underlayColor = props.underlayColor,
        raised = props.raised,
        textStyle = props.textStyle,
        large = props.large,
        iconRight = props.iconRight,
        fontWeight = props.fontWeight,
        disabledStyle = props.disabledStyle,
        disabledTextStyle = props.disabledTextStyle,
        fontFamily = props.fontFamily,
        containerViewStyle = props.containerViewStyle,
        rounded = props.rounded,
        outline = props.outline,
        transparent = props.transparent,
        textNumberOfLines = props.textNumberOfLines,
        textEllipsizeMode = props.textEllipsizeMode,
        allowFontScaling = props.allowFontScaling,
        attributes = _objectWithoutProperties(props, ["disabled", "loading", "loadingRight", "activityIndicatorStyle", "buttonStyle", "borderRadius", "title", "onPress", "icon", "iconComponent", "secondary", "secondary2", "secondary3", "primary1", "primary2", "backgroundColor", "color", "fontSize", "underlayColor", "raised", "textStyle", "large", "iconRight", "fontWeight", "disabledStyle", "disabledTextStyle", "fontFamily", "containerViewStyle", "rounded", "outline", "transparent", "textNumberOfLines", "textEllipsizeMode", "allowFontScaling"]);

    var Component = props.Component,
        rightIcon = props.rightIcon,
        leftIcon = props.leftIcon;
    var leftIconElement = void 0;

    if (!leftIcon && icon) {
      leftIcon = icon;
    }

    if (leftIcon) {
      var Icon = void 0;

      if (iconComponent) {
        Icon = iconComponent;
      } else if (!leftIcon.type) {
        Icon = _MaterialIcons2.default;
      } else {
        Icon = (0, _getIconType2.default)(leftIcon.type);
      }

      leftIconElement = _react2.default.createElement(Icon, _extends({}, leftIcon, {
        color: leftIcon.color || 'white',
        size: leftIcon.size || (large ? 26 : 18),
        style: [styles.icon, leftIcon.style && leftIcon.style],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      }));
    }

    var rightIconElement = void 0;

    if (iconRight || rightIcon) {
      if (!rightIcon) {
        rightIcon = iconRight;
      }

      var _Icon = void 0;

      if (iconComponent) {
        _Icon = iconComponent;
      } else if (!rightIcon.type) {
        _Icon = _MaterialIcons2.default;
      } else {
        _Icon = (0, _getIconType2.default)(rightIcon.type);
      }

      rightIconElement = _react2.default.createElement(_Icon, _extends({}, rightIcon, {
        color: rightIcon.color || 'white',
        size: rightIcon.size || (large ? 26 : 18),
        style: [styles.iconRight, rightIcon.style && rightIcon.style],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 99
        }
      }));
    }

    var loadingElement = void 0;

    if (loading) {
      loadingElement = _react2.default.createElement(_reactNative.ActivityIndicator, {
        animating: true,
        style: [styles.activityIndicatorStyle, activityIndicatorStyle],
        color: color || 'white',
        size: large && 'large' || 'small',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 110
        }
      });
    }

    if (!Component && _reactNative.Platform.OS === 'ios') {
      Component = _reactNative.TouchableHighlight;
    }

    if (!Component && _reactNative.Platform.OS === 'android') {
      Component = _reactNative.TouchableNativeFeedback;
    }

    if (!Component) {
      Component = _reactNative.TouchableHighlight;
    }

    if (_reactNative.Platform.OS === 'android' && borderRadius && !attributes.background) {
      if (_reactNative.Platform.Version >= 21) {
        attributes.background = _reactNative.TouchableNativeFeedback.Ripple('ThemeAttrAndroid', true);
      } else {
        attributes.background = _reactNative.TouchableNativeFeedback.SelectableBackground();
      }
    }

    var baseFont = {
      color: textStyle && textStyle.color || color || stylesObject.text.color,
      size: textStyle && textStyle.fontSize || fontSize || !large && stylesObject.smallFont.fontSize || stylesObject.text.fontSize
    };
    var textOptions = {};

    if (textNumberOfLines) {
      textOptions.numberOfLines = textNumberOfLines;

      if (textEllipsizeMode) {
        textOptions.ellipsizeMode = textEllipsizeMode;
      }
    }

    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [styles.container, raised && styles.raised, containerViewStyle, borderRadius && {
          borderRadius: borderRadius
        }],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 157
        }
      },
      _react2.default.createElement(
        Component,
        _extends({}, attributes, {
          underlayColor: underlayColor || 'transparent',
          onPress: onPress || log,
          disabled: disabled || false,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 165
          }
        }),
        _react2.default.createElement(
          _reactNative.View,
          {
            pointerEvents: "box-only",
            style: [styles.button, secondary && {
              backgroundColor: _colors2.default.secondary
            }, secondary2 && {
              backgroundColor: _colors2.default.secondary2
            }, secondary3 && {
              backgroundColor: _colors2.default.secondary3
            }, primary1 && {
              backgroundColor: _colors2.default.primary1
            }, primary2 && {
              backgroundColor: _colors2.default.primary2
            }, backgroundColor && {
              backgroundColor: backgroundColor
            }, borderRadius && {
              borderRadius: borderRadius
            }, !large && styles.small, rounded && {
              borderRadius: baseFont.size * 3.8,
              paddingHorizontal: !large ? stylesObject.small.padding * 1.5 : stylesObject.button.padding * 1.5
            }, outline && {
              borderWidth: 1,
              backgroundColor: 'transparent',
              borderColor: baseFont.color
            }, transparent && {
              borderWidth: 0,
              backgroundColor: 'transparent'
            }, buttonStyle && buttonStyle, disabled && {
              backgroundColor: _colors2.default.disabled
            }, disabled && disabledStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 171
            }
          },
          icon && !iconRight || leftIconElement ? leftIconElement : null,
          loading && !loadingRight && loadingElement,
          _react2.default.createElement(
            _Text2.default,
            _extends({
              style: [styles.text, color && {
                color: color
              }, !large && styles.smallFont, fontSize && {
                fontSize: fontSize
              }, textStyle && textStyle, fontWeight && {
                fontWeight: fontWeight
              }, fontFamily && {
                fontFamily: fontFamily
              }, disabled && disabledTextStyle]
            }, textOptions, {
              allowFontScaling: allowFontScaling,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 205
              }
            }),
            title
          ),
          loading && loadingRight && loadingElement,
          icon && iconRight || rightIconElement ? rightIconElement : null
        )
      )
    );
  };

  Button.propTypes = {
    buttonStyle: _ViewPropTypes2.default.style,
    title: _propTypes2.default.string,
    onPress: _propTypes2.default.any,
    icon: _propTypes2.default.object,
    leftIcon: _propTypes2.default.object,
    rightIcon: _propTypes2.default.object,
    iconRight: _propTypes2.default.object,
    iconComponent: _propTypes2.default.any,
    secondary: _propTypes2.default.bool,
    secondary2: _propTypes2.default.bool,
    secondary3: _propTypes2.default.bool,
    primary1: _propTypes2.default.bool,
    primary2: _propTypes2.default.bool,
    backgroundColor: _propTypes2.default.string,
    color: _propTypes2.default.string,
    fontSize: _propTypes2.default.any,
    underlayColor: _propTypes2.default.string,
    raised: _propTypes2.default.bool,
    textStyle: _reactNative.Text.propTypes.style,
    disabled: _propTypes2.default.bool,
    loading: _propTypes2.default.bool,
    activityIndicatorStyle: _ViewPropTypes2.default.style,
    loadingRight: _propTypes2.default.bool,
    Component: _propTypes2.default.any,
    borderRadius: _propTypes2.default.number,
    large: _propTypes2.default.bool,
    fontWeight: _propTypes2.default.string,
    disabledStyle: _ViewPropTypes2.default.style,
    disabledTextStyle: _reactNative.Text.propTypes.style,
    fontFamily: _propTypes2.default.string,
    containerViewStyle: _ViewPropTypes2.default.style,
    rounded: _propTypes2.default.bool,
    outline: _propTypes2.default.bool,
    transparent: _propTypes2.default.bool,
    allowFontScaling: _propTypes2.default.bool,
    textNumberOfLines: _propTypes2.default.number,
    textEllipsizeMode: _propTypes2.default.string
  };
  var stylesObject = {
    container: {
      marginLeft: 15,
      marginRight: 15
    },
    button: {
      padding: 19,
      backgroundColor: _colors2.default.primary,
      justifyContent: 'center',
      alignItems: 'center',
      flexDirection: 'row'
    },
    text: {
      color: 'white',
      fontSize: (0, _normalizeText2.default)(16)
    },
    icon: {
      marginRight: 10
    },
    iconRight: {
      marginLeft: 10
    },
    small: {
      padding: 12
    },
    smallFont: {
      fontSize: (0, _normalizeText2.default)(14)
    },
    activityIndicatorStyle: {
      marginHorizontal: 10,
      height: 0
    },
    raised: _extends({}, _reactNative.Platform.select({
      ios: {
        shadowColor: 'rgba(0,0,0, .4)',
        shadowOffset: {
          height: 1,
          width: 1
        },
        shadowOpacity: 1,
        shadowRadius: 1
      },
      android: {
        backgroundColor: '#fff',
        elevation: 2
      }
    }))
  };

  var styles = _reactNative.StyleSheet.create(stylesObject);

  exports.default = Button;
},674,[25,13,65,675,676,679,726,678,747],"node_modules/react-native-elements/src/buttons/Button.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    primary: '#9E9E9E',
    primary1: '#4d86f7',
    primary2: '#6296f9',
    secondary: '#8F0CE8',
    secondary2: '#00B233',
    secondary3: '#00FF48',
    grey0: '#393e42',
    grey1: '#43484d',
    grey2: '#5e6977',
    grey3: '#86939e',
    grey4: '#bdc6cf',
    grey5: '#e1e8ee',
    dkGreyBg: '#232323',
    greyOutline: '#bbb',
    searchBg: '#303337',
    disabled: '#dadee0',
    white: '#ffffff',
    error: '#ff190c'
  };
},675,[],"node_modules/react-native-elements/src/config/colors.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/text/Text.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _fonts = _require(_dependencyMap[3], "../config/fonts");

  var _fonts2 = _interopRequireDefault(_fonts);

  var _normalizeText = _require(_dependencyMap[4], "../helpers/normalizeText");

  var _normalizeText2 = _interopRequireDefault(_normalizeText);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var styles = _reactNative.StyleSheet.create({
    text: _extends({}, _reactNative.Platform.select({
      android: _extends({}, _fonts2.default.android.regular)
    })),
    bold: _extends({}, _reactNative.Platform.select({
      android: _extends({}, _fonts2.default.android.bold)
    }))
  });

  var TextElement = function TextElement(props) {
    var style = props.style,
        children = props.children,
        h1 = props.h1,
        h2 = props.h2,
        h3 = props.h3,
        h4 = props.h4,
        fontFamily = props.fontFamily,
        rest = _objectWithoutProperties(props, ["style", "children", "h1", "h2", "h3", "h4", "fontFamily"]);

    return _react2.default.createElement(
      _reactNative.Text,
      _extends({
        style: [styles.text, h1 && {
          fontSize: (0, _normalizeText2.default)(40)
        }, h2 && {
          fontSize: (0, _normalizeText2.default)(34)
        }, h3 && {
          fontSize: (0, _normalizeText2.default)(28)
        }, h4 && {
          fontSize: (0, _normalizeText2.default)(22)
        }, h1 && styles.bold, h2 && styles.bold, h3 && styles.bold, h4 && styles.bold, fontFamily && {
          fontFamily: fontFamily
        }, style && style]
      }, rest, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 28
        }
      }),
      children
    );
  };

  TextElement.propTypes = {
    style: _propTypes2.default.any,
    h1: _propTypes2.default.bool,
    h2: _propTypes2.default.bool,
    h3: _propTypes2.default.bool,
    h4: _propTypes2.default.bool,
    fontFamily: _propTypes2.default.string,
    children: _propTypes2.default.any
  };
  exports.default = TextElement;
},676,[25,13,65,677,678],"node_modules/react-native-elements/src/text/Text.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    ios: {},
    android: {
      regular: {
        fontFamily: 'sans-serif'
      },
      light: {
        fontFamily: 'sans-serif-light'
      },
      condensed: {
        fontFamily: 'sans-serif-condensed'
      },
      condensed_light: {
        fontFamily: 'sans-serif-condensed',
        fontWeight: 'light'
      },
      black: {
        fontFamily: 'sans-serif',
        fontWeight: 'bold'
      },
      thin: {
        fontFamily: 'sans-serif-thin'
      },
      medium: {
        fontFamily: 'sans-serif-medium'
      },
      bold: {
        fontFamily: 'sans-serif',
        fontWeight: 'bold'
      }
    }
  };
},677,[],"node_modules/react-native-elements/src/config/fonts.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var React = _require(_dependencyMap[0], 'react-native');

  var PixelRatio = React.PixelRatio,
      Dimensions = React.Dimensions;
  var pixelRatio = PixelRatio.get();
  var deviceHeight = Dimensions.get('window').height;
  var deviceWidth = Dimensions.get('window').width;

  var normalize = function normalize(size) {
    if (pixelRatio >= 2 && pixelRatio < 3) {
      if (deviceWidth < 360) {
        return size * 0.95;
      }

      if (deviceHeight < 667) {
        return size;
      } else if (deviceHeight >= 667 && deviceHeight <= 735) {
        return size * 1.15;
      }

      return size * 1.25;
    } else if (pixelRatio >= 3 && pixelRatio < 3.5) {
      if (deviceWidth <= 360) {
        return size;
      }

      if (deviceHeight < 667) {
        return size * 1.15;
      }

      if (deviceHeight >= 667 && deviceHeight <= 735) {
        return size * 1.2;
      }

      return size * 1.27;
    } else if (pixelRatio >= 3.5) {
      if (deviceWidth <= 360) {
        return size;
      }

      if (deviceHeight < 667) {
        return size * 1.2;
      }

      if (deviceHeight >= 667 && deviceHeight <= 735) {
        return size * 1.25;
      }

      return size * 1.4;
    } else return size;
  };

  module.exports = normalize;
},678,[65],"node_modules/react-native-elements/src/helpers/normalizeText.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = _require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = _interopRequireDefault(_createIconSet);

  var _MaterialIcons = _require(_dependencyMap[1], "./glyphmaps/MaterialIcons.json");

  var _MaterialIcons2 = _interopRequireDefault(_MaterialIcons);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var iconSet = (0, _createIconSet2.default)(_MaterialIcons2.default, 'Material Icons', 'MaterialIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},679,[680,725],"node_modules/react-native-vector-icons/MaterialIcons.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-vector-icons/lib/create-icon-set.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  exports.default = createIconSet;

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "./react-native");

  var _iconButton = _require(_dependencyMap[4], "./icon-button");

  var _iconButton2 = _interopRequireDefault(_iconButton);

  var _tabBarItemIos = _require(_dependencyMap[5], "./tab-bar-item-ios");

  var _tabBarItemIos2 = _interopRequireDefault(_tabBarItemIos);

  var _toolbarAndroid = _require(_dependencyMap[6], "./toolbar-android");

  var _toolbarAndroid2 = _interopRequireDefault(_toolbarAndroid);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Icon: {
      displayName: "Icon",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-vector-icons/lib/create-icon-set.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;
  var DEFAULT_ICON_SIZE = 12;
  var DEFAULT_ICON_COLOR = 'black';

  function createIconSet(glyphMap, fontFamily, fontFile) {
    var _class, _temp2;

    var fontReference = fontFamily;

    if (_reactNative.Platform.OS === 'android' && fontFile) {
      fontReference = fontFile.replace(/\.(otf|ttf)$/, '');
    }

    if (_reactNative.Platform.OS === 'windows' && fontFile) {
      fontReference = "Assets/" + fontFile + "#" + fontFamily;
    }

    var IconNamePropType = _propTypes2.default.oneOf(Object.keys(glyphMap));

    var Icon = _wrapComponent("Icon")((_temp2 = _class = function (_PureComponent) {
      _inherits(Icon, _PureComponent);

      function Icon() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Icon);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Icon.__proto__ || Object.getPrototypeOf(Icon)).call.apply(_ref, [this].concat(args))), _this), _this.root = null, _this.handleRef = function (ref) {
          _this.root = ref;
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }

      _createClass(Icon, [{
        key: "setNativeProps",
        value: function setNativeProps(nativeProps) {
          if (this.root) {
            this.root.setNativeProps(nativeProps);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _props = this.props,
              name = _props.name,
              size = _props.size,
              color = _props.color,
              style = _props.style,
              props = _objectWithoutProperties(_props, ["name", "size", "color", "style"]);

          var glyph = name ? glyphMap[name] || '?' : '';

          if (typeof glyph === 'number') {
            glyph = String.fromCharCode(glyph);
          }

          var styleDefaults = {
            fontSize: size,
            color: color
          };
          var styleOverrides = {
            fontFamily: fontReference,
            fontWeight: 'normal',
            fontStyle: 'normal'
          };
          props.style = [styleDefaults, style, styleOverrides];
          props.ref = this.handleRef;
          return _react3.default.createElement(
            _reactNative.Text,
            _extends({}, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 82
              }
            }),
            glyph,
            this.props.children
          );
        }
      }]);

      return Icon;
    }(_react2.PureComponent), _class.propTypes = {
      name: IconNamePropType,
      size: _propTypes2.default.number,
      color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      children: _propTypes2.default.node,
      style: _propTypes2.default.any
    }, _class.defaultProps = {
      size: DEFAULT_ICON_SIZE,
      allowFontScaling: false
    }, _temp2));

    var imageSourceCache = {};

    function ensureNativeModuleAvailable() {
      if (!NativeIconAPI) {
        if (_reactNative.Platform.OS === 'android') {
          throw new Error('RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.');
        }

        throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.');
      }
    }

    function getImageSource(name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      ensureNativeModuleAvailable();
      var glyph = glyphMap[name] || '?';

      if (typeof glyph === 'number') {
        glyph = String.fromCharCode(glyph);
      }

      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = glyph + ":" + size + ":" + processedColor;

      var scale = _reactNative.PixelRatio.get();

      return new Promise(function (resolve, reject) {
        var cached = imageSourceCache[cacheKey];

        if (typeof cached !== 'undefined') {
          if (!cached || cached instanceof Error) {
            reject(cached);
          } else {
            resolve({
              uri: cached,
              scale: scale
            });
          }
        } else {
          NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {
            var error = typeof err === 'string' ? new Error(err) : err;
            imageSourceCache[cacheKey] = image || error || false;

            if (!error && image) {
              resolve({
                uri: image,
                scale: scale
              });
            } else {
              reject(error);
            }
          });
        }
      });
    }

    function loadFont() {
      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;

      if (_reactNative.Platform.OS === 'ios') {
        ensureNativeModuleAvailable();

        if (!file) {
          return Promise.reject(new Error('Unable to load font, because no file was specified. '));
        }

        return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, _toConsumableArray(file.split('.')));
      }

      return Promise.resolve();
    }

    function hasIcon(name) {
      return Object.prototype.hasOwnProperty.call(glyphMap, name);
    }

    Icon.Button = (0, _iconButton2.default)(Icon);
    Icon.TabBarItem = (0, _tabBarItemIos2.default)(IconNamePropType, getImageSource);
    Icon.TabBarItemIOS = Icon.TabBarItem;
    Icon.ToolbarAndroid = (0, _toolbarAndroid2.default)(IconNamePropType, getImageSource);
    Icon.getImageSource = getImageSource;
    Icon.loadFont = loadFont;
    Icon.hasIcon = hasIcon;
    return Icon;
  }
},680,[13,219,25,681,682,722,724],"node_modules/react-native-vector-icons/lib/create-icon-set.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  Object.keys(_reactNative).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _reactNative[key];
      }
    });
  });
},681,[65],"node_modules/react-native-vector-icons/lib/react-native.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-vector-icons/lib/icon-button.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  exports.default = createIconButtonComponent;

  var _isString = _require(_dependencyMap[2], "lodash/isString");

  var _isString2 = _interopRequireDefault(_isString);

  var _omit = _require(_dependencyMap[3], "lodash/omit");

  var _omit2 = _interopRequireDefault(_omit);

  var _pick = _require(_dependencyMap[4], "lodash/pick");

  var _pick2 = _interopRequireDefault(_pick);

  var _propTypes = _require(_dependencyMap[5], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[6], "./react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    IconButton: {
      displayName: "IconButton",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-vector-icons/lib/icon-button.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center',
      padding: 8
    },
    touchable: {
      overflow: 'hidden'
    },
    icon: {
      marginRight: 10
    },
    text: {
      fontWeight: '600',
      backgroundColor: 'transparent'
    }
  });

  var IOS7_BLUE = '#007AFF';

  function createIconButtonComponent(Icon) {
    var _class, _temp;

    return _wrapComponent("IconButton")((_temp = _class = function (_PureComponent) {
      _inherits(IconButton, _PureComponent);

      function IconButton() {
        _classCallCheck(this, IconButton);

        return _possibleConstructorReturn(this, (IconButton.__proto__ || Object.getPrototypeOf(IconButton)).apply(this, arguments));
      }

      _createClass(IconButton, [{
        key: "render",
        value: function render() {
          var _props = this.props,
              style = _props.style,
              iconStyle = _props.iconStyle,
              children = _props.children,
              restProps = _objectWithoutProperties(_props, ["style", "iconStyle", "children"]);

          var iconProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.Text.propTypes), 'style', 'name', 'size', 'color');
          var touchableProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.TouchableHighlight.propTypes));
          var props = (0, _omit2.default)(restProps, Object.keys(iconProps), Object.keys(touchableProps), 'iconStyle', 'borderRadius', 'backgroundColor');
          iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;
          var colorStyle = (0, _pick2.default)(this.props, 'color');
          var blockStyle = (0, _pick2.default)(this.props, 'backgroundColor', 'borderRadius');
          return _react3.default.createElement(
            _reactNative.TouchableHighlight,
            _extends({
              style: [styles.touchable, blockStyle]
            }, touchableProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 80
              }
            }),
            _react3.default.createElement(
              _reactNative.View,
              _extends({
                style: [styles.container, blockStyle, style]
              }, props, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 84
                }
              }),
              _react3.default.createElement(Icon, _extends({}, iconProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 85
                }
              })),
              (0, _isString2.default)(children) ? _react3.default.createElement(
                _reactNative.Text,
                {
                  style: [styles.text, colorStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 87
                  }
                },
                children
              ) : children
            )
          );
        }
      }]);

      return IconButton;
    }(_react2.PureComponent), _class.propTypes = {
      backgroundColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      borderRadius: _propTypes2.default.number,
      color: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      size: _propTypes2.default.number,
      iconStyle: _propTypes2.default.any,
      style: _propTypes2.default.any,
      children: _propTypes2.default.node
    }, _class.defaultProps = {
      backgroundColor: IOS7_BLUE,
      borderRadius: 5,
      color: 'white',
      size: 20
    }, _temp));
  }
},682,[13,219,683,684,718,25,681],"node_modules/react-native-vector-icons/lib/icon-button.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var baseGetTag = _require(_dependencyMap[0], './_baseGetTag'),
        isArray = _require(_dependencyMap[1], './isArray'),
        isObjectLike = _require(_dependencyMap[2], './isObjectLike');

    var stringTag = '[object String]';

    function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }

    module.exports = isString;
},683,[40,282,48],"node_modules/lodash/isString.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrayMap = _require(_dependencyMap[0], './_arrayMap'),
      baseClone = _require(_dependencyMap[1], './_baseClone'),
      baseUnset = _require(_dependencyMap[2], './_baseUnset'),
      castPath = _require(_dependencyMap[3], './_castPath'),
      copyObject = _require(_dependencyMap[4], './_copyObject'),
      customOmitClone = _require(_dependencyMap[5], './_customOmitClone'),
      flatRest = _require(_dependencyMap[6], './_flatRest'),
      getAllKeysIn = _require(_dependencyMap[7], './_getAllKeysIn');

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  var omit = flatRest(function (object, paths) {
    var result = {};

    if (object == null) {
      return result;
    }

    var isDeep = false;
    paths = arrayMap(paths, function (path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject(object, getAllKeysIn(object), result);

    if (isDeep) {
      result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
    }

    var length = paths.length;

    while (length--) {
      baseUnset(result, paths[length]);
    }

    return result;
  });
  module.exports = omit;
},684,[322,685,711,314,341,715,716,697],"node_modules/lodash/omit.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var Stack = _require(_dependencyMap[0], './_Stack'),
      arrayEach = _require(_dependencyMap[1], './_arrayEach'),
      assignValue = _require(_dependencyMap[2], './_assignValue'),
      baseAssign = _require(_dependencyMap[3], './_baseAssign'),
      baseAssignIn = _require(_dependencyMap[4], './_baseAssignIn'),
      cloneBuffer = _require(_dependencyMap[5], './_cloneBuffer'),
      copyArray = _require(_dependencyMap[6], './_copyArray'),
      copySymbols = _require(_dependencyMap[7], './_copySymbols'),
      copySymbolsIn = _require(_dependencyMap[8], './_copySymbolsIn'),
      getAllKeys = _require(_dependencyMap[9], './_getAllKeys'),
      getAllKeysIn = _require(_dependencyMap[10], './_getAllKeysIn'),
      getTag = _require(_dependencyMap[11], './_getTag'),
      initCloneArray = _require(_dependencyMap[12], './_initCloneArray'),
      initCloneByTag = _require(_dependencyMap[13], './_initCloneByTag'),
      initCloneObject = _require(_dependencyMap[14], './_initCloneObject'),
      isArray = _require(_dependencyMap[15], './isArray'),
      isBuffer = _require(_dependencyMap[16], './isBuffer'),
      isMap = _require(_dependencyMap[17], './isMap'),
      isObject = _require(_dependencyMap[18], './isObject'),
      isSet = _require(_dependencyMap[19], './isSet'),
      keys = _require(_dependencyMap[20], './keys');

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }

    if (result !== undefined) {
      return result;
    }

    if (!isObject(value)) {
      return value;
    }

    var isArr = isArray(value);

    if (isArr) {
      result = initCloneArray(value);

      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }

      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);

        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }

        result = initCloneByTag(value, tag, isDeep);
      }
    }

    stack || (stack = new Stack());
    var stacked = stack.get(value);

    if (stacked) {
      return stacked;
    }

    stack.set(value, result);

    if (isSet(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
      return result;
    }

    if (isMap(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }

      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  module.exports = baseClone;
},685,[228,686,338,687,688,692,693,694,695,279,697,303,698,699,705,282,291,707,246,709,286],"node_modules/lodash/_baseClone.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }

  module.exports = arrayEach;
},686,[],"node_modules/lodash/_arrayEach.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var copyObject = _require(_dependencyMap[0], './_copyObject'),
      keys = _require(_dependencyMap[1], './keys');

  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  module.exports = baseAssign;
},687,[341,286],"node_modules/lodash/_baseAssign.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var copyObject = _require(_dependencyMap[0], './_copyObject'),
      keysIn = _require(_dependencyMap[1], './keysIn');

  function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
  }

  module.exports = baseAssignIn;
},688,[341,689],"node_modules/lodash/_baseAssignIn.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrayLikeKeys = _require(_dependencyMap[0], './_arrayLikeKeys'),
      baseKeysIn = _require(_dependencyMap[1], './_baseKeysIn'),
      isArrayLike = _require(_dependencyMap[2], './isArrayLike');

  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  module.exports = keysIn;
},689,[287,690,302],"node_modules/lodash/keysIn.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isObject = _require(_dependencyMap[0], './isObject'),
      isPrototype = _require(_dependencyMap[1], './_isPrototype'),
      nativeKeysIn = _require(_dependencyMap[2], './_nativeKeysIn');

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }

    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = baseKeysIn;
},690,[246,300,691],"node_modules/lodash/_baseKeysIn.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function nativeKeysIn(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = nativeKeysIn;
},691,[],"node_modules/lodash/_nativeKeysIn.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var root = _require(_dependencyMap[0], './_root');

  var freeExports = (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && (typeof module === "undefined" ? "undefined" : _typeof(module)) == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }

    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;
},692,[42],"node_modules/lodash/_cloneBuffer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function copyArray(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));

    while (++index < length) {
      array[index] = source[index];
    }

    return array;
  }

  module.exports = copyArray;
},693,[],"node_modules/lodash/_copyArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var copyObject = _require(_dependencyMap[0], './_copyObject'),
      getSymbols = _require(_dependencyMap[1], './_getSymbols');

  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }

  module.exports = copySymbols;
},694,[341,283],"node_modules/lodash/_copySymbols.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var copyObject = _require(_dependencyMap[0], './_copyObject'),
      getSymbolsIn = _require(_dependencyMap[1], './_getSymbolsIn');

  function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
  }

  module.exports = copySymbolsIn;
},695,[341,696],"node_modules/lodash/_copySymbolsIn.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrayPush = _require(_dependencyMap[0], './_arrayPush'),
      getPrototype = _require(_dependencyMap[1], './_getPrototype'),
      getSymbols = _require(_dependencyMap[2], './_getSymbols'),
      stubArray = _require(_dependencyMap[3], './stubArray');

  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];

    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }

    return result;
  };
  module.exports = getSymbolsIn;
},696,[281,46,283,285],"node_modules/lodash/_getSymbolsIn.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseGetAllKeys = _require(_dependencyMap[0], './_baseGetAllKeys'),
      getSymbolsIn = _require(_dependencyMap[1], './_getSymbolsIn'),
      keysIn = _require(_dependencyMap[2], './keysIn');

  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }

  module.exports = getAllKeysIn;
},697,[280,696,689],"node_modules/lodash/_getAllKeysIn.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }

    return result;
  }

  module.exports = initCloneArray;
},698,[],"node_modules/lodash/_initCloneArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var cloneArrayBuffer = _require(_dependencyMap[0], './_cloneArrayBuffer'),
      cloneDataView = _require(_dependencyMap[1], './_cloneDataView'),
      cloneRegExp = _require(_dependencyMap[2], './_cloneRegExp'),
      cloneSymbol = _require(_dependencyMap[3], './_cloneSymbol'),
      cloneTypedArray = _require(_dependencyMap[4], './_cloneTypedArray');

  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;

    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);

      case boolTag:
      case dateTag:
        return new Ctor(+object);

      case dataViewTag:
        return cloneDataView(object, isDeep);

      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object, isDeep);

      case mapTag:
        return new Ctor();

      case numberTag:
      case stringTag:
        return new Ctor(object);

      case regexpTag:
        return cloneRegExp(object);

      case setTag:
        return new Ctor();

      case symbolTag:
        return cloneSymbol(object);
    }
  }

  module.exports = initCloneByTag;
},699,[700,701,702,703,704],"node_modules/lodash/_initCloneByTag.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var Uint8Array = _require(_dependencyMap[0], './_Uint8Array');

  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  module.exports = cloneArrayBuffer;
},700,[275],"node_modules/lodash/_cloneArrayBuffer.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var cloneArrayBuffer = _require(_dependencyMap[0], './_cloneArrayBuffer');

  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  module.exports = cloneDataView;
},701,[700],"node_modules/lodash/_cloneDataView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var reFlags = /\w*$/;

  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  module.exports = cloneRegExp;
},702,[],"node_modules/lodash/_cloneRegExp.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _Symbol = _require(_dependencyMap[0], './_Symbol');

  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  module.exports = cloneSymbol;
},703,[41],"node_modules/lodash/_cloneSymbol.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var cloneArrayBuffer = _require(_dependencyMap[0], './_cloneArrayBuffer');

  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  module.exports = cloneTypedArray;
},704,[700],"node_modules/lodash/_cloneTypedArray.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var baseCreate = _require(_dependencyMap[0], './_baseCreate'),
        getPrototype = _require(_dependencyMap[1], './_getPrototype'),
        isPrototype = _require(_dependencyMap[2], './_isPrototype');

    function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }

    module.exports = initCloneObject;
},705,[706,46,300],"node_modules/lodash/_initCloneObject.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isObject = _require(_dependencyMap[0], './isObject');

  var objectCreate = Object.create;

  var baseCreate = function () {
    function object() {}

    return function (proto) {
      if (!isObject(proto)) {
        return {};
      }

      if (objectCreate) {
        return objectCreate(proto);
      }

      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  module.exports = baseCreate;
},706,[246],"node_modules/lodash/_baseCreate.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseIsMap = _require(_dependencyMap[0], './_baseIsMap'),
      baseUnary = _require(_dependencyMap[1], './_baseUnary'),
      nodeUtil = _require(_dependencyMap[2], './_nodeUtil');

  var nodeIsMap = nodeUtil && nodeUtil.isMap;
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
  module.exports = isMap;
},707,[708,297,298],"node_modules/lodash/isMap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var getTag = _require(_dependencyMap[0], './_getTag'),
      isObjectLike = _require(_dependencyMap[1], './isObjectLike');

  var mapTag = '[object Map]';

  function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag;
  }

  module.exports = baseIsMap;
},708,[303,48],"node_modules/lodash/_baseIsMap.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseIsSet = _require(_dependencyMap[0], './_baseIsSet'),
      baseUnary = _require(_dependencyMap[1], './_baseUnary'),
      nodeUtil = _require(_dependencyMap[2], './_nodeUtil');

  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  module.exports = isSet;
},709,[710,297,298],"node_modules/lodash/isSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var getTag = _require(_dependencyMap[0], './_getTag'),
      isObjectLike = _require(_dependencyMap[1], './isObjectLike');

  var setTag = '[object Set]';

  function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag;
  }

  module.exports = baseIsSet;
},710,[303,48],"node_modules/lodash/_baseIsSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var castPath = _require(_dependencyMap[0], './_castPath'),
      last = _require(_dependencyMap[1], './last'),
      parent = _require(_dependencyMap[2], './_parent'),
      toKey = _require(_dependencyMap[3], './_toKey');

  function baseUnset(object, path) {
    path = castPath(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last(path))];
  }

  module.exports = baseUnset;
},711,[314,712,713,323],"node_modules/lodash/_baseUnset.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  module.exports = last;
},712,[],"node_modules/lodash/last.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseGet = _require(_dependencyMap[0], './_baseGet'),
      baseSlice = _require(_dependencyMap[1], './_baseSlice');

  function parent(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
  }

  module.exports = parent;
},713,[313,714],"node_modules/lodash/_parent.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  }

  module.exports = baseSlice;
},714,[],"node_modules/lodash/_baseSlice.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var isPlainObject = _require(_dependencyMap[0], './isPlainObject');

  function customOmitClone(value) {
    return isPlainObject(value) ? undefined : value;
  }

  module.exports = customOmitClone;
},715,[39],"node_modules/lodash/_customOmitClone.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var flatten = _require(_dependencyMap[0], './flatten'),
      overRest = _require(_dependencyMap[1], './_overRest'),
      setToString = _require(_dependencyMap[2], './_setToString');

  function flatRest(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  module.exports = flatRest;
},716,[717,344,346],"node_modules/lodash/_flatRest.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseFlatten = _require(_dependencyMap[0], './_baseFlatten');

  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  module.exports = flatten;
},717,[358],"node_modules/lodash/flatten.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var basePick = _require(_dependencyMap[0], './_basePick'),
      flatRest = _require(_dependencyMap[1], './_flatRest');

  var pick = flatRest(function (object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  module.exports = pick;
},718,[719,716],"node_modules/lodash/pick.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var basePickBy = _require(_dependencyMap[0], './_basePickBy'),
      hasIn = _require(_dependencyMap[1], './hasIn');

  function basePick(object, paths) {
    return basePickBy(object, paths, function (value, path) {
      return hasIn(object, path);
    });
  }

  module.exports = basePick;
},719,[720,324],"node_modules/lodash/_basePick.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    var baseGet = _require(_dependencyMap[0], './_baseGet'),
        baseSet = _require(_dependencyMap[1], './_baseSet'),
        castPath = _require(_dependencyMap[2], './_castPath');

    function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
            var path = paths[index],
                value = baseGet(object, path);

            if (predicate(value, path)) {
                baseSet(result, castPath(path, object), value);
            }
        }

        return result;
    }

    module.exports = basePickBy;
},720,[313,721,314],"node_modules/lodash/_basePickBy.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var assignValue = _require(_dependencyMap[0], './_assignValue'),
      castPath = _require(_dependencyMap[1], './_castPath'),
      isIndex = _require(_dependencyMap[2], './_isIndex'),
      isObject = _require(_dependencyMap[3], './isObject'),
      toKey = _require(_dependencyMap[4], './_toKey');

  function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
      return object;
    }

    path = castPath(path, object);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey(path[index]),
          newValue = value;

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;

        if (newValue === undefined) {
          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }

      assignValue(nested, key, newValue);
      nested = nested[key];
    }

    return object;
  }

  module.exports = baseSet;
},721,[338,314,293,246,323],"node_modules/lodash/_baseSet.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-vector-icons/lib/tab-bar-item-ios.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  exports.default = createTabBarItemIOSComponent;

  var _isEqual = _require(_dependencyMap[2], "lodash/isEqual");

  var _isEqual2 = _interopRequireDefault(_isEqual);

  var _pick = _require(_dependencyMap[3], "lodash/pick");

  var _pick2 = _interopRequireDefault(_pick);

  var _propTypes = _require(_dependencyMap[4], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[5], "./react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    TabBarItemIOS: {
      displayName: "TabBarItemIOS",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-vector-icons/lib/tab-bar-item-ios.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  function createTabBarItemIOSComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _wrapComponent("TabBarItemIOS")((_temp = _class = function (_PureComponent) {
      _inherits(TabBarItemIOS, _PureComponent);

      function TabBarItemIOS() {
        _classCallCheck(this, TabBarItemIOS);

        return _possibleConstructorReturn(this, (TabBarItemIOS.__proto__ || Object.getPrototypeOf(TabBarItemIOS)).apply(this, arguments));
      }

      _createClass(TabBarItemIOS, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this.updateIconSources(this.props);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          var keys = Object.keys(TabBarItemIOS.propTypes);

          if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
            this.updateIconSources(nextProps);
          }
        }
      }, {
        key: "updateIconSources",
        value: function updateIconSources(props) {
          var _this2 = this;

          if (props.iconName) {
            getImageSource(props.iconName, props.iconSize, props.iconColor).then(function (icon) {
              return _this2.setState({
                icon: icon
              });
            });
          }

          if (props.selectedIconName || props.selectedIconColor) {
            var selectedIconName = props.selectedIconName || props.iconName;
            var selectedIconColor = props.selectedIconColor || props.iconColor;
            getImageSource(selectedIconName, props.iconSize, selectedIconColor).then(function (selectedIcon) {
              return _this2.setState({
                selectedIcon: selectedIcon
              });
            });
          }
        }
      }, {
        key: "render",
        value: function render() {
          return _react3.default.createElement(_reactNative.TabBarIOS.Item, _extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 59
            }
          }));
        }
      }]);

      return TabBarItemIOS;
    }(_react2.PureComponent), _class.propTypes = {
      iconName: IconNamePropType.isRequired,
      selectedIconName: IconNamePropType,
      iconSize: _propTypes2.default.number,
      iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      selectedIconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    }, _class.defaultProps = {
      iconSize: 30
    }, _temp));
  }
},722,[13,219,723,718,25,681],"node_modules/react-native-vector-icons/lib/tab-bar-item-ios.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var baseIsEqual = _require(_dependencyMap[0], './_baseIsEqual');

  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  module.exports = isEqual;
},723,[266],"node_modules/lodash/isEqual.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-vector-icons/lib/toolbar-android.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  exports.default = createToolbarAndroidComponent;

  var _isEqual = _require(_dependencyMap[2], "lodash/isEqual");

  var _isEqual2 = _interopRequireDefault(_isEqual);

  var _pick = _require(_dependencyMap[3], "lodash/pick");

  var _pick2 = _interopRequireDefault(_pick);

  var _propTypes = _require(_dependencyMap[4], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[5], "./react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    IconToolbarAndroid: {
      displayName: "IconToolbarAndroid",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-vector-icons/lib/toolbar-android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  function createToolbarAndroidComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _wrapComponent("IconToolbarAndroid")((_temp = _class = function (_PureComponent) {
      _inherits(IconToolbarAndroid, _PureComponent);

      function IconToolbarAndroid() {
        _classCallCheck(this, IconToolbarAndroid);

        return _possibleConstructorReturn(this, (IconToolbarAndroid.__proto__ || Object.getPrototypeOf(IconToolbarAndroid)).apply(this, arguments));
      }

      _createClass(IconToolbarAndroid, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          this.updateIconSources(this.props);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          var _this2 = this;

          var keys = Object.keys(IconToolbarAndroid.propTypes);

          if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
            var stateToEvict = {};

            if (!nextProps.logoName) {
              stateToEvict.logo = undefined;
            }

            if (!nextProps.navIconName) {
              stateToEvict.navIcon = undefined;
            }

            if (!nextProps.overflowIconName) {
              stateToEvict.overflowIcon = undefined;
            }

            if (this.state && Object.keys(stateToEvict).length) {
              this.setState(stateToEvict, function () {
                return _this2.updateIconSources(nextProps);
              });
            } else {
              this.updateIconSources(nextProps);
            }
          }
        }
      }, {
        key: "updateIconSources",
        value: function updateIconSources(props) {
          var _this3 = this;

          var size = props.iconSize;
          var color = props.iconColor || props.titleColor;

          if (props.logoName) {
            getImageSource(props.logoName, size, color).then(function (logo) {
              return _this3.setState({
                logo: logo
              });
            });
          }

          if (props.navIconName) {
            getImageSource(props.navIconName, size, color).then(function (navIcon) {
              return _this3.setState({
                navIcon: navIcon
              });
            });
          }

          if (props.overflowIconName) {
            getImageSource(props.overflowIconName, size, color).then(function (overflowIcon) {
              return _this3.setState({
                overflowIcon: overflowIcon
              });
            });
          }

          Promise.all((props.actions || []).map(function (action) {
            if (action.iconName) {
              return getImageSource(action.iconName, action.iconSize || size, action.iconColor || color).then(function (icon) {
                return _extends({}, action, {
                  icon: icon
                });
              });
            }

            return Promise.resolve(action);
          })).then(function (actions) {
            return _this3.setState({
              actions: actions
            });
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _react3.default.createElement(_reactNative.ToolbarAndroid, _extends({}, this.props, this.state, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 94
            }
          }));
        }
      }]);

      return IconToolbarAndroid;
    }(_react2.PureComponent), _class.propTypes = {
      logoName: IconNamePropType,
      navIconName: IconNamePropType,
      overflowIconName: IconNamePropType,
      actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        title: _propTypes2.default.string.isRequired,
        iconName: IconNamePropType,
        iconSize: _propTypes2.default.number,
        iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        show: _propTypes2.default.oneOf(['always', 'ifRoom', 'never']),
        showWithText: _propTypes2.default.bool
      })),
      iconSize: _propTypes2.default.number,
      iconColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    }, _class.defaultProps = {
      iconSize: 24
    }, _temp));
  }
},724,[13,219,723,718,25,681],"node_modules/react-native-vector-icons/lib/toolbar-android.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "3d-rotation": 59469,
    "ac-unit": 60219,
    "access-alarm": 57744,
    "access-alarms": 57745,
    "access-time": 57746,
    "accessibility": 59470,
    "accessible": 59668,
    "account-balance": 59471,
    "account-balance-wallet": 59472,
    "account-box": 59473,
    "account-circle": 59475,
    "adb": 58894,
    "add": 57669,
    "add-a-photo": 58425,
    "add-alarm": 57747,
    "add-alert": 57347,
    "add-box": 57670,
    "add-circle": 57671,
    "add-circle-outline": 57672,
    "add-location": 58727,
    "add-shopping-cart": 59476,
    "add-to-photos": 58269,
    "add-to-queue": 57436,
    "adjust": 58270,
    "airline-seat-flat": 58928,
    "airline-seat-flat-angled": 58929,
    "airline-seat-individual-suite": 58930,
    "airline-seat-legroom-extra": 58931,
    "airline-seat-legroom-normal": 58932,
    "airline-seat-legroom-reduced": 58933,
    "airline-seat-recline-extra": 58934,
    "airline-seat-recline-normal": 58935,
    "airplanemode-active": 57749,
    "airplanemode-inactive": 57748,
    "airplay": 57429,
    "airport-shuttle": 60220,
    "alarm": 59477,
    "alarm-add": 59478,
    "alarm-off": 59479,
    "alarm-on": 59480,
    "album": 57369,
    "all-inclusive": 60221,
    "all-out": 59659,
    "android": 59481,
    "announcement": 59482,
    "apps": 58819,
    "archive": 57673,
    "arrow-back": 58820,
    "arrow-downward": 58843,
    "arrow-drop-down": 58821,
    "arrow-drop-down-circle": 58822,
    "arrow-drop-up": 58823,
    "arrow-forward": 58824,
    "arrow-upward": 58840,
    "art-track": 57440,
    "aspect-ratio": 59483,
    "assessment": 59484,
    "assignment": 59485,
    "assignment-ind": 59486,
    "assignment-late": 59487,
    "assignment-return": 59488,
    "assignment-returned": 59489,
    "assignment-turned-in": 59490,
    "assistant": 58271,
    "assistant-photo": 58272,
    "attach-file": 57894,
    "attach-money": 57895,
    "attachment": 58044,
    "audiotrack": 58273,
    "autorenew": 59491,
    "av-timer": 57371,
    "backspace": 57674,
    "backup": 59492,
    "battery-alert": 57756,
    "battery-charging-full": 57763,
    "battery-full": 57764,
    "battery-std": 57765,
    "battery-unknown": 57766,
    "beach-access": 60222,
    "beenhere": 58669,
    "block": 57675,
    "bluetooth": 57767,
    "bluetooth-audio": 58895,
    "bluetooth-connected": 57768,
    "bluetooth-disabled": 57769,
    "bluetooth-searching": 57770,
    "blur-circular": 58274,
    "blur-linear": 58275,
    "blur-off": 58276,
    "blur-on": 58277,
    "book": 59493,
    "bookmark": 59494,
    "bookmark-border": 59495,
    "border-all": 57896,
    "border-bottom": 57897,
    "border-clear": 57898,
    "border-color": 57899,
    "border-horizontal": 57900,
    "border-inner": 57901,
    "border-left": 57902,
    "border-outer": 57903,
    "border-right": 57904,
    "border-style": 57905,
    "border-top": 57906,
    "border-vertical": 57907,
    "branding-watermark": 57451,
    "brightness-1": 58278,
    "brightness-2": 58279,
    "brightness-3": 58280,
    "brightness-4": 58281,
    "brightness-5": 58282,
    "brightness-6": 58283,
    "brightness-7": 58284,
    "brightness-auto": 57771,
    "brightness-high": 57772,
    "brightness-low": 57773,
    "brightness-medium": 57774,
    "broken-image": 58285,
    "brush": 58286,
    "bubble-chart": 59101,
    "bug-report": 59496,
    "build": 59497,
    "burst-mode": 58428,
    "business": 57519,
    "business-center": 60223,
    "cached": 59498,
    "cake": 59369,
    "call": 57520,
    "call-end": 57521,
    "call-made": 57522,
    "call-merge": 57523,
    "call-missed": 57524,
    "call-missed-outgoing": 57572,
    "call-received": 57525,
    "call-split": 57526,
    "call-to-action": 57452,
    "camera": 58287,
    "camera-alt": 58288,
    "camera-enhance": 59644,
    "camera-front": 58289,
    "camera-rear": 58290,
    "camera-roll": 58291,
    "cancel": 58825,
    "card-giftcard": 59638,
    "card-membership": 59639,
    "card-travel": 59640,
    "casino": 60224,
    "cast": 58119,
    "cast-connected": 58120,
    "center-focus-strong": 58292,
    "center-focus-weak": 58293,
    "change-history": 59499,
    "chat": 57527,
    "chat-bubble": 57546,
    "chat-bubble-outline": 57547,
    "check": 58826,
    "check-box": 59444,
    "check-box-outline-blank": 59445,
    "check-circle": 59500,
    "chevron-left": 58827,
    "chevron-right": 58828,
    "child-care": 60225,
    "child-friendly": 60226,
    "chrome-reader-mode": 59501,
    "class": 59502,
    "clear": 57676,
    "clear-all": 57528,
    "close": 58829,
    "closed-caption": 57372,
    "cloud": 58045,
    "cloud-circle": 58046,
    "cloud-done": 58047,
    "cloud-download": 58048,
    "cloud-off": 58049,
    "cloud-queue": 58050,
    "cloud-upload": 58051,
    "code": 59503,
    "collections": 58294,
    "collections-bookmark": 58417,
    "color-lens": 58295,
    "colorize": 58296,
    "comment": 57529,
    "compare": 58297,
    "compare-arrows": 59669,
    "computer": 58122,
    "confirmation-number": 58936,
    "contact-mail": 57552,
    "contact-phone": 57551,
    "contacts": 57530,
    "content-copy": 57677,
    "content-cut": 57678,
    "content-paste": 57679,
    "control-point": 58298,
    "control-point-duplicate": 58299,
    "copyright": 59660,
    "create": 57680,
    "create-new-folder": 58060,
    "credit-card": 59504,
    "crop": 58302,
    "crop-16-9": 58300,
    "crop-3-2": 58301,
    "crop-5-4": 58303,
    "crop-7-5": 58304,
    "crop-din": 58305,
    "crop-free": 58306,
    "crop-landscape": 58307,
    "crop-original": 58308,
    "crop-portrait": 58309,
    "crop-rotate": 58423,
    "crop-square": 58310,
    "dashboard": 59505,
    "data-usage": 57775,
    "date-range": 59670,
    "dehaze": 58311,
    "delete": 59506,
    "delete-forever": 59691,
    "delete-sweep": 57708,
    "description": 59507,
    "desktop-mac": 58123,
    "desktop-windows": 58124,
    "details": 58312,
    "developer-board": 58125,
    "developer-mode": 57776,
    "device-hub": 58165,
    "devices": 57777,
    "devices-other": 58167,
    "dialer-sip": 57531,
    "dialpad": 57532,
    "directions": 58670,
    "directions-bike": 58671,
    "directions-boat": 58674,
    "directions-bus": 58672,
    "directions-car": 58673,
    "directions-railway": 58676,
    "directions-run": 58726,
    "directions-subway": 58675,
    "directions-transit": 58677,
    "directions-walk": 58678,
    "disc-full": 58896,
    "dns": 59509,
    "do-not-disturb": 58898,
    "do-not-disturb-alt": 58897,
    "do-not-disturb-off": 58947,
    "do-not-disturb-on": 58948,
    "dock": 58126,
    "domain": 59374,
    "done": 59510,
    "done-all": 59511,
    "donut-large": 59671,
    "donut-small": 59672,
    "drafts": 57681,
    "drag-handle": 57949,
    "drive-eta": 58899,
    "dvr": 57778,
    "edit": 58313,
    "edit-location": 58728,
    "eject": 59643,
    "email": 57534,
    "enhanced-encryption": 58943,
    "equalizer": 57373,
    "error": 57344,
    "error-outline": 57345,
    "euro-symbol": 59686,
    "ev-station": 58733,
    "event": 59512,
    "event-available": 58900,
    "event-busy": 58901,
    "event-note": 58902,
    "event-seat": 59651,
    "exit-to-app": 59513,
    "expand-less": 58830,
    "expand-more": 58831,
    "explicit": 57374,
    "explore": 59514,
    "exposure": 58314,
    "exposure-neg-1": 58315,
    "exposure-neg-2": 58316,
    "exposure-plus-1": 58317,
    "exposure-plus-2": 58318,
    "exposure-zero": 58319,
    "extension": 59515,
    "face": 59516,
    "fast-forward": 57375,
    "fast-rewind": 57376,
    "favorite": 59517,
    "favorite-border": 59518,
    "featured-play-list": 57453,
    "featured-video": 57454,
    "feedback": 59519,
    "fiber-dvr": 57437,
    "fiber-manual-record": 57441,
    "fiber-new": 57438,
    "fiber-pin": 57450,
    "fiber-smart-record": 57442,
    "file-download": 58052,
    "file-upload": 58054,
    "filter": 58323,
    "filter-1": 58320,
    "filter-2": 58321,
    "filter-3": 58322,
    "filter-4": 58324,
    "filter-5": 58325,
    "filter-6": 58326,
    "filter-7": 58327,
    "filter-8": 58328,
    "filter-9": 58329,
    "filter-9-plus": 58330,
    "filter-b-and-w": 58331,
    "filter-center-focus": 58332,
    "filter-drama": 58333,
    "filter-frames": 58334,
    "filter-hdr": 58335,
    "filter-list": 57682,
    "filter-none": 58336,
    "filter-tilt-shift": 58338,
    "filter-vintage": 58339,
    "find-in-page": 59520,
    "find-replace": 59521,
    "fingerprint": 59661,
    "first-page": 58844,
    "fitness-center": 60227,
    "flag": 57683,
    "flare": 58340,
    "flash-auto": 58341,
    "flash-off": 58342,
    "flash-on": 58343,
    "flight": 58681,
    "flight-land": 59652,
    "flight-takeoff": 59653,
    "flip": 58344,
    "flip-to-back": 59522,
    "flip-to-front": 59523,
    "folder": 58055,
    "folder-open": 58056,
    "folder-shared": 58057,
    "folder-special": 58903,
    "font-download": 57703,
    "format-align-center": 57908,
    "format-align-justify": 57909,
    "format-align-left": 57910,
    "format-align-right": 57911,
    "format-bold": 57912,
    "format-clear": 57913,
    "format-color-fill": 57914,
    "format-color-reset": 57915,
    "format-color-text": 57916,
    "format-indent-decrease": 57917,
    "format-indent-increase": 57918,
    "format-italic": 57919,
    "format-line-spacing": 57920,
    "format-list-bulleted": 57921,
    "format-list-numbered": 57922,
    "format-paint": 57923,
    "format-quote": 57924,
    "format-shapes": 57950,
    "format-size": 57925,
    "format-strikethrough": 57926,
    "format-textdirection-l-to-r": 57927,
    "format-textdirection-r-to-l": 57928,
    "format-underlined": 57929,
    "forum": 57535,
    "forward": 57684,
    "forward-10": 57430,
    "forward-30": 57431,
    "forward-5": 57432,
    "free-breakfast": 60228,
    "fullscreen": 58832,
    "fullscreen-exit": 58833,
    "functions": 57930,
    "g-translate": 59687,
    "gamepad": 58127,
    "games": 57377,
    "gavel": 59662,
    "gesture": 57685,
    "get-app": 59524,
    "gif": 59656,
    "golf-course": 60229,
    "gps-fixed": 57779,
    "gps-not-fixed": 57780,
    "gps-off": 57781,
    "grade": 59525,
    "gradient": 58345,
    "grain": 58346,
    "graphic-eq": 57784,
    "grid-off": 58347,
    "grid-on": 58348,
    "group": 59375,
    "group-add": 59376,
    "group-work": 59526,
    "hd": 57426,
    "hdr-off": 58349,
    "hdr-on": 58350,
    "hdr-strong": 58353,
    "hdr-weak": 58354,
    "headset": 58128,
    "headset-mic": 58129,
    "healing": 58355,
    "hearing": 57379,
    "help": 59527,
    "help-outline": 59645,
    "high-quality": 57380,
    "highlight": 57951,
    "highlight-off": 59528,
    "history": 59529,
    "home": 59530,
    "hot-tub": 60230,
    "hotel": 58682,
    "hourglass-empty": 59531,
    "hourglass-full": 59532,
    "http": 59650,
    "https": 59533,
    "image": 58356,
    "image-aspect-ratio": 58357,
    "import-contacts": 57568,
    "import-export": 57539,
    "important-devices": 59666,
    "inbox": 57686,
    "indeterminate-check-box": 59657,
    "info": 59534,
    "info-outline": 59535,
    "input": 59536,
    "insert-chart": 57931,
    "insert-comment": 57932,
    "insert-drive-file": 57933,
    "insert-emoticon": 57934,
    "insert-invitation": 57935,
    "insert-link": 57936,
    "insert-photo": 57937,
    "invert-colors": 59537,
    "invert-colors-off": 57540,
    "iso": 58358,
    "keyboard": 58130,
    "keyboard-arrow-down": 58131,
    "keyboard-arrow-left": 58132,
    "keyboard-arrow-right": 58133,
    "keyboard-arrow-up": 58134,
    "keyboard-backspace": 58135,
    "keyboard-capslock": 58136,
    "keyboard-hide": 58138,
    "keyboard-return": 58139,
    "keyboard-tab": 58140,
    "keyboard-voice": 58141,
    "kitchen": 60231,
    "label": 59538,
    "label-outline": 59539,
    "landscape": 58359,
    "language": 59540,
    "laptop": 58142,
    "laptop-chromebook": 58143,
    "laptop-mac": 58144,
    "laptop-windows": 58145,
    "last-page": 58845,
    "launch": 59541,
    "layers": 58683,
    "layers-clear": 58684,
    "leak-add": 58360,
    "leak-remove": 58361,
    "lens": 58362,
    "library-add": 57390,
    "library-books": 57391,
    "library-music": 57392,
    "lightbulb-outline": 59663,
    "line-style": 59673,
    "line-weight": 59674,
    "linear-scale": 57952,
    "link": 57687,
    "linked-camera": 58424,
    "list": 59542,
    "live-help": 57542,
    "live-tv": 58937,
    "local-activity": 58687,
    "local-airport": 58685,
    "local-atm": 58686,
    "local-bar": 58688,
    "local-cafe": 58689,
    "local-car-wash": 58690,
    "local-convenience-store": 58691,
    "local-dining": 58710,
    "local-drink": 58692,
    "local-florist": 58693,
    "local-gas-station": 58694,
    "local-grocery-store": 58695,
    "local-hospital": 58696,
    "local-hotel": 58697,
    "local-laundry-service": 58698,
    "local-library": 58699,
    "local-mall": 58700,
    "local-movies": 58701,
    "local-offer": 58702,
    "local-parking": 58703,
    "local-pharmacy": 58704,
    "local-phone": 58705,
    "local-pizza": 58706,
    "local-play": 58707,
    "local-post-office": 58708,
    "local-printshop": 58709,
    "local-see": 58711,
    "local-shipping": 58712,
    "local-taxi": 58713,
    "location-city": 59377,
    "location-disabled": 57782,
    "location-off": 57543,
    "location-on": 57544,
    "location-searching": 57783,
    "lock": 59543,
    "lock-open": 59544,
    "lock-outline": 59545,
    "looks": 58364,
    "looks-3": 58363,
    "looks-4": 58365,
    "looks-5": 58366,
    "looks-6": 58367,
    "looks-one": 58368,
    "looks-two": 58369,
    "loop": 57384,
    "loupe": 58370,
    "low-priority": 57709,
    "loyalty": 59546,
    "mail": 57688,
    "mail-outline": 57569,
    "map": 58715,
    "markunread": 57689,
    "markunread-mailbox": 59547,
    "memory": 58146,
    "menu": 58834,
    "merge-type": 57938,
    "message": 57545,
    "mic": 57385,
    "mic-none": 57386,
    "mic-off": 57387,
    "mms": 58904,
    "mode-comment": 57939,
    "mode-edit": 57940,
    "monetization-on": 57955,
    "money-off": 57948,
    "monochrome-photos": 58371,
    "mood": 59378,
    "mood-bad": 59379,
    "more": 58905,
    "more-horiz": 58835,
    "more-vert": 58836,
    "motorcycle": 59675,
    "mouse": 58147,
    "move-to-inbox": 57704,
    "movie": 57388,
    "movie-creation": 58372,
    "movie-filter": 58426,
    "multiline-chart": 59103,
    "music-note": 58373,
    "music-video": 57443,
    "my-location": 58716,
    "nature": 58374,
    "nature-people": 58375,
    "navigate-before": 58376,
    "navigate-next": 58377,
    "navigation": 58717,
    "near-me": 58729,
    "network-cell": 57785,
    "network-check": 58944,
    "network-locked": 58906,
    "network-wifi": 57786,
    "new-releases": 57393,
    "next-week": 57706,
    "nfc": 57787,
    "no-encryption": 58945,
    "no-sim": 57548,
    "not-interested": 57395,
    "note": 57455,
    "note-add": 59548,
    "notifications": 59380,
    "notifications-active": 59383,
    "notifications-none": 59381,
    "notifications-off": 59382,
    "notifications-paused": 59384,
    "offline-pin": 59658,
    "ondemand-video": 58938,
    "opacity": 59676,
    "open-in-browser": 59549,
    "open-in-new": 59550,
    "open-with": 59551,
    "pages": 59385,
    "pageview": 59552,
    "palette": 58378,
    "pan-tool": 59685,
    "panorama": 58379,
    "panorama-fish-eye": 58380,
    "panorama-horizontal": 58381,
    "panorama-vertical": 58382,
    "panorama-wide-angle": 58383,
    "party-mode": 59386,
    "pause": 57396,
    "pause-circle-filled": 57397,
    "pause-circle-outline": 57398,
    "payment": 59553,
    "people": 59387,
    "people-outline": 59388,
    "perm-camera-mic": 59554,
    "perm-contact-calendar": 59555,
    "perm-data-setting": 59556,
    "perm-device-information": 59557,
    "perm-identity": 59558,
    "perm-media": 59559,
    "perm-phone-msg": 59560,
    "perm-scan-wifi": 59561,
    "person": 59389,
    "person-add": 59390,
    "person-outline": 59391,
    "person-pin": 58714,
    "person-pin-circle": 58730,
    "personal-video": 58939,
    "pets": 59677,
    "phone": 57549,
    "phone-android": 58148,
    "phone-bluetooth-speaker": 58907,
    "phone-forwarded": 58908,
    "phone-in-talk": 58909,
    "phone-iphone": 58149,
    "phone-locked": 58910,
    "phone-missed": 58911,
    "phone-paused": 58912,
    "phonelink": 58150,
    "phonelink-erase": 57563,
    "phonelink-lock": 57564,
    "phonelink-off": 58151,
    "phonelink-ring": 57565,
    "phonelink-setup": 57566,
    "photo": 58384,
    "photo-album": 58385,
    "photo-camera": 58386,
    "photo-filter": 58427,
    "photo-library": 58387,
    "photo-size-select-actual": 58418,
    "photo-size-select-large": 58419,
    "photo-size-select-small": 58420,
    "picture-as-pdf": 58389,
    "picture-in-picture": 59562,
    "picture-in-picture-alt": 59665,
    "pie-chart": 59076,
    "pie-chart-outlined": 59077,
    "pin-drop": 58718,
    "place": 58719,
    "play-arrow": 57399,
    "play-circle-filled": 57400,
    "play-circle-outline": 57401,
    "play-for-work": 59654,
    "playlist-add": 57403,
    "playlist-add-check": 57445,
    "playlist-play": 57439,
    "plus-one": 59392,
    "poll": 59393,
    "polymer": 59563,
    "pool": 60232,
    "portable-wifi-off": 57550,
    "portrait": 58390,
    "power": 58940,
    "power-input": 58166,
    "power-settings-new": 59564,
    "pregnant-woman": 59678,
    "present-to-all": 57567,
    "print": 59565,
    "priority-high": 58949,
    "public": 59403,
    "publish": 57941,
    "query-builder": 59566,
    "question-answer": 59567,
    "queue": 57404,
    "queue-music": 57405,
    "queue-play-next": 57446,
    "radio": 57406,
    "radio-button-checked": 59447,
    "radio-button-unchecked": 59446,
    "rate-review": 58720,
    "receipt": 59568,
    "recent-actors": 57407,
    "record-voice-over": 59679,
    "redeem": 59569,
    "redo": 57690,
    "refresh": 58837,
    "remove": 57691,
    "remove-circle": 57692,
    "remove-circle-outline": 57693,
    "remove-from-queue": 57447,
    "remove-red-eye": 58391,
    "remove-shopping-cart": 59688,
    "reorder": 59646,
    "repeat": 57408,
    "repeat-one": 57409,
    "replay": 57410,
    "replay-10": 57433,
    "replay-30": 57434,
    "replay-5": 57435,
    "reply": 57694,
    "reply-all": 57695,
    "report": 57696,
    "report-problem": 59570,
    "restaurant": 58732,
    "restaurant-menu": 58721,
    "restore": 59571,
    "restore-page": 59689,
    "ring-volume": 57553,
    "room": 59572,
    "room-service": 60233,
    "rotate-90-degrees-ccw": 58392,
    "rotate-left": 58393,
    "rotate-right": 58394,
    "rounded-corner": 59680,
    "router": 58152,
    "rowing": 59681,
    "rss-feed": 57573,
    "rv-hookup": 58946,
    "satellite": 58722,
    "save": 57697,
    "scanner": 58153,
    "schedule": 59573,
    "school": 59404,
    "screen-lock-landscape": 57790,
    "screen-lock-portrait": 57791,
    "screen-lock-rotation": 57792,
    "screen-rotation": 57793,
    "screen-share": 57570,
    "sd-card": 58915,
    "sd-storage": 57794,
    "search": 59574,
    "security": 58154,
    "select-all": 57698,
    "send": 57699,
    "sentiment-dissatisfied": 59409,
    "sentiment-neutral": 59410,
    "sentiment-satisfied": 59411,
    "sentiment-very-dissatisfied": 59412,
    "sentiment-very-satisfied": 59413,
    "settings": 59576,
    "settings-applications": 59577,
    "settings-backup-restore": 59578,
    "settings-bluetooth": 59579,
    "settings-brightness": 59581,
    "settings-cell": 59580,
    "settings-ethernet": 59582,
    "settings-input-antenna": 59583,
    "settings-input-component": 59584,
    "settings-input-composite": 59585,
    "settings-input-hdmi": 59586,
    "settings-input-svideo": 59587,
    "settings-overscan": 59588,
    "settings-phone": 59589,
    "settings-power": 59590,
    "settings-remote": 59591,
    "settings-system-daydream": 57795,
    "settings-voice": 59592,
    "share": 59405,
    "shop": 59593,
    "shop-two": 59594,
    "shopping-basket": 59595,
    "shopping-cart": 59596,
    "short-text": 57953,
    "show-chart": 59105,
    "shuffle": 57411,
    "signal-cellular-4-bar": 57800,
    "signal-cellular-connected-no-internet-4-bar": 57805,
    "signal-cellular-no-sim": 57806,
    "signal-cellular-null": 57807,
    "signal-cellular-off": 57808,
    "signal-wifi-4-bar": 57816,
    "signal-wifi-4-bar-lock": 57817,
    "signal-wifi-off": 57818,
    "sim-card": 58155,
    "sim-card-alert": 58916,
    "skip-next": 57412,
    "skip-previous": 57413,
    "slideshow": 58395,
    "slow-motion-video": 57448,
    "smartphone": 58156,
    "smoke-free": 60234,
    "smoking-rooms": 60235,
    "sms": 58917,
    "sms-failed": 58918,
    "snooze": 57414,
    "sort": 57700,
    "sort-by-alpha": 57427,
    "spa": 60236,
    "space-bar": 57942,
    "speaker": 58157,
    "speaker-group": 58158,
    "speaker-notes": 59597,
    "speaker-notes-off": 59690,
    "speaker-phone": 57554,
    "spellcheck": 59598,
    "star": 59448,
    "star-border": 59450,
    "star-half": 59449,
    "stars": 59600,
    "stay-current-landscape": 57555,
    "stay-current-portrait": 57556,
    "stay-primary-landscape": 57557,
    "stay-primary-portrait": 57558,
    "stop": 57415,
    "stop-screen-share": 57571,
    "storage": 57819,
    "store": 59601,
    "store-mall-directory": 58723,
    "straighten": 58396,
    "streetview": 58734,
    "strikethrough-s": 57943,
    "style": 58397,
    "subdirectory-arrow-left": 58841,
    "subdirectory-arrow-right": 58842,
    "subject": 59602,
    "subscriptions": 57444,
    "subtitles": 57416,
    "subway": 58735,
    "supervisor-account": 59603,
    "surround-sound": 57417,
    "swap-calls": 57559,
    "swap-horiz": 59604,
    "swap-vert": 59605,
    "swap-vertical-circle": 59606,
    "switch-camera": 58398,
    "switch-video": 58399,
    "sync": 58919,
    "sync-disabled": 58920,
    "sync-problem": 58921,
    "system-update": 58922,
    "system-update-alt": 59607,
    "tab": 59608,
    "tab-unselected": 59609,
    "tablet": 58159,
    "tablet-android": 58160,
    "tablet-mac": 58161,
    "tag-faces": 58400,
    "tap-and-play": 58923,
    "terrain": 58724,
    "text-fields": 57954,
    "text-format": 57701,
    "textsms": 57560,
    "texture": 58401,
    "theaters": 59610,
    "thumb-down": 59611,
    "thumb-up": 59612,
    "thumbs-up-down": 59613,
    "time-to-leave": 58924,
    "timelapse": 58402,
    "timeline": 59682,
    "timer": 58405,
    "timer-10": 58403,
    "timer-3": 58404,
    "timer-off": 58406,
    "title": 57956,
    "toc": 59614,
    "today": 59615,
    "toll": 59616,
    "tonality": 58407,
    "touch-app": 59667,
    "toys": 58162,
    "track-changes": 59617,
    "traffic": 58725,
    "train": 58736,
    "tram": 58737,
    "transfer-within-a-station": 58738,
    "transform": 58408,
    "translate": 59618,
    "trending-down": 59619,
    "trending-flat": 59620,
    "trending-up": 59621,
    "tune": 58409,
    "turned-in": 59622,
    "turned-in-not": 59623,
    "tv": 58163,
    "unarchive": 57705,
    "undo": 57702,
    "unfold-less": 58838,
    "unfold-more": 58839,
    "update": 59683,
    "usb": 57824,
    "verified-user": 59624,
    "vertical-align-bottom": 57944,
    "vertical-align-center": 57945,
    "vertical-align-top": 57946,
    "vibration": 58925,
    "video-call": 57456,
    "video-label": 57457,
    "video-library": 57418,
    "videocam": 57419,
    "videocam-off": 57420,
    "videogame-asset": 58168,
    "view-agenda": 59625,
    "view-array": 59626,
    "view-carousel": 59627,
    "view-column": 59628,
    "view-comfy": 58410,
    "view-compact": 58411,
    "view-day": 59629,
    "view-headline": 59630,
    "view-list": 59631,
    "view-module": 59632,
    "view-quilt": 59633,
    "view-stream": 59634,
    "view-week": 59635,
    "vignette": 58421,
    "visibility": 59636,
    "visibility-off": 59637,
    "voice-chat": 58926,
    "voicemail": 57561,
    "volume-down": 57421,
    "volume-mute": 57422,
    "volume-off": 57423,
    "volume-up": 57424,
    "vpn-key": 57562,
    "vpn-lock": 58927,
    "wallpaper": 57788,
    "warning": 57346,
    "watch": 58164,
    "watch-later": 59684,
    "wb-auto": 58412,
    "wb-cloudy": 58413,
    "wb-incandescent": 58414,
    "wb-iridescent": 58422,
    "wb-sunny": 58416,
    "wc": 58941,
    "web": 57425,
    "web-asset": 57449,
    "weekend": 57707,
    "whatshot": 59406,
    "widgets": 57789,
    "wifi": 58942,
    "wifi-lock": 57825,
    "wifi-tethering": 57826,
    "work": 59641,
    "wrap-text": 57947,
    "youtube-searched-for": 59642,
    "zoom-in": 59647,
    "zoom-out": 59648,
    "zoom-out-map": 58731
  };
},725,[],"node_modules/react-native-vector-icons/glyphmaps/MaterialIcons.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.registerCustomIconType = undefined;

  var _Zocial = _require(_dependencyMap[0], "react-native-vector-icons/Zocial");

  var _Zocial2 = _interopRequireDefault(_Zocial);

  var _Octicons = _require(_dependencyMap[1], "react-native-vector-icons/Octicons");

  var _Octicons2 = _interopRequireDefault(_Octicons);

  var _MaterialIcons = _require(_dependencyMap[2], "react-native-vector-icons/MaterialIcons");

  var _MaterialIcons2 = _interopRequireDefault(_MaterialIcons);

  var _MaterialCommunityIcons = _require(_dependencyMap[3], "react-native-vector-icons/MaterialCommunityIcons");

  var _MaterialCommunityIcons2 = _interopRequireDefault(_MaterialCommunityIcons);

  var _Ionicons = _require(_dependencyMap[4], "react-native-vector-icons/Ionicons");

  var _Ionicons2 = _interopRequireDefault(_Ionicons);

  var _Foundation = _require(_dependencyMap[5], "react-native-vector-icons/Foundation");

  var _Foundation2 = _interopRequireDefault(_Foundation);

  var _EvilIcons = _require(_dependencyMap[6], "react-native-vector-icons/EvilIcons");

  var _EvilIcons2 = _interopRequireDefault(_EvilIcons);

  var _Entypo = _require(_dependencyMap[7], "react-native-vector-icons/Entypo");

  var _Entypo2 = _interopRequireDefault(_Entypo);

  var _FontAwesome = _require(_dependencyMap[8], "react-native-vector-icons/FontAwesome");

  var _FontAwesome2 = _interopRequireDefault(_FontAwesome);

  var _SimpleLineIcons = _require(_dependencyMap[9], "react-native-vector-icons/SimpleLineIcons");

  var _SimpleLineIcons2 = _interopRequireDefault(_SimpleLineIcons);

  var _Feather = _require(_dependencyMap[10], "react-native-vector-icons/Feather");

  var _Feather2 = _interopRequireDefault(_Feather);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var customIcons = {};

  var registerCustomIconType = exports.registerCustomIconType = function registerCustomIconType(id, customIcon) {
    customIcons[id] = customIcon;
  };

  exports.default = function (type) {
    switch (type) {
      case 'zocial':
        return _Zocial2.default;

      case 'octicon':
        return _Octicons2.default;

      case 'material':
        return _MaterialIcons2.default;

      case 'material-community':
        return _MaterialCommunityIcons2.default;

      case 'ionicon':
        return _Ionicons2.default;

      case 'foundation':
        return _Foundation2.default;

      case 'evilicon':
        return _EvilIcons2.default;

      case 'entypo':
        return _Entypo2.default;

      case 'font-awesome':
        return _FontAwesome2.default;

      case 'simple-line-icon':
        return _SimpleLineIcons2.default;

      case 'feather':
        return _Feather2.default;

      default:
        if (customIcons.hasOwnProperty(type)) {
          return customIcons[type];
        }

        return _MaterialIcons2.default;
    }
  };
},726,[727,729,679,731,733,735,737,739,741,743,745],"node_modules/react-native-elements/src/helpers/getIconType.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = _require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = _interopRequireDefault(_createIconSet);

  var _Zocial = _require(_dependencyMap[1], "./glyphmaps/Zocial.json");

  var _Zocial2 = _interopRequireDefault(_Zocial);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var iconSet = (0, _createIconSet2.default)(_Zocial2.default, 'zocial', 'Zocial.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},727,[680,728],"node_modules/react-native-vector-icons/Zocial.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "acrobat": 61696,
    "amazon": 61697,
    "android": 61698,
    "angellist": 61699,
    "aol": 61700,
    "appnet": 61701,
    "appstore": 61702,
    "bitbucket": 61703,
    "bitcoin": 61704,
    "blogger": 61705,
    "buffer": 61706,
    "cal": 61707,
    "call": 61708,
    "cart": 61709,
    "chrome": 61710,
    "cloudapp": 61711,
    "creativecommons": 61712,
    "delicious": 61713,
    "digg": 61714,
    "disqus": 61715,
    "dribbble": 61716,
    "dropbox": 61717,
    "drupal": 61718,
    "dwolla": 61720,
    "email": 61721,
    "eventasaurus": 61722,
    "eventbrite": 61723,
    "eventful": 61724,
    "evernote": 61725,
    "facebook": 61726,
    "fivehundredpx": 61727,
    "flattr": 61728,
    "flickr": 61729,
    "forrst": 61730,
    "foursquare": 61731,
    "github": 61732,
    "gmail": 61733,
    "google": 61734,
    "googleplay": 61735,
    "googleplus": 61736,
    "gowalla": 61737,
    "grooveshark": 61738,
    "guest": 61739,
    "html5": 61740,
    "ie": 61741,
    "instagram": 61742,
    "instapaper": 61743,
    "intensedebate": 61744,
    "itunes": 61745,
    "klout": 61746,
    "lanyrd": 61747,
    "lastfm": 61748,
    "lego": 61749,
    "linkedin": 61750,
    "lkdto": 61751,
    "logmein": 61752,
    "macstore": 61753,
    "meetup": 61754,
    "myspace": 61755,
    "ninetyninedesigns": 61756,
    "openid": 61757,
    "opentable": 61758,
    "paypal": 61759,
    "persona": 61796,
    "pinboard": 61760,
    "pinterest": 61761,
    "plancast": 61762,
    "plurk": 61763,
    "pocket": 61764,
    "podcast": 61765,
    "posterous": 61766,
    "print": 61767,
    "quora": 61768,
    "reddit": 61769,
    "rss": 61770,
    "scribd": 61771,
    "skype": 61772,
    "smashing": 61773,
    "songkick": 61774,
    "soundcloud": 61775,
    "spotify": 61776,
    "stackoverflow": 61777,
    "statusnet": 61778,
    "steam": 61779,
    "stripe": 61780,
    "stumbleupon": 61781,
    "tumblr": 61782,
    "twitter": 61783,
    "viadeo": 61784,
    "vimeo": 61785,
    "vk": 61786,
    "weibo": 61787,
    "wikipedia": 61788,
    "windows": 61789,
    "wordpress": 61790,
    "xing": 61791,
    "yahoo": 61792,
    "ycombinator": 61793,
    "yelp": 61794,
    "youtube": 61795
  };
},728,[],"node_modules/react-native-vector-icons/glyphmaps/Zocial.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = _require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = _interopRequireDefault(_createIconSet);

  var _Octicons = _require(_dependencyMap[1], "./glyphmaps/Octicons.json");

  var _Octicons2 = _interopRequireDefault(_Octicons);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var iconSet = (0, _createIconSet2.default)(_Octicons2.default, 'Octicons', 'Octicons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},729,[680,730],"node_modules/react-native-vector-icons/Octicons.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "alert": 61696,
    "arrow-down": 61697,
    "arrow-left": 61698,
    "arrow-right": 61699,
    "arrow-small-down": 61700,
    "arrow-small-left": 61701,
    "arrow-small-right": 61702,
    "arrow-small-up": 61703,
    "arrow-up": 61704,
    "beaker": 61705,
    "bell": 61706,
    "bold": 61707,
    "book": 61708,
    "bookmark": 61709,
    "briefcase": 61710,
    "broadcast": 61711,
    "browser": 61712,
    "bug": 61713,
    "calendar": 61714,
    "check": 61715,
    "checklist": 61716,
    "chevron-down": 61717,
    "chevron-left": 61718,
    "chevron-right": 61719,
    "chevron-up": 61720,
    "circle-slash": 61721,
    "circuit-board": 61722,
    "clippy": 61723,
    "clock": 61724,
    "cloud-download": 61725,
    "cloud-upload": 61726,
    "code": 61727,
    "comment": 61728,
    "comment-discussion": 61729,
    "credit-card": 61730,
    "dash": 61731,
    "dashboard": 61732,
    "database": 61733,
    "desktop-download": 61734,
    "device-camera": 61735,
    "device-camera-video": 61736,
    "device-desktop": 61737,
    "device-mobile": 61738,
    "diff": 61739,
    "diff-added": 61740,
    "diff-ignored": 61741,
    "diff-modified": 61742,
    "diff-removed": 61743,
    "diff-renamed": 61744,
    "ellipsis": 61745,
    "eye": 61746,
    "file": 61747,
    "file-binary": 61748,
    "file-code": 61749,
    "file-directory": 61750,
    "file-media": 61751,
    "file-pdf": 61752,
    "file-submodule": 61753,
    "file-symlink-directory": 61754,
    "file-symlink-file": 61755,
    "file-zip": 61756,
    "flame": 61757,
    "fold": 61758,
    "gear": 61759,
    "gift": 61760,
    "gist": 61761,
    "gist-secret": 61762,
    "git-branch": 61763,
    "git-commit": 61764,
    "git-compare": 61765,
    "git-merge": 61766,
    "git-pull-request": 61767,
    "globe": 61768,
    "grabber": 61769,
    "graph": 61770,
    "heart": 61771,
    "history": 61772,
    "home": 61773,
    "horizontal-rule": 61774,
    "hubot": 61775,
    "inbox": 61776,
    "info": 61777,
    "issue-closed": 61778,
    "issue-opened": 61779,
    "issue-reopened": 61780,
    "italic": 61781,
    "jersey": 61782,
    "kebab-horizontal": 61783,
    "kebab-vertical": 61784,
    "key": 61785,
    "keyboard": 61786,
    "law": 61787,
    "light-bulb": 61788,
    "link": 61789,
    "link-external": 61790,
    "list-ordered": 61791,
    "list-unordered": 61792,
    "location": 61793,
    "lock": 61794,
    "logo-gist": 61795,
    "logo-github": 61796,
    "mail": 61797,
    "mail-read": 61798,
    "mark-github": 61799,
    "markdown": 61800,
    "megaphone": 61801,
    "mention": 61802,
    "milestone": 61803,
    "mirror": 61804,
    "mortar-board": 61805,
    "mute": 61806,
    "no-newline": 61807,
    "note": 61808,
    "octoface": 61809,
    "organization": 61810,
    "package": 61811,
    "paintcan": 61812,
    "pencil": 61813,
    "person": 61814,
    "pin": 61815,
    "plug": 61816,
    "plus": 61817,
    "plus-small": 61818,
    "primitive-dot": 61819,
    "primitive-square": 61820,
    "project": 61821,
    "pulse": 61822,
    "question": 61823,
    "quote": 61824,
    "radio-tower": 61825,
    "reply": 61826,
    "repo": 61827,
    "repo-clone": 61828,
    "repo-force-push": 61829,
    "repo-forked": 61830,
    "repo-pull": 61831,
    "repo-push": 61832,
    "report": 61833,
    "rocket": 61834,
    "rss": 61835,
    "ruby": 61836,
    "screen-full": 61837,
    "screen-normal": 61838,
    "search": 61839,
    "server": 61840,
    "settings": 61841,
    "shield": 61842,
    "sign-in": 61843,
    "sign-out": 61844,
    "smiley": 61845,
    "squirrel": 61846,
    "star": 61847,
    "stop": 61848,
    "sync": 61849,
    "tag": 61850,
    "tasklist": 61851,
    "telescope": 61852,
    "terminal": 61853,
    "text-size": 61854,
    "three-bars": 61855,
    "thumbsdown": 61856,
    "thumbsup": 61857,
    "tools": 61858,
    "trashcan": 61859,
    "triangle-down": 61860,
    "triangle-left": 61861,
    "triangle-right": 61862,
    "triangle-up": 61863,
    "unfold": 61864,
    "unmute": 61865,
    "unverified": 61866,
    "verified": 61867,
    "versions": 61868,
    "watch": 61869,
    "x": 61870,
    "zap": 61871
  };
},730,[],"node_modules/react-native-vector-icons/glyphmaps/Octicons.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = _require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = _interopRequireDefault(_createIconSet);

  var _MaterialCommunityIcons = _require(_dependencyMap[1], "./glyphmaps/MaterialCommunityIcons.json");

  var _MaterialCommunityIcons2 = _interopRequireDefault(_MaterialCommunityIcons);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var iconSet = (0, _createIconSet2.default)(_MaterialCommunityIcons2.default, 'Material Design Icons', 'MaterialCommunityIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},731,[680,732],"node_modules/react-native-vector-icons/MaterialCommunityIcons.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "access-point": 61442,
    "access-point-network": 61443,
    "account": 61444,
    "account-alert": 61445,
    "account-box": 61446,
    "account-box-outline": 61447,
    "account-card-details": 62930,
    "account-check": 61448,
    "account-circle": 61449,
    "account-convert": 61450,
    "account-edit": 63163,
    "account-group": 63560,
    "account-heart": 63640,
    "account-key": 61451,
    "account-location": 61452,
    "account-minus": 61453,
    "account-multiple": 61454,
    "account-multiple-minus": 62931,
    "account-multiple-outline": 61455,
    "account-multiple-plus": 61456,
    "account-multiple-plus-outline": 63487,
    "account-network": 61457,
    "account-off": 61458,
    "account-outline": 61459,
    "account-plus": 61460,
    "account-plus-outline": 63488,
    "account-remove": 61461,
    "account-search": 61462,
    "account-settings": 63024,
    "account-settings-variant": 63025,
    "account-star": 61463,
    "account-switch": 61465,
    "accusoft": 63561,
    "adjust": 61466,
    "air-conditioner": 61467,
    "airballoon": 61468,
    "airplane": 61469,
    "airplane-landing": 62932,
    "airplane-off": 61470,
    "airplane-takeoff": 62933,
    "airplay": 61471,
    "airport": 63562,
    "alarm": 61472,
    "alarm-bell": 63373,
    "alarm-check": 61473,
    "alarm-light": 63374,
    "alarm-multiple": 61474,
    "alarm-off": 61475,
    "alarm-plus": 61476,
    "alarm-snooze": 63117,
    "album": 61477,
    "alert": 61478,
    "alert-box": 61479,
    "alert-circle": 61480,
    "alert-circle-outline": 62934,
    "alert-decagram": 63164,
    "alert-octagon": 61481,
    "alert-octagram": 63334,
    "alert-outline": 61482,
    "alien": 63641,
    "all-inclusive": 63165,
    "allo": 63489,
    "alpha": 61483,
    "alphabetical": 61484,
    "altimeter": 62935,
    "amazon": 61485,
    "amazon-clouddrive": 61486,
    "ambulance": 61487,
    "amplifier": 61488,
    "anchor": 61489,
    "android": 61490,
    "android-debug-bridge": 61491,
    "android-head": 63375,
    "android-studio": 61492,
    "angular": 63153,
    "angularjs": 63166,
    "animation": 62936,
    "anvil": 63642,
    "apple": 61493,
    "apple-finder": 61494,
    "apple-ios": 61495,
    "apple-keyboard-caps": 63026,
    "apple-keyboard-command": 63027,
    "apple-keyboard-control": 63028,
    "apple-keyboard-option": 63029,
    "apple-keyboard-shift": 63030,
    "apple-mobileme": 61496,
    "apple-safari": 61497,
    "application": 62996,
    "approval": 63376,
    "apps": 61499,
    "archive": 61500,
    "arrange-bring-forward": 61501,
    "arrange-bring-to-front": 61502,
    "arrange-send-backward": 61503,
    "arrange-send-to-back": 61504,
    "arrow-all": 61505,
    "arrow-bottom-left": 61506,
    "arrow-bottom-right": 61507,
    "arrow-collapse": 62997,
    "arrow-collapse-all": 61508,
    "arrow-collapse-down": 63377,
    "arrow-collapse-horizontal": 63563,
    "arrow-collapse-left": 63378,
    "arrow-collapse-right": 63379,
    "arrow-collapse-up": 63380,
    "arrow-collapse-vertical": 63564,
    "arrow-down": 61509,
    "arrow-down-bold": 63277,
    "arrow-down-bold-box": 63278,
    "arrow-down-bold-box-outline": 63279,
    "arrow-down-bold-circle": 61511,
    "arrow-down-bold-circle-outline": 61512,
    "arrow-down-bold-hexagon-outline": 61513,
    "arrow-down-box": 63167,
    "arrow-down-drop-circle": 61514,
    "arrow-down-drop-circle-outline": 61515,
    "arrow-down-thick": 61510,
    "arrow-expand": 62998,
    "arrow-expand-all": 61516,
    "arrow-expand-down": 63381,
    "arrow-expand-horizontal": 63565,
    "arrow-expand-left": 63382,
    "arrow-expand-right": 63383,
    "arrow-expand-up": 63384,
    "arrow-expand-vertical": 63566,
    "arrow-left": 61517,
    "arrow-left-bold": 63280,
    "arrow-left-bold-box": 63281,
    "arrow-left-bold-box-outline": 63282,
    "arrow-left-bold-circle": 61519,
    "arrow-left-bold-circle-outline": 61520,
    "arrow-left-bold-hexagon-outline": 61521,
    "arrow-left-box": 63168,
    "arrow-left-drop-circle": 61522,
    "arrow-left-drop-circle-outline": 61523,
    "arrow-left-thick": 61518,
    "arrow-right": 61524,
    "arrow-right-bold": 63283,
    "arrow-right-bold-box": 63284,
    "arrow-right-bold-box-outline": 63285,
    "arrow-right-bold-circle": 61526,
    "arrow-right-bold-circle-outline": 61527,
    "arrow-right-bold-hexagon-outline": 61528,
    "arrow-right-box": 63169,
    "arrow-right-drop-circle": 61529,
    "arrow-right-drop-circle-outline": 61530,
    "arrow-right-thick": 61525,
    "arrow-top-left": 61531,
    "arrow-top-right": 61532,
    "arrow-up": 61533,
    "arrow-up-bold": 63286,
    "arrow-up-bold-box": 63287,
    "arrow-up-bold-box-outline": 63288,
    "arrow-up-bold-circle": 61535,
    "arrow-up-bold-circle-outline": 61536,
    "arrow-up-bold-hexagon-outline": 61537,
    "arrow-up-box": 63170,
    "arrow-up-drop-circle": 61538,
    "arrow-up-drop-circle-outline": 61539,
    "arrow-up-thick": 61534,
    "artist": 63490,
    "assistant": 61540,
    "asterisk": 63171,
    "at": 61541,
    "atlassian": 63491,
    "atom": 63335,
    "attachment": 61542,
    "audiobook": 61543,
    "augmented-reality": 63567,
    "auto-fix": 61544,
    "auto-upload": 61545,
    "autorenew": 61546,
    "av-timer": 61547,
    "azure": 63492,
    "baby": 61548,
    "baby-buggy": 63118,
    "backburger": 61549,
    "backspace": 61550,
    "backup-restore": 61551,
    "badminton": 63568,
    "bandcamp": 63092,
    "bank": 61552,
    "barcode": 61553,
    "barcode-scan": 61554,
    "barley": 61555,
    "barrel": 61556,
    "baseball": 63569,
    "baseball-bat": 63570,
    "basecamp": 61557,
    "basket": 61558,
    "basket-fill": 61559,
    "basket-unfill": 61560,
    "basketball": 63493,
    "battery": 61561,
    "battery-10": 61562,
    "battery-20": 61563,
    "battery-30": 61564,
    "battery-40": 61565,
    "battery-50": 61566,
    "battery-60": 61567,
    "battery-70": 61568,
    "battery-80": 61569,
    "battery-90": 61570,
    "battery-alert": 61571,
    "battery-charging": 61572,
    "battery-charging-10": 63643,
    "battery-charging-100": 61573,
    "battery-charging-20": 61574,
    "battery-charging-30": 61575,
    "battery-charging-40": 61576,
    "battery-charging-50": 63644,
    "battery-charging-60": 61577,
    "battery-charging-70": 63645,
    "battery-charging-80": 61578,
    "battery-charging-90": 61579,
    "battery-charging-outline": 63646,
    "battery-charging-wireless": 63494,
    "battery-charging-wireless-10": 63495,
    "battery-charging-wireless-20": 63496,
    "battery-charging-wireless-30": 63497,
    "battery-charging-wireless-40": 63498,
    "battery-charging-wireless-50": 63499,
    "battery-charging-wireless-60": 63500,
    "battery-charging-wireless-70": 63501,
    "battery-charging-wireless-80": 63502,
    "battery-charging-wireless-90": 63503,
    "battery-charging-wireless-alert": 63504,
    "battery-charging-wireless-outline": 63505,
    "battery-minus": 61580,
    "battery-negative": 61581,
    "battery-outline": 61582,
    "battery-plus": 61583,
    "battery-positive": 61584,
    "battery-unknown": 61585,
    "beach": 61586,
    "beaker": 63119,
    "beats": 61591,
    "bed-empty": 63647,
    "beer": 61592,
    "behance": 61593,
    "bell": 61594,
    "bell-off": 61595,
    "bell-outline": 61596,
    "bell-plus": 61597,
    "bell-ring": 61598,
    "bell-ring-outline": 61599,
    "bell-sleep": 61600,
    "beta": 61601,
    "bible": 61602,
    "bike": 61603,
    "bing": 61604,
    "binoculars": 61605,
    "bio": 61606,
    "biohazard": 61607,
    "bitbucket": 61608,
    "bitcoin": 63506,
    "black-mesa": 61609,
    "blackberry": 61610,
    "blender": 61611,
    "blinds": 61612,
    "block-helper": 61613,
    "blogger": 61614,
    "bluetooth": 61615,
    "bluetooth-audio": 61616,
    "bluetooth-connect": 61617,
    "bluetooth-off": 61618,
    "bluetooth-settings": 61619,
    "bluetooth-transfer": 61620,
    "blur": 61621,
    "blur-linear": 61622,
    "blur-off": 61623,
    "blur-radial": 61624,
    "bomb": 63120,
    "bomb-off": 63172,
    "bone": 61625,
    "book": 61626,
    "book-minus": 62937,
    "book-multiple": 61627,
    "book-multiple-variant": 61628,
    "book-open": 61629,
    "book-open-page-variant": 62938,
    "book-open-variant": 61630,
    "book-plus": 62939,
    "book-secure": 63385,
    "book-unsecure": 63386,
    "book-variant": 61631,
    "bookmark": 61632,
    "bookmark-check": 61633,
    "bookmark-music": 61634,
    "bookmark-outline": 61635,
    "bookmark-plus": 61637,
    "bookmark-plus-outline": 61636,
    "bookmark-remove": 61638,
    "boombox": 62940,
    "bootstrap": 63173,
    "border-all": 61639,
    "border-all-variant": 63648,
    "border-bottom": 61640,
    "border-bottom-variant": 63649,
    "border-color": 61641,
    "border-horizontal": 61642,
    "border-inside": 61643,
    "border-left": 61644,
    "border-left-variant": 63650,
    "border-none": 61645,
    "border-none-variant": 63651,
    "border-outside": 61646,
    "border-right": 61647,
    "border-right-variant": 63652,
    "border-style": 61648,
    "border-top": 61649,
    "border-top-variant": 63653,
    "border-vertical": 61650,
    "bottle-wine": 63571,
    "bow-tie": 63095,
    "bowl": 62999,
    "bowling": 61651,
    "box": 61652,
    "box-cutter": 61653,
    "box-shadow": 63031,
    "bridge": 63000,
    "briefcase": 61654,
    "briefcase-check": 61655,
    "briefcase-download": 61656,
    "briefcase-outline": 63507,
    "briefcase-upload": 61657,
    "brightness-1": 61658,
    "brightness-2": 61659,
    "brightness-3": 61660,
    "brightness-4": 61661,
    "brightness-5": 61662,
    "brightness-6": 61663,
    "brightness-7": 61664,
    "brightness-auto": 61665,
    "broom": 61666,
    "brush": 61667,
    "buffer": 63001,
    "bug": 61668,
    "bulletin-board": 61669,
    "bullhorn": 61670,
    "bullseye": 62941,
    "bus": 61671,
    "bus-articulated-end": 63387,
    "bus-articulated-front": 63388,
    "bus-double-decker": 63389,
    "bus-school": 63390,
    "bus-side": 63391,
    "cached": 61672,
    "cake": 61673,
    "cake-layered": 61674,
    "cake-variant": 61675,
    "calculator": 61676,
    "calendar": 61677,
    "calendar-blank": 61678,
    "calendar-check": 61679,
    "calendar-clock": 61680,
    "calendar-edit": 63654,
    "calendar-multiple": 61681,
    "calendar-multiple-check": 61682,
    "calendar-plus": 61683,
    "calendar-question": 63121,
    "calendar-range": 63096,
    "calendar-remove": 61684,
    "calendar-text": 61685,
    "calendar-today": 61686,
    "call-made": 61687,
    "call-merge": 61688,
    "call-missed": 61689,
    "call-received": 61690,
    "call-split": 61691,
    "camcorder": 61692,
    "camcorder-box": 61693,
    "camcorder-box-off": 61694,
    "camcorder-off": 61695,
    "camera": 61696,
    "camera-burst": 63122,
    "camera-enhance": 61697,
    "camera-front": 61698,
    "camera-front-variant": 61699,
    "camera-gopro": 63392,
    "camera-iris": 61700,
    "camera-metering-center": 63393,
    "camera-metering-matrix": 63394,
    "camera-metering-partial": 63395,
    "camera-metering-spot": 63396,
    "camera-off": 62943,
    "camera-party-mode": 61701,
    "camera-rear": 61702,
    "camera-rear-variant": 61703,
    "camera-switch": 61704,
    "camera-timer": 61705,
    "cancel": 63289,
    "candle": 62946,
    "candycane": 61706,
    "cannabis": 63397,
    "car": 61707,
    "car-battery": 61708,
    "car-connected": 61709,
    "car-convertible": 63398,
    "car-estate": 63399,
    "car-hatchback": 63400,
    "car-pickup": 63401,
    "car-side": 63402,
    "car-sports": 63403,
    "car-wash": 61710,
    "caravan": 63404,
    "cards": 63032,
    "cards-outline": 63033,
    "cards-playing-outline": 63034,
    "cards-variant": 63174,
    "carrot": 61711,
    "cart": 61712,
    "cart-off": 63083,
    "cart-outline": 61713,
    "cart-plus": 61714,
    "case-sensitive-alt": 61715,
    "cash": 61716,
    "cash-100": 61717,
    "cash-multiple": 61718,
    "cash-usd": 61719,
    "cast": 61720,
    "cast-connected": 61721,
    "cast-off": 63369,
    "castle": 61722,
    "cat": 61723,
    "cctv": 63405,
    "ceiling-light": 63336,
    "cellphone": 61724,
    "cellphone-android": 61725,
    "cellphone-basic": 61726,
    "cellphone-dock": 61727,
    "cellphone-iphone": 61728,
    "cellphone-link": 61729,
    "cellphone-link-off": 61730,
    "cellphone-settings": 61731,
    "cellphone-wireless": 63508,
    "certificate": 61732,
    "chair-school": 61733,
    "chart-arc": 61734,
    "chart-areaspline": 61735,
    "chart-bar": 61736,
    "chart-bar-stacked": 63337,
    "chart-bubble": 62947,
    "chart-donut": 63406,
    "chart-donut-variant": 63407,
    "chart-gantt": 63084,
    "chart-histogram": 61737,
    "chart-line": 61738,
    "chart-line-stacked": 63338,
    "chart-line-variant": 63408,
    "chart-pie": 61739,
    "chart-scatterplot-hexbin": 63085,
    "chart-timeline": 63086,
    "check": 61740,
    "check-all": 61741,
    "check-circle": 62944,
    "check-circle-outline": 62945,
    "check-outline": 63572,
    "checkbox-blank": 61742,
    "checkbox-blank-circle": 61743,
    "checkbox-blank-circle-outline": 61744,
    "checkbox-blank-outline": 61745,
    "checkbox-intermediate": 63573,
    "checkbox-marked": 61746,
    "checkbox-marked-circle": 61747,
    "checkbox-marked-circle-outline": 61748,
    "checkbox-marked-outline": 61749,
    "checkbox-multiple-blank": 61750,
    "checkbox-multiple-blank-circle": 63035,
    "checkbox-multiple-blank-circle-outline": 63036,
    "checkbox-multiple-blank-outline": 61751,
    "checkbox-multiple-marked": 61752,
    "checkbox-multiple-marked-circle": 63037,
    "checkbox-multiple-marked-circle-outline": 63038,
    "checkbox-multiple-marked-outline": 61753,
    "checkerboard": 61754,
    "chemical-weapon": 61755,
    "chess-bishop": 63579,
    "chess-king": 63574,
    "chess-knight": 63575,
    "chess-pawn": 63576,
    "chess-queen": 63577,
    "chess-rook": 63578,
    "chevron-double-down": 61756,
    "chevron-double-left": 61757,
    "chevron-double-right": 61758,
    "chevron-double-up": 61759,
    "chevron-down": 61760,
    "chevron-left": 61761,
    "chevron-right": 61762,
    "chevron-up": 61763,
    "chili-hot": 63409,
    "chili-medium": 63410,
    "chili-mild": 63411,
    "chip": 63002,
    "church": 61764,
    "circle": 63332,
    "circle-outline": 63333,
    "cisco-webex": 61765,
    "city": 61766,
    "clipboard": 61767,
    "clipboard-account": 61768,
    "clipboard-alert": 61769,
    "clipboard-arrow-down": 61770,
    "clipboard-arrow-left": 61771,
    "clipboard-check": 61772,
    "clipboard-check-outline": 63655,
    "clipboard-flow": 63175,
    "clipboard-outline": 61773,
    "clipboard-plus": 63312,
    "clipboard-pulse": 63580,
    "clipboard-pulse-outline": 63581,
    "clipboard-text": 61774,
    "clippy": 61775,
    "clock": 61776,
    "clock-alert": 62926,
    "clock-end": 61777,
    "clock-fast": 61778,
    "clock-in": 61779,
    "clock-out": 61780,
    "clock-start": 61781,
    "close": 61782,
    "close-box": 61783,
    "close-box-outline": 61784,
    "close-circle": 61785,
    "close-circle-outline": 61786,
    "close-network": 61787,
    "close-octagon": 61788,
    "close-octagon-outline": 61789,
    "close-outline": 63176,
    "closed-caption": 61790,
    "cloud": 61791,
    "cloud-braces": 63412,
    "cloud-check": 61792,
    "cloud-circle": 61793,
    "cloud-download": 61794,
    "cloud-off-outline": 61796,
    "cloud-outline": 61795,
    "cloud-print": 61797,
    "cloud-print-outline": 61798,
    "cloud-sync": 63039,
    "cloud-tags": 63413,
    "cloud-upload": 61799,
    "clover": 63509,
    "code-array": 61800,
    "code-braces": 61801,
    "code-brackets": 61802,
    "code-equal": 61803,
    "code-greater-than": 61804,
    "code-greater-than-or-equal": 61805,
    "code-less-than": 61806,
    "code-less-than-or-equal": 61807,
    "code-not-equal": 61808,
    "code-not-equal-variant": 61809,
    "code-parentheses": 61810,
    "code-string": 61811,
    "code-tags": 61812,
    "code-tags-check": 63123,
    "codepen": 61813,
    "coffee": 61814,
    "coffee-outline": 63177,
    "coffee-to-go": 61815,
    "coin": 61816,
    "coins": 63124,
    "collage": 63040,
    "color-helper": 61817,
    "comment": 61818,
    "comment-account": 61819,
    "comment-account-outline": 61820,
    "comment-alert": 61821,
    "comment-alert-outline": 61822,
    "comment-check": 61823,
    "comment-check-outline": 61824,
    "comment-multiple": 63582,
    "comment-multiple-outline": 61825,
    "comment-outline": 61826,
    "comment-plus-outline": 61827,
    "comment-processing": 61828,
    "comment-processing-outline": 61829,
    "comment-question": 63510,
    "comment-question-outline": 61830,
    "comment-remove": 62942,
    "comment-remove-outline": 61831,
    "comment-text": 61832,
    "comment-text-multiple": 63583,
    "comment-text-multiple-outline": 63584,
    "comment-text-outline": 61833,
    "compare": 61834,
    "compass": 61835,
    "compass-outline": 61836,
    "console": 61837,
    "console-line": 63414,
    "console-network": 63656,
    "contact-mail": 61838,
    "contacts": 63178,
    "content-copy": 61839,
    "content-cut": 61840,
    "content-duplicate": 61841,
    "content-paste": 61842,
    "content-save": 61843,
    "content-save-all": 61844,
    "content-save-outline": 63511,
    "content-save-settings": 63003,
    "contrast": 61845,
    "contrast-box": 61846,
    "contrast-circle": 61847,
    "cookie": 61848,
    "copyright": 62950,
    "corn": 63415,
    "counter": 61849,
    "cow": 61850,
    "crane": 63585,
    "creation": 61897,
    "credit-card": 61851,
    "credit-card-multiple": 61852,
    "credit-card-off": 62948,
    "credit-card-plus": 63093,
    "credit-card-scan": 61853,
    "crop": 61854,
    "crop-free": 61855,
    "crop-landscape": 61856,
    "crop-portrait": 61857,
    "crop-rotate": 63125,
    "crop-square": 61858,
    "crosshairs": 61859,
    "crosshairs-gps": 61860,
    "crown": 61861,
    "cube": 61862,
    "cube-outline": 61863,
    "cube-send": 61864,
    "cube-unfolded": 61865,
    "cup": 61866,
    "cup-off": 62949,
    "cup-water": 61867,
    "curling": 63586,
    "currency-bdt": 63587,
    "currency-btc": 61868,
    "currency-chf": 63416,
    "currency-cny": 63417,
    "currency-eth": 63418,
    "currency-eur": 61869,
    "currency-gbp": 61870,
    "currency-inr": 61871,
    "currency-jpy": 63419,
    "currency-krw": 63420,
    "currency-kzt": 63588,
    "currency-ngn": 61872,
    "currency-rub": 61873,
    "currency-sign": 63421,
    "currency-try": 61874,
    "currency-twd": 63422,
    "currency-usd": 61875,
    "currency-usd-off": 63097,
    "cursor-default": 61876,
    "cursor-default-outline": 61877,
    "cursor-move": 61878,
    "cursor-pointer": 61879,
    "cursor-text": 62951,
    "database": 61880,
    "database-minus": 61881,
    "database-plus": 61882,
    "database-search": 63589,
    "debug-step-into": 61883,
    "debug-step-out": 61884,
    "debug-step-over": 61885,
    "decagram": 63339,
    "decagram-outline": 63340,
    "decimal-decrease": 61886,
    "decimal-increase": 61887,
    "delete": 61888,
    "delete-circle": 63106,
    "delete-empty": 63179,
    "delete-forever": 62952,
    "delete-restore": 63512,
    "delete-sweep": 62953,
    "delete-variant": 61889,
    "delta": 61890,
    "deskphone": 61891,
    "desktop-classic": 63423,
    "desktop-mac": 61892,
    "desktop-tower": 61893,
    "details": 61894,
    "developer-board": 63126,
    "deviantart": 61895,
    "dialpad": 63004,
    "diamond": 61896,
    "dice-1": 61898,
    "dice-2": 61899,
    "dice-3": 61900,
    "dice-4": 61901,
    "dice-5": 61902,
    "dice-6": 61903,
    "dice-d10": 63342,
    "dice-d12": 63590,
    "dice-d20": 62954,
    "dice-d4": 62955,
    "dice-d6": 62956,
    "dice-d8": 62957,
    "dice-multiple": 63341,
    "dictionary": 63005,
    "dip-switch": 63424,
    "directions": 61904,
    "directions-fork": 63041,
    "discord": 63087,
    "disk": 62958,
    "disk-alert": 61905,
    "disqus": 61906,
    "disqus-outline": 61907,
    "division": 61908,
    "division-box": 61909,
    "dna": 63107,
    "dns": 61910,
    "do-not-disturb": 63127,
    "do-not-disturb-off": 63128,
    "docker": 63591,
    "dolby": 63154,
    "domain": 61911,
    "donkey": 63425,
    "door": 63513,
    "door-closed": 63514,
    "door-open": 63515,
    "doorbell-video": 63592,
    "dots-horizontal": 61912,
    "dots-horizontal-circle": 63426,
    "dots-vertical": 61913,
    "dots-vertical-circle": 63427,
    "douban": 63129,
    "download": 61914,
    "download-network": 63219,
    "drag": 61915,
    "drag-horizontal": 61916,
    "drag-vertical": 61917,
    "drawing": 61918,
    "drawing-box": 61919,
    "dribbble": 61920,
    "dribbble-box": 61921,
    "drone": 61922,
    "dropbox": 61923,
    "drupal": 61924,
    "duck": 61925,
    "dumbbell": 61926,
    "ear-hearing": 63428,
    "earth": 61927,
    "earth-box": 63180,
    "earth-box-off": 63181,
    "earth-off": 61928,
    "edge": 61929,
    "eject": 61930,
    "elephant": 63429,
    "elevation-decline": 61931,
    "elevation-rise": 61932,
    "elevator": 61933,
    "email": 61934,
    "email-alert": 63182,
    "email-open": 61935,
    "email-open-outline": 62959,
    "email-outline": 61936,
    "email-secure": 61937,
    "email-variant": 62960,
    "emby": 63155,
    "emoticon": 61938,
    "emoticon-cool": 61939,
    "emoticon-dead": 63130,
    "emoticon-devil": 61940,
    "emoticon-excited": 63131,
    "emoticon-happy": 61941,
    "emoticon-neutral": 61942,
    "emoticon-poop": 61943,
    "emoticon-sad": 61944,
    "emoticon-tongue": 61945,
    "engine": 61946,
    "engine-outline": 61947,
    "equal": 61948,
    "equal-box": 61949,
    "eraser": 61950,
    "eraser-variant": 63042,
    "escalator": 61951,
    "ethereum": 63593,
    "ethernet": 61952,
    "ethernet-cable": 61953,
    "ethernet-cable-off": 61954,
    "etsy": 61955,
    "ev-station": 62961,
    "eventbrite": 63430,
    "evernote": 61956,
    "exclamation": 61957,
    "exit-to-app": 61958,
    "export": 61959,
    "eye": 61960,
    "eye-off": 61961,
    "eye-off-outline": 63184,
    "eye-outline": 63183,
    "eye-plus": 63594,
    "eye-plus-outline": 63595,
    "eye-settings": 63596,
    "eye-settings-outline": 63597,
    "eyedropper": 61962,
    "eyedropper-variant": 61963,
    "face": 63043,
    "face-profile": 63044,
    "facebook": 61964,
    "facebook-box": 61965,
    "facebook-messenger": 61966,
    "factory": 61967,
    "fan": 61968,
    "fan-off": 63516,
    "fast-forward": 61969,
    "fast-forward-outline": 63185,
    "fax": 61970,
    "feather": 63186,
    "ferry": 61971,
    "file": 61972,
    "file-account": 63290,
    "file-chart": 61973,
    "file-check": 61974,
    "file-cloud": 61975,
    "file-compare": 63657,
    "file-delimited": 61976,
    "file-document": 61977,
    "file-document-box": 61978,
    "file-excel": 61979,
    "file-excel-box": 61980,
    "file-export": 61981,
    "file-find": 61982,
    "file-hidden": 62995,
    "file-image": 61983,
    "file-import": 61984,
    "file-lock": 61985,
    "file-multiple": 61986,
    "file-music": 61987,
    "file-outline": 61988,
    "file-pdf": 61989,
    "file-pdf-box": 61990,
    "file-percent": 63517,
    "file-plus": 63313,
    "file-powerpoint": 61991,
    "file-powerpoint-box": 61992,
    "file-presentation-box": 61993,
    "file-question": 63598,
    "file-restore": 63088,
    "file-send": 61994,
    "file-tree": 63045,
    "file-video": 61995,
    "file-word": 61996,
    "file-word-box": 61997,
    "file-xml": 61998,
    "film": 61999,
    "filmstrip": 62000,
    "filmstrip-off": 62001,
    "filter": 62002,
    "filter-outline": 62003,
    "filter-remove": 62004,
    "filter-remove-outline": 62005,
    "filter-variant": 62006,
    "finance": 63518,
    "find-replace": 63187,
    "fingerprint": 62007,
    "fire": 62008,
    "fire-truck": 63658,
    "firefox": 62009,
    "fish": 62010,
    "flag": 62011,
    "flag-checkered": 62012,
    "flag-outline": 62013,
    "flag-triangle": 62015,
    "flag-variant": 62016,
    "flag-variant-outline": 62014,
    "flash": 62017,
    "flash-auto": 62018,
    "flash-circle": 63519,
    "flash-off": 62019,
    "flash-outline": 63188,
    "flash-red-eye": 63098,
    "flashlight": 62020,
    "flashlight-off": 62021,
    "flask": 61587,
    "flask-empty": 61588,
    "flask-empty-outline": 61589,
    "flask-outline": 61590,
    "flattr": 62022,
    "flip-to-back": 62023,
    "flip-to-front": 62024,
    "floor-plan": 63520,
    "floppy": 62025,
    "flower": 62026,
    "folder": 62027,
    "folder-account": 62028,
    "folder-download": 62029,
    "folder-google-drive": 62030,
    "folder-image": 62031,
    "folder-key": 63659,
    "folder-key-network": 63660,
    "folder-lock": 62032,
    "folder-lock-open": 62033,
    "folder-move": 62034,
    "folder-multiple": 62035,
    "folder-multiple-image": 62036,
    "folder-multiple-outline": 62037,
    "folder-network": 63599,
    "folder-open": 63343,
    "folder-outline": 62038,
    "folder-plus": 62039,
    "folder-remove": 62040,
    "folder-star": 63132,
    "folder-upload": 62041,
    "font-awesome": 61498,
    "food": 62042,
    "food-apple": 62043,
    "food-croissant": 63431,
    "food-fork-drink": 62962,
    "food-off": 62963,
    "food-variant": 62044,
    "football": 62045,
    "football-australian": 62046,
    "football-helmet": 62047,
    "forklift": 63432,
    "format-align-bottom": 63314,
    "format-align-center": 62048,
    "format-align-justify": 62049,
    "format-align-left": 62050,
    "format-align-middle": 63315,
    "format-align-right": 62051,
    "format-align-top": 63316,
    "format-annotation-plus": 63046,
    "format-bold": 62052,
    "format-clear": 62053,
    "format-color-fill": 62054,
    "format-color-text": 63133,
    "format-float-center": 62055,
    "format-float-left": 62056,
    "format-float-none": 62057,
    "format-float-right": 62058,
    "format-font": 63189,
    "format-header-1": 62059,
    "format-header-2": 62060,
    "format-header-3": 62061,
    "format-header-4": 62062,
    "format-header-5": 62063,
    "format-header-6": 62064,
    "format-header-decrease": 62065,
    "format-header-equal": 62066,
    "format-header-increase": 62067,
    "format-header-pound": 62068,
    "format-horizontal-align-center": 63006,
    "format-horizontal-align-left": 63007,
    "format-horizontal-align-right": 63008,
    "format-indent-decrease": 62069,
    "format-indent-increase": 62070,
    "format-italic": 62071,
    "format-line-spacing": 62072,
    "format-line-style": 62920,
    "format-line-weight": 62921,
    "format-list-bulleted": 62073,
    "format-list-bulleted-type": 62074,
    "format-list-checks": 63317,
    "format-list-numbers": 62075,
    "format-page-break": 63190,
    "format-paint": 62076,
    "format-paragraph": 62077,
    "format-pilcrow": 63191,
    "format-quote-close": 62078,
    "format-quote-open": 63318,
    "format-rotate-90": 63145,
    "format-section": 63134,
    "format-size": 62079,
    "format-strikethrough": 62080,
    "format-strikethrough-variant": 62081,
    "format-subscript": 62082,
    "format-superscript": 62083,
    "format-text": 62084,
    "format-textdirection-l-to-r": 62085,
    "format-textdirection-r-to-l": 62086,
    "format-title": 62964,
    "format-underline": 62087,
    "format-vertical-align-bottom": 63009,
    "format-vertical-align-center": 63010,
    "format-vertical-align-top": 63011,
    "format-wrap-inline": 62088,
    "format-wrap-square": 62089,
    "format-wrap-tight": 62090,
    "format-wrap-top-bottom": 62091,
    "forum": 62092,
    "forum-outline": 63521,
    "forward": 62093,
    "foursquare": 62094,
    "fridge": 62095,
    "fridge-filled": 62096,
    "fridge-filled-bottom": 62097,
    "fridge-filled-top": 62098,
    "fuel": 63433,
    "fullscreen": 62099,
    "fullscreen-exit": 62100,
    "function": 62101,
    "function-variant": 63600,
    "gamepad": 62102,
    "gamepad-variant": 62103,
    "garage": 63192,
    "garage-alert": 63601,
    "garage-open": 63193,
    "gas-cylinder": 63047,
    "gas-station": 62104,
    "gate": 62105,
    "gauge": 62106,
    "gauge-empty": 63602,
    "gauge-full": 63603,
    "gauge-low": 63604,
    "gavel": 62107,
    "gender-female": 62108,
    "gender-male": 62109,
    "gender-male-female": 62110,
    "gender-transgender": 62111,
    "gesture": 63434,
    "gesture-double-tap": 63291,
    "gesture-swipe-down": 63292,
    "gesture-swipe-left": 63293,
    "gesture-swipe-right": 63294,
    "gesture-swipe-up": 63295,
    "gesture-tap": 63296,
    "gesture-two-double-tap": 63297,
    "gesture-two-tap": 63298,
    "ghost": 62112,
    "gift": 62113,
    "git": 62114,
    "github-box": 62115,
    "github-circle": 62116,
    "github-face": 63194,
    "glass-cocktail": 62294,
    "glass-flute": 62117,
    "glass-mug": 62118,
    "glass-stange": 62119,
    "glass-tulip": 62120,
    "glass-wine": 63605,
    "glassdoor": 62121,
    "glasses": 62122,
    "gmail": 62123,
    "gnome": 62124,
    "golf": 63522,
    "gondola": 63109,
    "google": 62125,
    "google-analytics": 63435,
    "google-assistant": 63436,
    "google-cardboard": 62126,
    "google-chrome": 62127,
    "google-circles": 62128,
    "google-circles-communities": 62129,
    "google-circles-extended": 62130,
    "google-circles-group": 62131,
    "google-controller": 62132,
    "google-controller-off": 62133,
    "google-drive": 62134,
    "google-earth": 62135,
    "google-glass": 62136,
    "google-home": 63523,
    "google-keep": 63195,
    "google-maps": 62965,
    "google-nearby": 62137,
    "google-pages": 62138,
    "google-photos": 63196,
    "google-physical-web": 62139,
    "google-play": 62140,
    "google-plus": 62141,
    "google-plus-box": 62142,
    "google-translate": 62143,
    "google-wallet": 62144,
    "gpu": 63661,
    "gradient": 63135,
    "graphql": 63606,
    "grease-pencil": 63048,
    "grid": 62145,
    "grid-large": 63319,
    "grid-off": 62146,
    "group": 62147,
    "guitar-acoustic": 63344,
    "guitar-electric": 62148,
    "guitar-pick": 62149,
    "guitar-pick-outline": 62150,
    "guy-fawkes-mask": 63524,
    "hackernews": 63012,
    "hamburger": 63108,
    "hand-pointing-right": 62151,
    "hanger": 62152,
    "hangouts": 62153,
    "harddisk": 62154,
    "headphones": 62155,
    "headphones-box": 62156,
    "headphones-off": 63437,
    "headphones-settings": 62157,
    "headset": 62158,
    "headset-dock": 62159,
    "headset-off": 62160,
    "heart": 62161,
    "heart-box": 62162,
    "heart-box-outline": 62163,
    "heart-broken": 62164,
    "heart-half": 63198,
    "heart-half-full": 63197,
    "heart-half-outline": 63199,
    "heart-off": 63320,
    "heart-outline": 62165,
    "heart-pulse": 62966,
    "help": 62166,
    "help-box": 63370,
    "help-circle": 62167,
    "help-circle-outline": 63013,
    "help-network": 63220,
    "hexagon": 62168,
    "hexagon-multiple": 63200,
    "hexagon-outline": 62169,
    "high-definition": 63438,
    "high-definition-box": 63607,
    "highway": 62967,
    "history": 62170,
    "hockey-puck": 63608,
    "hockey-sticks": 63609,
    "hololens": 62171,
    "home": 62172,
    "home-account": 63525,
    "home-alert": 63610,
    "home-assistant": 63439,
    "home-automation": 63440,
    "home-circle": 63441,
    "home-currency-usd": 63662,
    "home-heart": 63526,
    "home-map-marker": 62968,
    "home-modern": 62173,
    "home-outline": 63136,
    "home-variant": 62174,
    "hook": 63201,
    "hook-off": 63202,
    "hops": 62175,
    "hospital": 62176,
    "hospital-building": 62177,
    "hospital-marker": 62178,
    "hot-tub": 63527,
    "hotel": 62179,
    "houzz": 62180,
    "houzz-box": 62181,
    "hulu": 63528,
    "human": 62182,
    "human-child": 62183,
    "human-female": 63049,
    "human-greeting": 63050,
    "human-handsdown": 63051,
    "human-handsup": 63052,
    "human-male": 63053,
    "human-male-female": 62184,
    "human-pregnant": 62927,
    "humble-bundle": 63299,
    "ice-cream": 63529,
    "image": 62185,
    "image-album": 62186,
    "image-area": 62187,
    "image-area-close": 62188,
    "image-broken": 62189,
    "image-broken-variant": 62190,
    "image-filter": 62191,
    "image-filter-black-white": 62192,
    "image-filter-center-focus": 62193,
    "image-filter-center-focus-weak": 62194,
    "image-filter-drama": 62195,
    "image-filter-frames": 62196,
    "image-filter-hdr": 62197,
    "image-filter-none": 62198,
    "image-filter-tilt-shift": 62199,
    "image-filter-vintage": 62200,
    "image-multiple": 62201,
    "image-off": 63530,
    "image-plus": 63611,
    "import": 62202,
    "inbox": 63110,
    "inbox-arrow-down": 62203,
    "inbox-arrow-up": 62417,
    "inbox-multiple": 63663,
    "incognito": 62969,
    "infinity": 63203,
    "information": 62204,
    "information-outline": 62205,
    "information-variant": 63054,
    "instagram": 62206,
    "instapaper": 62207,
    "internet-explorer": 62208,
    "invert-colors": 62209,
    "itunes": 63094,
    "jeepney": 62210,
    "jira": 62211,
    "jquery": 63612,
    "jsfiddle": 62212,
    "json": 63014,
    "karate": 63531,
    "keg": 62213,
    "kettle": 62970,
    "key": 62214,
    "key-change": 62215,
    "key-minus": 62216,
    "key-plus": 62217,
    "key-remove": 62218,
    "key-variant": 62219,
    "keyboard": 62220,
    "keyboard-backspace": 62221,
    "keyboard-caps": 62222,
    "keyboard-close": 62223,
    "keyboard-off": 62224,
    "keyboard-return": 62225,
    "keyboard-tab": 62226,
    "keyboard-variant": 62227,
    "kickstarter": 63300,
    "kodi": 62228,
    "label": 62229,
    "label-outline": 62230,
    "ladybug": 63532,
    "lambda": 63015,
    "lamp": 63156,
    "lan": 62231,
    "lan-connect": 62232,
    "lan-disconnect": 62233,
    "lan-pending": 62234,
    "language-c": 63089,
    "language-cpp": 63090,
    "language-csharp": 62235,
    "language-css3": 62236,
    "language-go": 63442,
    "language-html5": 62237,
    "language-javascript": 62238,
    "language-lua": 63664,
    "language-php": 62239,
    "language-python": 62240,
    "language-python-text": 62241,
    "language-r": 63443,
    "language-swift": 63204,
    "language-typescript": 63205,
    "laptop": 62242,
    "laptop-chromebook": 62243,
    "laptop-mac": 62244,
    "laptop-off": 63206,
    "laptop-windows": 62245,
    "lastfm": 62246,
    "lastpass": 62534,
    "launch": 62247,
    "lava-lamp": 63444,
    "layers": 62248,
    "layers-off": 62249,
    "lead-pencil": 63055,
    "leaf": 62250,
    "led-off": 62251,
    "led-on": 62252,
    "led-outline": 62253,
    "led-strip": 63445,
    "led-variant-off": 62254,
    "led-variant-on": 62255,
    "led-variant-outline": 62256,
    "library": 62257,
    "library-books": 62258,
    "library-music": 62259,
    "library-plus": 62260,
    "lifebuoy": 63613,
    "lightbulb": 62261,
    "lightbulb-on": 63207,
    "lightbulb-on-outline": 63208,
    "lightbulb-outline": 62262,
    "link": 62263,
    "link-off": 62264,
    "link-variant": 62265,
    "link-variant-off": 62266,
    "linkedin": 62267,
    "linkedin-box": 62268,
    "linux": 62269,
    "loading": 63345,
    "lock": 62270,
    "lock-open": 62271,
    "lock-open-outline": 62272,
    "lock-outline": 62273,
    "lock-pattern": 63209,
    "lock-plus": 62971,
    "lock-reset": 63346,
    "lock-smart": 63665,
    "locker": 63446,
    "locker-multiple": 63447,
    "login": 62274,
    "login-variant": 62972,
    "logout": 62275,
    "logout-variant": 62973,
    "looks": 62276,
    "loop": 63210,
    "loupe": 62277,
    "lumx": 62278,
    "magnet": 62279,
    "magnet-on": 62280,
    "magnify": 62281,
    "magnify-minus": 62282,
    "magnify-minus-outline": 63211,
    "magnify-plus": 62283,
    "magnify-plus-outline": 63212,
    "mail-ru": 62284,
    "mailbox": 63213,
    "map": 62285,
    "map-marker": 62286,
    "map-marker-circle": 62287,
    "map-marker-minus": 63056,
    "map-marker-multiple": 62288,
    "map-marker-off": 62289,
    "map-marker-outline": 63448,
    "map-marker-plus": 63057,
    "map-marker-radius": 62290,
    "margin": 62291,
    "markdown": 62292,
    "marker": 63058,
    "marker-check": 62293,
    "material-ui": 62295,
    "math-compass": 62296,
    "matrix": 63016,
    "maxcdn": 62297,
    "medical-bag": 63214,
    "medium": 62298,
    "memory": 62299,
    "menu": 62300,
    "menu-down": 62301,
    "menu-down-outline": 63157,
    "menu-left": 62302,
    "menu-right": 62303,
    "menu-up": 62304,
    "menu-up-outline": 63158,
    "message": 62305,
    "message-alert": 62306,
    "message-bulleted": 63137,
    "message-bulleted-off": 63138,
    "message-draw": 62307,
    "message-image": 62308,
    "message-outline": 62309,
    "message-plus": 63059,
    "message-processing": 62310,
    "message-reply": 62311,
    "message-reply-text": 62312,
    "message-settings": 63215,
    "message-settings-variant": 63216,
    "message-text": 62313,
    "message-text-outline": 62314,
    "message-video": 62315,
    "meteor": 63017,
    "metronome": 63449,
    "metronome-tick": 63450,
    "micro-sd": 63451,
    "microphone": 62316,
    "microphone-minus": 63666,
    "microphone-off": 62317,
    "microphone-outline": 62318,
    "microphone-plus": 63667,
    "microphone-settings": 62319,
    "microphone-variant": 62320,
    "microphone-variant-off": 62321,
    "microscope": 63060,
    "microsoft": 62322,
    "minecraft": 62323,
    "minus": 62324,
    "minus-box": 62325,
    "minus-box-outline": 63217,
    "minus-circle": 62326,
    "minus-circle-outline": 62327,
    "minus-network": 62328,
    "mixcloud": 63018,
    "mixed-reality": 63614,
    "mixer": 63452,
    "monitor": 62329,
    "monitor-multiple": 62330,
    "more": 62331,
    "motorbike": 62332,
    "mouse": 62333,
    "mouse-off": 62334,
    "mouse-variant": 62335,
    "mouse-variant-off": 62336,
    "move-resize": 63061,
    "move-resize-variant": 63062,
    "movie": 62337,
    "movie-roll": 63453,
    "multiplication": 62338,
    "multiplication-box": 62339,
    "mushroom": 63454,
    "mushroom-outline": 63455,
    "music": 63321,
    "music-box": 62340,
    "music-box-outline": 62341,
    "music-circle": 62342,
    "music-note": 62343,
    "music-note-bluetooth": 62974,
    "music-note-bluetooth-off": 62975,
    "music-note-eighth": 62344,
    "music-note-half": 62345,
    "music-note-off": 62346,
    "music-note-quarter": 62347,
    "music-note-sixteenth": 62348,
    "music-note-whole": 62349,
    "music-off": 63322,
    "nativescript": 63615,
    "nature": 62350,
    "nature-people": 62351,
    "navigation": 62352,
    "near-me": 62925,
    "needle": 62353,
    "nest-protect": 62354,
    "nest-thermostat": 62355,
    "netflix": 63301,
    "network": 63218,
    "new-box": 62356,
    "newspaper": 62357,
    "nfc": 62358,
    "nfc-tap": 62359,
    "nfc-variant": 62360,
    "ninja": 63347,
    "nintendo-switch": 63456,
    "nodejs": 62361,
    "note": 62362,
    "note-multiple": 63159,
    "note-multiple-outline": 63160,
    "note-outline": 62363,
    "note-plus": 62364,
    "note-plus-outline": 62365,
    "note-text": 62366,
    "notebook": 63533,
    "notification-clear-all": 62367,
    "npm": 63222,
    "nuke": 63139,
    "null": 63457,
    "numeric": 62368,
    "numeric-0-box": 62369,
    "numeric-0-box-multiple-outline": 62370,
    "numeric-0-box-outline": 62371,
    "numeric-1-box": 62372,
    "numeric-1-box-multiple-outline": 62373,
    "numeric-1-box-outline": 62374,
    "numeric-2-box": 62375,
    "numeric-2-box-multiple-outline": 62376,
    "numeric-2-box-outline": 62377,
    "numeric-3-box": 62378,
    "numeric-3-box-multiple-outline": 62379,
    "numeric-3-box-outline": 62380,
    "numeric-4-box": 62381,
    "numeric-4-box-multiple-outline": 62382,
    "numeric-4-box-outline": 62383,
    "numeric-5-box": 62384,
    "numeric-5-box-multiple-outline": 62385,
    "numeric-5-box-outline": 62386,
    "numeric-6-box": 62387,
    "numeric-6-box-multiple-outline": 62388,
    "numeric-6-box-outline": 62389,
    "numeric-7-box": 62390,
    "numeric-7-box-multiple-outline": 62391,
    "numeric-7-box-outline": 62392,
    "numeric-8-box": 62393,
    "numeric-8-box-multiple-outline": 62394,
    "numeric-8-box-outline": 62395,
    "numeric-9-box": 62396,
    "numeric-9-box-multiple-outline": 62397,
    "numeric-9-box-outline": 62398,
    "numeric-9-plus-box": 62399,
    "numeric-9-plus-box-multiple-outline": 62400,
    "numeric-9-plus-box-outline": 62401,
    "nut": 63223,
    "nutrition": 62402,
    "oar": 63099,
    "octagon": 62403,
    "octagon-outline": 62404,
    "octagram": 63224,
    "octagram-outline": 63348,
    "odnoklassniki": 62405,
    "office": 62406,
    "oil": 62407,
    "oil-temperature": 62408,
    "omega": 62409,
    "onedrive": 62410,
    "onenote": 63302,
    "onepassword": 63616,
    "opacity": 62924,
    "open-in-app": 62411,
    "open-in-new": 62412,
    "openid": 62413,
    "opera": 62414,
    "orbit": 61464,
    "ornament": 62415,
    "ornament-variant": 62416,
    "owl": 62418,
    "package": 62419,
    "package-down": 62420,
    "package-up": 62421,
    "package-variant": 62422,
    "package-variant-closed": 62423,
    "page-first": 62976,
    "page-last": 62977,
    "page-layout-body": 63225,
    "page-layout-footer": 63226,
    "page-layout-header": 63227,
    "page-layout-sidebar-left": 63228,
    "page-layout-sidebar-right": 63229,
    "palette": 62424,
    "palette-advanced": 62425,
    "palette-swatch": 63668,
    "panda": 62426,
    "pandora": 62427,
    "panorama": 62428,
    "panorama-fisheye": 62429,
    "panorama-horizontal": 62430,
    "panorama-vertical": 62431,
    "panorama-wide-angle": 62432,
    "paper-cut-vertical": 62433,
    "paperclip": 62434,
    "parking": 62435,
    "passport": 63458,
    "patreon": 63617,
    "pause": 62436,
    "pause-circle": 62437,
    "pause-circle-outline": 62438,
    "pause-octagon": 62439,
    "pause-octagon-outline": 62440,
    "paw": 62441,
    "paw-off": 63063,
    "paypal": 63618,
    "peace": 63619,
    "pen": 62442,
    "pencil": 62443,
    "pencil-box": 62444,
    "pencil-box-outline": 62445,
    "pencil-circle": 63230,
    "pencil-circle-outline": 63349,
    "pencil-lock": 62446,
    "pencil-off": 62447,
    "pentagon": 63231,
    "pentagon-outline": 63232,
    "percent": 62448,
    "periodic-table": 63669,
    "periodic-table-co2": 63459,
    "periscope": 63303,
    "pharmacy": 62449,
    "phone": 62450,
    "phone-bluetooth": 62451,
    "phone-classic": 62978,
    "phone-forward": 62452,
    "phone-hangup": 62453,
    "phone-in-talk": 62454,
    "phone-incoming": 62455,
    "phone-locked": 62456,
    "phone-log": 62457,
    "phone-minus": 63064,
    "phone-missed": 62458,
    "phone-outgoing": 62459,
    "phone-paused": 62460,
    "phone-plus": 63065,
    "phone-return": 63534,
    "phone-rotate-landscape": 63620,
    "phone-rotate-portrait": 63621,
    "phone-settings": 62461,
    "phone-voip": 62462,
    "pi": 62463,
    "pi-box": 62464,
    "piano": 63100,
    "pickaxe": 63670,
    "pier": 63622,
    "pier-crane": 63623,
    "pig": 62465,
    "pill": 62466,
    "pillar": 63233,
    "pin": 62467,
    "pin-off": 62468,
    "pine-tree": 62469,
    "pine-tree-box": 62470,
    "pinterest": 62471,
    "pinterest-box": 62472,
    "pipe": 63460,
    "pipe-disconnected": 63461,
    "pipe-leak": 63624,
    "pistol": 63234,
    "piston": 63625,
    "pizza": 62473,
    "plane-shield": 63162,
    "play": 62474,
    "play-box-outline": 62475,
    "play-circle": 62476,
    "play-circle-outline": 62477,
    "play-network": 63626,
    "play-pause": 62478,
    "play-protected-content": 62479,
    "playlist-check": 62919,
    "playlist-minus": 62480,
    "playlist-play": 62481,
    "playlist-plus": 62482,
    "playlist-remove": 62483,
    "playstation": 62484,
    "plex": 63161,
    "plus": 62485,
    "plus-box": 62486,
    "plus-box-outline": 63235,
    "plus-circle": 62487,
    "plus-circle-multiple-outline": 62488,
    "plus-circle-outline": 62489,
    "plus-network": 62490,
    "plus-one": 62491,
    "plus-outline": 63236,
    "pocket": 62492,
    "pokeball": 62493,
    "poker-chip": 63535,
    "polaroid": 62494,
    "poll": 62495,
    "poll-box": 62496,
    "polymer": 62497,
    "pool": 62982,
    "popcorn": 62498,
    "pot": 63066,
    "pot-mix": 63067,
    "pound": 62499,
    "pound-box": 62500,
    "power": 62501,
    "power-plug": 63140,
    "power-plug-off": 63141,
    "power-settings": 62502,
    "power-socket": 62503,
    "power-socket-eu": 63462,
    "power-socket-uk": 63463,
    "power-socket-us": 63464,
    "prescription": 63237,
    "presentation": 62504,
    "presentation-play": 62505,
    "printer": 62506,
    "printer-3d": 62507,
    "printer-alert": 62508,
    "printer-settings": 63238,
    "priority-high": 62979,
    "priority-low": 62980,
    "professional-hexagon": 62509,
    "projector": 62510,
    "projector-screen": 62511,
    "publish": 63142,
    "pulse": 62512,
    "puzzle": 62513,
    "qqchat": 62981,
    "qrcode": 62514,
    "qrcode-edit": 63671,
    "qrcode-scan": 62515,
    "quadcopter": 62516,
    "quality-high": 62517,
    "quicktime": 62518,
    "radar": 62519,
    "radiator": 62520,
    "radio": 62521,
    "radio-handheld": 62522,
    "radio-tower": 62523,
    "radioactive": 62524,
    "radiobox-blank": 62525,
    "radiobox-marked": 62526,
    "raspberrypi": 62527,
    "ray-end": 62528,
    "ray-end-arrow": 62529,
    "ray-start": 62530,
    "ray-start-arrow": 62531,
    "ray-start-end": 62532,
    "ray-vertex": 62533,
    "react": 63239,
    "read": 62535,
    "receipt": 62537,
    "record": 62538,
    "record-rec": 62539,
    "recycle": 62540,
    "reddit": 62541,
    "redo": 62542,
    "redo-variant": 62543,
    "refresh": 62544,
    "regex": 62545,
    "relative-scale": 62546,
    "reload": 62547,
    "reminder": 63627,
    "remote": 62548,
    "remote-desktop": 63672,
    "rename-box": 62549,
    "reorder-horizontal": 63111,
    "reorder-vertical": 63112,
    "repeat": 62550,
    "repeat-off": 62551,
    "repeat-once": 62552,
    "replay": 62553,
    "reply": 62554,
    "reply-all": 62555,
    "reproduction": 62556,
    "resize-bottom-right": 62557,
    "responsive": 62558,
    "restart": 63240,
    "restore": 63143,
    "rewind": 62559,
    "rewind-outline": 63241,
    "rhombus": 63242,
    "rhombus-outline": 63243,
    "ribbon": 62560,
    "rice": 63465,
    "ring": 63466,
    "road": 62561,
    "road-variant": 62562,
    "robot": 63144,
    "rocket": 62563,
    "room-service": 63628,
    "roomba": 63244,
    "rotate-3d": 62564,
    "rotate-left": 62565,
    "rotate-left-variant": 62566,
    "rotate-right": 62567,
    "rotate-right-variant": 62568,
    "rounded-corner": 62983,
    "router-wireless": 62569,
    "routes": 62570,
    "rowing": 62984,
    "rss": 62571,
    "rss-box": 62572,
    "ruler": 62573,
    "run": 63245,
    "run-fast": 62574,
    "sale": 62575,
    "salesforce": 63629,
    "sass": 63467,
    "satellite": 62576,
    "satellite-variant": 62577,
    "sausage": 63673,
    "saxophone": 62985,
    "scale": 62578,
    "scale-balance": 62929,
    "scale-bathroom": 62579,
    "scanner": 63146,
    "school": 62580,
    "screen-rotation": 62581,
    "screen-rotation-lock": 62582,
    "screwdriver": 62583,
    "script": 62584,
    "sd": 62585,
    "seal": 62586,
    "search-web": 63246,
    "seat-flat": 62587,
    "seat-flat-angled": 62588,
    "seat-individual-suite": 62589,
    "seat-legroom-extra": 62590,
    "seat-legroom-normal": 62591,
    "seat-legroom-reduced": 62592,
    "seat-recline-extra": 62593,
    "seat-recline-normal": 62594,
    "security": 62595,
    "security-account": 63630,
    "security-home": 63113,
    "security-network": 62596,
    "select": 62597,
    "select-all": 62598,
    "select-inverse": 62599,
    "select-off": 62600,
    "selection": 62601,
    "selection-off": 63350,
    "send": 62602,
    "send-secure": 63468,
    "serial-port": 63068,
    "server": 62603,
    "server-minus": 62604,
    "server-network": 62605,
    "server-network-off": 62606,
    "server-off": 62607,
    "server-plus": 62608,
    "server-remove": 62609,
    "server-security": 62610,
    "set-all": 63351,
    "set-center": 63352,
    "set-center-right": 63353,
    "set-left": 63354,
    "set-left-center": 63355,
    "set-left-right": 63356,
    "set-none": 63357,
    "set-right": 63358,
    "settings": 62611,
    "settings-box": 62612,
    "settings-outline": 63674,
    "shape": 63536,
    "shape-circle-plus": 63069,
    "shape-outline": 63537,
    "shape-plus": 62613,
    "shape-polygon-plus": 63070,
    "shape-rectangle-plus": 63071,
    "shape-square-plus": 63072,
    "share": 62614,
    "share-variant": 62615,
    "shield": 62616,
    "shield-half-full": 63359,
    "shield-outline": 62617,
    "ship-wheel": 63538,
    "shopping": 62618,
    "shopping-music": 62619,
    "shovel": 63247,
    "shovel-off": 63248,
    "shredder": 62620,
    "shuffle": 62621,
    "shuffle-disabled": 62622,
    "shuffle-variant": 62623,
    "sigma": 62624,
    "sigma-lower": 63019,
    "sign-caution": 62625,
    "sign-direction": 63360,
    "sign-text": 63361,
    "signal": 62626,
    "signal-2g": 63249,
    "signal-3g": 63250,
    "signal-4g": 63251,
    "signal-cellular-1": 63675,
    "signal-cellular-2": 63676,
    "signal-cellular-3": 63677,
    "signal-cellular-outline": 63678,
    "signal-hspa": 63252,
    "signal-hspa-plus": 63253,
    "signal-off": 63362,
    "signal-variant": 62986,
    "silverware": 62627,
    "silverware-fork": 62628,
    "silverware-spoon": 62629,
    "silverware-variant": 62630,
    "sim": 62631,
    "sim-alert": 62632,
    "sim-off": 62633,
    "sitemap": 62634,
    "skip-backward": 62635,
    "skip-forward": 62636,
    "skip-next": 62637,
    "skip-next-circle": 63073,
    "skip-next-circle-outline": 63074,
    "skip-previous": 62638,
    "skip-previous-circle": 63075,
    "skip-previous-circle-outline": 63076,
    "skull": 63115,
    "skype": 62639,
    "skype-business": 62640,
    "slack": 62641,
    "sleep": 62642,
    "sleep-off": 62643,
    "smoking": 62644,
    "smoking-off": 62645,
    "snapchat": 62646,
    "snowflake": 63254,
    "snowman": 62647,
    "soccer": 62648,
    "soccer-field": 63539,
    "sofa": 62649,
    "solid": 63116,
    "sort": 62650,
    "sort-alphabetical": 62651,
    "sort-ascending": 62652,
    "sort-descending": 62653,
    "sort-numeric": 62654,
    "sort-variant": 62655,
    "soundcloud": 62656,
    "source-branch": 63020,
    "source-commit": 63255,
    "source-commit-end": 63256,
    "source-commit-end-local": 63257,
    "source-commit-local": 63258,
    "source-commit-next-local": 63259,
    "source-commit-start": 63260,
    "source-commit-start-next-local": 63261,
    "source-fork": 62657,
    "source-merge": 63021,
    "source-pull": 62658,
    "soy-sauce": 63469,
    "speaker": 62659,
    "speaker-off": 62660,
    "speaker-wireless": 63262,
    "speedometer": 62661,
    "spellcheck": 62662,
    "spotify": 62663,
    "spotlight": 62664,
    "spotlight-beam": 62665,
    "spray": 63077,
    "square": 63331,
    "square-inc": 62666,
    "square-inc-cash": 62667,
    "square-outline": 63330,
    "square-root": 63363,
    "ssh": 63679,
    "stack-overflow": 62668,
    "stackexchange": 62987,
    "stadium": 63263,
    "stairs": 62669,
    "standard-definition": 63470,
    "star": 62670,
    "star-circle": 62671,
    "star-half": 62672,
    "star-off": 62673,
    "star-outline": 62674,
    "steam": 62675,
    "steering": 62676,
    "step-backward": 62677,
    "step-backward-2": 62678,
    "step-forward": 62679,
    "step-forward-2": 62680,
    "stethoscope": 62681,
    "sticker": 62928,
    "sticker-emoji": 63364,
    "stocking": 62682,
    "stop": 62683,
    "stop-circle": 63078,
    "stop-circle-outline": 63079,
    "store": 62684,
    "store-24-hour": 62685,
    "stove": 62686,
    "subdirectory-arrow-left": 62988,
    "subdirectory-arrow-right": 62989,
    "subway": 63147,
    "subway-variant": 62687,
    "summit": 63365,
    "sunglasses": 62688,
    "surround-sound": 62917,
    "surround-sound-2-0": 63471,
    "surround-sound-3-1": 63472,
    "surround-sound-5-1": 63473,
    "surround-sound-7-1": 63474,
    "svg": 63264,
    "swap-horizontal": 62689,
    "swap-horizontal-variant": 63680,
    "swap-vertical": 62690,
    "swap-vertical-variant": 63681,
    "swim": 62691,
    "switch": 62692,
    "sword": 62693,
    "sword-cross": 63366,
    "sync": 62694,
    "sync-alert": 62695,
    "sync-off": 62696,
    "tab": 62697,
    "tab-plus": 63323,
    "tab-unselected": 62698,
    "table": 62699,
    "table-column": 63540,
    "table-column-plus-after": 62700,
    "table-column-plus-before": 62701,
    "table-column-remove": 62702,
    "table-column-width": 62703,
    "table-edit": 62704,
    "table-large": 62705,
    "table-of-contents": 63541,
    "table-row": 63542,
    "table-row-height": 62706,
    "table-row-plus-after": 62707,
    "table-row-plus-before": 62708,
    "table-row-remove": 62709,
    "table-settings": 63543,
    "tablet": 62710,
    "tablet-android": 62711,
    "tablet-ipad": 62712,
    "taco": 63329,
    "tag": 62713,
    "tag-faces": 62714,
    "tag-heart": 63114,
    "tag-multiple": 62715,
    "tag-outline": 62716,
    "tag-plus": 63265,
    "tag-remove": 63266,
    "tag-text-outline": 62717,
    "target": 62718,
    "taxi": 62719,
    "teach": 63631,
    "teamviewer": 62720,
    "telegram": 62721,
    "television": 62722,
    "television-box": 63544,
    "television-classic": 63475,
    "television-classic-off": 63545,
    "television-guide": 62723,
    "television-off": 63546,
    "temperature-celsius": 62724,
    "temperature-fahrenheit": 62725,
    "temperature-kelvin": 62726,
    "tennis": 62727,
    "tent": 62728,
    "terrain": 62729,
    "test-tube": 63080,
    "text-shadow": 63081,
    "text-to-speech": 62730,
    "text-to-speech-off": 62731,
    "textbox": 62990,
    "textbox-password": 63476,
    "texture": 62732,
    "theater": 62733,
    "theme-light-dark": 62734,
    "thermometer": 62735,
    "thermometer-lines": 62736,
    "thermostat-box": 63632,
    "thought-bubble": 63477,
    "thought-bubble-outline": 63478,
    "thumb-down": 62737,
    "thumb-down-outline": 62738,
    "thumb-up": 62739,
    "thumb-up-outline": 62740,
    "thumbs-up-down": 62741,
    "ticket": 62742,
    "ticket-account": 62743,
    "ticket-confirmation": 62744,
    "ticket-percent": 63267,
    "tie": 62745,
    "tilde": 63268,
    "timelapse": 62746,
    "timer": 62747,
    "timer-10": 62748,
    "timer-3": 62749,
    "timer-off": 62750,
    "timer-sand": 62751,
    "timer-sand-empty": 63148,
    "timer-sand-full": 63371,
    "timetable": 62752,
    "toggle-switch": 62753,
    "toggle-switch-off": 62754,
    "tooltip": 62755,
    "tooltip-edit": 62756,
    "tooltip-image": 62757,
    "tooltip-outline": 62758,
    "tooltip-outline-plus": 62759,
    "tooltip-text": 62760,
    "tooth": 63682,
    "tooth-outline": 62761,
    "tor": 62762,
    "tower-beach": 63104,
    "tower-fire": 63105,
    "towing": 63547,
    "trackpad": 63479,
    "tractor": 63633,
    "traffic-light": 62763,
    "train": 62764,
    "train-variant": 63683,
    "tram": 62765,
    "transcribe": 62766,
    "transcribe-close": 62767,
    "transfer": 62768,
    "transit-transfer": 63149,
    "translate": 62922,
    "treasure-chest": 63269,
    "tree": 62769,
    "trello": 62770,
    "trending-down": 62771,
    "trending-neutral": 62772,
    "trending-up": 62773,
    "triangle": 62774,
    "triangle-outline": 62775,
    "trophy": 62776,
    "trophy-award": 62777,
    "trophy-outline": 62778,
    "trophy-variant": 62779,
    "trophy-variant-outline": 62780,
    "truck": 62781,
    "truck-delivery": 62782,
    "truck-fast": 63367,
    "truck-trailer": 63270,
    "tshirt-crew": 62783,
    "tshirt-v": 62784,
    "tumblr": 62785,
    "tumblr-reblog": 62786,
    "tune": 63022,
    "tune-vertical": 63082,
    "twitch": 62787,
    "twitter": 62788,
    "twitter-box": 62789,
    "twitter-circle": 62790,
    "twitter-retweet": 62791,
    "uber": 63304,
    "ubuntu": 62792,
    "ultra-high-definition": 63480,
    "umbraco": 62793,
    "umbrella": 62794,
    "umbrella-outline": 62795,
    "undo": 62796,
    "undo-variant": 62797,
    "unfold-less-horizontal": 62798,
    "unfold-less-vertical": 63327,
    "unfold-more-horizontal": 62799,
    "unfold-more-vertical": 63328,
    "ungroup": 62800,
    "unity": 63150,
    "untappd": 62801,
    "update": 63151,
    "upload": 62802,
    "upload-multiple": 63548,
    "upload-network": 63221,
    "usb": 62803,
    "van-passenger": 63481,
    "van-utility": 63482,
    "vanish": 63483,
    "vector-arrange-above": 62804,
    "vector-arrange-below": 62805,
    "vector-circle": 62806,
    "vector-circle-variant": 62807,
    "vector-combine": 62808,
    "vector-curve": 62809,
    "vector-difference": 62810,
    "vector-difference-ab": 62811,
    "vector-difference-ba": 62812,
    "vector-ellipse": 63634,
    "vector-intersection": 62813,
    "vector-line": 62814,
    "vector-point": 62815,
    "vector-polygon": 62816,
    "vector-polyline": 62817,
    "vector-radius": 63305,
    "vector-rectangle": 62918,
    "vector-selection": 62818,
    "vector-square": 61441,
    "vector-triangle": 62819,
    "vector-union": 62820,
    "venmo": 62840,
    "verified": 62821,
    "vibrate": 62822,
    "video": 62823,
    "video-3d": 63484,
    "video-4k-box": 63549,
    "video-input-antenna": 63550,
    "video-input-component": 63551,
    "video-input-hdmi": 63552,
    "video-input-svideo": 63553,
    "video-off": 62824,
    "video-switch": 62825,
    "view-agenda": 62826,
    "view-array": 62827,
    "view-carousel": 62828,
    "view-column": 62829,
    "view-dashboard": 62830,
    "view-dashboard-variant": 63554,
    "view-day": 62831,
    "view-grid": 62832,
    "view-headline": 62833,
    "view-list": 62834,
    "view-module": 62835,
    "view-parallel": 63271,
    "view-quilt": 62836,
    "view-sequential": 63272,
    "view-stream": 62837,
    "view-week": 62838,
    "vimeo": 62839,
    "violin": 62991,
    "virtual-reality": 63635,
    "visualstudio": 62992,
    "vk": 62841,
    "vk-box": 62842,
    "vk-circle": 62843,
    "vlc": 62844,
    "voice": 62923,
    "voicemail": 62845,
    "volume-high": 62846,
    "volume-low": 62847,
    "volume-medium": 62848,
    "volume-minus": 63325,
    "volume-mute": 63326,
    "volume-off": 62849,
    "volume-plus": 63324,
    "vpn": 62850,
    "vuejs": 63555,
    "walk": 62851,
    "wall": 63485,
    "wallet": 62852,
    "wallet-giftcard": 62853,
    "wallet-membership": 62854,
    "wallet-travel": 62855,
    "wan": 62856,
    "washing-machine": 63273,
    "watch": 62857,
    "watch-export": 62858,
    "watch-export-variant": 63636,
    "watch-import": 62859,
    "watch-import-variant": 63637,
    "watch-variant": 63638,
    "watch-vibrate": 63152,
    "water": 62860,
    "water-off": 62861,
    "water-percent": 62862,
    "water-pump": 62863,
    "watermark": 62994,
    "waves": 63372,
    "weather-cloudy": 62864,
    "weather-fog": 62865,
    "weather-hail": 62866,
    "weather-hurricane": 63639,
    "weather-lightning": 62867,
    "weather-lightning-rainy": 63101,
    "weather-night": 62868,
    "weather-partlycloudy": 62869,
    "weather-pouring": 62870,
    "weather-rainy": 62871,
    "weather-snowy": 62872,
    "weather-snowy-rainy": 63102,
    "weather-sunny": 62873,
    "weather-sunset": 62874,
    "weather-sunset-down": 62875,
    "weather-sunset-up": 62876,
    "weather-windy": 62877,
    "weather-windy-variant": 62878,
    "web": 62879,
    "webcam": 62880,
    "webhook": 63023,
    "webpack": 63274,
    "wechat": 62993,
    "weight": 62881,
    "weight-kilogram": 62882,
    "whatsapp": 62883,
    "wheelchair-accessibility": 62884,
    "white-balance-auto": 62885,
    "white-balance-incandescent": 62886,
    "white-balance-iridescent": 62887,
    "white-balance-sunny": 62888,
    "widgets": 63275,
    "wifi": 62889,
    "wifi-off": 62890,
    "wii": 62891,
    "wiiu": 63276,
    "wikipedia": 62892,
    "window-close": 62893,
    "window-closed": 62894,
    "window-maximize": 62895,
    "window-minimize": 62896,
    "window-open": 62897,
    "window-restore": 62898,
    "windows": 62899,
    "wordpress": 62900,
    "worker": 62901,
    "wrap": 62902,
    "wrench": 62903,
    "wunderlist": 62904,
    "xamarin": 63556,
    "xamarin-outline": 63557,
    "xaml": 63091,
    "xbox": 62905,
    "xbox-controller": 62906,
    "xbox-controller-battery-alert": 63306,
    "xbox-controller-battery-empty": 63307,
    "xbox-controller-battery-full": 63308,
    "xbox-controller-battery-low": 63309,
    "xbox-controller-battery-medium": 63310,
    "xbox-controller-battery-unknown": 63311,
    "xbox-controller-off": 62907,
    "xda": 62908,
    "xing": 62909,
    "xing-box": 62910,
    "xing-circle": 62911,
    "xml": 62912,
    "xmpp": 63486,
    "yammer": 63368,
    "yeast": 62913,
    "yelp": 62914,
    "yin-yang": 63103,
    "youtube-creator-studio": 63558,
    "youtube-gaming": 63559,
    "youtube-play": 62915,
    "youtube-tv": 62536,
    "zip-box": 62916,
    "blank": 63116
  };
},732,[],"node_modules/react-native-vector-icons/glyphmaps/MaterialCommunityIcons.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = _require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = _interopRequireDefault(_createIconSet);

  var _Ionicons = _require(_dependencyMap[1], "./glyphmaps/Ionicons.json");

  var _Ionicons2 = _interopRequireDefault(_Ionicons);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var iconSet = (0, _createIconSet2.default)(_Ionicons2.default, 'Ionicons', 'Ionicons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},733,[680,734],"node_modules/react-native-vector-icons/Ionicons.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "ios-add": 61698,
    "ios-add-circle": 61697,
    "ios-add-circle-outline": 61696,
    "ios-add-outline": 61698,
    "ios-alarm": 62408,
    "ios-alarm-outline": 62407,
    "ios-albums": 62410,
    "ios-albums-outline": 62409,
    "ios-alert": 61700,
    "ios-alert-outline": 61699,
    "ios-american-football": 61702,
    "ios-american-football-outline": 61701,
    "ios-analytics": 62414,
    "ios-analytics-outline": 62413,
    "ios-aperture": 61704,
    "ios-aperture-outline": 61703,
    "ios-apps": 61706,
    "ios-apps-outline": 61705,
    "ios-appstore": 61708,
    "ios-appstore-outline": 61707,
    "ios-archive": 61710,
    "ios-archive-outline": 61709,
    "ios-arrow-back": 62415,
    "ios-arrow-back-outline": 62415,
    "ios-arrow-down": 62416,
    "ios-arrow-down-outline": 62416,
    "ios-arrow-dropdown": 61712,
    "ios-arrow-dropdown-circle": 61711,
    "ios-arrow-dropdown-circle-outline": 61711,
    "ios-arrow-dropdown-outline": 61712,
    "ios-arrow-dropleft": 61714,
    "ios-arrow-dropleft-circle": 61713,
    "ios-arrow-dropleft-circle-outline": 61713,
    "ios-arrow-dropleft-outline": 61714,
    "ios-arrow-dropright": 61716,
    "ios-arrow-dropright-circle": 61715,
    "ios-arrow-dropright-circle-outline": 61715,
    "ios-arrow-dropright-outline": 61716,
    "ios-arrow-dropup": 61718,
    "ios-arrow-dropup-circle": 61717,
    "ios-arrow-dropup-circle-outline": 61717,
    "ios-arrow-dropup-outline": 61718,
    "ios-arrow-forward": 62417,
    "ios-arrow-forward-outline": 62417,
    "ios-arrow-round-back": 61719,
    "ios-arrow-round-back-outline": 61719,
    "ios-arrow-round-down": 61720,
    "ios-arrow-round-down-outline": 61720,
    "ios-arrow-round-forward": 61721,
    "ios-arrow-round-forward-outline": 61721,
    "ios-arrow-round-up": 61722,
    "ios-arrow-round-up-outline": 61722,
    "ios-arrow-up": 62424,
    "ios-arrow-up-outline": 62424,
    "ios-at": 62426,
    "ios-at-outline": 62425,
    "ios-attach": 61723,
    "ios-attach-outline": 61723,
    "ios-backspace": 61725,
    "ios-backspace-outline": 61724,
    "ios-barcode": 62428,
    "ios-barcode-outline": 62427,
    "ios-baseball": 62430,
    "ios-baseball-outline": 62429,
    "ios-basket": 61727,
    "ios-basket-outline": 61726,
    "ios-basketball": 62432,
    "ios-basketball-outline": 62431,
    "ios-battery-charging": 61728,
    "ios-battery-charging-outline": 61728,
    "ios-battery-dead": 61729,
    "ios-battery-dead-outline": 61729,
    "ios-battery-full": 61730,
    "ios-battery-full-outline": 61730,
    "ios-beaker": 61732,
    "ios-beaker-outline": 61731,
    "ios-beer": 61734,
    "ios-beer-outline": 61733,
    "ios-bicycle": 61735,
    "ios-bicycle-outline": 61735,
    "ios-bluetooth": 61736,
    "ios-bluetooth-outline": 61736,
    "ios-boat": 61738,
    "ios-boat-outline": 61737,
    "ios-body": 62436,
    "ios-body-outline": 62435,
    "ios-bonfire": 61740,
    "ios-bonfire-outline": 61739,
    "ios-book": 62440,
    "ios-book-outline": 62439,
    "ios-bookmark": 61742,
    "ios-bookmark-outline": 61741,
    "ios-bookmarks": 62442,
    "ios-bookmarks-outline": 62441,
    "ios-bowtie": 61744,
    "ios-bowtie-outline": 61743,
    "ios-briefcase": 62446,
    "ios-briefcase-outline": 62445,
    "ios-browsers": 62448,
    "ios-browsers-outline": 62447,
    "ios-brush": 61746,
    "ios-brush-outline": 61745,
    "ios-bug": 61748,
    "ios-bug-outline": 61747,
    "ios-build": 61750,
    "ios-build-outline": 61749,
    "ios-bulb": 61752,
    "ios-bulb-outline": 61751,
    "ios-bus": 61754,
    "ios-bus-outline": 61753,
    "ios-cafe": 61756,
    "ios-cafe-outline": 61755,
    "ios-calculator": 62450,
    "ios-calculator-outline": 62449,
    "ios-calendar": 62452,
    "ios-calendar-outline": 62451,
    "ios-call": 61758,
    "ios-call-outline": 61757,
    "ios-camera": 62454,
    "ios-camera-outline": 62453,
    "ios-car": 61760,
    "ios-car-outline": 61759,
    "ios-card": 61762,
    "ios-card-outline": 61761,
    "ios-cart": 62456,
    "ios-cart-outline": 62455,
    "ios-cash": 61764,
    "ios-cash-outline": 61763,
    "ios-chatboxes": 62458,
    "ios-chatboxes-outline": 62457,
    "ios-chatbubbles": 61766,
    "ios-chatbubbles-outline": 61765,
    "ios-checkbox": 61768,
    "ios-checkbox-outline": 61767,
    "ios-checkmark": 62463,
    "ios-checkmark-circle": 61770,
    "ios-checkmark-circle-outline": 61769,
    "ios-checkmark-outline": 62463,
    "ios-clipboard": 61772,
    "ios-clipboard-outline": 61771,
    "ios-clock": 62467,
    "ios-clock-outline": 62466,
    "ios-close": 62470,
    "ios-close-circle": 61774,
    "ios-close-circle-outline": 61773,
    "ios-close-outline": 62470,
    "ios-closed-captioning": 61776,
    "ios-closed-captioning-outline": 61775,
    "ios-cloud": 62476,
    "ios-cloud-circle": 61778,
    "ios-cloud-circle-outline": 61777,
    "ios-cloud-done": 61780,
    "ios-cloud-done-outline": 61779,
    "ios-cloud-download": 62472,
    "ios-cloud-download-outline": 62471,
    "ios-cloud-outline": 62473,
    "ios-cloud-upload": 62475,
    "ios-cloud-upload-outline": 62474,
    "ios-cloudy": 62480,
    "ios-cloudy-night": 62478,
    "ios-cloudy-night-outline": 62477,
    "ios-cloudy-outline": 62479,
    "ios-code": 61783,
    "ios-code-download": 61781,
    "ios-code-download-outline": 61781,
    "ios-code-outline": 61783,
    "ios-code-working": 61782,
    "ios-code-working-outline": 61782,
    "ios-cog": 62482,
    "ios-cog-outline": 62481,
    "ios-color-fill": 61785,
    "ios-color-fill-outline": 61784,
    "ios-color-filter": 62484,
    "ios-color-filter-outline": 62483,
    "ios-color-palette": 61787,
    "ios-color-palette-outline": 61786,
    "ios-color-wand": 62486,
    "ios-color-wand-outline": 62485,
    "ios-compass": 61789,
    "ios-compass-outline": 61788,
    "ios-construct": 61791,
    "ios-construct-outline": 61790,
    "ios-contact": 62490,
    "ios-contact-outline": 62489,
    "ios-contacts": 61793,
    "ios-contacts-outline": 61792,
    "ios-contract": 61794,
    "ios-contract-outline": 61794,
    "ios-contrast": 61795,
    "ios-contrast-outline": 61795,
    "ios-copy": 62492,
    "ios-copy-outline": 62491,
    "ios-create": 61797,
    "ios-create-outline": 61796,
    "ios-crop": 62494,
    "ios-crop-outline": 61798,
    "ios-cube": 61800,
    "ios-cube-outline": 61799,
    "ios-cut": 61802,
    "ios-cut-outline": 61801,
    "ios-desktop": 61804,
    "ios-desktop-outline": 61803,
    "ios-disc": 61806,
    "ios-disc-outline": 61805,
    "ios-document": 61808,
    "ios-document-outline": 61807,
    "ios-done-all": 61809,
    "ios-done-all-outline": 61809,
    "ios-download": 62496,
    "ios-download-outline": 62495,
    "ios-easel": 61811,
    "ios-easel-outline": 61810,
    "ios-egg": 61813,
    "ios-egg-outline": 61812,
    "ios-exit": 61815,
    "ios-exit-outline": 61814,
    "ios-expand": 61816,
    "ios-expand-outline": 61816,
    "ios-eye": 62501,
    "ios-eye-off": 61818,
    "ios-eye-off-outline": 61817,
    "ios-eye-outline": 62500,
    "ios-fastforward": 62503,
    "ios-fastforward-outline": 62502,
    "ios-female": 61819,
    "ios-female-outline": 61819,
    "ios-filing": 62505,
    "ios-filing-outline": 62504,
    "ios-film": 62507,
    "ios-film-outline": 62506,
    "ios-finger-print": 61820,
    "ios-finger-print-outline": 61820,
    "ios-flag": 62509,
    "ios-flag-outline": 62508,
    "ios-flame": 62511,
    "ios-flame-outline": 62510,
    "ios-flash": 61822,
    "ios-flash-outline": 61821,
    "ios-flask": 62513,
    "ios-flask-outline": 62512,
    "ios-flower": 62515,
    "ios-flower-outline": 62514,
    "ios-folder": 62517,
    "ios-folder-open": 61824,
    "ios-folder-open-outline": 61823,
    "ios-folder-outline": 62516,
    "ios-football": 62519,
    "ios-football-outline": 62518,
    "ios-funnel": 61826,
    "ios-funnel-outline": 61825,
    "ios-game-controller-a": 62521,
    "ios-game-controller-a-outline": 62520,
    "ios-game-controller-b": 62523,
    "ios-game-controller-b-outline": 62522,
    "ios-git-branch": 61827,
    "ios-git-branch-outline": 61827,
    "ios-git-commit": 61828,
    "ios-git-commit-outline": 61828,
    "ios-git-compare": 61829,
    "ios-git-compare-outline": 61829,
    "ios-git-merge": 61830,
    "ios-git-merge-outline": 61830,
    "ios-git-network": 61831,
    "ios-git-network-outline": 61831,
    "ios-git-pull-request": 61832,
    "ios-git-pull-request-outline": 61832,
    "ios-glasses": 62527,
    "ios-glasses-outline": 62526,
    "ios-globe": 61834,
    "ios-globe-outline": 61833,
    "ios-grid": 61836,
    "ios-grid-outline": 61835,
    "ios-hammer": 61838,
    "ios-hammer-outline": 61837,
    "ios-hand": 61840,
    "ios-hand-outline": 61839,
    "ios-happy": 61842,
    "ios-happy-outline": 61841,
    "ios-headset": 61844,
    "ios-headset-outline": 61843,
    "ios-heart": 62531,
    "ios-heart-outline": 62530,
    "ios-help": 62534,
    "ios-help-buoy": 61846,
    "ios-help-buoy-outline": 61845,
    "ios-help-circle": 61848,
    "ios-help-circle-outline": 61847,
    "ios-help-outline": 62534,
    "ios-home": 62536,
    "ios-home-outline": 62535,
    "ios-ice-cream": 61850,
    "ios-ice-cream-outline": 61849,
    "ios-image": 61852,
    "ios-image-outline": 61851,
    "ios-images": 61854,
    "ios-images-outline": 61853,
    "ios-infinite": 62538,
    "ios-infinite-outline": 62537,
    "ios-information": 62541,
    "ios-information-circle": 61856,
    "ios-information-circle-outline": 61855,
    "ios-information-outline": 62541,
    "ios-ionic": 61857,
    "ios-ionic-outline": 62542,
    "ios-ionitron": 61859,
    "ios-ionitron-outline": 61858,
    "ios-jet": 61861,
    "ios-jet-outline": 61860,
    "ios-key": 61863,
    "ios-key-outline": 61862,
    "ios-keypad": 62544,
    "ios-keypad-outline": 62543,
    "ios-laptop": 61864,
    "ios-laptop-outline": 61864,
    "ios-leaf": 61866,
    "ios-leaf-outline": 61865,
    "ios-link": 61994,
    "ios-link-outline": 61898,
    "ios-list": 62548,
    "ios-list-box": 61868,
    "ios-list-box-outline": 61867,
    "ios-list-outline": 62548,
    "ios-locate": 61870,
    "ios-locate-outline": 61869,
    "ios-lock": 61872,
    "ios-lock-outline": 61871,
    "ios-log-in": 61873,
    "ios-log-in-outline": 61873,
    "ios-log-out": 61874,
    "ios-log-out-outline": 61874,
    "ios-magnet": 61876,
    "ios-magnet-outline": 61875,
    "ios-mail": 61880,
    "ios-mail-open": 61878,
    "ios-mail-open-outline": 61877,
    "ios-mail-outline": 61879,
    "ios-male": 61881,
    "ios-male-outline": 61881,
    "ios-man": 61883,
    "ios-man-outline": 61882,
    "ios-map": 61885,
    "ios-map-outline": 61884,
    "ios-medal": 61887,
    "ios-medal-outline": 61886,
    "ios-medical": 62556,
    "ios-medical-outline": 62555,
    "ios-medkit": 62558,
    "ios-medkit-outline": 62557,
    "ios-megaphone": 61889,
    "ios-megaphone-outline": 61888,
    "ios-menu": 61891,
    "ios-menu-outline": 61890,
    "ios-mic": 62561,
    "ios-mic-off": 62559,
    "ios-mic-off-outline": 61892,
    "ios-mic-outline": 62560,
    "ios-microphone": 61894,
    "ios-microphone-outline": 61893,
    "ios-moon": 62568,
    "ios-moon-outline": 62567,
    "ios-more": 61896,
    "ios-more-outline": 61895,
    "ios-move": 61899,
    "ios-move-outline": 61899,
    "ios-musical-note": 62571,
    "ios-musical-note-outline": 61900,
    "ios-musical-notes": 62572,
    "ios-musical-notes-outline": 61901,
    "ios-navigate": 62574,
    "ios-navigate-outline": 62573,
    "ios-no-smoking": 61903,
    "ios-no-smoking-outline": 61902,
    "ios-notifications": 61907,
    "ios-notifications-off": 61905,
    "ios-notifications-off-outline": 61904,
    "ios-notifications-outline": 61906,
    "ios-nuclear": 61909,
    "ios-nuclear-outline": 61908,
    "ios-nutrition": 62576,
    "ios-nutrition-outline": 62575,
    "ios-open": 61911,
    "ios-open-outline": 61910,
    "ios-options": 61913,
    "ios-options-outline": 61912,
    "ios-outlet": 61915,
    "ios-outlet-outline": 61914,
    "ios-paper": 62578,
    "ios-paper-outline": 62577,
    "ios-paper-plane": 61917,
    "ios-paper-plane-outline": 61916,
    "ios-partly-sunny": 61919,
    "ios-partly-sunny-outline": 61918,
    "ios-pause": 62584,
    "ios-pause-outline": 62583,
    "ios-paw": 62586,
    "ios-paw-outline": 62585,
    "ios-people": 62588,
    "ios-people-outline": 62587,
    "ios-person": 62590,
    "ios-person-add": 61921,
    "ios-person-add-outline": 61920,
    "ios-person-outline": 62589,
    "ios-phone-landscape": 61922,
    "ios-phone-landscape-outline": 61922,
    "ios-phone-portrait": 61923,
    "ios-phone-portrait-outline": 61923,
    "ios-photos": 62594,
    "ios-photos-outline": 62593,
    "ios-pie": 62596,
    "ios-pie-outline": 62595,
    "ios-pin": 61925,
    "ios-pin-outline": 61924,
    "ios-pint": 62598,
    "ios-pint-outline": 62597,
    "ios-pizza": 61927,
    "ios-pizza-outline": 61926,
    "ios-plane": 61929,
    "ios-plane-outline": 61928,
    "ios-planet": 61931,
    "ios-planet-outline": 61930,
    "ios-play": 62600,
    "ios-play-outline": 62599,
    "ios-podium": 61933,
    "ios-podium-outline": 61932,
    "ios-power": 61935,
    "ios-power-outline": 61934,
    "ios-pricetag": 62605,
    "ios-pricetag-outline": 62604,
    "ios-pricetags": 62607,
    "ios-pricetags-outline": 62606,
    "ios-print": 61937,
    "ios-print-outline": 61936,
    "ios-pulse": 62611,
    "ios-pulse-outline": 61938,
    "ios-qr-scanner": 61939,
    "ios-qr-scanner-outline": 61939,
    "ios-quote": 61941,
    "ios-quote-outline": 61940,
    "ios-radio": 61945,
    "ios-radio-button-off": 61942,
    "ios-radio-button-off-outline": 61942,
    "ios-radio-button-on": 61943,
    "ios-radio-button-on-outline": 61943,
    "ios-radio-outline": 61944,
    "ios-rainy": 62613,
    "ios-rainy-outline": 62612,
    "ios-recording": 62615,
    "ios-recording-outline": 62614,
    "ios-redo": 62617,
    "ios-redo-outline": 62616,
    "ios-refresh": 62620,
    "ios-refresh-circle": 61990,
    "ios-refresh-circle-outline": 61988,
    "ios-refresh-outline": 62620,
    "ios-remove": 61948,
    "ios-remove-circle": 61947,
    "ios-remove-circle-outline": 61946,
    "ios-remove-outline": 61948,
    "ios-reorder": 61949,
    "ios-reorder-outline": 61949,
    "ios-repeat": 61950,
    "ios-repeat-outline": 61950,
    "ios-resize": 61951,
    "ios-resize-outline": 61951,
    "ios-restaurant": 61953,
    "ios-restaurant-outline": 61952,
    "ios-return-left": 61954,
    "ios-return-left-outline": 61954,
    "ios-return-right": 61955,
    "ios-return-right-outline": 61955,
    "ios-reverse-camera": 62623,
    "ios-reverse-camera-outline": 62622,
    "ios-rewind": 62625,
    "ios-rewind-outline": 62624,
    "ios-ribbon": 61957,
    "ios-ribbon-outline": 61956,
    "ios-rose": 62627,
    "ios-rose-outline": 62626,
    "ios-sad": 61959,
    "ios-sad-outline": 61958,
    "ios-school": 61961,
    "ios-school-outline": 61960,
    "ios-search": 62629,
    "ios-search-outline": 61962,
    "ios-send": 61964,
    "ios-send-outline": 61963,
    "ios-settings": 62631,
    "ios-settings-outline": 61965,
    "ios-share": 61969,
    "ios-share-alt": 61967,
    "ios-share-alt-outline": 61966,
    "ios-share-outline": 61968,
    "ios-shirt": 61971,
    "ios-shirt-outline": 61970,
    "ios-shuffle": 62633,
    "ios-shuffle-outline": 62633,
    "ios-skip-backward": 61973,
    "ios-skip-backward-outline": 61972,
    "ios-skip-forward": 61975,
    "ios-skip-forward-outline": 61974,
    "ios-snow": 61976,
    "ios-snow-outline": 61996,
    "ios-speedometer": 62640,
    "ios-speedometer-outline": 62639,
    "ios-square": 61978,
    "ios-square-outline": 61977,
    "ios-star": 62643,
    "ios-star-half": 62641,
    "ios-star-half-outline": 62641,
    "ios-star-outline": 62642,
    "ios-stats": 61980,
    "ios-stats-outline": 61979,
    "ios-stopwatch": 62645,
    "ios-stopwatch-outline": 62644,
    "ios-subway": 61982,
    "ios-subway-outline": 61981,
    "ios-sunny": 62647,
    "ios-sunny-outline": 62646,
    "ios-swap": 61983,
    "ios-swap-outline": 61983,
    "ios-switch": 61985,
    "ios-switch-outline": 61984,
    "ios-sync": 61986,
    "ios-sync-outline": 61986,
    "ios-tablet-landscape": 61987,
    "ios-tablet-landscape-outline": 61987,
    "ios-tablet-portrait": 62030,
    "ios-tablet-portrait-outline": 62030,
    "ios-tennisball": 62651,
    "ios-tennisball-outline": 62650,
    "ios-text": 62032,
    "ios-text-outline": 62031,
    "ios-thermometer": 62034,
    "ios-thermometer-outline": 62033,
    "ios-thumbs-down": 62036,
    "ios-thumbs-down-outline": 62035,
    "ios-thumbs-up": 62038,
    "ios-thumbs-up-outline": 62037,
    "ios-thunderstorm": 62653,
    "ios-thunderstorm-outline": 62652,
    "ios-time": 62655,
    "ios-time-outline": 62654,
    "ios-timer": 62657,
    "ios-timer-outline": 62656,
    "ios-train": 62040,
    "ios-train-outline": 62039,
    "ios-transgender": 62041,
    "ios-transgender-outline": 62041,
    "ios-trash": 62661,
    "ios-trash-outline": 62660,
    "ios-trending-down": 62042,
    "ios-trending-down-outline": 62042,
    "ios-trending-up": 62043,
    "ios-trending-up-outline": 62043,
    "ios-trophy": 62045,
    "ios-trophy-outline": 62044,
    "ios-umbrella": 62047,
    "ios-umbrella-outline": 62046,
    "ios-undo": 62663,
    "ios-undo-outline": 62662,
    "ios-unlock": 62049,
    "ios-unlock-outline": 62048,
    "ios-videocam": 62669,
    "ios-videocam-outline": 62668,
    "ios-volume-down": 62050,
    "ios-volume-down-outline": 62050,
    "ios-volume-mute": 62051,
    "ios-volume-mute-outline": 62051,
    "ios-volume-off": 62052,
    "ios-volume-off-outline": 62052,
    "ios-volume-up": 62053,
    "ios-volume-up-outline": 62053,
    "ios-walk": 62054,
    "ios-walk-outline": 62054,
    "ios-warning": 62056,
    "ios-warning-outline": 62055,
    "ios-watch": 62057,
    "ios-watch-outline": 62057,
    "ios-water": 62059,
    "ios-water-outline": 62058,
    "ios-wifi": 62061,
    "ios-wifi-outline": 62060,
    "ios-wine": 62063,
    "ios-wine-outline": 62062,
    "ios-woman": 62065,
    "ios-woman-outline": 62064,
    "logo-android": 61989,
    "logo-angular": 61991,
    "logo-apple": 61993,
    "logo-bitcoin": 61995,
    "logo-buffer": 61997,
    "logo-chrome": 61999,
    "logo-codepen": 62000,
    "logo-css3": 62001,
    "logo-designernews": 62002,
    "logo-dribbble": 62003,
    "logo-dropbox": 62004,
    "logo-euro": 62005,
    "logo-facebook": 62006,
    "logo-foursquare": 62007,
    "logo-freebsd-devil": 62008,
    "logo-github": 62009,
    "logo-google": 62010,
    "logo-googleplus": 62011,
    "logo-hackernews": 62012,
    "logo-html5": 62013,
    "logo-instagram": 62014,
    "logo-javascript": 62015,
    "logo-linkedin": 62016,
    "logo-markdown": 62017,
    "logo-nodejs": 62018,
    "logo-octocat": 62019,
    "logo-pinterest": 62020,
    "logo-playstation": 62021,
    "logo-python": 62022,
    "logo-reddit": 62023,
    "logo-rss": 62024,
    "logo-sass": 62025,
    "logo-skype": 62026,
    "logo-snapchat": 62027,
    "logo-steam": 62028,
    "logo-tumblr": 62029,
    "logo-tux": 62126,
    "logo-twitch": 62127,
    "logo-twitter": 62128,
    "logo-usd": 62129,
    "logo-vimeo": 62148,
    "logo-whatsapp": 62149,
    "logo-windows": 62255,
    "logo-wordpress": 62256,
    "logo-xbox": 62284,
    "logo-yahoo": 62285,
    "logo-yen": 62286,
    "logo-youtube": 62287,
    "md-add": 62067,
    "md-add-circle": 62066,
    "md-alarm": 62068,
    "md-albums": 62069,
    "md-alert": 62070,
    "md-american-football": 62071,
    "md-analytics": 62072,
    "md-aperture": 62073,
    "md-apps": 62074,
    "md-appstore": 62075,
    "md-archive": 62076,
    "md-arrow-back": 62077,
    "md-arrow-down": 62078,
    "md-arrow-dropdown": 62080,
    "md-arrow-dropdown-circle": 62079,
    "md-arrow-dropleft": 62082,
    "md-arrow-dropleft-circle": 62081,
    "md-arrow-dropright": 62084,
    "md-arrow-dropright-circle": 62083,
    "md-arrow-dropup": 62086,
    "md-arrow-dropup-circle": 62085,
    "md-arrow-forward": 62087,
    "md-arrow-round-back": 62088,
    "md-arrow-round-down": 62089,
    "md-arrow-round-forward": 62090,
    "md-arrow-round-up": 62091,
    "md-arrow-up": 62092,
    "md-at": 62093,
    "md-attach": 62094,
    "md-backspace": 62095,
    "md-barcode": 62096,
    "md-baseball": 62097,
    "md-basket": 62098,
    "md-basketball": 62099,
    "md-battery-charging": 62100,
    "md-battery-dead": 62101,
    "md-battery-full": 62102,
    "md-beaker": 62103,
    "md-beer": 62104,
    "md-bicycle": 62105,
    "md-bluetooth": 62106,
    "md-boat": 62107,
    "md-body": 62108,
    "md-bonfire": 62109,
    "md-book": 62110,
    "md-bookmark": 62111,
    "md-bookmarks": 62112,
    "md-bowtie": 62113,
    "md-briefcase": 62114,
    "md-browsers": 62115,
    "md-brush": 62116,
    "md-bug": 62117,
    "md-build": 62118,
    "md-bulb": 62119,
    "md-bus": 62120,
    "md-cafe": 62121,
    "md-calculator": 62122,
    "md-calendar": 62123,
    "md-call": 62124,
    "md-camera": 62125,
    "md-car": 62130,
    "md-card": 62131,
    "md-cart": 62132,
    "md-cash": 62133,
    "md-chatboxes": 62134,
    "md-chatbubbles": 62135,
    "md-checkbox": 62137,
    "md-checkbox-outline": 62136,
    "md-checkmark": 62140,
    "md-checkmark-circle": 62139,
    "md-checkmark-circle-outline": 62138,
    "md-clipboard": 62141,
    "md-clock": 62142,
    "md-close": 62144,
    "md-close-circle": 62143,
    "md-closed-captioning": 62145,
    "md-cloud": 62153,
    "md-cloud-circle": 62146,
    "md-cloud-done": 62147,
    "md-cloud-download": 62150,
    "md-cloud-outline": 62151,
    "md-cloud-upload": 62152,
    "md-cloudy": 62155,
    "md-cloudy-night": 62154,
    "md-code": 62158,
    "md-code-download": 62156,
    "md-code-working": 62157,
    "md-cog": 62159,
    "md-color-fill": 62160,
    "md-color-filter": 62161,
    "md-color-palette": 62162,
    "md-color-wand": 62163,
    "md-compass": 62164,
    "md-construct": 62165,
    "md-contact": 62166,
    "md-contacts": 62167,
    "md-contract": 62168,
    "md-contrast": 62169,
    "md-copy": 62170,
    "md-create": 62171,
    "md-crop": 62172,
    "md-cube": 62173,
    "md-cut": 62174,
    "md-desktop": 62175,
    "md-disc": 62176,
    "md-document": 62177,
    "md-done-all": 62178,
    "md-download": 62179,
    "md-easel": 62180,
    "md-egg": 62181,
    "md-exit": 62182,
    "md-expand": 62183,
    "md-eye": 62185,
    "md-eye-off": 62184,
    "md-fastforward": 62186,
    "md-female": 62187,
    "md-filing": 62188,
    "md-film": 62189,
    "md-finger-print": 62190,
    "md-flag": 62191,
    "md-flame": 62192,
    "md-flash": 62193,
    "md-flask": 62194,
    "md-flower": 62195,
    "md-folder": 62197,
    "md-folder-open": 62196,
    "md-football": 62198,
    "md-funnel": 62199,
    "md-game-controller-a": 62200,
    "md-game-controller-b": 62201,
    "md-git-branch": 62202,
    "md-git-commit": 62203,
    "md-git-compare": 62204,
    "md-git-merge": 62205,
    "md-git-network": 62206,
    "md-git-pull-request": 62207,
    "md-glasses": 62208,
    "md-globe": 62209,
    "md-grid": 62210,
    "md-hammer": 62211,
    "md-hand": 62212,
    "md-happy": 62213,
    "md-headset": 62214,
    "md-heart": 62216,
    "md-heart-outline": 62215,
    "md-help": 62219,
    "md-help-buoy": 62217,
    "md-help-circle": 62218,
    "md-home": 62220,
    "md-ice-cream": 62221,
    "md-image": 62222,
    "md-images": 62223,
    "md-infinite": 62224,
    "md-information": 62226,
    "md-information-circle": 62225,
    "md-ionic": 62227,
    "md-ionitron": 62228,
    "md-jet": 62229,
    "md-key": 62230,
    "md-keypad": 62231,
    "md-laptop": 62232,
    "md-leaf": 62233,
    "md-link": 61998,
    "md-list": 62235,
    "md-list-box": 62234,
    "md-locate": 62236,
    "md-lock": 62237,
    "md-log-in": 62238,
    "md-log-out": 62239,
    "md-magnet": 62240,
    "md-mail": 62242,
    "md-mail-open": 62241,
    "md-male": 62243,
    "md-man": 62244,
    "md-map": 62245,
    "md-medal": 62246,
    "md-medical": 62247,
    "md-medkit": 62248,
    "md-megaphone": 62249,
    "md-menu": 62250,
    "md-mic": 62252,
    "md-mic-off": 62251,
    "md-microphone": 62253,
    "md-moon": 62254,
    "md-more": 61897,
    "md-move": 62257,
    "md-musical-note": 62258,
    "md-musical-notes": 62259,
    "md-navigate": 62260,
    "md-no-smoking": 62261,
    "md-notifications": 62264,
    "md-notifications-off": 62262,
    "md-notifications-outline": 62263,
    "md-nuclear": 62265,
    "md-nutrition": 62266,
    "md-open": 62267,
    "md-options": 62268,
    "md-outlet": 62269,
    "md-paper": 62271,
    "md-paper-plane": 62270,
    "md-partly-sunny": 62272,
    "md-pause": 62273,
    "md-paw": 62274,
    "md-people": 62275,
    "md-person": 62277,
    "md-person-add": 62276,
    "md-phone-landscape": 62278,
    "md-phone-portrait": 62279,
    "md-photos": 62280,
    "md-pie": 62281,
    "md-pin": 62282,
    "md-pint": 62283,
    "md-pizza": 62292,
    "md-plane": 62293,
    "md-planet": 62294,
    "md-play": 62295,
    "md-podium": 62296,
    "md-power": 62297,
    "md-pricetag": 62298,
    "md-pricetags": 62299,
    "md-print": 62300,
    "md-pulse": 62301,
    "md-qr-scanner": 62302,
    "md-quote": 62303,
    "md-radio": 62306,
    "md-radio-button-off": 62304,
    "md-radio-button-on": 62305,
    "md-rainy": 62307,
    "md-recording": 62308,
    "md-redo": 62309,
    "md-refresh": 62310,
    "md-refresh-circle": 61992,
    "md-remove": 62312,
    "md-remove-circle": 62311,
    "md-reorder": 62313,
    "md-repeat": 62314,
    "md-resize": 62315,
    "md-restaurant": 62316,
    "md-return-left": 62317,
    "md-return-right": 62318,
    "md-reverse-camera": 62319,
    "md-rewind": 62320,
    "md-ribbon": 62321,
    "md-rose": 62322,
    "md-sad": 62323,
    "md-school": 62324,
    "md-search": 62325,
    "md-send": 62326,
    "md-settings": 62327,
    "md-share": 62329,
    "md-share-alt": 62328,
    "md-shirt": 62330,
    "md-shuffle": 62331,
    "md-skip-backward": 62332,
    "md-skip-forward": 62333,
    "md-snow": 62334,
    "md-speedometer": 62335,
    "md-square": 62337,
    "md-square-outline": 62336,
    "md-star": 62340,
    "md-star-half": 62338,
    "md-star-outline": 62339,
    "md-stats": 62341,
    "md-stopwatch": 62342,
    "md-subway": 62343,
    "md-sunny": 62344,
    "md-swap": 62345,
    "md-switch": 62346,
    "md-sync": 62347,
    "md-tablet-landscape": 62348,
    "md-tablet-portrait": 62349,
    "md-tennisball": 62350,
    "md-text": 62351,
    "md-thermometer": 62352,
    "md-thumbs-down": 62353,
    "md-thumbs-up": 62354,
    "md-thunderstorm": 62355,
    "md-time": 62356,
    "md-timer": 62357,
    "md-train": 62358,
    "md-transgender": 62359,
    "md-trash": 62360,
    "md-trending-down": 62361,
    "md-trending-up": 62362,
    "md-trophy": 62363,
    "md-umbrella": 62364,
    "md-undo": 62365,
    "md-unlock": 62366,
    "md-videocam": 62367,
    "md-volume-down": 62368,
    "md-volume-mute": 62369,
    "md-volume-off": 62370,
    "md-volume-up": 62371,
    "md-walk": 62372,
    "md-warning": 62373,
    "md-watch": 62374,
    "md-water": 62375,
    "md-wifi": 62376,
    "md-wine": 62377,
    "md-woman": 62378
  };
},734,[],"node_modules/react-native-vector-icons/glyphmaps/Ionicons.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = _require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = _interopRequireDefault(_createIconSet);

  var _Foundation = _require(_dependencyMap[1], "./glyphmaps/Foundation.json");

  var _Foundation2 = _interopRequireDefault(_Foundation);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var iconSet = (0, _createIconSet2.default)(_Foundation2.default, 'fontcustom', 'Foundation.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},735,[680,736],"node_modules/react-native-vector-icons/Foundation.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "address-book": 61696,
    "alert": 61697,
    "align-center": 61698,
    "align-justify": 61699,
    "align-left": 61700,
    "align-right": 61701,
    "anchor": 61702,
    "annotate": 61703,
    "archive": 61704,
    "arrow-down": 61705,
    "arrow-left": 61706,
    "arrow-right": 61707,
    "arrow-up": 61708,
    "arrows-compress": 61709,
    "arrows-expand": 61710,
    "arrows-in": 61711,
    "arrows-out": 61712,
    "asl": 61713,
    "asterisk": 61714,
    "at-sign": 61715,
    "background-color": 61716,
    "battery-empty": 61717,
    "battery-full": 61718,
    "battery-half": 61719,
    "bitcoin-circle": 61720,
    "bitcoin": 61721,
    "blind": 61722,
    "bluetooth": 61723,
    "bold": 61724,
    "book-bookmark": 61725,
    "book": 61726,
    "bookmark": 61727,
    "braille": 61728,
    "burst-new": 61729,
    "burst-sale": 61730,
    "burst": 61731,
    "calendar": 61732,
    "camera": 61733,
    "check": 61734,
    "checkbox": 61735,
    "clipboard-notes": 61736,
    "clipboard-pencil": 61737,
    "clipboard": 61738,
    "clock": 61739,
    "closed-caption": 61740,
    "cloud": 61741,
    "comment-minus": 61742,
    "comment-quotes": 61743,
    "comment-video": 61744,
    "comment": 61745,
    "comments": 61746,
    "compass": 61747,
    "contrast": 61748,
    "credit-card": 61749,
    "crop": 61750,
    "crown": 61751,
    "css3": 61752,
    "database": 61753,
    "die-five": 61754,
    "die-four": 61755,
    "die-one": 61756,
    "die-six": 61757,
    "die-three": 61758,
    "die-two": 61759,
    "dislike": 61760,
    "dollar-bill": 61761,
    "dollar": 61762,
    "download": 61763,
    "eject": 61764,
    "elevator": 61765,
    "euro": 61766,
    "eye": 61767,
    "fast-forward": 61768,
    "female-symbol": 61769,
    "female": 61770,
    "filter": 61771,
    "first-aid": 61772,
    "flag": 61773,
    "folder-add": 61774,
    "folder-lock": 61775,
    "folder": 61776,
    "foot": 61777,
    "foundation": 61778,
    "graph-bar": 61779,
    "graph-horizontal": 61780,
    "graph-pie": 61781,
    "graph-trend": 61782,
    "guide-dog": 61783,
    "hearing-aid": 61784,
    "heart": 61785,
    "home": 61786,
    "html5": 61787,
    "indent-less": 61788,
    "indent-more": 61789,
    "info": 61790,
    "italic": 61791,
    "key": 61792,
    "laptop": 61793,
    "layout": 61794,
    "lightbulb": 61795,
    "like": 61796,
    "link": 61797,
    "list-bullet": 61798,
    "list-number": 61799,
    "list-thumbnails": 61800,
    "list": 61801,
    "lock": 61802,
    "loop": 61803,
    "magnifying-glass": 61804,
    "mail": 61805,
    "male-female": 61806,
    "male-symbol": 61807,
    "male": 61808,
    "map": 61809,
    "marker": 61810,
    "megaphone": 61811,
    "microphone": 61812,
    "minus-circle": 61813,
    "minus": 61814,
    "mobile-signal": 61815,
    "mobile": 61816,
    "monitor": 61817,
    "mountains": 61818,
    "music": 61819,
    "next": 61820,
    "no-dogs": 61821,
    "no-smoking": 61822,
    "page-add": 61823,
    "page-copy": 61824,
    "page-csv": 61825,
    "page-delete": 61826,
    "page-doc": 61827,
    "page-edit": 61828,
    "page-export-csv": 61829,
    "page-export-doc": 61830,
    "page-export-pdf": 61831,
    "page-export": 61832,
    "page-filled": 61833,
    "page-multiple": 61834,
    "page-pdf": 61835,
    "page-remove": 61836,
    "page-search": 61837,
    "page": 61838,
    "paint-bucket": 61839,
    "paperclip": 61840,
    "pause": 61841,
    "paw": 61842,
    "paypal": 61843,
    "pencil": 61844,
    "photo": 61845,
    "play-circle": 61846,
    "play-video": 61847,
    "play": 61848,
    "plus": 61849,
    "pound": 61850,
    "power": 61851,
    "previous": 61852,
    "price-tag": 61853,
    "pricetag-multiple": 61854,
    "print": 61855,
    "prohibited": 61856,
    "projection-screen": 61857,
    "puzzle": 61858,
    "quote": 61859,
    "record": 61860,
    "refresh": 61861,
    "results-demographics": 61862,
    "results": 61863,
    "rewind-ten": 61864,
    "rewind": 61865,
    "rss": 61866,
    "safety-cone": 61867,
    "save": 61868,
    "share": 61869,
    "sheriff-badge": 61870,
    "shield": 61871,
    "shopping-bag": 61872,
    "shopping-cart": 61873,
    "shuffle": 61874,
    "skull": 61875,
    "social-500px": 61876,
    "social-adobe": 61877,
    "social-amazon": 61878,
    "social-android": 61879,
    "social-apple": 61880,
    "social-behance": 61881,
    "social-bing": 61882,
    "social-blogger": 61883,
    "social-delicious": 61884,
    "social-designer-news": 61885,
    "social-deviant-art": 61886,
    "social-digg": 61887,
    "social-dribbble": 61888,
    "social-drive": 61889,
    "social-dropbox": 61890,
    "social-evernote": 61891,
    "social-facebook": 61892,
    "social-flickr": 61893,
    "social-forrst": 61894,
    "social-foursquare": 61895,
    "social-game-center": 61896,
    "social-github": 61897,
    "social-google-plus": 61898,
    "social-hacker-news": 61899,
    "social-hi5": 61900,
    "social-instagram": 61901,
    "social-joomla": 61902,
    "social-lastfm": 61903,
    "social-linkedin": 61904,
    "social-medium": 61905,
    "social-myspace": 61906,
    "social-orkut": 61907,
    "social-path": 61908,
    "social-picasa": 61909,
    "social-pinterest": 61910,
    "social-rdio": 61911,
    "social-reddit": 61912,
    "social-skillshare": 61913,
    "social-skype": 61914,
    "social-smashing-mag": 61915,
    "social-snapchat": 61916,
    "social-spotify": 61917,
    "social-squidoo": 61918,
    "social-stack-overflow": 61919,
    "social-steam": 61920,
    "social-stumbleupon": 61921,
    "social-treehouse": 61922,
    "social-tumblr": 61923,
    "social-twitter": 61924,
    "social-vimeo": 61925,
    "social-windows": 61926,
    "social-xbox": 61927,
    "social-yahoo": 61928,
    "social-yelp": 61929,
    "social-youtube": 61930,
    "social-zerply": 61931,
    "social-zurb": 61932,
    "sound": 61933,
    "star": 61934,
    "stop": 61935,
    "strikethrough": 61936,
    "subscript": 61937,
    "superscript": 61938,
    "tablet-landscape": 61939,
    "tablet-portrait": 61940,
    "target-two": 61941,
    "target": 61942,
    "telephone-accessible": 61943,
    "telephone": 61944,
    "text-color": 61945,
    "thumbnails": 61946,
    "ticket": 61947,
    "torso-business": 61948,
    "torso-female": 61949,
    "torso": 61950,
    "torsos-all-female": 61951,
    "torsos-all": 61952,
    "torsos-female-male": 61953,
    "torsos-male-female": 61954,
    "torsos": 61955,
    "trash": 61956,
    "trees": 61957,
    "trophy": 61958,
    "underline": 61959,
    "universal-access": 61960,
    "unlink": 61961,
    "unlock": 61962,
    "upload-cloud": 61963,
    "upload": 61964,
    "usb": 61965,
    "video": 61966,
    "volume-none": 61967,
    "volume-strike": 61968,
    "volume": 61969,
    "web": 61970,
    "wheelchair": 61971,
    "widget": 61972,
    "wrench": 61973,
    "x-circle": 61974,
    "x": 61975,
    "yen": 61976,
    "zoom-in": 61977,
    "zoom-out": 61978
  };
},736,[],"node_modules/react-native-vector-icons/glyphmaps/Foundation.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = _require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = _interopRequireDefault(_createIconSet);

  var _EvilIcons = _require(_dependencyMap[1], "./glyphmaps/EvilIcons.json");

  var _EvilIcons2 = _interopRequireDefault(_EvilIcons);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var iconSet = (0, _createIconSet2.default)(_EvilIcons2.default, 'EvilIcons', 'EvilIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},737,[680,738],"node_modules/react-native-vector-icons/EvilIcons.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "archive": 61696,
    "arrow-down": 61697,
    "arrow-left": 61698,
    "arrow-right": 61699,
    "arrow-up": 61700,
    "bell": 61701,
    "calendar": 61702,
    "camera": 61703,
    "cart": 61704,
    "chart": 61705,
    "check": 61706,
    "chevron-down": 61707,
    "chevron-left": 61708,
    "chevron-right": 61709,
    "chevron-up": 61710,
    "clock": 61711,
    "close": 61712,
    "close-o": 61713,
    "comment": 61714,
    "credit-card": 61715,
    "envelope": 61716,
    "exclamation": 61717,
    "external-link": 61718,
    "eye": 61719,
    "gear": 61720,
    "heart": 61721,
    "image": 61722,
    "like": 61723,
    "link": 61724,
    "location": 61725,
    "lock": 61726,
    "minus": 61727,
    "navicon": 61728,
    "paperclip": 61729,
    "pencil": 61730,
    "play": 61731,
    "plus": 61732,
    "pointer": 61733,
    "question": 61734,
    "redo": 61735,
    "refresh": 61736,
    "retweet": 61737,
    "sc-facebook": 61738,
    "sc-github": 61739,
    "sc-google-plus": 61740,
    "sc-instagram": 61741,
    "sc-linkedin": 61742,
    "sc-odnoklassniki": 61743,
    "sc-pinterest": 61744,
    "sc-skype": 61745,
    "sc-soundcloud": 61746,
    "sc-telegram": 61747,
    "sc-tumblr": 61748,
    "sc-twitter": 61749,
    "sc-vimeo": 61750,
    "sc-vk": 61751,
    "sc-youtube": 61752,
    "search": 61753,
    "share-apple": 61754,
    "share-google": 61755,
    "spinner": 61756,
    "spinner-2": 61757,
    "spinner-3": 61758,
    "star": 61759,
    "tag": 61760,
    "trash": 61761,
    "trophy": 61762,
    "undo": 61763,
    "unlock": 61764,
    "user": 61765
  };
},738,[],"node_modules/react-native-vector-icons/glyphmaps/EvilIcons.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = _require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = _interopRequireDefault(_createIconSet);

  var _Entypo = _require(_dependencyMap[1], "./glyphmaps/Entypo.json");

  var _Entypo2 = _interopRequireDefault(_Entypo);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var iconSet = (0, _createIconSet2.default)(_Entypo2.default, 'Entypo', 'Entypo.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},739,[680,740],"node_modules/react-native-vector-icons/Entypo.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "500px": 61696,
    "500px-with-circle": 61697,
    "add-to-list": 61698,
    "add-user": 61699,
    "address": 61700,
    "adjust": 61701,
    "air": 61702,
    "aircraft": 61703,
    "aircraft-landing": 61704,
    "aircraft-take-off": 61705,
    "align-bottom": 61706,
    "align-horizontal-middle": 61707,
    "align-left": 61708,
    "align-right": 61709,
    "align-top": 61710,
    "align-vertical-middle": 61711,
    "app-store": 61712,
    "archive": 61713,
    "area-graph": 61714,
    "arrow-bold-down": 61715,
    "arrow-bold-left": 61716,
    "arrow-bold-right": 61717,
    "arrow-bold-up": 61718,
    "arrow-down": 61719,
    "arrow-left": 61720,
    "arrow-long-down": 61721,
    "arrow-long-left": 61722,
    "arrow-long-right": 61723,
    "arrow-long-up": 61724,
    "arrow-right": 61725,
    "arrow-up": 61726,
    "arrow-with-circle-down": 61727,
    "arrow-with-circle-left": 61728,
    "arrow-with-circle-right": 61729,
    "arrow-with-circle-up": 61730,
    "attachment": 61731,
    "awareness-ribbon": 61732,
    "back": 61733,
    "back-in-time": 61734,
    "baidu": 61735,
    "bar-graph": 61736,
    "basecamp": 61737,
    "battery": 61738,
    "beamed-note": 61739,
    "behance": 61740,
    "bell": 61741,
    "blackboard": 61742,
    "block": 61743,
    "book": 61744,
    "bookmark": 61745,
    "bookmarks": 61746,
    "bowl": 61747,
    "box": 61748,
    "briefcase": 61749,
    "browser": 61750,
    "brush": 61751,
    "bucket": 61752,
    "bug": 61753,
    "cake": 61754,
    "calculator": 61755,
    "calendar": 61756,
    "camera": 61757,
    "ccw": 61758,
    "chat": 61759,
    "check": 61760,
    "chevron-down": 61761,
    "chevron-left": 61762,
    "chevron-right": 61763,
    "chevron-small-down": 61764,
    "chevron-small-left": 61765,
    "chevron-small-right": 61766,
    "chevron-small-up": 61767,
    "chevron-thin-down": 61768,
    "chevron-thin-left": 61769,
    "chevron-thin-right": 61770,
    "chevron-thin-up": 61771,
    "chevron-up": 61772,
    "chevron-with-circle-down": 61773,
    "chevron-with-circle-left": 61774,
    "chevron-with-circle-right": 61775,
    "chevron-with-circle-up": 61776,
    "circle": 61777,
    "circle-with-cross": 61778,
    "circle-with-minus": 61779,
    "circle-with-plus": 61780,
    "circular-graph": 61781,
    "clapperboard": 61782,
    "classic-computer": 61783,
    "clipboard": 61784,
    "clock": 61785,
    "cloud": 61786,
    "code": 61787,
    "cog": 61788,
    "colours": 61789,
    "compass": 61790,
    "controller-fast-backward": 61791,
    "controller-fast-forward": 61792,
    "controller-jump-to-start": 61793,
    "controller-next": 61794,
    "controller-paus": 61795,
    "controller-play": 61796,
    "controller-record": 61797,
    "controller-stop": 61798,
    "controller-volume": 61799,
    "copy": 61800,
    "creative-cloud": 61801,
    "creative-commons": 61802,
    "creative-commons-attribution": 61803,
    "creative-commons-noderivs": 61804,
    "creative-commons-noncommercial-eu": 61805,
    "creative-commons-noncommercial-us": 61806,
    "creative-commons-public-domain": 61807,
    "creative-commons-remix": 61808,
    "creative-commons-share": 61809,
    "creative-commons-sharealike": 61810,
    "credit": 61811,
    "credit-card": 61812,
    "crop": 61813,
    "cross": 61814,
    "cup": 61815,
    "cw": 61816,
    "cycle": 61817,
    "database": 61818,
    "dial-pad": 61819,
    "direction": 61820,
    "document": 61821,
    "document-landscape": 61822,
    "documents": 61823,
    "dot-single": 61824,
    "dots-three-horizontal": 61825,
    "dots-three-vertical": 61826,
    "dots-two-horizontal": 61827,
    "dots-two-vertical": 61828,
    "download": 61829,
    "dribbble": 61830,
    "dribbble-with-circle": 61831,
    "drink": 61832,
    "drive": 61833,
    "drop": 61834,
    "dropbox": 61835,
    "edit": 61836,
    "email": 61837,
    "emoji-flirt": 61838,
    "emoji-happy": 61839,
    "emoji-neutral": 61840,
    "emoji-sad": 61841,
    "erase": 61842,
    "eraser": 61843,
    "evernote": 61844,
    "export": 61845,
    "eye": 61846,
    "eye-with-line": 61847,
    "facebook": 61848,
    "facebook-with-circle": 61849,
    "feather": 61850,
    "fingerprint": 61851,
    "flag": 61852,
    "flash": 61853,
    "flashlight": 61854,
    "flat-brush": 61855,
    "flattr": 61856,
    "flickr": 61857,
    "flickr-with-circle": 61858,
    "flow-branch": 61859,
    "flow-cascade": 61860,
    "flow-line": 61861,
    "flow-parallel": 61862,
    "flow-tree": 61863,
    "flower": 61864,
    "folder": 61865,
    "folder-images": 61866,
    "folder-music": 61867,
    "folder-video": 61868,
    "forward": 61869,
    "foursquare": 61870,
    "funnel": 61871,
    "game-controller": 61872,
    "gauge": 61873,
    "github": 61874,
    "github-with-circle": 61875,
    "globe": 61876,
    "google-": 61877,
    "google--with-circle": 61878,
    "google-drive": 61879,
    "google-hangouts": 61880,
    "google-play": 61881,
    "graduation-cap": 61882,
    "grid": 61883,
    "grooveshark": 61884,
    "hair-cross": 61885,
    "hand": 61886,
    "heart": 61887,
    "heart-outlined": 61888,
    "help": 61889,
    "help-with-circle": 61890,
    "home": 61891,
    "hour-glass": 61892,
    "houzz": 61893,
    "icloud": 61894,
    "image": 61895,
    "image-inverted": 61896,
    "images": 61897,
    "inbox": 61898,
    "infinity": 61899,
    "info": 61900,
    "info-with-circle": 61901,
    "instagram": 61902,
    "instagram-with-circle": 61903,
    "install": 61904,
    "key": 61905,
    "keyboard": 61906,
    "lab-flask": 61907,
    "landline": 61908,
    "language": 61909,
    "laptop": 61910,
    "lastfm": 61911,
    "lastfm-with-circle": 61912,
    "layers": 61913,
    "leaf": 61914,
    "level-down": 61915,
    "level-up": 61916,
    "lifebuoy": 61917,
    "light-bulb": 61918,
    "light-down": 61919,
    "light-up": 61920,
    "line-graph": 61921,
    "link": 61922,
    "linkedin": 61923,
    "linkedin-with-circle": 61924,
    "list": 61925,
    "location": 61926,
    "location-pin": 61927,
    "lock": 61928,
    "lock-open": 61929,
    "log-out": 61930,
    "login": 61931,
    "loop": 61932,
    "magnet": 61933,
    "magnifying-glass": 61934,
    "mail": 61935,
    "mail-with-circle": 61936,
    "man": 61937,
    "map": 61938,
    "mask": 61939,
    "medal": 61940,
    "medium": 61941,
    "medium-with-circle": 61942,
    "megaphone": 61943,
    "menu": 61944,
    "merge": 61945,
    "message": 61946,
    "mic": 61947,
    "minus": 61948,
    "mixi": 61949,
    "mobile": 61950,
    "modern-mic": 61951,
    "moon": 61952,
    "mouse": 61953,
    "mouse-pointer": 61954,
    "music": 61955,
    "network": 61956,
    "new": 61957,
    "new-message": 61958,
    "news": 61959,
    "newsletter": 61960,
    "note": 61961,
    "notification": 61962,
    "notifications-off": 61963,
    "old-mobile": 61964,
    "old-phone": 61965,
    "onedrive": 61966,
    "open-book": 61967,
    "palette": 61968,
    "paper-plane": 61969,
    "paypal": 61970,
    "pencil": 61971,
    "phone": 61972,
    "picasa": 61973,
    "pie-chart": 61974,
    "pin": 61975,
    "pinterest": 61976,
    "pinterest-with-circle": 61977,
    "plus": 61978,
    "popup": 61979,
    "power-plug": 61980,
    "price-ribbon": 61981,
    "price-tag": 61982,
    "print": 61983,
    "progress-empty": 61984,
    "progress-full": 61985,
    "progress-one": 61986,
    "progress-two": 61987,
    "publish": 61988,
    "qq": 61989,
    "qq-with-circle": 61990,
    "quote": 61991,
    "radio": 61992,
    "raft": 61993,
    "raft-with-circle": 61994,
    "rainbow": 61995,
    "rdio": 61996,
    "rdio-with-circle": 61997,
    "remove-user": 61998,
    "renren": 61999,
    "reply": 62000,
    "reply-all": 62001,
    "resize-100-": 62002,
    "resize-full-screen": 62003,
    "retweet": 62004,
    "rocket": 62005,
    "round-brush": 62006,
    "rss": 62007,
    "ruler": 62008,
    "save": 62009,
    "scissors": 62010,
    "scribd": 62011,
    "select-arrows": 62012,
    "share": 62013,
    "share-alternative": 62014,
    "shareable": 62015,
    "shield": 62016,
    "shop": 62017,
    "shopping-bag": 62018,
    "shopping-basket": 62019,
    "shopping-cart": 62020,
    "shuffle": 62021,
    "signal": 62022,
    "sina-weibo": 62023,
    "skype": 62024,
    "skype-with-circle": 62025,
    "slideshare": 62026,
    "smashing": 62027,
    "sound": 62028,
    "sound-mix": 62029,
    "sound-mute": 62030,
    "soundcloud": 62031,
    "sports-club": 62032,
    "spotify": 62033,
    "spotify-with-circle": 62034,
    "spreadsheet": 62035,
    "squared-cross": 62036,
    "squared-minus": 62037,
    "squared-plus": 62038,
    "star": 62039,
    "star-outlined": 62040,
    "stopwatch": 62041,
    "stumbleupon": 62042,
    "stumbleupon-with-circle": 62043,
    "suitcase": 62044,
    "swap": 62045,
    "swarm": 62046,
    "sweden": 62047,
    "switch": 62048,
    "tablet": 62049,
    "tablet-mobile-combo": 62050,
    "tag": 62051,
    "text": 62052,
    "text-document": 62053,
    "text-document-inverted": 62054,
    "thermometer": 62055,
    "thumbs-down": 62056,
    "thumbs-up": 62057,
    "thunder-cloud": 62058,
    "ticket": 62059,
    "time-slot": 62060,
    "tools": 62061,
    "traffic-cone": 62062,
    "trash": 62063,
    "tree": 62064,
    "triangle-down": 62065,
    "triangle-left": 62066,
    "triangle-right": 62067,
    "triangle-up": 62068,
    "tripadvisor": 62069,
    "trophy": 62070,
    "tumblr": 62071,
    "tumblr-with-circle": 62072,
    "tv": 62073,
    "twitter": 62074,
    "twitter-with-circle": 62075,
    "typing": 62076,
    "uninstall": 62077,
    "unread": 62078,
    "untag": 62079,
    "upload": 62080,
    "upload-to-cloud": 62081,
    "user": 62082,
    "users": 62083,
    "v-card": 62084,
    "video": 62085,
    "video-camera": 62086,
    "vimeo": 62087,
    "vimeo-with-circle": 62088,
    "vine": 62089,
    "vine-with-circle": 62090,
    "vinyl": 62091,
    "vk": 62092,
    "vk-alternitive": 62093,
    "vk-with-circle": 62094,
    "voicemail": 62095,
    "wallet": 62096,
    "warning": 62097,
    "water": 62098,
    "windows-store": 62099,
    "xing": 62100,
    "xing-with-circle": 62101,
    "yelp": 62102,
    "youko": 62103,
    "youko-with-circle": 62104,
    "youtube": 62105,
    "youtube-with-circle": 62106
  };
},740,[],"node_modules/react-native-vector-icons/glyphmaps/Entypo.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = _require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = _interopRequireDefault(_createIconSet);

  var _FontAwesome = _require(_dependencyMap[1], "./glyphmaps/FontAwesome.json");

  var _FontAwesome2 = _interopRequireDefault(_FontAwesome);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var iconSet = (0, _createIconSet2.default)(_FontAwesome2.default, 'FontAwesome', 'FontAwesome.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},741,[680,742],"node_modules/react-native-vector-icons/FontAwesome.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "glass": 61440,
    "music": 61441,
    "search": 61442,
    "envelope-o": 61443,
    "heart": 61444,
    "star": 61445,
    "star-o": 61446,
    "user": 61447,
    "film": 61448,
    "th-large": 61449,
    "th": 61450,
    "th-list": 61451,
    "check": 61452,
    "remove": 61453,
    "close": 61453,
    "times": 61453,
    "search-plus": 61454,
    "search-minus": 61456,
    "power-off": 61457,
    "signal": 61458,
    "gear": 61459,
    "cog": 61459,
    "trash-o": 61460,
    "home": 61461,
    "file-o": 61462,
    "clock-o": 61463,
    "road": 61464,
    "download": 61465,
    "arrow-circle-o-down": 61466,
    "arrow-circle-o-up": 61467,
    "inbox": 61468,
    "play-circle-o": 61469,
    "rotate-right": 61470,
    "repeat": 61470,
    "refresh": 61473,
    "list-alt": 61474,
    "lock": 61475,
    "flag": 61476,
    "headphones": 61477,
    "volume-off": 61478,
    "volume-down": 61479,
    "volume-up": 61480,
    "qrcode": 61481,
    "barcode": 61482,
    "tag": 61483,
    "tags": 61484,
    "book": 61485,
    "bookmark": 61486,
    "print": 61487,
    "camera": 61488,
    "font": 61489,
    "bold": 61490,
    "italic": 61491,
    "text-height": 61492,
    "text-width": 61493,
    "align-left": 61494,
    "align-center": 61495,
    "align-right": 61496,
    "align-justify": 61497,
    "list": 61498,
    "dedent": 61499,
    "outdent": 61499,
    "indent": 61500,
    "video-camera": 61501,
    "photo": 61502,
    "image": 61502,
    "picture-o": 61502,
    "pencil": 61504,
    "map-marker": 61505,
    "adjust": 61506,
    "tint": 61507,
    "edit": 61508,
    "pencil-square-o": 61508,
    "share-square-o": 61509,
    "check-square-o": 61510,
    "arrows": 61511,
    "step-backward": 61512,
    "fast-backward": 61513,
    "backward": 61514,
    "play": 61515,
    "pause": 61516,
    "stop": 61517,
    "forward": 61518,
    "fast-forward": 61520,
    "step-forward": 61521,
    "eject": 61522,
    "chevron-left": 61523,
    "chevron-right": 61524,
    "plus-circle": 61525,
    "minus-circle": 61526,
    "times-circle": 61527,
    "check-circle": 61528,
    "question-circle": 61529,
    "info-circle": 61530,
    "crosshairs": 61531,
    "times-circle-o": 61532,
    "check-circle-o": 61533,
    "ban": 61534,
    "arrow-left": 61536,
    "arrow-right": 61537,
    "arrow-up": 61538,
    "arrow-down": 61539,
    "mail-forward": 61540,
    "share": 61540,
    "expand": 61541,
    "compress": 61542,
    "plus": 61543,
    "minus": 61544,
    "asterisk": 61545,
    "exclamation-circle": 61546,
    "gift": 61547,
    "leaf": 61548,
    "fire": 61549,
    "eye": 61550,
    "eye-slash": 61552,
    "warning": 61553,
    "exclamation-triangle": 61553,
    "plane": 61554,
    "calendar": 61555,
    "random": 61556,
    "comment": 61557,
    "magnet": 61558,
    "chevron-up": 61559,
    "chevron-down": 61560,
    "retweet": 61561,
    "shopping-cart": 61562,
    "folder": 61563,
    "folder-open": 61564,
    "arrows-v": 61565,
    "arrows-h": 61566,
    "bar-chart-o": 61568,
    "bar-chart": 61568,
    "twitter-square": 61569,
    "facebook-square": 61570,
    "camera-retro": 61571,
    "key": 61572,
    "gears": 61573,
    "cogs": 61573,
    "comments": 61574,
    "thumbs-o-up": 61575,
    "thumbs-o-down": 61576,
    "star-half": 61577,
    "heart-o": 61578,
    "sign-out": 61579,
    "linkedin-square": 61580,
    "thumb-tack": 61581,
    "external-link": 61582,
    "sign-in": 61584,
    "trophy": 61585,
    "github-square": 61586,
    "upload": 61587,
    "lemon-o": 61588,
    "phone": 61589,
    "square-o": 61590,
    "bookmark-o": 61591,
    "phone-square": 61592,
    "twitter": 61593,
    "facebook-f": 61594,
    "facebook": 61594,
    "github": 61595,
    "unlock": 61596,
    "credit-card": 61597,
    "feed": 61598,
    "rss": 61598,
    "hdd-o": 61600,
    "bullhorn": 61601,
    "bell": 61683,
    "certificate": 61603,
    "hand-o-right": 61604,
    "hand-o-left": 61605,
    "hand-o-up": 61606,
    "hand-o-down": 61607,
    "arrow-circle-left": 61608,
    "arrow-circle-right": 61609,
    "arrow-circle-up": 61610,
    "arrow-circle-down": 61611,
    "globe": 61612,
    "wrench": 61613,
    "tasks": 61614,
    "filter": 61616,
    "briefcase": 61617,
    "arrows-alt": 61618,
    "group": 61632,
    "users": 61632,
    "chain": 61633,
    "link": 61633,
    "cloud": 61634,
    "flask": 61635,
    "cut": 61636,
    "scissors": 61636,
    "copy": 61637,
    "files-o": 61637,
    "paperclip": 61638,
    "save": 61639,
    "floppy-o": 61639,
    "square": 61640,
    "navicon": 61641,
    "reorder": 61641,
    "bars": 61641,
    "list-ul": 61642,
    "list-ol": 61643,
    "strikethrough": 61644,
    "underline": 61645,
    "table": 61646,
    "magic": 61648,
    "truck": 61649,
    "pinterest": 61650,
    "pinterest-square": 61651,
    "google-plus-square": 61652,
    "google-plus": 61653,
    "money": 61654,
    "caret-down": 61655,
    "caret-up": 61656,
    "caret-left": 61657,
    "caret-right": 61658,
    "columns": 61659,
    "unsorted": 61660,
    "sort": 61660,
    "sort-down": 61661,
    "sort-desc": 61661,
    "sort-up": 61662,
    "sort-asc": 61662,
    "envelope": 61664,
    "linkedin": 61665,
    "rotate-left": 61666,
    "undo": 61666,
    "legal": 61667,
    "gavel": 61667,
    "dashboard": 61668,
    "tachometer": 61668,
    "comment-o": 61669,
    "comments-o": 61670,
    "flash": 61671,
    "bolt": 61671,
    "sitemap": 61672,
    "umbrella": 61673,
    "paste": 61674,
    "clipboard": 61674,
    "lightbulb-o": 61675,
    "exchange": 61676,
    "cloud-download": 61677,
    "cloud-upload": 61678,
    "user-md": 61680,
    "stethoscope": 61681,
    "suitcase": 61682,
    "bell-o": 61602,
    "coffee": 61684,
    "cutlery": 61685,
    "file-text-o": 61686,
    "building-o": 61687,
    "hospital-o": 61688,
    "ambulance": 61689,
    "medkit": 61690,
    "fighter-jet": 61691,
    "beer": 61692,
    "h-square": 61693,
    "plus-square": 61694,
    "angle-double-left": 61696,
    "angle-double-right": 61697,
    "angle-double-up": 61698,
    "angle-double-down": 61699,
    "angle-left": 61700,
    "angle-right": 61701,
    "angle-up": 61702,
    "angle-down": 61703,
    "desktop": 61704,
    "laptop": 61705,
    "tablet": 61706,
    "mobile-phone": 61707,
    "mobile": 61707,
    "circle-o": 61708,
    "quote-left": 61709,
    "quote-right": 61710,
    "spinner": 61712,
    "circle": 61713,
    "mail-reply": 61714,
    "reply": 61714,
    "github-alt": 61715,
    "folder-o": 61716,
    "folder-open-o": 61717,
    "smile-o": 61720,
    "frown-o": 61721,
    "meh-o": 61722,
    "gamepad": 61723,
    "keyboard-o": 61724,
    "flag-o": 61725,
    "flag-checkered": 61726,
    "terminal": 61728,
    "code": 61729,
    "mail-reply-all": 61730,
    "reply-all": 61730,
    "star-half-empty": 61731,
    "star-half-full": 61731,
    "star-half-o": 61731,
    "location-arrow": 61732,
    "crop": 61733,
    "code-fork": 61734,
    "unlink": 61735,
    "chain-broken": 61735,
    "question": 61736,
    "info": 61737,
    "exclamation": 61738,
    "superscript": 61739,
    "subscript": 61740,
    "eraser": 61741,
    "puzzle-piece": 61742,
    "microphone": 61744,
    "microphone-slash": 61745,
    "shield": 61746,
    "calendar-o": 61747,
    "fire-extinguisher": 61748,
    "rocket": 61749,
    "maxcdn": 61750,
    "chevron-circle-left": 61751,
    "chevron-circle-right": 61752,
    "chevron-circle-up": 61753,
    "chevron-circle-down": 61754,
    "html5": 61755,
    "css3": 61756,
    "anchor": 61757,
    "unlock-alt": 61758,
    "bullseye": 61760,
    "ellipsis-h": 61761,
    "ellipsis-v": 61762,
    "rss-square": 61763,
    "play-circle": 61764,
    "ticket": 61765,
    "minus-square": 61766,
    "minus-square-o": 61767,
    "level-up": 61768,
    "level-down": 61769,
    "check-square": 61770,
    "pencil-square": 61771,
    "external-link-square": 61772,
    "share-square": 61773,
    "compass": 61774,
    "toggle-down": 61776,
    "caret-square-o-down": 61776,
    "toggle-up": 61777,
    "caret-square-o-up": 61777,
    "toggle-right": 61778,
    "caret-square-o-right": 61778,
    "euro": 61779,
    "eur": 61779,
    "gbp": 61780,
    "dollar": 61781,
    "usd": 61781,
    "rupee": 61782,
    "inr": 61782,
    "cny": 61783,
    "rmb": 61783,
    "yen": 61783,
    "jpy": 61783,
    "ruble": 61784,
    "rouble": 61784,
    "rub": 61784,
    "won": 61785,
    "krw": 61785,
    "bitcoin": 61786,
    "btc": 61786,
    "file": 61787,
    "file-text": 61788,
    "sort-alpha-asc": 61789,
    "sort-alpha-desc": 61790,
    "sort-amount-asc": 61792,
    "sort-amount-desc": 61793,
    "sort-numeric-asc": 61794,
    "sort-numeric-desc": 61795,
    "thumbs-up": 61796,
    "thumbs-down": 61797,
    "youtube-square": 61798,
    "youtube": 61799,
    "xing": 61800,
    "xing-square": 61801,
    "youtube-play": 61802,
    "dropbox": 61803,
    "stack-overflow": 61804,
    "instagram": 61805,
    "flickr": 61806,
    "adn": 61808,
    "bitbucket": 61809,
    "bitbucket-square": 61810,
    "tumblr": 61811,
    "tumblr-square": 61812,
    "long-arrow-down": 61813,
    "long-arrow-up": 61814,
    "long-arrow-left": 61815,
    "long-arrow-right": 61816,
    "apple": 61817,
    "windows": 61818,
    "android": 61819,
    "linux": 61820,
    "dribbble": 61821,
    "skype": 61822,
    "foursquare": 61824,
    "trello": 61825,
    "female": 61826,
    "male": 61827,
    "gittip": 61828,
    "gratipay": 61828,
    "sun-o": 61829,
    "moon-o": 61830,
    "archive": 61831,
    "bug": 61832,
    "vk": 61833,
    "weibo": 61834,
    "renren": 61835,
    "pagelines": 61836,
    "stack-exchange": 61837,
    "arrow-circle-o-right": 61838,
    "arrow-circle-o-left": 61840,
    "toggle-left": 61841,
    "caret-square-o-left": 61841,
    "dot-circle-o": 61842,
    "wheelchair": 61843,
    "vimeo-square": 61844,
    "turkish-lira": 61845,
    "try": 61845,
    "plus-square-o": 61846,
    "space-shuttle": 61847,
    "slack": 61848,
    "envelope-square": 61849,
    "wordpress": 61850,
    "openid": 61851,
    "institution": 61852,
    "bank": 61852,
    "university": 61852,
    "mortar-board": 61853,
    "graduation-cap": 61853,
    "yahoo": 61854,
    "google": 61856,
    "reddit": 61857,
    "reddit-square": 61858,
    "stumbleupon-circle": 61859,
    "stumbleupon": 61860,
    "delicious": 61861,
    "digg": 61862,
    "pied-piper-pp": 61863,
    "pied-piper-alt": 61864,
    "drupal": 61865,
    "joomla": 61866,
    "language": 61867,
    "fax": 61868,
    "building": 61869,
    "child": 61870,
    "paw": 61872,
    "spoon": 61873,
    "cube": 61874,
    "cubes": 61875,
    "behance": 61876,
    "behance-square": 61877,
    "steam": 61878,
    "steam-square": 61879,
    "recycle": 61880,
    "automobile": 61881,
    "car": 61881,
    "cab": 61882,
    "taxi": 61882,
    "tree": 61883,
    "spotify": 61884,
    "deviantart": 61885,
    "soundcloud": 61886,
    "database": 61888,
    "file-pdf-o": 61889,
    "file-word-o": 61890,
    "file-excel-o": 61891,
    "file-powerpoint-o": 61892,
    "file-photo-o": 61893,
    "file-picture-o": 61893,
    "file-image-o": 61893,
    "file-zip-o": 61894,
    "file-archive-o": 61894,
    "file-sound-o": 61895,
    "file-audio-o": 61895,
    "file-movie-o": 61896,
    "file-video-o": 61896,
    "file-code-o": 61897,
    "vine": 61898,
    "codepen": 61899,
    "jsfiddle": 61900,
    "life-bouy": 61901,
    "life-buoy": 61901,
    "life-saver": 61901,
    "support": 61901,
    "life-ring": 61901,
    "circle-o-notch": 61902,
    "ra": 61904,
    "resistance": 61904,
    "rebel": 61904,
    "ge": 61905,
    "empire": 61905,
    "git-square": 61906,
    "git": 61907,
    "y-combinator-square": 61908,
    "yc-square": 61908,
    "hacker-news": 61908,
    "tencent-weibo": 61909,
    "qq": 61910,
    "wechat": 61911,
    "weixin": 61911,
    "send": 61912,
    "paper-plane": 61912,
    "send-o": 61913,
    "paper-plane-o": 61913,
    "history": 61914,
    "circle-thin": 61915,
    "header": 61916,
    "paragraph": 61917,
    "sliders": 61918,
    "share-alt": 61920,
    "share-alt-square": 61921,
    "bomb": 61922,
    "soccer-ball-o": 61923,
    "futbol-o": 61923,
    "tty": 61924,
    "binoculars": 61925,
    "plug": 61926,
    "slideshare": 61927,
    "twitch": 61928,
    "yelp": 61929,
    "newspaper-o": 61930,
    "wifi": 61931,
    "calculator": 61932,
    "paypal": 61933,
    "google-wallet": 61934,
    "cc-visa": 61936,
    "cc-mastercard": 61937,
    "cc-discover": 61938,
    "cc-amex": 61939,
    "cc-paypal": 61940,
    "cc-stripe": 61941,
    "bell-slash": 61942,
    "bell-slash-o": 61943,
    "trash": 61944,
    "copyright": 61945,
    "at": 61946,
    "eyedropper": 61947,
    "paint-brush": 61948,
    "birthday-cake": 61949,
    "area-chart": 61950,
    "pie-chart": 61952,
    "line-chart": 61953,
    "lastfm": 61954,
    "lastfm-square": 61955,
    "toggle-off": 61956,
    "toggle-on": 61957,
    "bicycle": 61958,
    "bus": 61959,
    "ioxhost": 61960,
    "angellist": 61961,
    "cc": 61962,
    "shekel": 61963,
    "sheqel": 61963,
    "ils": 61963,
    "meanpath": 61964,
    "buysellads": 61965,
    "connectdevelop": 61966,
    "dashcube": 61968,
    "forumbee": 61969,
    "leanpub": 61970,
    "sellsy": 61971,
    "shirtsinbulk": 61972,
    "simplybuilt": 61973,
    "skyatlas": 61974,
    "cart-plus": 61975,
    "cart-arrow-down": 61976,
    "diamond": 61977,
    "ship": 61978,
    "user-secret": 61979,
    "motorcycle": 61980,
    "street-view": 61981,
    "heartbeat": 61982,
    "venus": 61985,
    "mars": 61986,
    "mercury": 61987,
    "intersex": 61988,
    "transgender": 61988,
    "transgender-alt": 61989,
    "venus-double": 61990,
    "mars-double": 61991,
    "venus-mars": 61992,
    "mars-stroke": 61993,
    "mars-stroke-v": 61994,
    "mars-stroke-h": 61995,
    "neuter": 61996,
    "genderless": 61997,
    "facebook-official": 62000,
    "pinterest-p": 62001,
    "whatsapp": 62002,
    "server": 62003,
    "user-plus": 62004,
    "user-times": 62005,
    "hotel": 62006,
    "bed": 62006,
    "viacoin": 62007,
    "train": 62008,
    "subway": 62009,
    "medium": 62010,
    "yc": 62011,
    "y-combinator": 62011,
    "optin-monster": 62012,
    "opencart": 62013,
    "expeditedssl": 62014,
    "battery-4": 62016,
    "battery": 62016,
    "battery-full": 62016,
    "battery-3": 62017,
    "battery-three-quarters": 62017,
    "battery-2": 62018,
    "battery-half": 62018,
    "battery-1": 62019,
    "battery-quarter": 62019,
    "battery-0": 62020,
    "battery-empty": 62020,
    "mouse-pointer": 62021,
    "i-cursor": 62022,
    "object-group": 62023,
    "object-ungroup": 62024,
    "sticky-note": 62025,
    "sticky-note-o": 62026,
    "cc-jcb": 62027,
    "cc-diners-club": 62028,
    "clone": 62029,
    "balance-scale": 62030,
    "hourglass-o": 62032,
    "hourglass-1": 62033,
    "hourglass-start": 62033,
    "hourglass-2": 62034,
    "hourglass-half": 62034,
    "hourglass-3": 62035,
    "hourglass-end": 62035,
    "hourglass": 62036,
    "hand-grab-o": 62037,
    "hand-rock-o": 62037,
    "hand-stop-o": 62038,
    "hand-paper-o": 62038,
    "hand-scissors-o": 62039,
    "hand-lizard-o": 62040,
    "hand-spock-o": 62041,
    "hand-pointer-o": 62042,
    "hand-peace-o": 62043,
    "trademark": 62044,
    "registered": 62045,
    "creative-commons": 62046,
    "gg": 62048,
    "gg-circle": 62049,
    "tripadvisor": 62050,
    "odnoklassniki": 62051,
    "odnoklassniki-square": 62052,
    "get-pocket": 62053,
    "wikipedia-w": 62054,
    "safari": 62055,
    "chrome": 62056,
    "firefox": 62057,
    "opera": 62058,
    "internet-explorer": 62059,
    "tv": 62060,
    "television": 62060,
    "contao": 62061,
    "500px": 62062,
    "amazon": 62064,
    "calendar-plus-o": 62065,
    "calendar-minus-o": 62066,
    "calendar-times-o": 62067,
    "calendar-check-o": 62068,
    "industry": 62069,
    "map-pin": 62070,
    "map-signs": 62071,
    "map-o": 62072,
    "map": 62073,
    "commenting": 62074,
    "commenting-o": 62075,
    "houzz": 62076,
    "vimeo": 62077,
    "black-tie": 62078,
    "fonticons": 62080,
    "reddit-alien": 62081,
    "edge": 62082,
    "credit-card-alt": 62083,
    "codiepie": 62084,
    "modx": 62085,
    "fort-awesome": 62086,
    "usb": 62087,
    "product-hunt": 62088,
    "mixcloud": 62089,
    "scribd": 62090,
    "pause-circle": 62091,
    "pause-circle-o": 62092,
    "stop-circle": 62093,
    "stop-circle-o": 62094,
    "shopping-bag": 62096,
    "shopping-basket": 62097,
    "hashtag": 62098,
    "bluetooth": 62099,
    "bluetooth-b": 62100,
    "percent": 62101,
    "gitlab": 62102,
    "wpbeginner": 62103,
    "wpforms": 62104,
    "envira": 62105,
    "universal-access": 62106,
    "wheelchair-alt": 62107,
    "question-circle-o": 62108,
    "blind": 62109,
    "audio-description": 62110,
    "volume-control-phone": 62112,
    "braille": 62113,
    "assistive-listening-systems": 62114,
    "asl-interpreting": 62115,
    "american-sign-language-interpreting": 62115,
    "deafness": 62116,
    "hard-of-hearing": 62116,
    "deaf": 62116,
    "glide": 62117,
    "glide-g": 62118,
    "signing": 62119,
    "sign-language": 62119,
    "low-vision": 62120,
    "viadeo": 62121,
    "viadeo-square": 62122,
    "snapchat": 62123,
    "snapchat-ghost": 62124,
    "snapchat-square": 62125,
    "pied-piper": 62126,
    "first-order": 62128,
    "yoast": 62129,
    "themeisle": 62130,
    "google-plus-circle": 62131,
    "google-plus-official": 62131,
    "fa": 62132,
    "font-awesome": 62132,
    "handshake-o": 62133,
    "envelope-open": 62134,
    "envelope-open-o": 62135,
    "linode": 62136,
    "address-book": 62137,
    "address-book-o": 62138,
    "vcard": 62139,
    "address-card": 62139,
    "vcard-o": 62140,
    "address-card-o": 62140,
    "user-circle": 62141,
    "user-circle-o": 62142,
    "user-o": 62144,
    "id-badge": 62145,
    "drivers-license": 62146,
    "id-card": 62146,
    "drivers-license-o": 62147,
    "id-card-o": 62147,
    "quora": 62148,
    "free-code-camp": 62149,
    "telegram": 62150,
    "thermometer-4": 62151,
    "thermometer": 62151,
    "thermometer-full": 62151,
    "thermometer-3": 62152,
    "thermometer-three-quarters": 62152,
    "thermometer-2": 62153,
    "thermometer-half": 62153,
    "thermometer-1": 62154,
    "thermometer-quarter": 62154,
    "thermometer-0": 62155,
    "thermometer-empty": 62155,
    "shower": 62156,
    "bathtub": 62157,
    "s15": 62157,
    "bath": 62157,
    "podcast": 62158,
    "window-maximize": 62160,
    "window-minimize": 62161,
    "window-restore": 62162,
    "times-rectangle": 62163,
    "window-close": 62163,
    "times-rectangle-o": 62164,
    "window-close-o": 62164,
    "bandcamp": 62165,
    "grav": 62166,
    "etsy": 62167,
    "imdb": 62168,
    "ravelry": 62169,
    "eercast": 62170,
    "microchip": 62171,
    "snowflake-o": 62172,
    "superpowers": 62173,
    "wpexplorer": 62174,
    "meetup": 62176
  };
},742,[],"node_modules/react-native-vector-icons/glyphmaps/FontAwesome.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = _require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = _interopRequireDefault(_createIconSet);

  var _SimpleLineIcons = _require(_dependencyMap[1], "./glyphmaps/SimpleLineIcons.json");

  var _SimpleLineIcons2 = _interopRequireDefault(_SimpleLineIcons);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var iconSet = (0, _createIconSet2.default)(_SimpleLineIcons2.default, 'simple-line-icons', 'SimpleLineIcons.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},743,[680,744],"node_modules/react-native-vector-icons/SimpleLineIcons.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "user": 57349,
    "people": 57345,
    "user-female": 57344,
    "user-follow": 57346,
    "user-following": 57347,
    "user-unfollow": 57348,
    "login": 57446,
    "logout": 57445,
    "emotsmile": 57377,
    "phone": 58880,
    "call-end": 57416,
    "call-in": 57415,
    "call-out": 57414,
    "map": 57395,
    "location-pin": 57494,
    "direction": 57410,
    "directions": 57409,
    "compass": 57413,
    "layers": 57396,
    "menu": 58881,
    "list": 57447,
    "options-vertical": 58882,
    "options": 58883,
    "arrow-down": 58884,
    "arrow-left": 58885,
    "arrow-right": 58886,
    "arrow-up": 58887,
    "arrow-up-circle": 57464,
    "arrow-left-circle": 57466,
    "arrow-right-circle": 57465,
    "arrow-down-circle": 57467,
    "check": 57472,
    "clock": 57473,
    "plus": 57493,
    "minus": 58901,
    "close": 57474,
    "event": 58905,
    "exclamation": 58903,
    "organization": 58902,
    "trophy": 57350,
    "screen-smartphone": 57360,
    "screen-desktop": 57361,
    "plane": 57362,
    "notebook": 57363,
    "mustache": 57364,
    "mouse": 57365,
    "magnet": 57366,
    "energy": 57376,
    "disc": 57378,
    "cursor": 57454,
    "cursor-move": 57379,
    "crop": 57380,
    "chemistry": 57382,
    "speedometer": 57351,
    "shield": 57358,
    "screen-tablet": 57359,
    "magic-wand": 57367,
    "hourglass": 57368,
    "graduation": 57369,
    "ghost": 57370,
    "game-controller": 57371,
    "fire": 57372,
    "eyeglass": 57373,
    "envelope-open": 57374,
    "envelope-letter": 57375,
    "bell": 57383,
    "badge": 57384,
    "anchor": 57385,
    "wallet": 57386,
    "vector": 57387,
    "speech": 57388,
    "puzzle": 57389,
    "printer": 57390,
    "present": 57391,
    "playlist": 57392,
    "pin": 57393,
    "picture": 57394,
    "handbag": 57397,
    "globe-alt": 57398,
    "globe": 57399,
    "folder-alt": 57401,
    "folder": 57481,
    "film": 57402,
    "feed": 57403,
    "drop": 57406,
    "drawer": 57407,
    "docs": 57408,
    "doc": 57477,
    "diamond": 57411,
    "cup": 57412,
    "calculator": 57417,
    "bubbles": 57418,
    "briefcase": 57419,
    "book-open": 57420,
    "basket-loaded": 57421,
    "basket": 57422,
    "bag": 57423,
    "action-undo": 57424,
    "action-redo": 57425,
    "wrench": 57426,
    "umbrella": 57427,
    "trash": 57428,
    "tag": 57429,
    "support": 57430,
    "frame": 57400,
    "size-fullscreen": 57431,
    "size-actual": 57432,
    "shuffle": 57433,
    "share-alt": 57434,
    "share": 57435,
    "rocket": 57436,
    "question": 57437,
    "pie-chart": 57438,
    "pencil": 57439,
    "note": 57440,
    "loop": 57444,
    "home": 57449,
    "grid": 57450,
    "graph": 57451,
    "microphone": 57443,
    "music-tone-alt": 57441,
    "music-tone": 57442,
    "earphones-alt": 57404,
    "earphones": 57405,
    "equalizer": 57452,
    "like": 57448,
    "dislike": 57453,
    "control-start": 57455,
    "control-rewind": 57456,
    "control-play": 57457,
    "control-pause": 57458,
    "control-forward": 57459,
    "control-end": 57460,
    "volume-1": 57503,
    "volume-2": 57504,
    "volume-off": 57505,
    "calendar": 57461,
    "bulb": 57462,
    "chart": 57463,
    "ban": 57468,
    "bubble": 57469,
    "camrecorder": 57470,
    "camera": 57471,
    "cloud-download": 57475,
    "cloud-upload": 57476,
    "envelope": 57478,
    "eye": 57479,
    "flag": 57480,
    "heart": 57482,
    "info": 57483,
    "key": 57484,
    "link": 57485,
    "lock": 57486,
    "lock-open": 57487,
    "magnifier": 57488,
    "magnifier-add": 57489,
    "magnifier-remove": 57490,
    "paper-clip": 57491,
    "paper-plane": 57492,
    "power": 57495,
    "refresh": 57496,
    "reload": 57497,
    "settings": 57498,
    "star": 57499,
    "symbol-female": 57500,
    "symbol-male": 57501,
    "target": 57502,
    "credit-card": 57381,
    "paypal": 58888,
    "social-tumblr": 57354,
    "social-twitter": 57353,
    "social-facebook": 57355,
    "social-instagram": 58889,
    "social-linkedin": 58890,
    "social-pinterest": 58891,
    "social-github": 58892,
    "social-google": 58893,
    "social-reddit": 58894,
    "social-skype": 58895,
    "social-dribbble": 57357,
    "social-behance": 58896,
    "social-foursqare": 58897,
    "social-soundcloud": 58898,
    "social-spotify": 58899,
    "social-stumbleupon": 58900,
    "social-youtube": 57352,
    "social-dropbox": 57356,
    "social-vkontakte": 58904,
    "social-steam": 58912
  };
},744,[],"node_modules/react-native-vector-icons/glyphmaps/SimpleLineIcons.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

  var _createIconSet = _require(_dependencyMap[0], "./lib/create-icon-set");

  var _createIconSet2 = _interopRequireDefault(_createIconSet);

  var _Feather = _require(_dependencyMap[1], "./glyphmaps/Feather.json");

  var _Feather2 = _interopRequireDefault(_Feather);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var iconSet = (0, _createIconSet2.default)(_Feather2.default, 'Feather', 'Feather.ttf');
  exports.default = iconSet;
  var Button = exports.Button = iconSet.Button;
  var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
  var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
  var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
  var getImageSource = exports.getImageSource = iconSet.getImageSource;
},745,[680,746],"node_modules/react-native-vector-icons/Feather.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    "activity": 59648,
    "airplay": 59649,
    "alert-circle": 59650,
    "alert-octagon": 59651,
    "alert-triangle": 59652,
    "align-center": 59653,
    "align-justify": 59654,
    "align-left": 59655,
    "align-right": 59656,
    "anchor": 59657,
    "aperture": 59658,
    "arrow-down": 59659,
    "arrow-down-left": 59660,
    "arrow-down-right": 59661,
    "arrow-left": 59662,
    "arrow-right": 59663,
    "arrow-up": 59664,
    "arrow-up-left": 59665,
    "arrow-up-right": 59666,
    "at-sign": 59667,
    "award": 59668,
    "bar-chart": 59669,
    "bar-chart-2": 59670,
    "battery": 59671,
    "battery-charging": 59672,
    "bell": 59673,
    "bell-off": 59674,
    "bluetooth": 59675,
    "bold": 59676,
    "book": 59677,
    "bookmark": 59678,
    "box": 59679,
    "briefcase": 59680,
    "calendar": 59681,
    "camera": 59682,
    "camera-off": 59683,
    "cast": 59684,
    "check": 59685,
    "check-circle": 59686,
    "check-square": 59687,
    "chevron-down": 59688,
    "chevron-left": 59689,
    "chevron-right": 59690,
    "chevron-up": 59691,
    "chevrons-down": 59692,
    "chevrons-left": 59693,
    "chevrons-right": 59694,
    "chevrons-up": 59695,
    "chrome": 59696,
    "circle": 59697,
    "clipboard": 59698,
    "clock": 59699,
    "cloud": 59700,
    "cloud-drizzle": 59701,
    "cloud-lightning": 59702,
    "cloud-off": 59703,
    "cloud-rain": 59704,
    "cloud-snow": 59705,
    "codepen": 59706,
    "command": 59707,
    "compass": 59708,
    "copy": 59709,
    "corner-down-left": 59710,
    "corner-down-right": 59711,
    "corner-left-down": 59712,
    "corner-left-up": 59713,
    "corner-right-down": 59714,
    "corner-right-up": 59715,
    "corner-up-left": 59716,
    "corner-up-right": 59717,
    "cpu": 59718,
    "credit-card": 59719,
    "crop": 59720,
    "crosshair": 59721,
    "delete": 59722,
    "disc": 59723,
    "download": 59724,
    "download-cloud": 59725,
    "droplet": 59726,
    "edit": 59727,
    "edit-2": 59728,
    "edit-3": 59729,
    "external-link": 59730,
    "eye": 59731,
    "eye-off": 59732,
    "facebook": 59733,
    "fast-forward": 59734,
    "feather": 59735,
    "file": 59736,
    "file-minus": 59737,
    "file-plus": 59738,
    "file-text": 59739,
    "film": 59740,
    "filter": 59741,
    "flag": 59742,
    "folder": 59743,
    "github": 59744,
    "gitlab": 59745,
    "globe": 59746,
    "grid": 59747,
    "hash": 59748,
    "headphones": 59749,
    "heart": 59750,
    "help-circle": 59751,
    "home": 59752,
    "image": 59753,
    "inbox": 59754,
    "info": 59755,
    "instagram": 59756,
    "italic": 59757,
    "layers": 59758,
    "layout": 59759,
    "life-buoy": 59760,
    "link": 59761,
    "link-2": 59762,
    "list": 59763,
    "loader": 59764,
    "lock": 59765,
    "log-in": 59766,
    "log-out": 59767,
    "mail": 59768,
    "map": 59769,
    "map-pin": 59770,
    "maximize": 59771,
    "maximize-2": 59772,
    "menu": 59773,
    "message-circle": 59774,
    "message-square": 59775,
    "mic": 59776,
    "mic-off": 59777,
    "minimize": 59778,
    "minimize-2": 59779,
    "minus": 59780,
    "minus-circle": 59781,
    "minus-square": 59782,
    "monitor": 59783,
    "moon": 59784,
    "more-horizontal": 59785,
    "more-vertical": 59786,
    "move": 59787,
    "music": 59788,
    "navigation": 59789,
    "navigation-2": 59790,
    "octagon": 59791,
    "package": 59792,
    "paperclip": 59793,
    "pause": 59794,
    "pause-circle": 59795,
    "percent": 59796,
    "phone": 59797,
    "phone-call": 59798,
    "phone-forwarded": 59799,
    "phone-incoming": 59800,
    "phone-missed": 59801,
    "phone-off": 59802,
    "phone-outgoing": 59803,
    "pie-chart": 59804,
    "play": 59805,
    "play-circle": 59806,
    "plus": 59807,
    "plus-circle": 59808,
    "plus-square": 59809,
    "pocket": 59810,
    "power": 59811,
    "printer": 59812,
    "radio": 59813,
    "refresh-ccw": 59814,
    "refresh-cw": 59815,
    "repeat": 59816,
    "rewind": 59817,
    "rotate-ccw": 59818,
    "rotate-cw": 59819,
    "save": 59820,
    "scissors": 59821,
    "search": 59822,
    "server": 59823,
    "settings": 59824,
    "share": 59825,
    "share-2": 59826,
    "shield": 59827,
    "shopping-cart": 59828,
    "shuffle": 59829,
    "sidebar": 59830,
    "skip-back": 59831,
    "skip-forward": 59832,
    "slack": 59833,
    "slash": 59834,
    "sliders": 59835,
    "smartphone": 59836,
    "speaker": 59837,
    "square": 59838,
    "star": 59839,
    "stop-circle": 59840,
    "sun": 59841,
    "sunrise": 59842,
    "sunset": 59843,
    "tablet": 59844,
    "tag": 59845,
    "target": 59846,
    "thermometer": 59847,
    "thumbs-down": 59848,
    "thumbs-up": 59849,
    "toggle-left": 59850,
    "toggle-right": 59851,
    "trash": 59852,
    "trash-2": 59853,
    "trending-down": 59854,
    "trending-up": 59855,
    "triangle": 59856,
    "tv": 59857,
    "twitter": 59858,
    "type": 59859,
    "umbrella": 59860,
    "underline": 59861,
    "unlock": 59862,
    "upload": 59863,
    "upload-cloud": 59864,
    "user": 59865,
    "user-check": 59866,
    "user-minus": 59867,
    "user-plus": 59868,
    "user-x": 59869,
    "users": 59870,
    "video": 59871,
    "video-off": 59872,
    "voicemail": 59873,
    "volume": 59874,
    "volume-1": 59875,
    "volume-2": 59876,
    "volume-x": 59877,
    "watch": 59878,
    "wifi": 59879,
    "wifi-off": 59880,
    "wind": 59881,
    "x": 59882,
    "x-circle": 59883,
    "x-square": 59884,
    "zap": 59885,
    "zoom-in": 59886,
    "zoom-out": 59887
  };
},746,[],"node_modules/react-native-vector-icons/glyphmaps/Feather.json");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var ViewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  exports.default = ViewPropTypes;
},747,[65],"node_modules/react-native-elements/src/config/ViewPropTypes.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/icons/Icon.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _getIconType = _require(_dependencyMap[3], "../helpers/getIconType");

  var _getIconType2 = _interopRequireDefault(_getIconType);

  var _ViewPropTypes = _require(_dependencyMap[4], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var Icon = function Icon(props) {
    var type = props.type,
        name = props.name,
        size = props.size,
        color = props.color,
        iconStyle = props.iconStyle,
        component = props.component,
        underlayColor = props.underlayColor,
        reverse = props.reverse,
        raised = props.raised,
        containerStyle = props.containerStyle,
        reverseColor = props.reverseColor,
        onPress = props.onPress,
        attributes = _objectWithoutProperties(props, ["type", "name", "size", "color", "iconStyle", "component", "underlayColor", "reverse", "raised", "containerStyle", "reverseColor", "onPress"]);

    var Component = _reactNative.View;

    if (onPress) {
      Component = _reactNative.TouchableHighlight;
    }

    if (component) {
      Component = component;
    }

    var Icon = void 0;

    if (!type) {
      Icon = (0, _getIconType2.default)('material');
    } else {
      Icon = (0, _getIconType2.default)(type);
    }

    return _react2.default.createElement(
      Component,
      _extends({}, attributes, {
        underlayColor: reverse ? color : underlayColor || color,
        style: [(reverse || raised) && styles.button, (reverse || raised) && {
          borderRadius: size + 4,
          height: size * 2 + 4,
          width: size * 2 + 4
        }, raised && styles.raised, {
          backgroundColor: reverse ? color : raised ? 'white' : 'transparent',
          alignItems: 'center',
          justifyContent: 'center'
        }, containerStyle && containerStyle],
        onPress: onPress,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }),
      _react2.default.createElement(Icon, {
        style: [{
          backgroundColor: 'transparent'
        }, iconStyle && iconStyle],
        size: size,
        name: name,
        color: reverse ? reverseColor : color,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 64
        }
      })
    );
  };

  Icon.propTypes = {
    type: _propTypes2.default.string,
    name: _propTypes2.default.string,
    size: _propTypes2.default.number,
    color: _propTypes2.default.string,
    component: _propTypes2.default.func,
    underlayColor: _propTypes2.default.string,
    reverse: _propTypes2.default.bool,
    raised: _propTypes2.default.bool,
    containerStyle: _ViewPropTypes2.default.style,
    iconStyle: _reactNative.Text.propTypes.style,
    onPress: _propTypes2.default.func,
    reverseColor: _propTypes2.default.string
  };
  Icon.defaultProps = {
    underlayColor: 'white',
    reverse: false,
    raised: false,
    size: 24,
    color: 'black',
    reverseColor: 'white'
  };

  var styles = _reactNative.StyleSheet.create({
    button: {
      margin: 7
    },
    raised: _extends({}, _reactNative.Platform.select({
      ios: {
        shadowColor: 'rgba(0,0,0, .4)',
        shadowOffset: {
          height: 1,
          width: 1
        },
        shadowOpacity: 1,
        shadowRadius: 1
      },
      android: {
        elevation: 2
      }
    }))
  });

  exports.default = Icon;
},748,[25,13,65,726,747],"node_modules/react-native-elements/src/icons/Icon.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/list/List.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _colors = _require(_dependencyMap[3], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _ViewPropTypes = _require(_dependencyMap[4], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var List = function List(props) {
    var children = props.children,
        containerStyle = props.containerStyle,
        attributes = _objectWithoutProperties(props, ["children", "containerStyle"]);

    return _react2.default.createElement(
      _reactNative.View,
      _extends({}, attributes, {
        style: [styles.listContainer, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 10
        }
      }),
      children
    );
  };

  List.propTypes = {
    children: _propTypes2.default.any,
    containerStyle: _ViewPropTypes2.default.style
  };

  var styles = _reactNative.StyleSheet.create({
    listContainer: {
      marginTop: 20,
      borderTopWidth: 1,
      borderColor: _colors2.default.greyOutline,
      backgroundColor: _colors2.default.white
    }
  });

  exports.default = List;
},749,[25,13,65,675,747],"node_modules/react-native-elements/src/list/List.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/list/ListItem.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _Avatar = _require(_dependencyMap[3], "../avatar/Avatar");

  var _Avatar2 = _interopRequireDefault(_Avatar);

  var _badge = _require(_dependencyMap[4], "../badge/badge");

  var _badge2 = _interopRequireDefault(_badge);

  var _Icon = _require(_dependencyMap[5], "../icons/Icon");

  var _Icon2 = _interopRequireDefault(_Icon);

  var _Text = _require(_dependencyMap[6], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _colors = _require(_dependencyMap[7], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _fonts = _require(_dependencyMap[8], "../config/fonts");

  var _fonts2 = _interopRequireDefault(_fonts);

  var _normalizeText = _require(_dependencyMap[9], "../helpers/normalizeText");

  var _normalizeText2 = _interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[10], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var ListItem = function ListItem(props) {
    var onPress = props.onPress,
        title = props.title,
        leftIcon = props.leftIcon,
        rightIcon = props.rightIcon,
        leftIconOnPress = props.leftIconOnPress,
        leftIconOnLongPress = props.leftIconOnLongPress,
        leftIconUnderlayColor = props.leftIconUnderlayColor,
        leftIconContainerStyle = props.leftIconContainerStyle,
        avatarStyle = props.avatarStyle,
        avatarContainerStyle = props.avatarContainerStyle,
        avatarOverlayContainerStyle = props.avatarOverlayContainerStyle,
        underlayColor = props.underlayColor,
        subtitle = props.subtitle,
        subtitleStyle = props.subtitleStyle,
        containerStyle = props.containerStyle,
        wrapperStyle = props.wrapperStyle,
        titleNumberOfLines = props.titleNumberOfLines,
        titleStyle = props.titleStyle,
        titleContainerStyle = props.titleContainerStyle,
        hideChevron = props.hideChevron,
        chevronColor = props.chevronColor,
        roundAvatar = props.roundAvatar,
        component = props.component,
        fontFamily = props.fontFamily,
        rightTitle = props.rightTitle,
        rightTitleContainerStyle = props.rightTitleContainerStyle,
        rightTitleStyle = props.rightTitleStyle,
        rightTitleNumberOfLines = props.rightTitleNumberOfLines,
        subtitleContainerStyle = props.subtitleContainerStyle,
        subtitleNumberOfLines = props.subtitleNumberOfLines,
        badge = props.badge,
        label = props.label,
        onLongPress = props.onLongPress,
        switchButton = props.switchButton,
        onSwitch = props.onSwitch,
        switchDisabled = props.switchDisabled,
        switchOnTintColor = props.switchOnTintColor,
        switchThumbTintColor = props.switchThumbTintColor,
        switchTintColor = props.switchTintColor,
        switched = props.switched,
        textInput = props.textInput,
        textInputAutoCapitalize = props.textInputAutoCapitalize,
        textInputAutoCorrect = props.textInputAutoCorrect,
        textInputAutoFocus = props.textInputAutoFocus,
        textInputEditable = props.textInputEditable,
        textInputKeyboardType = props.textInputKeyboardType,
        textInputMaxLength = props.textInputMaxLength,
        textInputMultiline = props.textInputMultiline,
        textInputOnChangeText = props.textInputOnChangeText,
        textInputOnFocus = props.textInputOnFocus,
        textInputOnBlur = props.textInputOnBlur,
        textInputSelectTextOnFocus = props.textInputSelectTextOnFocus,
        textInputReturnKeyType = props.textInputReturnKeyType,
        textInputValue = props.textInputValue,
        textInputSecure = props.textInputSecure,
        textInputStyle = props.textInputStyle,
        textInputContainerStyle = props.textInputContainerStyle,
        textInputPlaceholder = props.textInputPlaceholder,
        onPressRightIcon = props.onPressRightIcon,
        disabled = props.disabled,
        disabledStyle = props.disabledStyle,
        attributes = _objectWithoutProperties(props, ["onPress", "title", "leftIcon", "rightIcon", "leftIconOnPress", "leftIconOnLongPress", "leftIconUnderlayColor", "leftIconContainerStyle", "avatarStyle", "avatarContainerStyle", "avatarOverlayContainerStyle", "underlayColor", "subtitle", "subtitleStyle", "containerStyle", "wrapperStyle", "titleNumberOfLines", "titleStyle", "titleContainerStyle", "hideChevron", "chevronColor", "roundAvatar", "component", "fontFamily", "rightTitle", "rightTitleContainerStyle", "rightTitleStyle", "rightTitleNumberOfLines", "subtitleContainerStyle", "subtitleNumberOfLines", "badge", "label", "onLongPress", "switchButton", "onSwitch", "switchDisabled", "switchOnTintColor", "switchThumbTintColor", "switchTintColor", "switched", "textInput", "textInputAutoCapitalize", "textInputAutoCorrect", "textInputAutoFocus", "textInputEditable", "textInputKeyboardType", "textInputMaxLength", "textInputMultiline", "textInputOnChangeText", "textInputOnFocus", "textInputOnBlur", "textInputSelectTextOnFocus", "textInputReturnKeyType", "textInputValue", "textInputSecure", "textInputStyle", "textInputContainerStyle", "textInputPlaceholder", "onPressRightIcon", "disabled", "disabledStyle"]);

    var avatar = props.avatar;
    var Component = onPress || onLongPress ? _reactNative.TouchableHighlight : _reactNative.View;
    var LeftIconWrapper = leftIconOnPress || leftIconOnLongPress ? _reactNative.TouchableHighlight : _reactNative.View;

    if (component) {
      Component = component;
    }

    if (typeof avatar === 'string') {
      avatar = {
        uri: avatar
      };
    }

    return _react2.default.createElement(
      Component,
      _extends({}, attributes, {
        onLongPress: onLongPress,
        onPress: onPress,
        disabled: disabled,
        underlayColor: underlayColor,
        style: [styles.container, containerStyle && containerStyle, disabled && styles.disabled, disabled && disabledStyle && disabledStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 100
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, wrapperStyle && wrapperStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 113
          }
        },
        _react2.default.isValidElement(leftIcon) ? leftIcon : leftIcon && leftIcon.name && _react2.default.createElement(
          LeftIconWrapper,
          {
            onLongPress: leftIconOnLongPress,
            onPress: leftIconOnPress,
            disabled: disabled,
            underlayColor: leftIconUnderlayColor,
            style: [styles.iconStyle, leftIconContainerStyle && leftIconContainerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 118
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 128
              }
            },
            _react2.default.createElement(_Icon2.default, {
              type: leftIcon.type,
              iconStyle: [styles.icon, leftIcon.style && leftIcon.style],
              name: leftIcon.name,
              color: leftIcon.color || _colors2.default.grey4,
              size: leftIcon.size || 24,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 129
              }
            })
          )
        ),
        avatar && _react2.default.isValidElement(avatar) ? avatar : avatar && !_react2.default.isValidElement(avatar) && _react2.default.createElement(_Avatar2.default, {
          avatarStyle: avatarStyle && avatarStyle,
          containerStyle: avatarContainerStyle && avatarContainerStyle,
          overlayContainerStyle: avatarOverlayContainerStyle && avatarOverlayContainerStyle,
          rounded: roundAvatar,
          source: avatar,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 143
          }
        }),
        _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.titleSubtitleContainer,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 153
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: titleContainerStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 154
              }
            },
            title !== null && (typeof title === 'string' || typeof title === 'number') ? _react2.default.createElement(
              _Text2.default,
              {
                numberOfLines: titleNumberOfLines,
                style: [styles.title, !leftIcon && {
                  marginLeft: 10
                }, titleStyle && titleStyle, fontFamily && {
                  fontFamily: fontFamily
                }],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 157
                }
              },
              title
            ) : _react2.default.createElement(
              _reactNative.View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 169
                }
              },
              title
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: subtitleContainerStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 172
              }
            },
            subtitle !== null && (typeof subtitle === 'string' || typeof subtitle === 'number') ? _react2.default.createElement(
              _Text2.default,
              {
                numberOfLines: subtitleNumberOfLines,
                style: [styles.subtitle, !leftIcon && {
                  marginLeft: 10
                }, subtitleStyle && subtitleStyle, fontFamily && {
                  fontFamily: fontFamily
                }],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 175
                }
              },
              subtitle
            ) : _react2.default.createElement(
              _reactNative.View,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 187
                }
              },
              subtitle
            )
          )
        ),
        rightTitle && rightTitle !== '' && !textInput && _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.rightTitleContainer, rightTitleContainerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 194
            }
          },
          _react2.default.createElement(
            _Text2.default,
            {
              numberOfLines: rightTitleNumberOfLines,
              style: [styles.rightTitleStyle, rightTitleStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 197
              }
            },
            rightTitle
          )
        ),
        textInput && _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.rightTitleContainer, styles.textInputContainerStyle, textInputContainerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 206
            }
          },
          _react2.default.createElement(_reactNative.TextInput, {
            style: [styles.textInputStyle, textInputStyle],
            underlineColorAndroid: 'transparent',
            defaultValue: rightTitle,
            value: textInputValue,
            placeholder: textInputPlaceholder,
            autoCapitalize: textInputAutoCapitalize,
            autoCorrect: textInputAutoCorrect,
            autoFocus: textInputAutoFocus,
            editable: disabled ? false : textInputEditable,
            keyboardType: textInputKeyboardType,
            maxLength: textInputMaxLength,
            multiline: textInputMultiline,
            onChangeText: textInputOnChangeText,
            onFocus: textInputOnFocus,
            onBlur: textInputOnBlur,
            secureTextEntry: textInputSecure,
            selectTextOnFocus: textInputSelectTextOnFocus,
            returnKeyType: textInputReturnKeyType,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 213
            }
          })
        ),
        badge && !rightTitle && _react2.default.createElement(_badge2.default, _extends({}, badge, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 235
          }
        })),
        !hideChevron && (_react2.default.isValidElement(rightIcon) ? rightIcon : _react2.default.createElement(
          _reactNative.TouchableOpacity,
          {
            onPress: onPressRightIcon,
            disabled: disabled ? disabled : !onPressRightIcon,
            style: styles.chevronContainer,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 240
            }
          },
          _react2.default.createElement(_Icon2.default, {
            type: rightIcon.type,
            iconStyle: rightIcon.style,
            size: 28,
            name: rightIcon.name || 'chevron-right',
            color: rightIcon.color || chevronColor,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 245
            }
          })
        )),
        switchButton && hideChevron && _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.switchContainer,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 256
            }
          },
          _react2.default.createElement(_reactNative.Switch, {
            onValueChange: onSwitch,
            disabled: disabled ? disabled : switchDisabled,
            onTintColor: switchOnTintColor,
            thumbTintColor: switchThumbTintColor,
            tintColor: switchTintColor,
            value: switched,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 257
            }
          })
        ),
        label && label
      )
    );
  };

  ListItem.defaultProps = {
    underlayColor: 'white',
    leftIconUnderlayColor: 'white',
    chevronColor: _colors2.default.grey4,
    rightIcon: {
      name: 'chevron-right'
    },
    hideChevron: false,
    roundAvatar: false,
    switchButton: false,
    textInputEditable: true,
    titleNumberOfLines: 1,
    subtitleNumberOfLines: 1,
    rightTitleNumberOfLines: 1,
    disabled: false
  };
  ListItem.propTypes = {
    title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
    avatar: _propTypes2.default.any,
    icon: _propTypes2.default.any,
    onPress: _propTypes2.default.func,
    rightIcon: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object]),
    underlayColor: _propTypes2.default.string,
    subtitle: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
    subtitleStyle: _propTypes2.default.any,
    subtitleNumberOfLines: _propTypes2.default.number,
    containerStyle: _propTypes2.default.any,
    wrapperStyle: _propTypes2.default.any,
    titleStyle: _propTypes2.default.any,
    titleContainerStyle: _propTypes2.default.any,
    titleNumberOfLines: _propTypes2.default.number,
    hideChevron: _propTypes2.default.bool,
    chevronColor: _propTypes2.default.string,
    roundAvatar: _propTypes2.default.bool,
    badge: _propTypes2.default.any,
    switchButton: _propTypes2.default.bool,
    onSwitch: _propTypes2.default.func,
    switchDisabled: _propTypes2.default.bool,
    switchOnTintColor: _propTypes2.default.string,
    switchThumbTintColor: _propTypes2.default.string,
    switchTintColor: _propTypes2.default.string,
    switched: _propTypes2.default.bool,
    textInput: _propTypes2.default.bool,
    textInputAutoCapitalize: _propTypes2.default.oneOf(['none', 'sentences', 'words', 'characters']),
    textInputAutoCorrect: _propTypes2.default.bool,
    textInputAutoFocus: _propTypes2.default.bool,
    textInputEditable: _propTypes2.default.bool,
    textInputKeyboardType: _propTypes2.default.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search']),
    textInputMaxLength: _propTypes2.default.number,
    textInputMultiline: _propTypes2.default.bool,
    textInputOnChangeText: _propTypes2.default.func,
    textInputOnFocus: _propTypes2.default.func,
    textInputOnBlur: _propTypes2.default.func,
    textInputSelectTextOnFocus: _propTypes2.default.bool,
    textInputReturnKeyType: _propTypes2.default.string,
    textInputValue: _propTypes2.default.string,
    textInputSecure: _propTypes2.default.bool,
    textInputStyle: _propTypes2.default.any,
    textInputContainerStyle: _propTypes2.default.any,
    textInputPlaceholder: _propTypes2.default.string,
    component: _propTypes2.default.any,
    fontFamily: _propTypes2.default.string,
    rightTitle: _propTypes2.default.string,
    rightTitleContainerStyle: _ViewPropTypes2.default.style,
    rightTitleStyle: _Text2.default.propTypes.style,
    rightTitleNumberOfLines: _propTypes2.default.number,
    subtitleContainerStyle: _ViewPropTypes2.default.style,
    label: _propTypes2.default.any,
    onLongPress: _propTypes2.default.func,
    leftIcon: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object]),
    leftIconOnPress: _propTypes2.default.func,
    leftIconOnLongPress: _propTypes2.default.func,
    leftIconUnderlayColor: _propTypes2.default.string,
    leftIconContainerStyle: _ViewPropTypes2.default.style,
    avatarStyle: _reactNative.Image.propTypes.style,
    avatarContainerStyle: _ViewPropTypes2.default.style,
    avatarOverlayContainerStyle: _ViewPropTypes2.default.style,
    onPressRightIcon: _propTypes2.default.func,
    disabled: _propTypes2.default.bool,
    disabledStyle: _ViewPropTypes2.default.style
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      paddingTop: 10,
      paddingRight: 10,
      paddingBottom: 10,
      borderBottomColor: _colors2.default.greyOutline,
      borderBottomWidth: 1,
      backgroundColor: 'transparent'
    },
    wrapper: {
      flexDirection: 'row',
      marginLeft: 10,
      alignItems: 'center'
    },
    iconStyle: {
      justifyContent: 'center',
      alignItems: 'center'
    },
    icon: {
      marginRight: 8
    },
    title: {
      fontSize: (0, _normalizeText2.default)(14),
      color: _colors2.default.grey1
    },
    subtitle: _extends({
      color: _colors2.default.grey3,
      fontSize: (0, _normalizeText2.default)(12),
      marginTop: 1
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '600'
      },
      android: _extends({}, _fonts2.default.android.bold)
    })),
    titleSubtitleContainer: {
      justifyContent: 'center',
      flex: 1
    },
    chevronContainer: {
      alignItems: 'flex-end',
      justifyContent: 'center'
    },
    switchContainer: {
      alignItems: 'flex-end',
      justifyContent: 'center',
      marginRight: 5
    },
    rightTitleContainer: {
      flex: 1,
      alignItems: 'flex-end',
      justifyContent: 'center'
    },
    rightTitleStyle: {
      marginRight: 5,
      color: _colors2.default.grey4
    },
    textInputContainerStyle: {
      alignItems: null
    },
    textInputStyle: {
      height: 20,
      flex: 1,
      textAlign: 'right'
    },
    disabled: {
      opacity: 0.5
    }
  });

  exports.default = ListItem;
},750,[25,13,65,751,752,748,676,675,677,678,747],"node_modules/react-native-elements/src/list/ListItem.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/avatar/Avatar.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _ViewPropTypes = _require(_dependencyMap[3], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  var _Icon = _require(_dependencyMap[4], "../icons/Icon");

  var _Icon2 = _interopRequireDefault(_Icon);

  var _Text = _require(_dependencyMap[5], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var DEFAULT_COLORS = ['#000', '#333', '#555', '#888', '#aaa', '#ddd'];

  var Avatar = function Avatar(props) {
    var component = props.component,
        onPress = props.onPress,
        onLongPress = props.onLongPress,
        containerStyle = props.containerStyle,
        icon = props.icon,
        iconStyle = props.iconStyle,
        source = props.source,
        small = props.small,
        medium = props.medium,
        large = props.large,
        xlarge = props.xlarge,
        avatarStyle = props.avatarStyle,
        rounded = props.rounded,
        title = props.title,
        titleStyle = props.titleStyle,
        overlayContainerStyle = props.overlayContainerStyle,
        activeOpacity = props.activeOpacity,
        showEditButton = props.showEditButton,
        editButton = props.editButton,
        onEditPress = props.onEditPress,
        imageProps = props.imageProps,
        attributes = _objectWithoutProperties(props, ["component", "onPress", "onLongPress", "containerStyle", "icon", "iconStyle", "source", "small", "medium", "large", "xlarge", "avatarStyle", "rounded", "title", "titleStyle", "overlayContainerStyle", "activeOpacity", "showEditButton", "editButton", "onEditPress", "imageProps"]);

    var width = props.width,
        height = props.height;

    if (small) {
      width = 34;
      height = 34;
    } else if (medium) {
      width = 50;
      height = 50;
    } else if (large) {
      width = 75;
      height = 75;
    } else if (xlarge) {
      width = 150;
      height = 150;
    } else if (!width && !height) {
      width = 34;
      height = 34;
    } else if (!width) {
      width = height;
    } else if (!height) {
      height = width;
    }

    var titleSize = width / 2;
    var iconSize = width / 2;
    var Component = onPress || onLongPress ? _reactNative.TouchableOpacity : _reactNative.View;

    if (component) {
      Component = component;
    }

    var renderUtils = function renderUtils() {
      if (showEditButton) {
        var editButtonProps = _extends({}, editButton);

        var defaultEditButtonSize = (width + height) / 2 / 3;
        var editButtonSize = editButton.size || defaultEditButtonSize;
        var editButtonSizeStyle = {
          width: editButtonSize,
          height: editButtonSize,
          borderRadius: editButtonSize / 2
        };
        var editButtonIconSize = editButtonSize * 0.8;
        return _react2.default.createElement(
          _reactNative.TouchableHighlight,
          {
            style: [styles.editButton, editButtonSizeStyle, editButtonProps.style],
            underlayColor: editButtonProps.underlayColor,
            onPress: onEditPress,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 92
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 101
              }
            },
            _react2.default.createElement(_Icon2.default, {
              size: editButtonIconSize,
              name: editButtonProps.iconName,
              type: editButtonProps.iconType,
              color: editButtonProps.iconColor,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 102
              }
            })
          )
        );
      }
    };

    var renderContent = function renderContent() {
      if (source) {
        return _react2.default.createElement(_reactNative.Image, _extends({
          style: [styles.avatar, rounded && {
            borderRadius: width / 2
          }, avatarStyle && avatarStyle],
          source: source
        }, imageProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 117
          }
        }));
      } else if (title) {
        return _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.title, titleStyle && titleStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 129
            }
          },
          title
        );
      } else if (icon) {
        return _react2.default.createElement(_Icon2.default, {
          style: iconStyle && iconStyle,
          color: icon.color || 'white',
          name: icon.name || 'user',
          size: icon.size || iconSize,
          type: icon.type && icon.type,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 135
          }
        });
      }
    };

    var styles = _reactNative.StyleSheet.create({
      container: {
        paddingTop: 10,
        paddingRight: 10,
        paddingBottom: 10,
        backgroundColor: 'transparent',
        width: width,
        height: height
      },
      avatar: {
        width: width,
        height: height
      },
      overlayContainer: {
        flex: 1,
        alignItems: 'center',
        backgroundColor: 'rgba(0,0,0,0.2)',
        alignSelf: 'stretch',
        justifyContent: 'center',
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      },
      title: {
        color: '#ffffff',
        fontSize: titleSize,
        backgroundColor: 'rgba(0,0,0,0)',
        textAlign: 'center'
      },
      editButton: _extends({
        position: 'absolute',
        bottom: 0,
        right: 0,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: DEFAULT_COLORS[4]
      }, _reactNative.Platform.select({
        ios: {
          shadowColor: DEFAULT_COLORS[0],
          shadowOffset: {
            width: 1,
            height: 1
          },
          shadowRadius: 2,
          shadowOpacity: 0.5
        },
        android: {
          elevation: 1
        }
      }))
    });

    return _react2.default.createElement(
      Component,
      _extends({}, attributes, {
        onPress: onPress,
        onLongPress: onLongPress,
        activeOpacity: activeOpacity,
        style: [styles.container, rounded && {
          borderRadius: width / 2
        }, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 199
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.overlayContainer, rounded && {
            borderRadius: width / 2
          }, overlayContainerStyle && overlayContainerStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 210
          }
        },
        renderContent()
      ),
      renderUtils()
    );
  };

  var defaultProps = {
    showEditButton: false,
    onEditPress: null,
    editButton: {
      size: null,
      iconName: 'mode-edit',
      iconType: 'material',
      iconColor: '#fff',
      underlayColor: DEFAULT_COLORS[0],
      style: null
    }
  };
  Avatar.propTypes = {
    component: _propTypes2.default.oneOf([_reactNative.View, _reactNative.TouchableOpacity, _reactNative.TouchableHighlight, _reactNative.TouchableNativeFeedback, _reactNative.TouchableWithoutFeedback]),
    width: _propTypes2.default.number,
    height: _propTypes2.default.number,
    onPress: _propTypes2.default.func,
    onLongPress: _propTypes2.default.func,
    containerStyle: _propTypes2.default.any,
    source: _reactNative.Image.propTypes.source,
    avatarStyle: _propTypes2.default.any,
    rounded: _propTypes2.default.bool,
    title: _propTypes2.default.string,
    titleStyle: _reactNative.Text.propTypes.style,
    overlayContainerStyle: _propTypes2.default.any,
    activeOpacity: _propTypes2.default.number,
    icon: _propTypes2.default.object,
    iconStyle: _reactNative.Text.propTypes.style,
    small: _propTypes2.default.bool,
    medium: _propTypes2.default.bool,
    large: _propTypes2.default.bool,
    xlarge: _propTypes2.default.bool,
    showEditButton: _propTypes2.default.bool,
    onEditPress: _propTypes2.default.func,
    editButton: _propTypes2.default.shape({
      size: _propTypes2.default.number,
      iconName: _propTypes2.default.string,
      iconType: _propTypes2.default.string,
      iconColor: _propTypes2.default.string,
      underlayColor: _propTypes2.default.string,
      style: _ViewPropTypes2.default.style
    }),
    imageProps: _propTypes2.default.object
  };
  Avatar.defaultProps = defaultProps;
  exports.default = Avatar;
},751,[25,13,65,747,748,676],"node_modules/react-native-elements/src/avatar/Avatar.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/badge/badge.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _colors = _require(_dependencyMap[3], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _ViewPropTypes = _require(_dependencyMap[4], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var Badge = function Badge(props) {
    var containerStyle = props.containerStyle,
        textStyle = props.textStyle,
        wrapperStyle = props.wrapperStyle,
        onPress = props.onPress,
        component = props.component,
        value = props.value,
        children = props.children,
        element = props.element,
        attributes = _objectWithoutProperties(props, ["containerStyle", "textStyle", "wrapperStyle", "onPress", "component", "value", "children", "element"]);

    if (element) return element;
    var Component = _reactNative.View;

    var childElement = _react2.default.createElement(
      _reactNative.Text,
      {
        style: [styles.text, textStyle && textStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 25
        }
      },
      value
    );

    if (children) {
      childElement = children;
    }

    if (children && value) {
      console.error('Badge can only contain either child element or value');
    }

    if (!component && onPress) {
      Component = _reactNative.TouchableOpacity;
    }

    if (_react2.default.isValidElement(component)) {
      Component = component;
    }

    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [styles.container && wrapperStyle && wrapperStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      },
      _react2.default.createElement(
        Component,
        _extends({}, attributes, {
          style: [styles.badge, containerStyle && containerStyle],
          onPress: onPress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 48
          }
        }),
        childElement
      )
    );
  };

  Badge.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    wrapperStyle: _ViewPropTypes2.default.style,
    textStyle: _reactNative.Text.propTypes.style,
    children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    onPress: _propTypes2.default.func,
    component: _propTypes2.default.func,
    element: _propTypes2.default.element
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row'
    },
    badge: {
      padding: 12,
      paddingTop: 3,
      paddingBottom: 3,
      backgroundColor: _colors2.default.grey1,
      borderRadius: 20,
      alignItems: 'center',
      justifyContent: 'center'
    },
    text: {
      fontSize: 14,
      color: 'white'
    }
  });

  exports.default = Badge;
},752,[25,13,65,675,747],"node_modules/react-native-elements/src/badge/badge.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _colors,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/social/SocialIcon.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _FontAwesome = _require(_dependencyMap[3], "react-native-vector-icons/FontAwesome");

  var _FontAwesome2 = _interopRequireDefault(_FontAwesome);

  var _Text = _require(_dependencyMap[4], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _fonts = _require(_dependencyMap[5], "../config/fonts");

  var _fonts2 = _interopRequireDefault(_fonts);

  var _ViewPropTypes = _require(_dependencyMap[6], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var log = function log() {
    console.log('please attach method to this component');
  };

  var colors = (_colors = {}, _defineProperty(_colors, 'github-alt', '#000000'), _defineProperty(_colors, 'google-plus-official', '#dd4b39'), _defineProperty(_colors, 'reddit-alien', '#fc461e'), _defineProperty(_colors, 'stack-overflow', '#f27f33'), _defineProperty(_colors, "angellist", '#1c4082'), _defineProperty(_colors, "codepen", '#000000'), _defineProperty(_colors, "envelope", '#000000'), _defineProperty(_colors, "etsy", '#f2581e'), _defineProperty(_colors, "facebook", '#3b5998'), _defineProperty(_colors, "foursquare", '#0072b1'), _defineProperty(_colors, "github", '#000000'), _defineProperty(_colors, "gitlab", '#e14329'), _defineProperty(_colors, "instagram", '#517fa4'), _defineProperty(_colors, "linkedin", '#007bb6'), _defineProperty(_colors, "medium", '#02b875'), _defineProperty(_colors, "pinterest", '#cb2027'), _defineProperty(_colors, "quora", '#a82400'), _defineProperty(_colors, "soundcloud", '#f50'), _defineProperty(_colors, "steam", '#c6c3c1'), _defineProperty(_colors, "stumbleupon", '#EB4823'), _defineProperty(_colors, "tumblr", '#32506d'), _defineProperty(_colors, "twitch", '#6441A5'), _defineProperty(_colors, "twitter", '#00aced'), _defineProperty(_colors, "vimeo", '#aad450'), _defineProperty(_colors, "wordpress", '#21759b'), _defineProperty(_colors, "youtube", '#bb0000'), _colors);

  var SocialIcon = function SocialIcon(props) {
    var activityIndicatorStyle = props.activityIndicatorStyle,
        button = props.button,
        component = props.component,
        disabled = props.disabled,
        fontFamily = props.fontFamily,
        fontStyle = props.fontStyle,
        fontWeight = props.fontWeight,
        iconColor = props.iconColor,
        iconSize = props.iconSize,
        iconStyle = props.iconStyle,
        light = props.light,
        loading = props.loading,
        onLongPress = props.onLongPress,
        onPress = props.onPress,
        raised = props.raised,
        small = props.small,
        style = props.style,
        title = props.title,
        type = props.type,
        underlayColor = props.underlayColor,
        attributes = _objectWithoutProperties(props, ["activityIndicatorStyle", "button", "component", "disabled", "fontFamily", "fontStyle", "fontWeight", "iconColor", "iconSize", "iconStyle", "light", "loading", "onLongPress", "onPress", "raised", "small", "style", "title", "type", "underlayColor"]);

    var Component = onPress || onLongPress ? component || _reactNative.TouchableHighlight : _reactNative.View;
    var loadingElement = void 0;

    if (loading) {
      loadingElement = _react2.default.createElement(_reactNative.ActivityIndicator, {
        animating: true,
        style: [styles.activityIndicatorStyle, activityIndicatorStyle],
        color: iconColor || 'white',
        size: small && 'small' || 'large',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      });
    }

    return _react2.default.createElement(
      Component,
      _extends({}, attributes, {
        underlayColor: light ? 'white' : underlayColor || colors[type],
        onLongPress: disabled ? null : onLongPress || log,
        onPress: (!disabled || log) && (onPress || log),
        disabled: disabled || false,
        style: [raised && styles.raised, styles.container, button && styles.button, !button && raised && styles.icon, !button && !light && !raised && {
          width: iconSize * 2 + 4,
          height: iconSize * 2 + 4,
          borderRadius: iconSize * 2
        }, {
          backgroundColor: colors[type]
        }, light && {
          backgroundColor: 'white'
        }, style && style],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: styles.wrapper,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 111
          }
        },
        _react2.default.createElement(_FontAwesome2.default, {
          style: [iconStyle && iconStyle],
          color: light ? colors[type] : iconColor,
          name: type,
          size: iconSize,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 112
          }
        }),
        button && title && _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.title, light && {
              color: colors[type]
            }, fontFamily && {
              fontFamily: fontFamily
            }, fontWeight && {
              fontWeight: fontWeight
            }, fontStyle && fontStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 120
            }
          },
          title
        ),
        loading && loadingElement
      )
    );
  };

  SocialIcon.propTypes = {
    component: _propTypes2.default.func,
    type: _propTypes2.default.string,
    button: _propTypes2.default.bool,
    onPress: _propTypes2.default.func,
    onLongPress: _propTypes2.default.func,
    iconStyle: _ViewPropTypes2.default.style,
    style: _ViewPropTypes2.default.style,
    iconColor: _propTypes2.default.string,
    underlayColor: _propTypes2.default.string,
    title: _propTypes2.default.string,
    raised: _propTypes2.default.bool,
    disabled: _propTypes2.default.bool,
    loading: _propTypes2.default.bool,
    activityIndicatorStyle: _ViewPropTypes2.default.style,
    small: _propTypes2.default.string,
    iconSize: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    light: _propTypes2.default.bool,
    fontWeight: _propTypes2.default.string,
    fontStyle: _reactNative.Text.propTypes.style,
    fontFamily: _propTypes2.default.string
  };
  SocialIcon.defaultProps = {
    raised: true,
    iconColor: 'white',
    iconSize: 24,
    button: false
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      margin: 7,
      borderRadius: 30,
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center'
    },
    button: {
      paddingTop: 14,
      paddingBottom: 14
    },
    raised: _extends({}, _reactNative.Platform.select({
      ios: {
        shadowColor: 'rgba(0,0,0, .4)',
        shadowOffset: {
          height: 1,
          width: 1
        },
        shadowOpacity: 1,
        shadowRadius: 1
      },
      android: {
        elevation: 2
      }
    })),
    wrapper: {
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center'
    },
    title: _extends({
      color: 'white',
      marginLeft: 15
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: 'bold'
      },
      android: _extends({}, _fonts2.default.android.black)
    })),
    icon: {
      height: 52,
      width: 52
    },
    activityIndicatorStyle: {
      marginHorizontal: 10,
      height: 0
    }
  });

  exports.default = SocialIcon;
},753,[25,13,65,741,676,677,747],"node_modules/react-native-elements/src/social/SocialIcon.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/checkbox/CheckBox.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _Text = _require(_dependencyMap[3], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _fonts = _require(_dependencyMap[4], "../config/fonts");

  var _fonts2 = _interopRequireDefault(_fonts);

  var _colors = _require(_dependencyMap[5], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _FontAwesome = _require(_dependencyMap[6], "react-native-vector-icons/FontAwesome");

  var _FontAwesome2 = _interopRequireDefault(_FontAwesome);

  var _getIconType = _require(_dependencyMap[7], "../helpers/getIconType");

  var _getIconType2 = _interopRequireDefault(_getIconType);

  var _ViewPropTypes = _require(_dependencyMap[8], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var CheckBox = function CheckBox(props) {
    var component = props.component,
        checked = props.checked,
        iconRight = props.iconRight,
        title = props.title,
        center = props.center,
        right = props.right,
        containerStyle = props.containerStyle,
        textStyle = props.textStyle,
        onPress = props.onPress,
        onLongPress = props.onLongPress,
        onIconPress = props.onIconPress,
        onLongIconPress = props.onLongIconPress,
        size = props.size,
        checkedIcon = props.checkedIcon,
        uncheckedIcon = props.uncheckedIcon,
        iconType = props.iconType,
        checkedColor = props.checkedColor,
        uncheckedColor = props.uncheckedColor,
        checkedTitle = props.checkedTitle,
        fontFamily = props.fontFamily,
        attributes = _objectWithoutProperties(props, ["component", "checked", "iconRight", "title", "center", "right", "containerStyle", "textStyle", "onPress", "onLongPress", "onIconPress", "onLongIconPress", "size", "checkedIcon", "uncheckedIcon", "iconType", "checkedColor", "uncheckedColor", "checkedTitle", "fontFamily"]);

    var Icon = _FontAwesome2.default;

    if (iconType) {
      Icon = (0, _getIconType2.default)(iconType);
    }

    var Component = component || _reactNative.TouchableOpacity;
    var iconName = uncheckedIcon;

    if (checked) {
      iconName = checkedIcon;
    }

    return _react2.default.createElement(
      Component,
      _extends({}, attributes, {
        onLongPress: onLongPress,
        onPress: onPress,
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 52
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, right && {
            justifyContent: 'flex-end'
          }, center && {
            justifyContent: 'center'
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 58
          }
        },
        !iconRight && _react2.default.createElement(Icon, {
          color: checked ? checkedColor : uncheckedColor,
          name: iconName,
          size: size || 24,
          onLongPress: onLongIconPress,
          onPress: onIconPress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66
          }
        }),
        _react2.default.isValidElement(title) ? title : _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.text, textStyle && textStyle, fontFamily && {
              fontFamily: fontFamily
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 76
            }
          },
          checked ? checkedTitle || title : title
        ),
        iconRight && _react2.default.createElement(Icon, {
          color: checked ? checkedColor : uncheckedColor,
          name: iconName,
          size: size || 24,
          onLongPress: onLongIconPress,
          onPress: onIconPress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 87
          }
        })
      )
    );
  };

  CheckBox.defaultProps = {
    checked: false,
    iconRight: false,
    right: false,
    center: false,
    checkedColor: 'green',
    uncheckedColor: '#bfbfbf',
    checkedIcon: 'check-square-o',
    uncheckedIcon: 'square-o',
    size: 24
  };
  CheckBox.propTypes = {
    component: _propTypes2.default.any,
    checked: _propTypes2.default.bool,
    iconRight: _propTypes2.default.bool,
    title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
    center: _propTypes2.default.bool,
    right: _propTypes2.default.bool,
    containerStyle: _ViewPropTypes2.default.style,
    textStyle: _reactNative.Text.propTypes.style,
    onPress: _propTypes2.default.func,
    onLongPress: _propTypes2.default.func,
    checkedIcon: _propTypes2.default.string,
    uncheckedIcon: _propTypes2.default.string,
    iconType: _propTypes2.default.string,
    size: _propTypes2.default.number,
    checkedColor: _propTypes2.default.string,
    uncheckedColor: _propTypes2.default.string,
    checkedTitle: _propTypes2.default.string,
    onIconPress: _propTypes2.default.func,
    onLongIconPress: _propTypes2.default.func,
    fontFamily: _propTypes2.default.string
  };

  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    container: {
      margin: 5,
      marginLeft: 10,
      marginRight: 10,
      backgroundColor: '#fafafa',
      borderColor: '#ededed',
      borderWidth: 1,
      padding: 10,
      borderRadius: 3
    },
    text: _extends({
      marginLeft: 10,
      marginRight: 10,
      color: _colors2.default.grey1
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: 'bold'
      },
      android: _extends({}, _fonts2.default.android.bold)
    }))
  });

  exports.default = CheckBox;
},754,[25,13,65,676,677,675,741,726,747],"node_modules/react-native-elements/src/checkbox/CheckBox.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/divider/Divider.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _colors = _require(_dependencyMap[2], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _ViewPropTypes = _require(_dependencyMap[3], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var styles = {};

  var Divider = function Divider(_ref) {
    var style = _ref.style;
    return _react2.default.createElement(_reactNative.View, {
      style: [styles.container, style && style],
      __source: {
        fileName: _jsxFileName,
        lineNumber: 9
      }
    });
  };

  Divider.propTypes = {
    style: _ViewPropTypes2.default.style
  };
  styles = _reactNative.StyleSheet.create({
    container: {
      height: 1,
      backgroundColor: _colors2.default.grey5
    }
  });
  exports.default = Divider;
},755,[13,65,675,747],"node_modules/react-native-elements/src/divider/Divider.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/slider/Slider.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _ViewPropTypes = _require(_dependencyMap[4], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Slider: {
      displayName: "Slider"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/slider/Slider.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var TRACK_SIZE = 4;
  var THUMB_SIZE = 20;
  var DEFAULT_ANIMATION_CONFIGS = {
    spring: {
      friction: 7,
      tension: 100
    },
    timing: {
      duration: 150,
      easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
      delay: 0
    }
  };

  function Rect(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }

  Rect.prototype.containsPoint = function (x, y) {
    return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;
  };

  var Slider = _wrapComponent("Slider")(function (_Component) {
    _inherits(Slider, _Component);

    function Slider(props) {
      _classCallCheck(this, Slider);

      var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

      _this.state = {
        containerSize: {
          width: 0,
          height: 0
        },
        trackSize: {
          width: 0,
          height: 0
        },
        thumbSize: {
          width: 0,
          height: 0
        },
        allMeasured: false,
        value: new _reactNative.Animated.Value(props.value)
      };
      return _this;
    }

    _createClass(Slider, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.panResponder = _reactNative.PanResponder.create({
          onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(this),
          onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(this),
          onPanResponderGrant: this.handlePanResponderGrant.bind(this),
          onPanResponderMove: this.handlePanResponderMove.bind(this),
          onPanResponderRelease: this.handlePanResponderEnd.bind(this),
          onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(this),
          onPanResponderTerminate: this.handlePanResponderEnd.bind(this)
        });
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        var newValue = nextProps.value;

        if (this.props.value !== newValue) {
          if (this.props.animateTransitions) {
            this.setCurrentValueAnimated(newValue);
          } else {
            this.setCurrentValue(newValue);
          }
        }
      }
    }, {
      key: "setCurrentValue",
      value: function setCurrentValue(value) {
        this.state.value.setValue(value);
      }
    }, {
      key: "setCurrentValueAnimated",
      value: function setCurrentValueAnimated(value) {
        var animationType = this.props.animationType;

        var animationConfig = _extends({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {
          toValue: value
        });

        _reactNative.Animated[animationType](this.state.value, animationConfig).start();
      }
    }, {
      key: "handleMoveShouldSetPanResponder",
      value: function handleMoveShouldSetPanResponder() {
        return false;
      }
    }, {
      key: "handlePanResponderGrant",
      value: function handlePanResponderGrant() {
        this._previousLeft = this.getThumbLeft(this.getCurrentValue());
        this.fireChangeEvent('onSlidingStart');
      }
    }, {
      key: "handlePanResponderMove",
      value: function handlePanResponderMove(e, gestureState) {
        if (this.props.disabled) {
          return;
        }

        this.setCurrentValue(this.getValue(gestureState));
        this.fireChangeEvent('onValueChange');
      }
    }, {
      key: "handlePanResponderRequestEnd",
      value: function handlePanResponderRequestEnd() {
        return false;
      }
    }, {
      key: "handlePanResponderEnd",
      value: function handlePanResponderEnd(e, gestureState) {
        if (this.props.disabled) {
          return;
        }

        this.setCurrentValue(this.getValue(gestureState));
        this.fireChangeEvent('onSlidingComplete');
      }
    }, {
      key: "thumbHitTest",
      value: function thumbHitTest(e) {
        var nativeEvent = e.nativeEvent;
        var thumbTouchRect = this.getThumbTouchRect();
        return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);
      }
    }, {
      key: "handleStartShouldSetPanResponder",
      value: function handleStartShouldSetPanResponder(e) {
        return this.thumbHitTest(e);
      }
    }, {
      key: "fireChangeEvent",
      value: function fireChangeEvent(event) {
        if (this.props[event]) {
          this.props[event](this.getCurrentValue());
        }
      }
    }, {
      key: "getTouchOverflowSize",
      value: function getTouchOverflowSize() {
        var state = this.state;
        var props = this.props;
        var size = {};

        if (state.allMeasured === true) {
          size.width = Math.max(0, props.thumbTouchSize.width - state.thumbSize.width);
          size.height = Math.max(0, props.thumbTouchSize.height - state.containerSize.height);
        }

        return size;
      }
    }, {
      key: "getTouchOverflowStyle",
      value: function getTouchOverflowStyle() {
        var _getTouchOverflowSize = this.getTouchOverflowSize(),
            width = _getTouchOverflowSize.width,
            height = _getTouchOverflowSize.height;

        var touchOverflowStyle = {};

        if (width !== undefined && height !== undefined) {
          var verticalMargin = -height / 2;
          touchOverflowStyle.marginTop = verticalMargin;
          touchOverflowStyle.marginBottom = verticalMargin;
          var horizontalMargin = -width / 2;
          touchOverflowStyle.marginLeft = horizontalMargin;
          touchOverflowStyle.marginRight = horizontalMargin;
        }

        if (this.props.debugTouchArea === true) {
          touchOverflowStyle.backgroundColor = 'orange';
          touchOverflowStyle.opacity = 0.5;
        }

        return touchOverflowStyle;
      }
    }, {
      key: "handleMeasure",
      value: function handleMeasure(name, x) {
        var _x$nativeEvent$layout = x.nativeEvent.layout,
            width = _x$nativeEvent$layout.width,
            height = _x$nativeEvent$layout.height;
        var size = {
          width: width,
          height: height
        };
        var storeName = "_" + name;
        var currentSize = this[storeName];

        if (currentSize && width === currentSize.width && height === currentSize.height) {
          return;
        }

        this[storeName] = size;

        if (this._containerSize && this._trackSize && this._thumbSize) {
          this.setState({
            containerSize: this._containerSize,
            trackSize: this._trackSize,
            thumbSize: this._thumbSize,
            allMeasured: true
          });
        }
      }
    }, {
      key: "measureContainer",
      value: function measureContainer(x) {
        this.handleMeasure('containerSize', x);
      }
    }, {
      key: "measureTrack",
      value: function measureTrack(x) {
        this.handleMeasure('trackSize', x);
      }
    }, {
      key: "measureThumb",
      value: function measureThumb(x) {
        this.handleMeasure('thumbSize', x);
      }
    }, {
      key: "getValue",
      value: function getValue(gestureState) {
        var length = this.state.containerSize.width - this.state.thumbSize.width;
        var thumbLeft = this._previousLeft + (this.props.orientation === 'vertical' ? gestureState.dy : gestureState.dx);
        var ratio = thumbLeft / length;

        if (this.props.step) {
          return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step));
        } else {
          return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue));
        }
      }
    }, {
      key: "getCurrentValue",
      value: function getCurrentValue() {
        return this.state.value.__getValue();
      }
    }, {
      key: "getRatio",
      value: function getRatio(value) {
        return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);
      }
    }, {
      key: "getThumbLeft",
      value: function getThumbLeft(value) {
        var ratio = this.getRatio(value);
        return ratio * (this.state.containerSize.width - this.state.thumbSize.width);
      }
    }, {
      key: "getThumbTouchRect",
      value: function getThumbTouchRect() {
        var state = this.state;
        var props = this.props;
        var touchOverflowSize = this.getTouchOverflowSize();
        return new Rect(touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (state.thumbSize.width - props.thumbTouchSize.width) / 2, touchOverflowSize.height / 2 + (state.containerSize.height - props.thumbTouchSize.height) / 2, props.thumbTouchSize.width, props.thumbTouchSize.height);
      }
    }, {
      key: "renderDebugThumbTouchRect",
      value: function renderDebugThumbTouchRect(thumbLeft) {
        var thumbTouchRect = this.getThumbTouchRect();
        var positionStyle = {
          left: thumbLeft,
          top: thumbTouchRect.y,
          width: thumbTouchRect.width,
          height: thumbTouchRect.height
        };
        return _react3.default.createElement(_reactNative.Animated.View, {
          style: positionStyle,
          pointerEvents: "none",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 335
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            minimumValue = _props.minimumValue,
            maximumValue = _props.maximumValue,
            minimumTrackTintColor = _props.minimumTrackTintColor,
            maximumTrackTintColor = _props.maximumTrackTintColor,
            thumbTintColor = _props.thumbTintColor,
            containerStyle = _props.containerStyle,
            style = _props.style,
            trackStyle = _props.trackStyle,
            thumbStyle = _props.thumbStyle,
            debugTouchArea = _props.debugTouchArea,
            orientation = _props.orientation,
            other = _objectWithoutProperties(_props, ["minimumValue", "maximumValue", "minimumTrackTintColor", "maximumTrackTintColor", "thumbTintColor", "containerStyle", "style", "trackStyle", "thumbStyle", "debugTouchArea", "orientation"]);

        var _state = this.state,
            value = _state.value,
            containerSize = _state.containerSize,
            trackSize = _state.trackSize,
            thumbSize = _state.thumbSize,
            allMeasured = _state.allMeasured;
        var mainStyles = containerStyle || styles;
        var thumbLeft = value.interpolate({
          inputRange: [minimumValue, maximumValue],
          outputRange: [0, containerSize.width - thumbSize.width]
        });
        var valueVisibleStyle = {};

        if (!allMeasured) {
          valueVisibleStyle.opacity = 0;
        }

        var minimumTrackStyle = _extends({
          position: 'absolute',
          width: _reactNative.Animated.add(thumbLeft, thumbSize.width / 2),
          marginTop: -trackSize.height,
          backgroundColor: minimumTrackTintColor
        }, valueVisibleStyle);

        var touchOverflowStyle = this.getTouchOverflowStyle();
        return _react3.default.createElement(
          _reactNative.View,
          _extends({}, other, {
            style: [mainStyles.container, orientation === 'vertical' && {
              transform: [{
                rotate: '90deg'
              }]
            }, style],
            onLayout: this.measureContainer.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 384
            }
          }),
          _react3.default.createElement(_reactNative.View, {
            style: [{
              backgroundColor: maximumTrackTintColor
            }, mainStyles.track, trackStyle],
            onLayout: this.measureTrack.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 393
            }
          }),
          _react3.default.createElement(_reactNative.Animated.View, {
            style: [mainStyles.track, trackStyle, minimumTrackStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 401
            }
          }),
          _react3.default.createElement(_reactNative.Animated.View, {
            onLayout: this.measureThumb.bind(this),
            style: [{
              backgroundColor: thumbTintColor
            }, mainStyles.thumb, thumbStyle, _extends({
              transform: [{
                translateX: thumbLeft
              }, {
                translateY: -(trackSize.height + thumbSize.height) / 2
              }]
            }, valueVisibleStyle)],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 404
            }
          }),
          _react3.default.createElement(
            _reactNative.View,
            _extends({
              style: [styles.touchArea, touchOverflowStyle]
            }, this.panResponder.panHandlers, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 419
              }
            }),
            debugTouchArea === true && this.renderDebugThumbTouchRect(thumbLeft)
          )
        );
      }
    }]);

    return Slider;
  }(_react2.Component));

  exports.default = Slider;
  Slider.propTypes = {
    value: _propTypes2.default.number,
    disabled: _propTypes2.default.bool,
    minimumValue: _propTypes2.default.number,
    maximumValue: _propTypes2.default.number,
    step: _propTypes2.default.number,
    minimumTrackTintColor: _propTypes2.default.string,
    maximumTrackTintColor: _propTypes2.default.string,
    thumbTintColor: _propTypes2.default.string,
    thumbTouchSize: _propTypes2.default.shape({
      width: _propTypes2.default.number,
      height: _propTypes2.default.number
    }),
    onValueChange: _propTypes2.default.func,
    onSlidingStart: _propTypes2.default.func,
    onSlidingComplete: _propTypes2.default.func,
    style: _ViewPropTypes2.default.style,
    trackStyle: _ViewPropTypes2.default.style,
    thumbStyle: _ViewPropTypes2.default.style,
    debugTouchArea: _propTypes2.default.bool,
    animateTransitions: _propTypes2.default.bool,
    animationType: _propTypes2.default.oneOf(['spring', 'timing']),
    orientation: _propTypes2.default.oneOf(['horizontal', 'vertical']),
    animationConfig: _propTypes2.default.object,
    containerStyle: _ViewPropTypes2.default.style
  };
  Slider.defaultProps = {
    value: 0,
    minimumValue: 0,
    maximumValue: 1,
    step: 0,
    minimumTrackTintColor: '#3f3f3f',
    maximumTrackTintColor: '#b3b3b3',
    thumbTintColor: 'red',
    thumbTouchSize: {
      width: 40,
      height: 40
    },
    debugTouchArea: false,
    animationType: 'timing',
    orientation: 'horizontal'
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      height: 40,
      justifyContent: 'center'
    },
    track: {
      height: TRACK_SIZE,
      borderRadius: TRACK_SIZE / 2
    },
    thumb: {
      position: 'absolute',
      width: THUMB_SIZE,
      height: THUMB_SIZE,
      borderRadius: THUMB_SIZE / 2,
      top: 22
    },
    touchArea: {
      position: 'absolute',
      backgroundColor: 'transparent',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    debugThumbTouchArea: {
      position: 'absolute',
      backgroundColor: 'green',
      opacity: 0.5
    }
  });
},756,[13,219,25,65,747],"node_modules/react-native-elements/src/slider/Slider.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/buttons/ButtonGroup.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _colors = _require(_dependencyMap[3], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _Text = _require(_dependencyMap[4], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _normalizeText = _require(_dependencyMap[5], "../helpers/normalizeText");

  var _normalizeText2 = _interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[6], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var ButtonGroup = function ButtonGroup(props) {
    var component = props.component,
        buttons = props.buttons,
        onPress = props.onPress,
        selectedIndex = props.selectedIndex,
        containerStyle = props.containerStyle,
        innerBorderStyle = props.innerBorderStyle,
        lastBorderStyle = props.lastBorderStyle,
        buttonStyle = props.buttonStyle,
        textStyle = props.textStyle,
        selectedTextStyle = props.selectedTextStyle,
        selectedButtonStyle = props.selectedButtonStyle,
        underlayColor = props.underlayColor,
        activeOpacity = props.activeOpacity,
        onHideUnderlay = props.onHideUnderlay,
        onShowUnderlay = props.onShowUnderlay,
        setOpacityTo = props.setOpacityTo,
        containerBorderRadius = props.containerBorderRadius,
        disableSelected = props.disableSelected,
        attributes = _objectWithoutProperties(props, ["component", "buttons", "onPress", "selectedIndex", "containerStyle", "innerBorderStyle", "lastBorderStyle", "buttonStyle", "textStyle", "selectedTextStyle", "selectedButtonStyle", "underlayColor", "activeOpacity", "onHideUnderlay", "onShowUnderlay", "setOpacityTo", "containerBorderRadius", "disableSelected"]);

    var Component = component || _reactNative.TouchableHighlight;
    return _react2.default.createElement(
      _reactNative.View,
      _extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }),
      buttons.map(function (button, i) {
        var containerRadius = !isNaN(containerBorderRadius) ? containerBorderRadius : 3;
        return _react2.default.createElement(
          Component,
          {
            activeOpacity: activeOpacity,
            setOpacityTo: setOpacityTo,
            onHideUnderlay: onHideUnderlay,
            onShowUnderlay: onShowUnderlay,
            underlayColor: underlayColor || '#ffffff',
            disabled: disableSelected && i === selectedIndex ? true : false,
            onPress: onPress ? function () {
              return onPress(i);
            } : function () {},
            key: i,
            style: [styles.button, i < buttons.length - 1 && {
              borderRightWidth: i === 0 ? 0 : innerBorderStyle && innerBorderStyle.width || 1,
              borderRightColor: innerBorderStyle && innerBorderStyle.color || _colors2.default.grey4
            }, i === 1 && {
              borderLeftWidth: innerBorderStyle && innerBorderStyle.width || 1,
              borderLeftColor: innerBorderStyle && innerBorderStyle.color || _colors2.default.grey4
            }, i === buttons.length - 1 && _extends({}, lastBorderStyle, {
              borderTopRightRadius: containerRadius,
              borderBottomRightRadius: containerRadius
            }), i === 0 && {
              borderTopLeftRadius: containerRadius,
              borderBottomLeftRadius: containerRadius
            }, selectedIndex === i && {
              backgroundColor: 'white'
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 49
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.textContainer, buttonStyle && buttonStyle, selectedIndex === i && selectedButtonStyle && selectedButtonStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 90
              }
            },
            button.element ? _react2.default.createElement(button.element, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 100
              }
            }) : _react2.default.createElement(
              _Text2.default,
              {
                style: [styles.buttonText, textStyle && textStyle, selectedIndex === i && {
                  color: _colors2.default.grey1
                }, selectedIndex === i && selectedTextStyle],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 102
                }
              },
              button
            )
          )
        );
      })
    );
  };

  var styles = _reactNative.StyleSheet.create({
    button: {
      flex: 1
    },
    textContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    container: {
      marginLeft: 10,
      marginRight: 10,
      marginBottom: 5,
      marginTop: 5,
      borderColor: '#e3e3e3',
      borderWidth: 1,
      flexDirection: 'row',
      borderRadius: 3,
      overflow: 'hidden',
      backgroundColor: '#f5f5f5',
      height: 40
    },
    buttonText: _extends({
      fontSize: (0, _normalizeText2.default)(13),
      color: _colors2.default.grey2
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '500'
      }
    }))
  });

  ButtonGroup.propTypes = {
    button: _propTypes2.default.object,
    component: _propTypes2.default.any,
    onPress: _propTypes2.default.func,
    buttons: _propTypes2.default.array,
    containerStyle: _ViewPropTypes2.default.style,
    textStyle: _reactNative.Text.propTypes.style,
    selectedTextStyle: _reactNative.Text.propTypes.style,
    selectedButtonStyle: _ViewPropTypes2.default.style,
    underlayColor: _propTypes2.default.string,
    selectedIndex: _propTypes2.default.number,
    activeOpacity: _propTypes2.default.number,
    onHideUnderlay: _propTypes2.default.func,
    onShowUnderlay: _propTypes2.default.func,
    setOpacityTo: _propTypes2.default.any,
    innerBorderStyle: _propTypes2.default.shape({
      color: _propTypes2.default.string,
      width: _propTypes2.default.number
    }),
    lastBorderStyle: _propTypes2.default.oneOfType([_ViewPropTypes2.default.style, _reactNative.Text.propTypes.style]),
    buttonStyle: _ViewPropTypes2.default.style,
    containerBorderRadius: _propTypes2.default.number,
    disableSelected: _propTypes2.default.bool
  };
  exports.default = ButtonGroup;
},757,[25,13,65,675,676,678,747],"node_modules/react-native-elements/src/buttons/ButtonGroup.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/card/Card.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _fonts = _require(_dependencyMap[3], "../config/fonts");

  var _fonts2 = _interopRequireDefault(_fonts);

  var _colors = _require(_dependencyMap[4], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _Text = _require(_dependencyMap[5], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _Divider = _require(_dependencyMap[6], "../divider/Divider");

  var _Divider2 = _interopRequireDefault(_Divider);

  var _normalizeText = _require(_dependencyMap[7], "../helpers/normalizeText");

  var _normalizeText2 = _interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[8], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  var _BackgroundImage = _require(_dependencyMap[9], "../config/BackgroundImage");

  var _BackgroundImage2 = _interopRequireDefault(_BackgroundImage);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var Card = function Card(props) {
    var children = props.children,
        flexDirection = props.flexDirection,
        containerStyle = props.containerStyle,
        wrapperStyle = props.wrapperStyle,
        imageWrapperStyle = props.imageWrapperStyle,
        title = props.title,
        titleStyle = props.titleStyle,
        titleNumberOfLines = props.titleNumberOfLines,
        featuredTitle = props.featuredTitle,
        featuredTitleStyle = props.featuredTitleStyle,
        featuredSubtitle = props.featuredSubtitle,
        featuredSubtitleStyle = props.featuredSubtitleStyle,
        dividerStyle = props.dividerStyle,
        image = props.image,
        imageStyle = props.imageStyle,
        fontFamily = props.fontFamily,
        imageProps = props.imageProps,
        attributes = _objectWithoutProperties(props, ["children", "flexDirection", "containerStyle", "wrapperStyle", "imageWrapperStyle", "title", "titleStyle", "titleNumberOfLines", "featuredTitle", "featuredTitleStyle", "featuredSubtitle", "featuredSubtitleStyle", "dividerStyle", "image", "imageStyle", "fontFamily", "imageProps"]);

    return _react2.default.createElement(
      _reactNative.View,
      _extends({}, attributes, {
        style: [styles.container, image && {
          padding: 0
        }, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, wrapperStyle && wrapperStyle, flexDirection && {
            flexDirection: flexDirection
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 49
          }
        },
        title === '' || title && title.length > 0 && _react2.default.createElement(
          _reactNative.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 59
            }
          },
          _react2.default.createElement(
            _Text2.default,
            {
              style: [styles.cardTitle, image && styles.imageCardTitle, titleStyle && titleStyle, fontFamily && {
                fontFamily: fontFamily
              }],
              numberOfLines: titleNumberOfLines,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 60
              }
            },
            title
          ),
          !image && _react2.default.createElement(_Divider2.default, {
            style: [styles.divider, dividerStyle && dividerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 72
            }
          })
        ),
        image && _react2.default.createElement(
          _reactNative.View,
          {
            style: imageWrapperStyle && imageWrapperStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 77
            }
          },
          _react2.default.createElement(
            _BackgroundImage2.default,
            _extends({
              resizeMode: "cover",
              style: [{
                width: null,
                height: 150
              }, imageStyle && imageStyle],
              source: image
            }, imageProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 78
              }
            }),
            (featuredTitle || featuredSubtitle) && _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.overlayContainer,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 85
                }
              },
              featuredTitle && _react2.default.createElement(
                _Text2.default,
                {
                  style: [styles.featuredTitle, featuredTitleStyle && featuredTitleStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 87
                  }
                },
                featuredTitle
              ),
              featuredSubtitle && _react2.default.createElement(
                _Text2.default,
                {
                  style: [styles.featuredSubtitle, featuredSubtitleStyle && featuredSubtitleStyle],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 96
                  }
                },
                featuredSubtitle
              )
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [{
                padding: 10
              }, wrapperStyle && wrapperStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 106
              }
            },
            children
          )
        ),
        !image && children
      )
    );
  };

  Card.propTypes = {
    children: _propTypes2.default.any,
    flexDirection: _propTypes2.default.string,
    containerStyle: _ViewPropTypes2.default.style,
    wrapperStyle: _ViewPropTypes2.default.style,
    overlayStyle: _ViewPropTypes2.default.style,
    title: _propTypes2.default.string,
    titleStyle: _reactNative.Text.propTypes.style,
    featuredTitle: _propTypes2.default.string,
    featuredTitleStyle: _Text2.default.propTypes.style,
    featuredSubtitle: _propTypes2.default.string,
    featuredSubtitleStyle: _Text2.default.propTypes.style,
    dividerStyle: _ViewPropTypes2.default.style,
    image: _reactNative.Image.propTypes.source,
    imageStyle: _ViewPropTypes2.default.style,
    imageWrapperStyle: _ViewPropTypes2.default.style,
    fontFamily: _propTypes2.default.string,
    imageProps: _propTypes2.default.object,
    titleNumberOfLines: _propTypes2.default.number
  };

  var styles = _reactNative.StyleSheet.create({
    container: _extends({
      backgroundColor: 'white',
      borderColor: _colors2.default.grey5,
      borderWidth: 1,
      padding: 15,
      margin: 15,
      marginBottom: 0
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 0,
          width: 0
        },
        shadowOpacity: 1,
        shadowRadius: 1
      },
      android: {
        elevation: 1
      }
    })),
    featuredTitle: _extends({
      fontSize: (0, _normalizeText2.default)(18),
      marginBottom: 8,
      color: 'white'
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '800'
      },
      android: _extends({}, _fonts2.default.android.black)
    })),
    featuredSubtitle: _extends({
      fontSize: (0, _normalizeText2.default)(13),
      marginBottom: 8,
      color: 'white'
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '400'
      },
      android: _extends({}, _fonts2.default.android.black)
    })),
    wrapper: {
      backgroundColor: 'transparent'
    },
    divider: {
      marginBottom: 15
    },
    cardTitle: _extends({
      fontSize: (0, _normalizeText2.default)(14)
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: 'bold'
      },
      android: _extends({}, _fonts2.default.android.black)
    }), {
      textAlign: 'center',
      marginBottom: 15,
      color: _colors2.default.grey1
    }),
    imageCardTitle: {
      marginTop: 15
    },
    overlayContainer: {
      flex: 1,
      alignItems: 'center',
      backgroundColor: 'rgba(0, 0, 0, 0.2)',
      alignSelf: 'stretch',
      justifyContent: 'center',
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    }
  });

  exports.default = Card;
},758,[25,13,65,677,675,676,755,678,747,759],"node_modules/react-native-elements/src/card/Card.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var BackgroundImage = _reactNative.ImageBackground || _reactNative.Image;
  exports.default = BackgroundImage;
},759,[65],"node_modules/react-native-elements/src/config/BackgroundImage.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/tile/Tile.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _Text = _require(_dependencyMap[3], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _Icon = _require(_dependencyMap[4], "../icons/Icon");

  var _Icon2 = _interopRequireDefault(_Icon);

  var _FeaturedTile = _require(_dependencyMap[5], "./FeaturedTile");

  var _FeaturedTile2 = _interopRequireDefault(_FeaturedTile);

  var _ViewPropTypes = _require(_dependencyMap[6], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  var _BackgroundImage = _require(_dependencyMap[7], "../config/BackgroundImage");

  var _BackgroundImage2 = _interopRequireDefault(_BackgroundImage);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var Tile = function Tile(props) {
    var featured = props.featured,
        imageSrc = props.imageSrc,
        icon = props.icon,
        title = props.title,
        children = props.children,
        caption = props.caption,
        titleStyle = props.titleStyle,
        onPress = props.onPress,
        activeOpacity = props.activeOpacity,
        overlayContainerStyle = props.overlayContainerStyle,
        captionStyle = props.captionStyle,
        iconContainerStyle = props.iconContainerStyle,
        imageContainerStyle = props.imageContainerStyle,
        containerStyle = props.containerStyle,
        contentContainerStyle = props.contentContainerStyle,
        titleNumberOfLines = props.titleNumberOfLines,
        attributes = _objectWithoutProperties(props, ["featured", "imageSrc", "icon", "title", "children", "caption", "titleStyle", "onPress", "activeOpacity", "overlayContainerStyle", "captionStyle", "iconContainerStyle", "imageContainerStyle", "containerStyle", "contentContainerStyle", "titleNumberOfLines"]);

    var width = props.width,
        height = props.height;

    if (!width) {
      width = _reactNative.Dimensions.get('window').width;
    }

    if (!height) {
      height = width * 0.8;
    }

    var styles = _reactNative.StyleSheet.create({
      container: {
        width: width,
        height: height
      },
      imageContainer: {
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: '#ffffff',
        flex: 2
      },
      text: {
        backgroundColor: 'rgba(0,0,0,0)',
        marginBottom: 5
      },
      contentContainer: {
        paddingTop: 15,
        paddingBottom: 5,
        paddingLeft: 15,
        paddingRight: 15
      },
      iconContainer: {
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center'
      }
    });

    if (featured) {
      var featuredProps = {
        title: title,
        icon: icon,
        caption: caption,
        imageSrc: imageSrc,
        onPress: onPress,
        activeOpacity: activeOpacity,
        containerStyle: containerStyle,
        imageContainerStyle: imageContainerStyle,
        overlayContainerStyle: overlayContainerStyle,
        titleStyle: titleStyle,
        captionStyle: captionStyle,
        width: width,
        height: height
      };
      return _react2.default.createElement(_FeaturedTile2.default, _extends({}, featuredProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92
        }
      }));
    }

    return _react2.default.createElement(
      _reactNative.TouchableOpacity,
      _extends({}, attributes, {
        onPress: onPress,
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 96
        }
      }),
      _react2.default.createElement(
        _BackgroundImage2.default,
        {
          source: imageSrc,
          style: [styles.imageContainer, imageContainerStyle && imageContainerStyle],
          resizeMode: "cover",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 101
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.iconContainer, iconContainerStyle && iconContainerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 109
            }
          },
          icon && _react2.default.createElement(_Icon2.default, _extends({}, icon, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 115
            }
          }))
        )
      ),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.contentContainer, contentContainerStyle && contentContainerStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 118
          }
        },
        _react2.default.createElement(
          _Text2.default,
          {
            h4: true,
            style: [styles.text, titleStyle && titleStyle],
            numberOfLines: titleNumberOfLines,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 124
            }
          },
          title
        ),
        children
      )
    );
  };

  Tile.propTypes = {
    title: _propTypes2.default.string,
    icon: _propTypes2.default.object,
    caption: _propTypes2.default.string,
    imageSrc: _reactNative.Image.propTypes.source,
    onPress: _propTypes2.default.func,
    activeOpacity: _propTypes2.default.number,
    containerStyle: _ViewPropTypes2.default.style,
    imageContainerStyle: _ViewPropTypes2.default.style,
    iconContainerStyle: _ViewPropTypes2.default.style,
    overlayContainerStyle: _ViewPropTypes2.default.style,
    titleStyle: _reactNative.Text.propTypes.style,
    captionStyle: _reactNative.Text.propTypes.style,
    width: _propTypes2.default.number,
    height: _propTypes2.default.number,
    featured: _propTypes2.default.bool,
    children: _propTypes2.default.any,
    contentContainerStyle: _ViewPropTypes2.default.style,
    titleNumberOfLines: _propTypes2.default.number
  };
  exports.default = Tile;
},760,[25,13,65,676,748,761,747,759],"node_modules/react-native-elements/src/tile/Tile.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/tile/FeaturedTile.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _Text = _require(_dependencyMap[3], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _Icon = _require(_dependencyMap[4], "../icons/Icon");

  var _Icon2 = _interopRequireDefault(_Icon);

  var _ViewPropTypes = _require(_dependencyMap[5], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  var _BackgroundImage = _require(_dependencyMap[6], "../config/BackgroundImage");

  var _BackgroundImage2 = _interopRequireDefault(_BackgroundImage);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var FeaturedTile = function FeaturedTile(props) {
    var title = props.title,
        icon = props.icon,
        caption = props.caption,
        imageSrc = props.imageSrc,
        containerStyle = props.containerStyle,
        imageContainerStyle = props.imageContainerStyle,
        overlayContainerStyle = props.overlayContainerStyle,
        iconContainerStyle = props.iconContainerStyle,
        titleStyle = props.titleStyle,
        captionStyle = props.captionStyle,
        attributes = _objectWithoutProperties(props, ["title", "icon", "caption", "imageSrc", "containerStyle", "imageContainerStyle", "overlayContainerStyle", "iconContainerStyle", "titleStyle", "captionStyle"]);

    var width = props.width,
        height = props.height;

    if (!width) {
      width = _reactNative.Dimensions.get('window').width;
    }

    if (!height) {
      height = width * 0.8;
    }

    var styles = _reactNative.StyleSheet.create({
      container: {
        width: width,
        height: height
      },
      imageContainer: {
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: '#ffffff',
        width: width,
        height: height
      },
      overlayContainer: {
        flex: 1,
        alignItems: 'center',
        backgroundColor: 'rgba(0,0,0,0.2)',
        alignSelf: 'stretch',
        justifyContent: 'center',
        paddingLeft: 25,
        paddingRight: 25,
        paddingTop: 45,
        paddingBottom: 40,
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      },
      text: {
        color: '#ffffff',
        backgroundColor: 'rgba(0,0,0,0)',
        marginBottom: 15,
        textAlign: 'center'
      },
      iconContainer: {
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center'
      }
    });

    return _react2.default.createElement(
      _reactNative.TouchableOpacity,
      _extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 82
        }
      }),
      _react2.default.createElement(
        _BackgroundImage2.default,
        {
          source: imageSrc,
          style: [styles.imageContainer, imageContainerStyle && imageContainerStyle],
          resizeMode: "cover",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 86
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.overlayContainer, overlayContainerStyle && overlayContainerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 94
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.iconContainer, iconContainerStyle && iconContainerStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 100
              }
            },
            icon && _react2.default.createElement(_Icon2.default, _extends({}, icon, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 106
              }
            }))
          ),
          _react2.default.createElement(
            _Text2.default,
            {
              h4: true,
              style: [styles.text, titleStyle && titleStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 108
              }
            },
            title
          ),
          _react2.default.createElement(
            _Text2.default,
            {
              style: [styles.text, captionStyle && captionStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 111
              }
            },
            caption
          )
        )
      )
    );
  };

  FeaturedTile.propTypes = {
    title: _propTypes2.default.string,
    icon: _propTypes2.default.object,
    caption: _propTypes2.default.string,
    imageSrc: _reactNative.Image.propTypes.source,
    onPress: _propTypes2.default.func,
    containerStyle: _ViewPropTypes2.default.style,
    iconContainerStyle: _ViewPropTypes2.default.style,
    imageContainerStyle: _ViewPropTypes2.default.style,
    overlayContainerStyle: _ViewPropTypes2.default.style,
    titleStyle: _reactNative.Text.propTypes.style,
    captionStyle: _reactNative.Text.propTypes.style,
    width: _propTypes2.default.number,
    height: _propTypes2.default.number
  };
  exports.default = FeaturedTile;
},761,[25,13,65,676,748,747,759],"node_modules/react-native-elements/src/tile/FeaturedTile.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/rating/Rating.js";

  var _lodash = _require(_dependencyMap[2], "lodash.times");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _propTypes = _require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[4], "react-native");

  var _Text = _require(_dependencyMap[5], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _ViewPropTypes = _require(_dependencyMap[6], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Rating: {
      displayName: "Rating"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/rating/Rating.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var STAR_IMAGE = _require(_dependencyMap[7], './images/star.png');

  var HEART_IMAGE = _require(_dependencyMap[8], './images/heart.png');

  var ROCKET_IMAGE = _require(_dependencyMap[9], './images/rocket.png');

  var BELL_IMAGE = _require(_dependencyMap[10], './images/bell.png');

  var STAR_WIDTH = 60;
  var TYPES = {
    star: {
      source: STAR_IMAGE,
      color: '#f1c40f',
      backgroundColor: 'white'
    },
    heart: {
      source: HEART_IMAGE,
      color: '#e74c3c',
      backgroundColor: 'white'
    },
    rocket: {
      source: ROCKET_IMAGE,
      color: '#2ecc71',
      backgroundColor: 'white'
    },
    bell: {
      source: BELL_IMAGE,
      color: '#f39c12',
      backgroundColor: 'white'
    }
  };

  var Rating = _wrapComponent("Rating")((_temp = _class = function (_Component) {
    _inherits(Rating, _Component);

    function Rating(props) {
      _classCallCheck(this, Rating);

      var _this = _possibleConstructorReturn(this, (Rating.__proto__ || Object.getPrototypeOf(Rating)).call(this, props));

      var _this$props = _this.props,
          onFinishRating = _this$props.onFinishRating,
          fractions = _this$props.fractions;
      var position = new _reactNative.Animated.ValueXY();

      var panResponder = _reactNative.PanResponder.create({
        onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
          return true;
        },
        onPanResponderMove: function onPanResponderMove(event, gesture) {
          var newPosition = new _reactNative.Animated.ValueXY();
          newPosition.setValue({
            x: gesture.dx,
            y: 0
          });

          _this.setState({
            position: newPosition,
            value: gesture.dx
          });
        },
        onPanResponderRelease: function onPanResponderRelease() {
          var rating = _this.getCurrentRating();

          if (!fractions) {
            _this.setCurrentRating(rating);
          }

          onFinishRating(rating);
        }
      });

      _this.state = {
        panResponder: panResponder,
        position: position
      };
      return _this;
    }

    _createClass(Rating, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.setCurrentRating(this.props.startingValue);
      }
    }, {
      key: "getPrimaryViewStyle",
      value: function getPrimaryViewStyle() {
        var position = this.state.position;
        var _props = this.props,
            imageSize = _props.imageSize,
            ratingCount = _props.ratingCount,
            type = _props.type;
        var color = TYPES[type].color;
        var width = position.x.interpolate({
          inputRange: [-ratingCount * (imageSize / 2), 0, ratingCount * (imageSize / 2)],
          outputRange: [0, ratingCount * imageSize / 2, ratingCount * imageSize],
          extrapolate: 'clamp'
        }, {
          useNativeDriver: true
        });
        return {
          backgroundColor: color,
          width: width,
          height: width ? imageSize : 0
        };
      }
    }, {
      key: "getSecondaryViewStyle",
      value: function getSecondaryViewStyle() {
        var position = this.state.position;
        var _props2 = this.props,
            imageSize = _props2.imageSize,
            ratingCount = _props2.ratingCount,
            type = _props2.type;
        var backgroundColor = TYPES[type].backgroundColor;
        var width = position.x.interpolate({
          inputRange: [-ratingCount * (imageSize / 2), 0, ratingCount * (imageSize / 2)],
          outputRange: [ratingCount * imageSize, ratingCount * imageSize / 2, 0],
          extrapolate: 'clamp'
        }, {
          useNativeDriver: true
        });
        return {
          backgroundColor: backgroundColor,
          width: width,
          height: width ? imageSize : 0
        };
      }
    }, {
      key: "renderRatings",
      value: function renderRatings() {
        var _props3 = this.props,
            imageSize = _props3.imageSize,
            ratingCount = _props3.ratingCount,
            type = _props3.type;
        var source = TYPES[type].source;
        return (0, _lodash2.default)(ratingCount, function (index) {
          return _react3.default.createElement(
            _reactNative.View,
            {
              key: index,
              style: styles.starContainer,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 148
              }
            },
            _react3.default.createElement(_reactNative.Image, {
              source: source,
              style: {
                width: imageSize,
                height: imageSize
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 149
              }
            })
          );
        });
      }
    }, {
      key: "getCurrentRating",
      value: function getCurrentRating() {
        var value = this.state.value;
        var _props4 = this.props,
            fractions = _props4.fractions,
            imageSize = _props4.imageSize,
            ratingCount = _props4.ratingCount;
        var startingValue = ratingCount / 2;
        var currentRating = 0;

        if (value > ratingCount * imageSize / 2) {
          currentRating = ratingCount;
        } else if (value < -ratingCount * imageSize / 2) {
          currentRating = 0;
        } else if (value < imageSize || value > imageSize) {
          currentRating = startingValue + value / imageSize;
          currentRating = !fractions ? Math.ceil(currentRating) : +currentRating.toFixed(fractions);
        } else {
          currentRating = !fractions ? Math.ceil(startingValue) : +startingValue.toFixed(fractions);
        }

        return currentRating;
      }
    }, {
      key: "setCurrentRating",
      value: function setCurrentRating(rating) {
        var _props5 = this.props,
            imageSize = _props5.imageSize,
            ratingCount = _props5.ratingCount;
        var initialRating = ratingCount / 2;
        var value = null;

        if (rating > ratingCount) {
          value = ratingCount * imageSize / 2;
        } else if (rating < 0) {
          value = -ratingCount * imageSize / 2;
        } else if (rating < ratingCount / 2 || rating > ratingCount / 2) {
          value = (rating - initialRating) * imageSize;
        } else {
          value = 0;
        }

        var newPosition = new _reactNative.Animated.ValueXY();
        newPosition.setValue({
          x: value,
          y: 0
        });
        this.setState({
          position: newPosition,
          value: value
        });
      }
    }, {
      key: "displayCurrentRating",
      value: function displayCurrentRating() {
        var _props6 = this.props,
            ratingCount = _props6.ratingCount,
            type = _props6.type,
            readonly = _props6.readonly;
        var color = TYPES[type].color;
        return _react3.default.createElement(
          _reactNative.View,
          {
            style: styles.showRatingView,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 209
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: styles.ratingView,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 210
              }
            },
            _react3.default.createElement(
              _Text2.default,
              {
                style: styles.ratingText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 211
                }
              },
              "Rating: "
            ),
            _react3.default.createElement(
              _Text2.default,
              {
                style: [styles.currentRatingText, {
                  color: color
                }],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 212
                }
              },
              this.getCurrentRating()
            ),
            _react3.default.createElement(
              _Text2.default,
              {
                style: styles.maxRatingText,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 215
                }
              },
              "/",
              ratingCount
            )
          ),
          _react3.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 219
              }
            },
            readonly && _react3.default.createElement(
              _Text2.default,
              {
                style: styles.readonlyLabel,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 220
                }
              },
              "(readonly)"
            )
          )
        );
      }
    }, {
      key: "render",
      value: function render() {
        var _props7 = this.props,
            readonly = _props7.readonly,
            type = _props7.type,
            ratingImage = _props7.ratingImage,
            ratingColor = _props7.ratingColor,
            ratingBackgroundColor = _props7.ratingBackgroundColor,
            style = _props7.style,
            showRating = _props7.showRating;

        if (type === 'custom') {
          var custom = {
            source: ratingImage,
            color: ratingColor,
            backgroundColor: ratingBackgroundColor
          };
          TYPES.custom = custom;
        }

        return _react3.default.createElement(
          _reactNative.View,
          {
            pointerEvents: readonly ? 'none' : 'auto',
            style: style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 247
            }
          },
          showRating && this.displayCurrentRating(),
          _react3.default.createElement(
            _reactNative.View,
            _extends({
              style: styles.starsWrapper
            }, this.state.panResponder.panHandlers, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 249
              }
            }),
            _react3.default.createElement(
              _reactNative.View,
              {
                style: styles.starsInsideWrapper,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 253
                }
              },
              _react3.default.createElement(_reactNative.Animated.View, {
                style: this.getPrimaryViewStyle(),
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 254
                }
              }),
              _react3.default.createElement(_reactNative.Animated.View, {
                style: this.getSecondaryViewStyle(),
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 255
                }
              })
            ),
            this.renderRatings()
          )
        );
      }
    }]);

    return Rating;
  }(_react2.Component), _class.defaultProps = {
    type: 'star',
    ratingImage: _require(_dependencyMap[7], './images/star.png'),
    ratingColor: '#f1c40f',
    ratingBackgroundColor: 'white',
    ratingCount: 5,
    imageSize: STAR_WIDTH,
    onFinishRating: function onFinishRating() {
      return console.log('Attach a function here.');
    }
  }, _temp));

  exports.default = Rating;

  var styles = _reactNative.StyleSheet.create({
    starsWrapper: {
      flexDirection: 'row'
    },
    starsInsideWrapper: {
      position: 'absolute',
      top: 0,
      left: 0,
      flexDirection: 'row'
    },
    showRatingView: {
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      paddingBottom: 5
    },
    ratingView: {
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center',
      paddingBottom: 5
    },
    ratingText: {
      fontSize: 15,
      textAlign: 'center',
      fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null,
      color: '#34495e'
    },
    readonlyLabel: {
      justifyContent: 'center',
      alignItems: 'center',
      fontSize: 12,
      textAlign: 'center',
      fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null,
      color: '#34495a'
    },
    currentRatingText: {
      fontSize: 30,
      textAlign: 'center',
      fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null
    },
    maxRatingText: {
      fontSize: 18,
      textAlign: 'center',
      fontFamily: _reactNative.Platform.OS === 'ios' ? 'Trebuchet MS' : null,
      color: '#34495e'
    }
  });

  var fractionsType = function fractionsType(props, propName, componentName) {
    if (props[propName]) {
      var value = props[propName];

      if (typeof value === 'number') {
        return value >= 0 && value <= 20 ? null : new Error("`" + propName + "` in `" + componentName + "` must be between 0 and 20");
      }

      return new Error("`" + propName + "` in `" + componentName + "` must be a number");
    }
  };

  Rating.propTypes = {
    type: _propTypes2.default.string,
    ratingImage: _reactNative.Image.propTypes.source,
    ratingColor: _propTypes2.default.string,
    ratingBackgroundColor: _propTypes2.default.string,
    ratingCount: _propTypes2.default.number,
    imageSize: _propTypes2.default.number,
    onFinishRating: _propTypes2.default.func,
    showRating: _propTypes2.default.bool,
    style: _ViewPropTypes2.default.style,
    readonly: _propTypes2.default.bool,
    startingValue: _propTypes2.default.number,
    fractions: fractionsType
  };
},762,[13,219,763,25,65,676,747,764,765,766,767],"node_modules/react-native-elements/src/rating/Rating.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;
  var MAX_ARRAY_LENGTH = 4294967295;
  var symbolTag = '[object Symbol]';
  var reTrim = /^\s+|\s+$/g;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  var objectProto = Object.prototype;
  var objectToString = objectProto.toString;
  var nativeMin = Math.min;

  function isObject(value) {
    var type = typeof value === "undefined" ? "undefined" : _typeof(value);
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && (typeof value === "undefined" ? "undefined" : _typeof(value)) == 'object';
  }

  function isSymbol(value) {
    return (typeof value === "undefined" ? "undefined" : _typeof(value)) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }

    value = toNumber(value);

    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }

    return value === value ? value : 0;
  }

  function toInteger(value) {
    var result = toFinite(value),
        remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }

  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }

    if (isSymbol(value)) {
      return NAN;
    }

    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? other + '' : other;
    }

    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }

    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  function identity(value) {
    return value;
  }

  function times(n, iteratee) {
    n = toInteger(n);

    if (n < 1 || n > MAX_SAFE_INTEGER) {
      return [];
    }

    var index = MAX_ARRAY_LENGTH,
        length = nativeMin(n, MAX_ARRAY_LENGTH);
    iteratee = typeof iteratee == 'function' ? iteratee : identity;
    n -= MAX_ARRAY_LENGTH;
    var result = baseTimes(length, iteratee);

    while (++index < n) {
      iteratee(index);
    }

    return result;
  }

  module.exports = times;
},763,[],"node_modules/lodash.times/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
   module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/node_modules/react-native-elements/src/rating/images",
      "width": 50,
      "height": 50,
      "scales": [1],
      "hash": "004c2bbb035d8d06bb830efc4673c886",
      "name": "star",
      "type": "png"
   });
},764,[204],"node_modules/react-native-elements/src/rating/images/star.png");
__d(function (global, _require, module, exports, _dependencyMap) {
   module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/node_modules/react-native-elements/src/rating/images",
      "width": 50,
      "height": 50,
      "scales": [1],
      "hash": "2327736b3ea09c41abfb69be1221f430",
      "name": "heart",
      "type": "png"
   });
},765,[204],"node_modules/react-native-elements/src/rating/images/heart.png");
__d(function (global, _require, module, exports, _dependencyMap) {
   module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/node_modules/react-native-elements/src/rating/images",
      "width": 50,
      "height": 50,
      "scales": [1],
      "hash": "51671417ef20e0bbc32f0a2bc6edfa95",
      "name": "rocket",
      "type": "png"
   });
},766,[204],"node_modules/react-native-elements/src/rating/images/rocket.png");
__d(function (global, _require, module, exports, _dependencyMap) {
   module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
      "__packager_asset": true,
      "httpServerLocation": "/assets/node_modules/react-native-elements/src/rating/images",
      "width": 50,
      "height": 50,
      "scales": [1],
      "hash": "a7b9dc9de5f8f1fb1afbef917619a5ac",
      "name": "bell",
      "type": "png"
   });
},767,[204],"node_modules/react-native-elements/src/rating/images/bell.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/header/Header.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _lodash = _require(_dependencyMap[3], "lodash.isempty");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _DummyNavButton = _require(_dependencyMap[4], "./DummyNavButton");

  var _DummyNavButton2 = _interopRequireDefault(_DummyNavButton);

  var _NavButton = _require(_dependencyMap[5], "./NavButton");

  var _NavButton2 = _interopRequireDefault(_NavButton);

  var _Title = _require(_dependencyMap[6], "./Title");

  var _Title2 = _interopRequireDefault(_Title);

  var _ViewPropTypes = _require(_dependencyMap[7], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function generateChild(value, type) {
    if (_react2.default.isValidElement(value)) {
      return _react2.default.createElement(
        _reactNative.View,
        {
          key: type,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 12
          }
        },
        value
      );
    } else if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object' && !(0, _lodash2.default)(value)) {
      return type === 'center' ? _react2.default.createElement(_Title2.default, _extends({}, value, {
        key: type,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 15
        }
      })) : _react2.default.createElement(_NavButton2.default, _extends({}, value, {
        key: type,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 17
        }
      }));
    }

    return type === 'center' ? null : _react2.default.createElement(_DummyNavButton2.default, {
      key: type,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 20
      }
    });
  }

  function populateChildren(propChildren) {
    var childrenArray = [];
    var leftComponent = generateChild(propChildren.leftComponent, 'left');
    var centerComponent = generateChild(propChildren.centerComponent, 'center');
    var rightComponent = generateChild(propChildren.rightComponent, 'right');
    childrenArray.push(leftComponent, centerComponent, rightComponent);
    return childrenArray;
  }

  var Header = function Header(props) {
    var children = props.children,
        statusBarProps = props.statusBarProps,
        leftComponent = props.leftComponent,
        centerComponent = props.centerComponent,
        rightComponent = props.rightComponent,
        backgroundColor = props.backgroundColor,
        outerContainerStyles = props.outerContainerStyles,
        innerContainerStyles = props.innerContainerStyles,
        attributes = _objectWithoutProperties(props, ["children", "statusBarProps", "leftComponent", "centerComponent", "rightComponent", "backgroundColor", "outerContainerStyles", "innerContainerStyles"]);

    var propChildren = [];

    if (leftComponent || centerComponent || rightComponent) {
      propChildren = populateChildren({
        leftComponent: leftComponent,
        centerComponent: centerComponent,
        rightComponent: rightComponent
      });
    }

    return _react2.default.createElement(
      _reactNative.View,
      _extends({}, attributes, {
        style: [styles.outerContainer, backgroundColor && {
          backgroundColor: backgroundColor
        }, outerContainerStyles],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }),
      _react2.default.createElement(_reactNative.StatusBar, _extends({}, statusBarProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      })),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.innerContainer, innerContainerStyles],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        },
        propChildren.length > 0 ? propChildren : children
      )
    );
  };

  Header.propTypes = {
    leftComponent: _propTypes2.default.object,
    centerComponent: _propTypes2.default.object,
    rightComponent: _propTypes2.default.object,
    backgroundColor: _propTypes2.default.string,
    outerContainerStyles: _ViewPropTypes2.default.style,
    innerContainerStyles: _ViewPropTypes2.default.style,
    children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),
    statusBarProps: _propTypes2.default.object
  };

  var styles = _reactNative.StyleSheet.create({
    innerContainer: {
      flex: 1,
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'flex-end'
    },
    outerContainer: {
      backgroundColor: '#476DC5',
      borderBottomColor: '#f2f2f2',
      borderBottomWidth: 1,
      padding: 15,
      height: 70
    }
  });

  exports.default = Header;
},768,[13,25,65,769,770,771,772,747],"node_modules/react-native-elements/src/header/Header.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj; };

  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      setTag = '[object Set]',
      weakMapTag = '[object WeakMap]';
  var dataViewTag = '[object DataView]';
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;
  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  var freeExports = (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && (typeof module === "undefined" ? "undefined" : _typeof(module)) == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function isHostObject(value) {
    var result = false;

    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }

    return result;
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var coreJsData = root['__core-js_shared__'];

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var Buffer = moduleExports ? root.Buffer : undefined,
      propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
      nativeKeys = overArg(Object.keys, Object);
  var DataView = getNative(root, 'DataView'),
      Map = getNative(root, 'Map'),
      Promise = getNative(root, 'Promise'),
      Set = getNative(root, 'Set'),
      WeakMap = getNative(root, 'WeakMap');
  var nonEnumShadows = !propertyIsEnumerable.call({
    'valueOf': 1
  }, 'valueOf');
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);

  function baseGetTag(value) {
    return objectToString.call(value);
  }

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var getTag = baseGetTag;

  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
      var result = objectToString.call(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : undefined;

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;

          case mapCtorString:
            return mapTag;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag;

          case weakMapCtorString:
            return weakMapTag;
        }
      }

      return result;
    };
  }

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  var isBuffer = nativeIsBuffer || stubFalse;

  function isEmpty(value) {
    if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isArguments(value))) {
      return !value.length;
    }

    var tag = getTag(value);

    if (tag == mapTag || tag == setTag) {
      return !value.size;
    }

    if (nonEnumShadows || isPrototype(value)) {
      return !nativeKeys(value).length;
    }

    for (var key in value) {
      if (hasOwnProperty.call(value, key)) {
        return false;
      }
    }

    return true;
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value === "undefined" ? "undefined" : _typeof(value);
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && (typeof value === "undefined" ? "undefined" : _typeof(value)) == 'object';
  }

  function stubFalse() {
    return false;
  }

  module.exports = isEmpty;
},769,[],"node_modules/lodash.isempty/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/header/DummyNavButton.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var DummyNavButton = function DummyNavButton() {
    return _react2.default.createElement(_reactNative.View, {
      style: styles.dummyNavBtn,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 4
      }
    });
  };

  var styles = _reactNative.StyleSheet.create({
    dummyNavBtn: {
      height: 24,
      width: 24
    }
  });

  exports.default = DummyNavButton;
},770,[13,65],"node_modules/react-native-elements/src/header/DummyNavButton.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/header/NavButton.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _Icon = _require(_dependencyMap[2], "../icons/Icon");

  var _Icon2 = _interopRequireDefault(_Icon);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var NavButton = function NavButton(props) {
    var icon = props.icon,
        attributes = _objectWithoutProperties(props, ["icon"]);

    return _react2.default.createElement(_Icon2.default, _extends({}, attributes, {
      name: icon,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 8
      }
    }));
  };

  NavButton.propTypes = {
    icon: _propTypes2.default.string
  };
  exports.default = NavButton;
},771,[13,25,748],"node_modules/react-native-elements/src/header/NavButton.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/header/Title.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _Text = _require(_dependencyMap[2], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var Title = function Title(props) {
    var text = props.text,
        attributes = _objectWithoutProperties(props, ["text"]);

    return _react2.default.createElement(
      _Text2.default,
      _extends({
        numberOfLines: 1
      }, attributes, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 10
        }
      }),
      text
    );
  };

  Title.propTypes = {
    text: _propTypes2.default.string
  };
  exports.default = Title;
},772,[13,25,676],"node_modules/react-native-elements/src/header/Title.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/pricing/PricingCard.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _Text = _require(_dependencyMap[3], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _fonts = _require(_dependencyMap[4], "../config/fonts");

  var _fonts2 = _interopRequireDefault(_fonts);

  var _colors = _require(_dependencyMap[5], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _Button = _require(_dependencyMap[6], "../buttons/Button");

  var _Button2 = _interopRequireDefault(_Button);

  var _normalizeText = _require(_dependencyMap[7], "../helpers/normalizeText");

  var _normalizeText2 = _interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[8], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var PricingCard = function PricingCard(props) {
    var containerStyle = props.containerStyle,
        wrapperStyle = props.wrapperStyle,
        title = props.title,
        price = props.price,
        info = props.info,
        button = props.button,
        color = props.color,
        titleFont = props.titleFont,
        pricingFont = props.pricingFont,
        infoFont = props.infoFont,
        buttonFont = props.buttonFont,
        onButtonPress = props.onButtonPress,
        attributes = _objectWithoutProperties(props, ["containerStyle", "wrapperStyle", "title", "price", "info", "button", "color", "titleFont", "pricingFont", "infoFont", "buttonFont", "onButtonPress"]);

    return _react2.default.createElement(
      _reactNative.View,
      _extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 28
        }
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, wrapperStyle && wrapperStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 32
          }
        },
        _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.pricingTitle, {
              color: color
            }, titleFont && {
              fontFamily: titleFont
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          },
          title
        ),
        _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.pricingPrice, pricingFont && {
              fontFamily: pricingFont
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 42
            }
          },
          price
        ),
        info.map(function (item, i) {
          return _react2.default.createElement(
            _Text2.default,
            {
              key: i,
              style: [styles.pricingInfo, infoFont && {
                fontFamily: infoFont
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 52
              }
            },
            item
          );
        }),
        _react2.default.createElement(_Button2.default, {
          icon: {
            name: button.icon
          },
          buttonStyle: [styles.button, button.buttonStyle, {
            backgroundColor: color
          }],
          fontFamily: buttonFont && buttonFont,
          title: button.title,
          onPress: onButtonPress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 60
          }
        })
      )
    );
  };

  PricingCard.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    wrapperStyle: _ViewPropTypes2.default.style,
    title: _propTypes2.default.string,
    price: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    info: _propTypes2.default.array,
    button: _propTypes2.default.object,
    color: _propTypes2.default.string,
    onButtonPress: _propTypes2.default.any,
    titleFont: _propTypes2.default.string,
    pricingFont: _propTypes2.default.string,
    infoFont: _propTypes2.default.string,
    buttonFont: _propTypes2.default.string
  };
  PricingCard.defaultProps = {
    color: _colors2.default.primary
  };

  var styles = _reactNative.StyleSheet.create({
    container: _extends({
      margin: 15,
      marginBottom: 15,
      backgroundColor: 'white',
      borderColor: _colors2.default.grey5,
      borderWidth: 1,
      padding: 15
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 1,
          width: 0
        },
        shadowOpacity: 0.5,
        shadowRadius: 0.5
      },
      android: {
        elevation: 1
      }
    })),
    wrapper: {
      backgroundColor: 'transparent'
    },
    pricingTitle: _extends({
      textAlign: 'center',
      color: _colors2.default.primary,
      fontSize: (0, _normalizeText2.default)(30)
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '800'
      },
      android: _extends({}, _fonts2.default.android.black)
    })),
    pricingPrice: _extends({
      textAlign: 'center',
      marginTop: 10,
      marginBottom: 10,
      fontSize: (0, _normalizeText2.default)(40)
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '700'
      },
      android: _extends({}, _fonts2.default.android.bold)
    })),
    pricingInfo: _extends({
      textAlign: 'center',
      marginTop: 5,
      marginBottom: 5,
      color: _colors2.default.grey3
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: '600'
      },
      android: _extends({}, _fonts2.default.android.bold)
    })),
    button: {
      marginTop: 15,
      marginBottom: 10
    }
  });

  exports.default = PricingCard;
},773,[25,13,65,676,677,675,674,678,747],"node_modules/react-native-elements/src/pricing/PricingCard.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/form/FormInput.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _colors = _require(_dependencyMap[4], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _normalizeText = _require(_dependencyMap[5], "../helpers/normalizeText");

  var _normalizeText2 = _interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[6], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    FormInput: {
      displayName: "FormInput"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/form/FormInput.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width;

  var FormInput = _wrapComponent("FormInput")(function (_Component) {
    _inherits(FormInput, _Component);

    function FormInput(props) {
      _classCallCheck(this, FormInput);

      var _this = _possibleConstructorReturn(this, (FormInput.__proto__ || Object.getPrototypeOf(FormInput)).call(this, props));

      _this.getRef = function () {
        return _this.input || _this.refs[_this.props.textInputRef];
      };

      _this.getRefHandler = function () {
        if (_this.props.textInputRef) {
          if (typeof _this.props.textInputRef === 'function') {
            return function (input) {
              _this.input = input;

              _this.props.textInputRef(input);
            };
          } else {
            return _this.props.textInputRef;
          }
        } else {
          return function (input) {
            return _this.input = input;
          };
        }
      };

      _this.shake = _this.shake.bind(_this);
      return _this;
    }

    _createClass(FormInput, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.shakeAnimationValue = new _reactNative.Animated.Value(0);
        this.props.shake && this.shake();
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        nextProps.shake && this.props.shake !== nextProps.shake && this.shake();
      }
    }, {
      key: "focus",
      value: function focus() {
        this.getRef() && this.getRef().focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        this.getRef() && this.getRef().blur();
      }
    }, {
      key: "clearText",
      value: function clearText() {
        this.getRef() && this.getRef().clear();
      }
    }, {
      key: "shake",
      value: function shake() {
        var shakeAnimationValue = this.shakeAnimationValue;
        shakeAnimationValue.setValue(0);

        _reactNative.Animated.timing(shakeAnimationValue, {
          duration: 375,
          toValue: 3,
          ease: _reactNative.Easing.bounce
        }).start();
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            containerStyle = _props.containerStyle,
            inputStyle = _props.inputStyle,
            containerRef = _props.containerRef,
            normalizeFontSize = _props.normalizeFontSize,
            attributes = _objectWithoutProperties(_props, ["containerStyle", "inputStyle", "containerRef", "normalizeFontSize"]);

        var translateX = this.shakeAnimationValue.interpolate({
          inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],
          outputRange: [0, -15, 0, 15, 0, -15, 0]
        });
        return _react3.default.createElement(
          _reactNative.Animated.View,
          {
            ref: containerRef,
            style: [styles.container, containerStyle && containerStyle, {
              transform: [{
                translateX: translateX
              }]
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 87
            }
          },
          _react3.default.createElement(_reactNative.TextInput, _extends({}, attributes, {
            ref: this.getRefHandler(),
            style: [styles.input, {
              fontSize: normalizeFontSize ? (0, _normalizeText2.default)(14) : 14
            }, inputStyle && inputStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 97
            }
          }))
        );
      }
    }]);

    return FormInput;
  }(_react2.Component));

  FormInput.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    inputStyle: _reactNative.Text.propTypes.style,
    textInputRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    containerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    normalizeFontSize: _propTypes2.default.bool,
    shake: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool, _propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  };
  FormInput.defaultProps = {
    normalizeFontSize: true
  };

  var styles = _reactNative.StyleSheet.create({
    container: _extends({
      marginLeft: 15,
      marginRight: 15
    }, _reactNative.Platform.select({
      ios: {
        borderBottomColor: _colors2.default.grey4,
        borderBottomWidth: 1,
        marginLeft: 20,
        marginRight: 20
      }
    })),
    input: _extends({}, _reactNative.Platform.select({
      android: {
        minHeight: 46,
        width: width - 30
      },
      ios: {
        minHeight: 36,
        width: width
      }
    }), {
      color: _colors2.default.grey3
    })
  });

  exports.default = FormInput;
},774,[13,219,25,65,675,678,747],"node_modules/react-native-elements/src/form/FormInput.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/form/FormLabel.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _colors = _require(_dependencyMap[3], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _fonts = _require(_dependencyMap[4], "../config/fonts");

  var _fonts2 = _interopRequireDefault(_fonts);

  var _Text = _require(_dependencyMap[5], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _normalizeText = _require(_dependencyMap[6], "../helpers/normalizeText");

  var _normalizeText2 = _interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[7], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var FormLabel = function FormLabel(props) {
    var containerStyle = props.containerStyle,
        labelStyle = props.labelStyle,
        children = props.children,
        fontFamily = props.fontFamily,
        attributes = _objectWithoutProperties(props, ["containerStyle", "labelStyle", "children", "fontFamily"]);

    return _react2.default.createElement(
      _reactNative.View,
      _extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 19
        }
      }),
      _react2.default.createElement(
        _Text2.default,
        {
          style: [styles.label, labelStyle && labelStyle, fontFamily && {
            fontFamily: fontFamily
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 23
          }
        },
        children
      )
    );
  };

  FormLabel.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    labelStyle: _reactNative.Text.propTypes.style,
    children: _propTypes2.default.any,
    fontFamily: _propTypes2.default.string
  };

  var styles = _reactNative.StyleSheet.create({
    container: {},
    label: _extends({
      marginLeft: 20,
      marginRight: 20,
      marginTop: 15,
      marginBottom: 1,
      color: _colors2.default.grey3,
      fontSize: (0, _normalizeText2.default)(12)
    }, _reactNative.Platform.select({
      ios: {
        fontWeight: 'bold'
      },
      android: _extends({}, _fonts2.default.android.bold)
    }))
  });

  exports.default = FormLabel;
},775,[25,13,65,675,677,676,678,747],"node_modules/react-native-elements/src/form/FormLabel.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/form/FormValidationMessage.js";

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _colors = _require(_dependencyMap[3], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _Text = _require(_dependencyMap[4], "../text/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _normalizeText = _require(_dependencyMap[5], "../helpers/normalizeText");

  var _normalizeText2 = _interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[6], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var FormValidationMessage = function FormValidationMessage(props) {
    var containerStyle = props.containerStyle,
        labelStyle = props.labelStyle,
        children = props.children,
        fontFamily = props.fontFamily,
        attributes = _objectWithoutProperties(props, ["containerStyle", "labelStyle", "children", "fontFamily"]);

    return _react2.default.createElement(
      _reactNative.View,
      _extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 18
        }
      }),
      _react2.default.createElement(
        _Text2.default,
        {
          style: [styles.label, labelStyle && labelStyle, fontFamily && {
            fontFamily: fontFamily
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 22
          }
        },
        children
      )
    );
  };

  FormValidationMessage.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    labelStyle: _reactNative.Text.propTypes.style,
    children: _propTypes2.default.any,
    fontFamily: _propTypes2.default.string
  };

  var styles = _reactNative.StyleSheet.create({
    container: {},
    label: {
      marginLeft: 20,
      marginRight: 20,
      marginTop: 5,
      marginBottom: 1,
      color: _colors2.default.error,
      fontSize: (0, _normalizeText2.default)(12)
    }
  });

  exports.default = FormValidationMessage;
},776,[25,13,65,675,676,678,747],"node_modules/react-native-elements/src/form/FormValidationMessage.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/input/Search.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _MaterialIcons = _require(_dependencyMap[4], "react-native-vector-icons/MaterialIcons");

  var _MaterialIcons2 = _interopRequireDefault(_MaterialIcons);

  var _colors = _require(_dependencyMap[5], "../config/colors");

  var _colors2 = _interopRequireDefault(_colors);

  var _normalizeText = _require(_dependencyMap[6], "../helpers/normalizeText");

  var _normalizeText2 = _interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[7], "../config/ViewPropTypes");

  var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes);

  var _getIconType = _require(_dependencyMap[8], "../helpers/getIconType");

  var _getIconType2 = _interopRequireDefault(_getIconType);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Search: {
      displayName: "Search"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-elements/src/input/Search.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Search = _wrapComponent("Search")(function (_Component) {
    _inherits(Search, _Component);

    function Search() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, Search);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Search.__proto__ || Object.getPrototypeOf(Search)).call.apply(_ref, [this].concat(args))), _this), _this.getRef = function () {
        return _this.input || _this.refs[_this.props.textInputRef];
      }, _this.getRefHandler = function () {
        if (_this.props.textInputRef) {
          if (typeof _this.props.textInputRef === 'function') {
            return function (input) {
              _this.input = input;

              _this.props.textInputRef(input);
            };
          } else {
            return _this.props.textInputRef;
          }
        } else {
          return function (input) {
            return _this.input = input;
          };
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Search, [{
      key: "focus",
      value: function focus() {
        this.getRef() && this.getRef().focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        this.getRef() && this.getRef().blur();
      }
    }, {
      key: "clearText",
      value: function clearText() {
        this.getRef() && this.getRef().clear();
        this.props.onChangeText && this.props.onChangeText('');
        this.props.onClearText && this.props.onClearText();
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            containerStyle = _props.containerStyle,
            inputStyle = _props.inputStyle,
            icon = _props.icon,
            noIcon = _props.noIcon,
            lightTheme = _props.lightTheme,
            round = _props.round,
            showLoadingIcon = _props.showLoadingIcon,
            loadingIcon = _props.loadingIcon,
            clearIcon = _props.clearIcon,
            containerRef = _props.containerRef,
            underlineColorAndroid = _props.underlineColorAndroid,
            attributes = _objectWithoutProperties(_props, ["containerStyle", "inputStyle", "icon", "noIcon", "lightTheme", "round", "showLoadingIcon", "loadingIcon", "clearIcon", "containerRef", "underlineColorAndroid"]);

        var Icon = _MaterialIcons2.default;

        if (icon.type) {
          Icon = (0, _getIconType2.default)(icon.type);
        }

        return _react3.default.createElement(
          _reactNative.View,
          {
            ref: containerRef,
            style: [styles.container, lightTheme && styles.containerLight, containerStyle && containerStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 73
            }
          },
          _react3.default.createElement(_reactNative.TextInput, _extends({}, attributes, {
            ref: this.getRefHandler(),
            underlineColorAndroid: underlineColorAndroid ? underlineColorAndroid : 'transparent',
            style: [styles.input, lightTheme && styles.inputLight, noIcon && {
              paddingLeft: 9
            }, round && {
              borderRadius: _reactNative.Platform.OS === 'ios' ? 15 : 20
            }, inputStyle && inputStyle, clearIcon && showLoadingIcon && {
              paddingRight: 50
            }, (clearIcon && !showLoadingIcon || !clearIcon && showLoadingIcon) && {
              paddingRight: 30
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 81
            }
          })),
          !noIcon && _react3.default.createElement(Icon, {
            size: 16,
            style: [styles.icon, styles.searchIcon, icon.style && icon.style],
            name: icon.name || 'search',
            color: icon.color || _colors2.default.grey3,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 99
            }
          }),
          clearIcon && _react3.default.createElement(Icon, {
            size: 16,
            style: [styles.icon, styles.clearIcon, clearIcon.style && clearIcon.style],
            name: clearIcon.name || 'close',
            onPress: this.clearText.bind(this),
            color: clearIcon.color || _colors2.default.grey3,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 107
            }
          }),
          showLoadingIcon && _react3.default.createElement(_reactNative.ActivityIndicator, {
            style: [styles.loadingIcon, loadingIcon.style && loadingIcon.style, clearIcon && {
              right: 35
            }],
            color: icon.color || _colors2.default.grey3,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 120
            }
          })
        );
      }
    }]);

    return Search;
  }(_react2.Component));

  Search.propTypes = {
    icon: _propTypes2.default.object,
    noIcon: _propTypes2.default.bool,
    lightTheme: _propTypes2.default.bool,
    containerStyle: _ViewPropTypes2.default.style,
    inputStyle: _reactNative.Text.propTypes.style,
    round: _propTypes2.default.bool,
    showLoadingIcon: _propTypes2.default.bool,
    loadingIcon: _propTypes2.default.object,
    clearIcon: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.bool]),
    textInputRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    containerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    underlineColorAndroid: _propTypes2.default.string,
    onChangeText: _propTypes2.default.func,
    onClearText: _propTypes2.default.func
  };
  Search.defaultProps = {
    placeholderTextColor: _colors2.default.grey3,
    lightTheme: false,
    noIcon: false,
    round: false,
    icon: {},
    showLoadingIcon: false,
    loadingIcon: {}
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderBottomColor: '#000',
      borderTopColor: '#000',
      backgroundColor: _colors2.default.grey0
    },
    containerLight: {
      backgroundColor: _colors2.default.grey5,
      borderTopColor: '#e1e1e1',
      borderBottomColor: '#e1e1e1'
    },
    icon: _extends({
      backgroundColor: 'transparent',
      position: 'absolute',
      top: 15.5
    }, _reactNative.Platform.select({
      android: {
        top: 20
      }
    })),
    loadingIcon: _extends({
      backgroundColor: 'transparent',
      position: 'absolute',
      right: 16,
      top: 13
    }, _reactNative.Platform.select({
      android: {
        top: 18
      }
    })),
    input: _extends({
      paddingLeft: 26,
      paddingRight: 19,
      margin: 8,
      borderRadius: 3,
      overflow: 'hidden',
      backgroundColor: _colors2.default.searchBg,
      fontSize: (0, _normalizeText2.default)(14),
      color: _colors2.default.grey3,
      height: 40
    }, _reactNative.Platform.select({
      ios: {
        height: 30
      },
      android: {
        borderWidth: 0
      }
    })),
    inputLight: {
      backgroundColor: _colors2.default.grey4
    },
    searchIcon: {
      left: 16
    },
    clearIcon: {
      right: 16
    }
  });

  exports.default = Search;
},777,[13,219,25,65,679,675,678,747,726],"node_modules/react-native-elements/src/input/Search.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        background-color: white;\n        margin-bottom: 5px;\n        padding: 0 5px;\n        min-height: 260;\n    }\n\n    userContainer {\n        flex: 1;\n        flex-direction: row;\n        align-items: flex-end;\n        margin: 10px 0;\n    }\n    avatar {\n        margin-right: 20;\n\n    }\n    user {\n        vertical-align: middle;\n    }\n\n    title {\n        font-size: 18px;\n        font-weight: bold;\n        padding: 5px;\n    }\n\n    listContainer {\n        flex-direction: row;\n        flex-wrap: wrap;\n    }\n    imgItem {\n        background-color: yellow;\n        height: 100;\n        width: 100;\n        padding: 10px;\n        margin: 10px;\n        margin-left: 0;\n        color: black;\n    }\n    tagItem {\n        min-width: 50;\n        text-align: center;\n        font-size: 13px;\n        background-color: #f1f1f1;\n        padding: 5px;\n        margin-right: 10px;\n        border-radius: 5;\n    }\n\n    price {\n        font-size: 17px;\n        color: red;\n        padding: 5px;\n    }\n"], ["\n    container {\n        background-color: white;\n        margin-bottom: 5px;\n        padding: 0 5px;\n        min-height: 260;\n    }\n\n    userContainer {\n        flex: 1;\n        flex-direction: row;\n        align-items: flex-end;\n        margin: 10px 0;\n    }\n    avatar {\n        margin-right: 20;\n\n    }\n    user {\n        vertical-align: middle;\n    }\n\n    title {\n        font-size: 18px;\n        font-weight: bold;\n        padding: 5px;\n    }\n\n    listContainer {\n        flex-direction: row;\n        flex-wrap: wrap;\n    }\n    imgItem {\n        background-color: yellow;\n        height: 100;\n        width: 100;\n        padding: 10px;\n        margin: 10px;\n        margin-left: 0;\n        color: black;\n    }\n    tagItem {\n        min-width: 50;\n        text-align: center;\n        font-size: 13px;\n        background-color: #f1f1f1;\n        padding: 5px;\n        margin-right: 10px;\n        border-radius: 5;\n    }\n\n    price {\n        font-size: 17px;\n        color: red;\n        padding: 5px;\n    }\n"]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject);
    exports.default = styles;
},778,[601],"src/component/common/card/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        background-color: #f1f1f1;\n    }\n    "], ["\n    container {\n        background-color: #f1f1f1;\n    }\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject);
    exports.default = styles;
},779,[601],"src/screen/home/product-list/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/sell-list/sell-list-container.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactRedux = _require(_dependencyMap[1], "react-redux");

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _sellList = _require(_dependencyMap[3], "./sell-list");

    var _sellList2 = _interopRequireDefault(_sellList);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Container = function Container(props) {
        return _react2.default.createElement(_sellList2.default, _extends({}, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 6
            }
        }));
    };

    Container.propTypes = {
        products: _propTypes2.default.arrayOf(_propTypes2.default.object)
    };
    Container.defaultProps = {
        products: [{}]
    };

    var stateToProps = function stateToProps(state, ownProps) {
        return {
            products: state.product.products,
            navigator: ownProps.propsNavigatorObject
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var SellListContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = SellListContainer;
},780,[13,23,25,781],"src/screen/home/sell-list/sell-list-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/sell-list/sell-list.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _styles = _require(_dependencyMap[2], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    var _productListContainer = _require(_dependencyMap[3], "../product-list/product-list-container");

    var _productListContainer2 = _interopRequireDefault(_productListContainer);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var SellList = function SellList(_ref) {
        var products = _ref.products,
            navigator = _ref.navigator;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 8
                }
            },
            _react2.default.createElement(_productListContainer2.default, {
                products: products,
                propsNavigatorObject: navigator,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 9
                }
            })
        );
    };

    SellList.propTypes = {};
    SellList.defaultProps = {};
    exports.default = SellList;
},781,[13,65,782,665],"src/screen/home/sell-list/sell-list.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        background-color: #f1f1f1;\n    }\n    "], ["\n    container {\n        background-color: #f1f1f1;\n    }\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject);
    exports.default = styles;
},782,[601],"src/screen/home/sell-list/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/daigou-list/daigou-list-container.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactRedux = _require(_dependencyMap[1], "react-redux");

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _daigouList = _require(_dependencyMap[3], "./daigou-list");

    var _daigouList2 = _interopRequireDefault(_daigouList);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Container = function Container(props) {
        return _react2.default.createElement(_daigouList2.default, _extends({}, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 6
            }
        }));
    };

    Container.propTypes = {
        productItem: _propTypes2.default.arrayOf(_propTypes2.default.object)
    };
    Container.defaultProps = {
        productItem: [{}]
    };

    var stateToProps = function stateToProps(state) {
        return {
            productItem: state.product.products
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var DaigouListContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = DaigouListContainer;
},783,[13,23,25,784],"src/screen/home/daigou-list/daigou-list-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/daigou-list/daigou-list.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _styles = _require(_dependencyMap[2], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var DaigouList = function DaigouList() {
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 6
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 7
                    }
                },
                "I am daigou tab"
            )
        );
    };

    DaigouList.propTypes = {};
    DaigouList.defaultProps = {};
    exports.default = DaigouList;
},784,[13,65,785],"src/screen/home/daigou-list/daigou-list.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";
},785,[],"src/screen/home/daigou-list/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/home/screen-home.js";

    var _react = _require(_dependencyMap[0], "react");

    var React = _interopRequireWildcard(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNativeTabView = _require(_dependencyMap[2], "react-native-tab-view");

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

    var initialLayout = {
        height: 0,
        width: _reactNative.Dimensions.get('window').width
    };

    var ScreenHome = function ScreenHome(_ref) {
        var tabRounter = _ref.tabRounter,
            scene = _ref.scene,
            tabHeader = _ref.tabHeader,
            indexChange = _ref.indexChange;
        return React.createElement(_reactNativeTabView.TabViewAnimated, {
            navigationState: tabRounter,
            renderScene: scene,
            renderHeader: tabHeader,
            onIndexChange: indexChange,
            initialLayout: initialLayout,
            __source: {
                fileName: _jsxFileName,
                lineNumber: 11
            }
        });
    };

    exports.default = ScreenHome;
},786,[13,65,588],"src/screen/home/screen-home.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        background-color: #f1f1f1;\n    }\n    slider: {\n        flex: 1;\n        justify-content: center;\n        align-items: center;\n        background-color: #92BBD9;\n    }\n    wrapper: {\n\n    }\n\n    text: {\n        color: #fff,\n        font-size: 30,\n        font-weight: bold,\n    }\n\n    tabBar: {\n        background-color: white;\n        color: black;\n    }\n\n    indicator: {\n        background-color: white;\n    }\n\n    "], ["\n    container {\n        background-color: #f1f1f1;\n    }\n    slider: {\n        flex: 1;\n        justify-content: center;\n        align-items: center;\n        background-color: #92BBD9;\n    }\n    wrapper: {\n\n    }\n\n    text: {\n        color: #fff,\n        font-size: 30,\n        font-weight: bold,\n    }\n\n    tabBar: {\n        background-color: white;\n        color: black;\n    }\n\n    indicator: {\n        background-color: white;\n    }\n\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject);
    exports.default = styles;
},787,[601],"src/screen/home/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/profile/screen-profile-container.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _reactRedux = _require(_dependencyMap[1], "react-redux");

  var _screenProfile = _require(_dependencyMap[2], "./screen-profile");

  var _screenProfile2 = _interopRequireDefault(_screenProfile);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var Container = function Container(props) {
    return _react2.default.createElement(_screenProfile2.default, _extends({}, props, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 5
      }
    }));
  };

  var stateToProps = function stateToProps() {
    return {};
  };

  var dispatchToProps = function dispatchToProps() {
    return {};
  };

  var ScreenProfileContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
  exports.default = ScreenProfileContainer;
},788,[13,23,789],"src/screen/profile/screen-profile-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/profile/screen-profile.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var ScreenProfile = function ScreenProfile() {
        return _react2.default.createElement(
            _reactNative.View,
            {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 5
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 6
                    }
                },
                "Profile Screen"
            )
        );
    };

    exports.default = ScreenProfile;
},789,[13,65],"src/screen/profile/screen-profile.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/components/modal/modal.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _styles = _require(_dependencyMap[2], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Modale = function Modale(_ref) {
        var dismissModal = _ref.dismissModal;
        return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
                style: [_styles2.default.buttonContainer],
                onPress: function onPress() {
                    return dismissModal();
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 6
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                {
                    style: _styles2.default.closeModalButton,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 10
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        style: _styles2.default.buttonText,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 11
                        }
                    },
                    "Modale"
                )
            )
        );
    };

    exports.default = Modale;
},790,[13,65,791],"src/screen/components/modal/modal.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _reactNative = _require(_dependencyMap[0], "react-native");

    var styles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center',
            backgroundColor: '#ffffff'
        },
        button: {
            marginTop: 16
        },
        buttonContainer: {
            width: 48,
            height: 48,
            justifyContent: 'center',
            alignItems: 'center'
        },
        closeModalButton: {
            backgroundColor: 'tomato',
            width: 50,
            height: 25,
            borderRadius: 2,
            overflow: 'hidden',
            justifyContent: 'center',
            alignItems: 'center'
        },
        buttonText: {
            color: 'white'
        }
    });

    exports.default = styles;
},791,[65],"src/screen/components/modal/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/components/light-box/light-box-container.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactRedux = _require(_dependencyMap[2], "react-redux");

    var _lightBox = _require(_dependencyMap[3], "./light-box");

    var _lightBox2 = _interopRequireDefault(_lightBox);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Container: {
            displayName: "Container"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/hayden/Applications/HelloWorldProject/src/screen/components/light-box/light-box-container.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var Container = _wrapComponent("Container")(function (_Component) {
        _inherits(Container, _Component);

        function Container(props) {
            _classCallCheck(this, Container);

            var _this = _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props));

            _this.onClose = _this.onClose.bind(_this);
            return _this;
        }

        _createClass(Container, [{
            key: "onClose",
            value: function onClose() {
                this.props.navigator.dismissLightBox();
            }
        }, {
            key: "render",
            value: function render() {
                return _react3.default.createElement(_lightBox2.default, _extends({}, this.props, {
                    onClose: this.onClose,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 16
                    }
                }));
            }
        }]);

        return Container;
    }(_react2.Component));

    var stateToProps = function stateToProps() {
        return {};
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var LightBoxContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = LightBoxContainer;
},792,[13,219,23,793],"src/screen/components/light-box/light-box-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/components/light-box/light-box.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _styles = _require(_dependencyMap[2], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var LightBox = function LightBox(_ref) {
        var title = _ref.title,
            content = _ref.content,
            onClose = _ref.onClose;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 6
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                {
                    style: {
                        flex: 8
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 7
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        style: _styles2.default.title,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 8
                        }
                    },
                    title
                ),
                content.map(function (item) {
                    return _react2.default.createElement(
                        _reactNative.Text,
                        {
                            key: item,
                            style: _styles2.default.content,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 10
                            }
                        },
                        item
                    );
                })
            ),
            _react2.default.createElement(
                _reactNative.View,
                {
                    style: {
                        flex: 1
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 15
                    }
                },
                _react2.default.createElement(_reactNative.Button, {
                    title: "Close",
                    onPress: function onPress() {
                        return onClose();
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 16
                    }
                })
            )
        );
    };

    exports.default = LightBox;
},793,[13,65,794],"src/screen/components/light-box/light-box.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _reactNative = _require(_dependencyMap[0], "react-native");

    var styles = _reactNative.StyleSheet.create({
        container: {
            width: _reactNative.Dimensions.get('window').width * 0.7,
            height: _reactNative.Dimensions.get('window').height * 0.7,
            backgroundColor: 'white',
            borderRadius: 5,
            padding: 16
        },
        title: {
            fontSize: 17,
            fontWeight: '700'
        },
        content: {
            marginTop: 5
        }
    });

    exports.default = styles;
},794,[65],"src/screen/components/light-box/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/footer/tabs/square-tab.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var SquareTab = function SquareTab() {
        return _react2.default.createElement(
            _reactNative.View,
            {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 5
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 6
                    }
                },
                "\u5E7F\u573A"
            )
        );
    };

    exports.default = SquareTab;
},795,[13,65],"src/screen/footer/tabs/square-tab.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/footer/tabs/home-tab.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var HomeTab = function HomeTab() {
        return _react2.default.createElement(
            _reactNative.View,
            {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 5
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 6
                    }
                },
                "\u9996\u9875"
            )
        );
    };

    exports.default = HomeTab;
},796,[13,65],"src/screen/footer/tabs/home-tab.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/footer/tabs/message-tab.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var MessageTab = function MessageTab() {
        return _react2.default.createElement(
            _reactNative.View,
            {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 5
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 6
                    }
                },
                "\u6D88\u606F"
            )
        );
    };

    exports.default = MessageTab;
},797,[13,65],"src/screen/footer/tabs/message-tab.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/footer/tabs/profile-tab.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var ProfileTab = function ProfileTab() {
        return _react2.default.createElement(
            _reactNative.View,
            {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 5
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 6
                    }
                },
                "\u4ED6\u7684"
            )
        );
    };

    exports.default = ProfileTab;
},798,[13,65],"src/screen/footer/tabs/profile-tab.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-detail/product-detail-container.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactRedux = _require(_dependencyMap[2], "react-redux");

    var _propTypes = _require(_dependencyMap[3], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _productDetail = _require(_dependencyMap[4], "./product-detail");

    var _productDetail2 = _interopRequireDefault(_productDetail);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Container: {
            displayName: "Container"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-detail/product-detail-container.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var Container = _wrapComponent("Container")(function (_Component) {
        _inherits(Container, _Component);

        _createClass(Container, null, [{
            key: "navigatorStyle",
            get: function get() {
                return {
                    navBarTranslucent: true,
                    tabBarHidden: true,
                    drawUnderTabBar: true,
                    navBarButtonColor: '#123456',
                    navBarTextColor: '#000000',
                    collapsingToolBarCollapsedColor: '#0f2362',
                    navBarBackgroundColor: '#ffffff',
                    navBarCustomView: 'screen.Product.Detail.TabBar',
                    navBarComponentAlignment: 'center'
                };
            }
        }]);

        function Container(props) {
            _classCallCheck(this, Container);

            var _this = _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props));

            _this.productOrderCallback = _this.productOrderCallback.bind(_this);
            return _this;
        }

        _createClass(Container, [{
            key: "productOrderCallback",
            value: function productOrderCallback() {
                this.props.navigator.push({
                    screen: 'screen.Product.Order',
                    animationType: 'slide-up',
                    title: 'test title',
                    backButtonTitle: ''
                });
            }
        }, {
            key: "render",
            value: function render() {
                return _react3.default.createElement(_productDetail2.default, _extends({}, this.props, {
                    productOrderCallback: this.productOrderCallback,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 35
                    }
                }));
            }
        }]);

        return Container;
    }(_react2.Component));

    Container.propTypes = {
        productTitle: _propTypes2.default.string,
        navigator: _propTypes2.default.objectOf(_propTypes2.default.any)
    };
    Container.defaultProps = {
        productTitle: 'Product Detail Home',
        navigator: {}
    };

    var stateToProps = function stateToProps(state) {
        return {
            productTitle: state.product.product.title,
            product: state.product.products
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var ProductDetailContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = ProductDetailContainer;
},799,[13,219,23,25,800],"src/screen/product/product-detail/product-detail-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-detail/product-detail.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _titleCardContainer = _require(_dependencyMap[3], "./title-card/title-card-container");

    var _titleCardContainer2 = _interopRequireDefault(_titleCardContainer);

    var _detailCardContainer = _require(_dependencyMap[4], "./detail-card/detail-card-container");

    var _detailCardContainer2 = _interopRequireDefault(_detailCardContainer);

    var _buyButtonContainer = _require(_dependencyMap[5], "./buy-button/buy-button-container");

    var _buyButtonContainer2 = _interopRequireDefault(_buyButtonContainer);

    var _styles = _require(_dependencyMap[6], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var ProductDetail = function ProductDetail(_ref) {
        var productOrderCallback = _ref.productOrderCallback;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 10
                }
            },
            _react2.default.createElement(
                _reactNative.ScrollView,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 11
                    }
                },
                _react2.default.createElement(_titleCardContainer2.default, {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 12
                    }
                }),
                _react2.default.createElement(_detailCardContainer2.default, {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 13
                    }
                })
            ),
            _react2.default.createElement(_buyButtonContainer2.default, {
                productOrderCallback: productOrderCallback,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 15
                }
            })
        );
    };

    ProductDetail.propTypes = {
        productOrderCallback: _propTypes2.default.func
    };
    ProductDetail.defaultProps = {
        productOrderCallback: function productOrderCallback() {}
    };
    exports.default = ProductDetail;
},800,[13,65,25,801,804,807,810],"src/screen/product/product-detail/product-detail.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-detail/title-card/title-card-container.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactRedux = _require(_dependencyMap[1], "react-redux");

    var _titleCard = _require(_dependencyMap[2], "./title-card");

    var _titleCard2 = _interopRequireDefault(_titleCard);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Container = function Container(props) {
        return _react2.default.createElement(_titleCard2.default, _extends({}, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 5
            }
        }));
    };

    var stateToProps = function stateToProps(state) {
        return {
            productTitle: state.product.product.title,
            price: state.product.product.price
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var TitleCardContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = TitleCardContainer;
},801,[13,23,802],"src/screen/product/product-detail/title-card/title-card-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-detail/title-card/title-card.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _reactNativeElements = _require(_dependencyMap[2], "react-native-elements");

    var _propTypes = _require(_dependencyMap[3], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _styles = _require(_dependencyMap[4], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var TitleCard = function TitleCard(_ref) {
        var productTitle = _ref.productTitle,
            price = _ref.price;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 8
                }
            },
            _react2.default.createElement(
                _reactNativeElements.Text,
                {
                    h4: true,
                    style: _styles2.default.title,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 9
                    }
                },
                productTitle
            ),
            _react2.default.createElement(
                _reactNativeElements.Text,
                {
                    style: _styles2.default.price,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 12
                    }
                },
                price
            )
        );
    };

    TitleCard.propTypes = {
        productTitle: _propTypes2.default.string,
        price: _propTypes2.default.string
    };
    TitleCard.defaultProps = {
        productTitle: 'default product title',
        price: '0.00'
    };
    exports.default = TitleCard;
},802,[13,65,673,25,803],"src/screen/product/product-detail/title-card/title-card.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        background-color: white;\n        padding: 10px;\n        height: 100px;\n        margin-bottom: 5px;\n    }\n    title {\n        margin-bottom: 10px;\n    }\n\n    price {\n        color: red;\n        font-size: 20px;\n    }\n    "], ["\n    container {\n        background-color: white;\n        padding: 10px;\n        height: 100px;\n        margin-bottom: 5px;\n    }\n    title {\n        margin-bottom: 10px;\n    }\n\n    price {\n        color: red;\n        font-size: 20px;\n    }\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject);
    exports.default = styles;
},803,[601],"src/screen/product/product-detail/title-card/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-detail/detail-card/detail-card-container.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactRedux = _require(_dependencyMap[1], "react-redux");

    var _detailCard = _require(_dependencyMap[2], "./detail-card");

    var _detailCard2 = _interopRequireDefault(_detailCard);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Container = function Container(props) {
        return _react2.default.createElement(_detailCard2.default, _extends({}, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 5
            }
        }));
    };

    var stateToProps = function stateToProps(state) {
        return {
            productDescription: state.product.product.productDescription
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var DetailCardContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = DetailCardContainer;
},804,[13,23,805],"src/screen/product/product-detail/detail-card/detail-card-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-detail/detail-card/detail-card.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNativeElements = _require(_dependencyMap[3], "react-native-elements");

    var _styles = _require(_dependencyMap[4], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var DetailCard = function DetailCard(_ref) {
        var productDescription = _ref.productDescription;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 8
                }
            },
            _react2.default.createElement(
                _reactNativeElements.Text,
                {
                    style: _styles2.default.title,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 9
                    }
                },
                "\u5546\u54C1\u8BE6\u60C5"
            ),
            _react2.default.createElement(
                _reactNativeElements.Text,
                {
                    style: _styles2.default.content,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 10
                    }
                },
                productDescription
            )
        );
    };

    DetailCard.propTypes = {
        productDescription: _propTypes2.default.string
    };
    DetailCard.defaultProps = {
        productDescription: 'default description'
    };
    exports.default = DetailCard;
},805,[13,65,25,673,806],"src/screen/product/product-detail/detail-card/detail-card.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        background-color: white;\n        padding: 10px;\n    }\n    title {\n        font-size: 18px;\n        font-weight: bold;\n        margin-bottom: 10px;\n    }\n    content {\n        font-size: 15px;\n        line-height: 20px;\n    }\n    "], ["\n    container {\n        background-color: white;\n        padding: 10px;\n    }\n    title {\n        font-size: 18px;\n        font-weight: bold;\n        margin-bottom: 10px;\n    }\n    content {\n        font-size: 15px;\n        line-height: 20px;\n    }\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject);
    exports.default = styles;
},806,[601],"src/screen/product/product-detail/detail-card/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-detail/buy-button/buy-button-container.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactRedux = _require(_dependencyMap[1], "react-redux");

    var _buyButton = _require(_dependencyMap[2], "./buy-button");

    var _buyButton2 = _interopRequireDefault(_buyButton);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Container = function Container(props) {
        return _react2.default.createElement(_buyButton2.default, _extends({}, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 5
            }
        }));
    };

    var stateToProps = function stateToProps(state) {
        return {
            productDescription: state.product.product.productDescription
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var BuyButtonContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = BuyButtonContainer;
},807,[13,23,808],"src/screen/product/product-detail/buy-button/buy-button-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-detail/buy-button/buy-button.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _styles = _require(_dependencyMap[3], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var BuyButton = function BuyButton(_ref) {
        var productOrderCallback = _ref.productOrderCallback;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 7
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                {
                    style: _styles2.default.userContainer,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 8
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 9
                        }
                    },
                    "\u7528\u6237\u540D"
                )
            ),
            _react2.default.createElement(
                _reactNative.View,
                {
                    style: _styles2.default.buyButtonContainer,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 11
                    }
                },
                _react2.default.createElement(_reactNative.Button, {
                    title: "\u9A6C\u4E0A\u4E70",
                    color: "white",
                    style: _styles2.default.buyButton,
                    onPress: function onPress() {
                        return productOrderCallback();
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 12
                    }
                })
            )
        );
    };

    BuyButton.propTypes = {
        productOrderCallback: _propTypes2.default.func
    };
    BuyButton.defaultProps = {
        productOrderCallback: function productOrderCallback() {}
    };
    exports.default = BuyButton;
},808,[13,65,25,809],"src/screen/product/product-detail/buy-button/buy-button.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        flex-direction: row;\n        background-color: white;\n        padding: 10px;\n        width: ", "\n        align-items: flex-end;\n        height: ", "\n    }\n\n    userContainer {\n        flex: 1;\n    }\n\n    buyButtonContainer {\n        background-color: red;\n        flex: 1;\n        max-width: 100;\n        border-width: 0;\n        border-radius: 5;\n    }\n    "], ["\n    container {\n        flex-direction: row;\n        background-color: white;\n        padding: 10px;\n        width: ", "\n        align-items: flex-end;\n        height: ", "\n    }\n\n    userContainer {\n        flex: 1;\n    }\n\n    buyButtonContainer {\n        background-color: red;\n        flex: 1;\n        max-width: 100;\n        border-width: 0;\n        border-radius: 5;\n    }\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject, _reactNative.Dimensions.get('window').width, _reactNative.Dimensions.get('window').height * 0.08);
    exports.default = styles;
},809,[601,65],"src/screen/product/product-detail/buy-button/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        flex: 1;\n        background-color: #f1f1f1;\n        height: ", "\n    }\n    "], ["\n    container {\n        flex: 1;\n        background-color: #f1f1f1;\n        height: ", "\n    }\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject, _reactNative.Dimensions.get('window').height);
    exports.default = styles;
},810,[601,65],"src/screen/product/product-detail/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-detail/tab-bar/tab-bar-container.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactRedux = _require(_dependencyMap[1], "react-redux");

    var _tabBar = _require(_dependencyMap[2], "./tab-bar");

    var _tabBar2 = _interopRequireDefault(_tabBar);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Container = function Container(props) {
        return _react2.default.createElement(_tabBar2.default, _extends({}, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 5
            }
        }));
    };

    var stateToProps = function stateToProps(state) {
        return {
            productTitle: state.product.product.title
        };
    };

    var ProductDetailTabBarContainer = (0, _reactRedux.connect)(stateToProps)(Container);
    exports.default = ProductDetailTabBarContainer;
},811,[13,23,812],"src/screen/product/product-detail/tab-bar/tab-bar-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-detail/tab-bar/tab-bar.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _styles = _require(_dependencyMap[3], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var ProductTabBar = function ProductTabBar(_ref) {
        var productTitle = _ref.productTitle;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 7
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                {
                    style: _styles2.default.text,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 8
                    }
                },
                productTitle
            )
        );
    };

    ProductTabBar.propTypes = {
        productTitle: _propTypes2.default.string
    };
    ProductTabBar.defaultProps = {
        productTitle: 'test title'
    };
    exports.default = ProductTabBar;
},812,[13,25,65,813],"src/screen/product/product-detail/tab-bar/tab-bar.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        background-color: #ffffff;\n    }\n    "], ["\n    container {\n        background-color: #ffffff;\n    }\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject);
    exports.default = styles;
},813,[601],"src/screen/product/product-detail/tab-bar/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-order/product-order-container.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactRedux = _require(_dependencyMap[2], "react-redux");

    var _propTypes = _require(_dependencyMap[3], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _productOrder = _require(_dependencyMap[4], "./product-order");

    var _productOrder2 = _interopRequireDefault(_productOrder);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Container: {
            displayName: "Container"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-order/product-order-container.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var Container = _wrapComponent("Container")(function (_Component) {
        _inherits(Container, _Component);

        function Container() {
            _classCallCheck(this, Container);

            return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
        }

        _createClass(Container, [{
            key: "render",
            value: function render() {
                return _react3.default.createElement(_productOrder2.default, _extends({}, this.props, {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 22
                    }
                }));
            }
        }], [{
            key: "navigatorStyle",
            get: function get() {
                return {
                    navBarTranslucent: true,
                    tabBarHidden: true,
                    drawUnderTabBar: true,
                    navBarButtonColor: '#123456',
                    navBarTextColor: '#000000',
                    collapsingToolBarCollapsedColor: '#0f2362',
                    navBarBackgroundColor: '#ffffff',
                    navBarCustomView: 'screen.Product.Detail.TabBar',
                    navBarComponentAlignment: 'center'
                };
            }
        }]);

        return Container;
    }(_react2.Component));

    Container.propTypes = {
        productTitle: _propTypes2.default.string
    };
    Container.defaultProps = {
        productTitle: 'Product Detail Home'
    };

    var stateToProps = function stateToProps(state) {
        return {
            productTitle: state.product.product.title,
            product: state.product.products
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var ProductOrderContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = ProductOrderContainer;
},814,[13,219,23,25,815],"src/screen/product/product-order/product-order-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-order/product-order.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _confirmButtonContainer = _require(_dependencyMap[3], "./confirm-button/confirm-button-container");

    var _confirmButtonContainer2 = _interopRequireDefault(_confirmButtonContainer);

    var _styles = _require(_dependencyMap[4], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var ProductOrder = function ProductOrder(_ref) {
        var productTitle = _ref.productTitle;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 8
                }
            },
            _react2.default.createElement(
                _reactNative.ScrollView,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 9
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 10
                        }
                    },
                    productTitle
                )
            ),
            _react2.default.createElement(_confirmButtonContainer2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 12
                }
            })
        );
    };

    ProductOrder.propTypes = {
        productTitle: _propTypes2.default.string
    };
    ProductOrder.defaultProps = {
        productTitle: 'default title'
    };
    exports.default = ProductOrder;
},815,[13,65,25,816,819],"src/screen/product/product-order/product-order.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-order/confirm-button/confirm-button-container.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactRedux = _require(_dependencyMap[1], "react-redux");

    var _confirmButton = _require(_dependencyMap[2], "./confirm-button");

    var _confirmButton2 = _interopRequireDefault(_confirmButton);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Container = function Container(props) {
        return _react2.default.createElement(_confirmButton2.default, _extends({}, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 5
            }
        }));
    };

    var stateToProps = function stateToProps(state) {
        return {
            price: state.product.product.price
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var ConfirmButtonContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = ConfirmButtonContainer;
},816,[13,23,817],"src/screen/product/product-order/confirm-button/confirm-button-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/product/product-order/confirm-button/confirm-button.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _propTypes = _require(_dependencyMap[1], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _styles = _require(_dependencyMap[3], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var ConfirmButton = function ConfirmButton(_ref) {
        var price = _ref.price;
        return _react2.default.createElement(
            _reactNative.View,
            {
                style: _styles2.default.container,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 7
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                {
                    style: _styles2.default.priceContainer,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 8
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 9
                        }
                    },
                    price
                )
            ),
            _react2.default.createElement(
                _reactNative.View,
                {
                    style: _styles2.default.confirmButtonContainer,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 11
                    }
                },
                _react2.default.createElement(_reactNative.Button, {
                    title: "\u786E\u8BA4\u4E0B\u5355",
                    color: "white",
                    onPress: function onPress() {},
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 12
                    }
                })
            )
        );
    };

    ConfirmButton.propTypes = {
        price: _propTypes2.default.string
    };
    ConfirmButton.defaultProps = {
        price: '100'
    };
    exports.default = ConfirmButton;
},817,[13,25,65,818],"src/screen/product/product-order/confirm-button/confirm-button.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        flex-direction: row;\n        background-color: white;\n        padding: 10px;\n        width: ", "\n        align-items: flex-end;\n        height: ", "\n    }\n\n    priceContainer {\n        flex: 1;\n    }\n\n    confirmButtonContainer {\n        background-color: red;\n        flex: 1;\n        max-width: 100;\n        border-width: 0;\n        border-radius: 5;\n    }\n    "], ["\n    container {\n        flex-direction: row;\n        background-color: white;\n        padding: 10px;\n        width: ", "\n        align-items: flex-end;\n        height: ", "\n    }\n\n    priceContainer {\n        flex: 1;\n    }\n\n    confirmButtonContainer {\n        background-color: red;\n        flex: 1;\n        max-width: 100;\n        border-width: 0;\n        border-radius: 5;\n    }\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject, _reactNative.Dimensions.get('window').width, _reactNative.Dimensions.get('window').height * 0.08);
    exports.default = styles;
},818,[601,65],"src/screen/product/product-order/confirm-button/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _templateObject = _taggedTemplateLiteral(["\n    container {\n        flex: 1;\n        background-color: #f1f1f1;\n        height: ", "\n    }\n    "], ["\n    container {\n        flex: 1;\n        background-color: #f1f1f1;\n        height: ", "\n    }\n    "]);

    var _reactNativeCss = _require(_dependencyMap[0], "react-native-css");

    var _reactNativeCss2 = _interopRequireDefault(_reactNativeCss);

    var _reactNative = _require(_dependencyMap[1], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

    var styles = (0, _reactNativeCss2.default)(_templateObject, _reactNative.Dimensions.get('window').height);
    exports.default = styles;
},819,[601,65],"src/screen/product/product-order/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/square/square-container.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactRedux = _require(_dependencyMap[2], "react-redux");

    var _propTypes = _require(_dependencyMap[3], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _square = _require(_dependencyMap[4], "./square");

    var _square2 = _interopRequireDefault(_square);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Container: {
            displayName: "Container"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/hayden/Applications/HelloWorldProject/src/screen/square/square-container.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var homeTitle = '';
    var homeNavigator = void 0;

    var Container = _wrapComponent("Container")(function (_Component) {
        _inherits(Container, _Component);

        function Container(props) {
            _classCallCheck(this, Container);

            var _this = _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props));

            homeTitle = _this.props.homeTitle;
            homeNavigator = _this.props.navigator;
            return _this;
        }

        _createClass(Container, [{
            key: "render",
            value: function render() {
                return _react3.default.createElement(_square2.default, _extends({}, this.props, {
                    propsNavigatorObject: this.props.navigator,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 28
                    }
                }));
            }
        }], [{
            key: "navigatorStyle",
            get: function get() {
                return {
                    navBarCustomView: 'screen.Home.TopBar',
                    navBarComponentAlignment: 'center',
                    navBarCustomViewInitialProps: {
                        title: homeTitle,
                        navigator: homeNavigator
                    }
                };
            }
        }]);

        return Container;
    }(_react2.Component));

    Container.propTypes = {
        homeTitle: _propTypes2.default.string,
        navigator: _propTypes2.default.objectOf(_propTypes2.default.any)
    };
    Container.defaultProps = {
        homeTitle: 'Default Home',
        navigator: {}
    };

    var stateToProps = function stateToProps(state) {
        return {
            homeTitle: state.home.homeTitle
        };
    };

    var dispatchToProps = function dispatchToProps() {
        return {};
    };

    var SquareContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = SquareContainer;
},820,[13,219,23,25,821],"src/screen/square/square-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/square/square.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _chatContainer = _require(_dependencyMap[1], "./chat/chat-container");

  var _chatContainer2 = _interopRequireDefault(_chatContainer);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var Square = function Square() {
    return _react2.default.createElement(_chatContainer2.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 4
      }
    });
  };

  exports.default = Square;
},821,[13,822],"src/screen/square/square.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/square/chat/chat-container.js";

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _reactRedux = _require(_dependencyMap[1], "react-redux");

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNativeGiftedChat = _require(_dependencyMap[3], "react-native-gifted-chat");

    var _reactNative = _require(_dependencyMap[4], "react-native");

    var _actions = _require(_dependencyMap[5], "../../../state/screen/square/actions");

    var _customActions = _require(_dependencyMap[6], "./customActions");

    var _customActions2 = _interopRequireDefault(_customActions);

    var _customView = _require(_dependencyMap[7], "./customView");

    var _customView2 = _interopRequireDefault(_customView);

    var _chat = _require(_dependencyMap[8], "./chat");

    var _chat2 = _interopRequireDefault(_chat);

    var _styles = _require(_dependencyMap[9], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    var Container = function Container(props) {
        return _react2.default.createElement(_chat2.default, _extends({}, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 17
            }
        }));
    };

    Container.propTypes = {
        messages: _propTypes2.default.arrayOf(_propTypes2.default.object),
        old_messages: _propTypes2.default.arrayOf(_propTypes2.default.object)
    };
    Container.defaultProps = {
        messages: [{}],
        old_messages: [{}]
    };

    var stateToProps = function stateToProps(state) {
        return {
            messages: state.square.messages,
            old_messages: state.square.old_messages,
            loadEarlier: state.square.loadEarlier,
            typingText: state.square.typingText,
            isLoadingEarlier: state.square.isLoadingEarlier
        };
    };

    var dispatchToProps = function dispatchToProps(dispatch) {
        return {
            sendMessage: function sendMessage(messages) {
                return dispatch((0, _actions.sendMessageAction)(messages));
            },
            receiveMessage: function receiveMessage(messages) {
                return dispatch((0, _actions.receiveMessageAction)(messages));
            },
            loadOldMessageRequest: function loadOldMessageRequest() {
                return dispatch((0, _actions.loadOldMessageRequestAction)());
            },
            loadOldMessageSuccess: function loadOldMessageSuccess(messages) {
                return dispatch((0, _actions.loadOldMessageSuccessAction)(messages));
            }
        };
    };

    var ChatContainer = (0, _reactRedux.connect)(stateToProps, dispatchToProps)(Container);
    exports.default = ChatContainer;
},822,[13,23,25,540,65,582,823,834,848,849],"src/screen/square/chat/chat-container.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/square/chat/customActions.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _reactNativeCameraRollPicker = _require(_dependencyMap[4], "react-native-camera-roll-picker");

    var _reactNativeCameraRollPicker2 = _interopRequireDefault(_reactNativeCameraRollPicker);

    var _reactNativeNav = _require(_dependencyMap[5], "react-native-nav");

    var _reactNativeNav2 = _interopRequireDefault(_reactNativeNav);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        CustomActions: {
            displayName: "CustomActions"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/hayden/Applications/HelloWorldProject/src/screen/square/chat/customActions.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var CustomActions = _wrapComponent("CustomActions")(function (_React$Component) {
        _inherits(CustomActions, _React$Component);

        function CustomActions(props) {
            _classCallCheck(this, CustomActions);

            var _this = _possibleConstructorReturn(this, (CustomActions.__proto__ || Object.getPrototypeOf(CustomActions)).call(this, props));

            _this._images = [];
            _this.state = {
                modalVisible: false
            };
            _this.onActionsPress = _this.onActionsPress.bind(_this);
            _this.selectImages = _this.selectImages.bind(_this);
            return _this;
        }

        _createClass(CustomActions, [{
            key: "setImages",
            value: function setImages(images) {
                this._images = images;
            }
        }, {
            key: "getImages",
            value: function getImages() {
                return this._images;
            }
        }, {
            key: "setModalVisible",
            value: function setModalVisible() {
                var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                this.setState({
                    modalVisible: visible
                });
            }
        }, {
            key: "onActionsPress",
            value: function onActionsPress() {
                var _this2 = this;

                var options = ['Choose From Library', 'Send Location', 'Cancel'];
                var cancelButtonIndex = options.length - 1;
                this.context.actionSheet().showActionSheetWithOptions({
                    options: options,
                    cancelButtonIndex: cancelButtonIndex
                }, function (buttonIndex) {
                    switch (buttonIndex) {
                        case 0:
                            _this2.setModalVisible(true);

                            break;

                        case 1:
                            navigator.geolocation.getCurrentPosition(function (position) {
                                _this2.props.onSend({
                                    location: {
                                        latitude: position.coords.latitude,
                                        longitude: position.coords.longitude
                                    }
                                });
                            }, function (error) {
                                return alert(error.message);
                            }, {
                                enableHighAccuracy: true,
                                timeout: 20000,
                                maximumAge: 1000
                            });
                            break;

                        default:}
                });
            }
        }, {
            key: "selectImages",
            value: function selectImages(images) {
                this.setImages(images);
            }
        }, {
            key: "renderNavBar",
            value: function renderNavBar() {
                var _this3 = this;

                return _react3.default.createElement(
                    _reactNativeNav2.default,
                    {
                        style: {
                            statusBar: {
                                backgroundColor: '#FFF'
                            },
                            navBar: {
                                backgroundColor: '#FFF'
                            }
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 70
                        }
                    },
                    _react3.default.createElement(
                        _reactNativeNav.NavButton,
                        {
                            onPress: function onPress() {
                                _this3.setModalVisible(false);
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 80
                            }
                        },
                        _react3.default.createElement(
                            _reactNativeNav.NavButtonText,
                            {
                                style: {
                                    color: '#000'
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 85
                                }
                            },
                            'Cancel'
                        )
                    ),
                    _react3.default.createElement(
                        _reactNativeNav.NavTitle,
                        {
                            style: {
                                color: '#000'
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 93
                            }
                        },
                        'Camera Roll'
                    ),
                    _react3.default.createElement(
                        _reactNativeNav.NavButton,
                        {
                            onPress: function onPress() {
                                _this3.setModalVisible(false);

                                var images = _this3.getImages().map(function (image) {
                                    return {
                                        image: image.uri
                                    };
                                });

                                _this3.props.onSend(images);

                                _this3.setImages([]);
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 100
                            }
                        },
                        _react3.default.createElement(
                            _reactNativeNav.NavButtonText,
                            {
                                style: {
                                    color: '#000'
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 113
                                }
                            },
                            'Send'
                        )
                    )
                );
            }
        }, {
            key: "renderIcon",
            value: function renderIcon() {
                if (this.props.icon) {
                    return this.props.icon();
                }

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: [styles.wrapper, this.props.wrapperStyle],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 130
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: [styles.iconText, this.props.iconTextStyle],
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 131
                            }
                        },
                        "+"
                    )
                );
            }
        }, {
            key: "render",
            value: function render() {
                var _this4 = this;

                return _react3.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        style: [styles.container, this.props.containerStyle],
                        onPress: this.onActionsPress,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 138
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.Modal,
                        {
                            animationType: 'slide',
                            transparent: false,
                            visible: this.state.modalVisible,
                            onRequestClose: function onRequestClose() {
                                _this4.setModalVisible(false);
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 142
                            }
                        },
                        this.renderNavBar(),
                        _react3.default.createElement(_reactNativeCameraRollPicker2.default, {
                            maximum: 10,
                            imagesPerRow: 4,
                            callback: this.selectImages,
                            selected: [],
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 151
                            }
                        })
                    ),
                    this.renderIcon()
                );
            }
        }]);

        return CustomActions;
    }(_react3.default.Component));

    exports.default = CustomActions;

    var styles = _reactNative.StyleSheet.create({
        container: {
            width: 26,
            height: 26,
            marginLeft: 10,
            marginBottom: 10
        },
        wrapper: {
            borderRadius: 13,
            borderColor: '#b2b2b2',
            borderWidth: 2,
            flex: 1
        },
        iconText: {
            color: '#b2b2b2',
            fontWeight: 'bold',
            fontSize: 16,
            backgroundColor: 'transparent',
            textAlign: 'center'
        }
    });

    CustomActions.contextTypes = {
        actionSheet: _propTypes2.default.func
    };
    CustomActions.defaultProps = {
        onSend: function onSend() {},
        options: {},
        icon: null,
        containerStyle: {},
        wrapperStyle: {},
        iconTextStyle: {}
    };
    CustomActions.propTypes = {
        onSend: _propTypes2.default.func,
        options: _propTypes2.default.object,
        icon: _propTypes2.default.func,
        containerStyle: _reactNative.ViewPropTypes.style,
        wrapperStyle: _reactNative.ViewPropTypes.style,
        iconTextStyle: _reactNative.Text.propTypes.style
    };
},823,[13,219,25,65,824,827],"src/screen/square/chat/customActions.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-camera-roll-picker/index.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _propTypes = _require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _ImageItem = _require(_dependencyMap[4], "./ImageItem");

  var _ImageItem2 = _interopRequireDefault(_ImageItem);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    CameraRollPicker: {
      displayName: "CameraRollPicker"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-camera-roll-picker/index.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var CameraRollPicker = _wrapComponent("CameraRollPicker")(function (_Component) {
    _inherits(CameraRollPicker, _Component);

    function CameraRollPicker(props) {
      _classCallCheck(this, CameraRollPicker);

      var _this = _possibleConstructorReturn(this, (CameraRollPicker.__proto__ || Object.getPrototypeOf(CameraRollPicker)).call(this, props));

      _this.state = {
        images: [],
        selected: _this.props.selected,
        lastCursor: null,
        initialLoading: true,
        loadingMore: false,
        noMore: false,
        dataSource: new _reactNative.ListView.DataSource({
          rowHasChanged: function rowHasChanged(r1, r2) {
            return r1 !== r2;
          }
        })
      };
      return _this;
    }

    _createClass(CameraRollPicker, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.fetch();
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        this.setState({
          selected: nextProps.selected
        });
      }
    }, {
      key: "fetch",
      value: function fetch() {
        var _this2 = this;

        if (!this.state.loadingMore) {
          this.setState({
            loadingMore: true
          }, function () {
            _this2._fetch();
          });
        }
      }
    }, {
      key: "_fetch",
      value: function _fetch() {
        var _this3 = this;

        var _props = this.props,
            groupTypes = _props.groupTypes,
            assetType = _props.assetType;
        var fetchParams = {
          first: 1000,
          groupTypes: groupTypes,
          assetType: assetType
        };

        if (_reactNative.Platform.OS === "android") {
          delete fetchParams.groupTypes;
        }

        if (this.state.lastCursor) {
          fetchParams.after = this.state.lastCursor;
        }

        _reactNative.CameraRoll.getPhotos(fetchParams).then(function (data) {
          return _this3._appendImages(data);
        }, function (e) {
          return console.log(e);
        });
      }
    }, {
      key: "_appendImages",
      value: function _appendImages(data) {
        var assets = data.edges;
        var newState = {
          loadingMore: false,
          initialLoading: false
        };

        if (!data.page_info.has_next_page) {
          newState.noMore = true;
        }

        if (assets.length > 0) {
          newState.lastCursor = data.page_info.end_cursor;
          newState.images = this.state.images.concat(assets);
          newState.dataSource = this.state.dataSource.cloneWithRows(this._nEveryRow(newState.images, this.props.imagesPerRow));
        }

        this.setState(newState);
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var dataSource = this.state.dataSource;
        var _props2 = this.props,
            scrollRenderAheadDistance = _props2.scrollRenderAheadDistance,
            initialListSize = _props2.initialListSize,
            pageSize = _props2.pageSize,
            removeClippedSubviews = _props2.removeClippedSubviews,
            imageMargin = _props2.imageMargin,
            backgroundColor = _props2.backgroundColor,
            emptyText = _props2.emptyText,
            emptyTextStyle = _props2.emptyTextStyle,
            loader = _props2.loader;

        if (this.state.initialLoading) {
          return _react3.default.createElement(
            _reactNative.View,
            {
              style: [styles.loader, {
                backgroundColor: backgroundColor
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 106
              }
            },
            loader || _react3.default.createElement(_reactNative.ActivityIndicator, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 107
              }
            })
          );
        }

        var listViewOrEmptyText = dataSource.getRowCount() > 0 ? _react3.default.createElement(_reactNative.ListView, {
          style: {
            flex: 1
          },
          scrollRenderAheadDistance: scrollRenderAheadDistance,
          initialListSize: initialListSize,
          pageSize: pageSize,
          removeClippedSubviews: removeClippedSubviews,
          renderFooter: this._renderFooterSpinner.bind(this),
          onEndReached: this._onEndReached.bind(this),
          dataSource: dataSource,
          renderRow: function renderRow(rowData) {
            return _this4._renderRow(rowData);
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 113
          }
        }) : _react3.default.createElement(
          _reactNative.Text,
          {
            style: [{
              textAlign: 'center'
            }, emptyTextStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 124
            }
          },
          emptyText
        );
        return _react3.default.createElement(
          _reactNative.View,
          {
            style: [styles.wrapper, {
              padding: imageMargin,
              paddingRight: 0,
              backgroundColor: backgroundColor
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 128
            }
          },
          listViewOrEmptyText
        );
      }
    }, {
      key: "_renderImage",
      value: function _renderImage(item) {
        var selected = this.state.selected;
        var _props3 = this.props,
            imageMargin = _props3.imageMargin,
            selectedMarker = _props3.selectedMarker,
            imagesPerRow = _props3.imagesPerRow,
            containerWidth = _props3.containerWidth;
        var uri = item.node.image.uri;
        var isSelected = this._arrayObjectIndexOf(selected, 'uri', uri) >= 0 ? true : false;
        return _react3.default.createElement(_ImageItem2.default, {
          key: uri,
          item: item,
          selected: isSelected,
          imageMargin: imageMargin,
          selectedMarker: selectedMarker,
          imagesPerRow: imagesPerRow,
          containerWidth: containerWidth,
          onClick: this._selectImage.bind(this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 148
          }
        });
      }
    }, {
      key: "_renderRow",
      value: function _renderRow(rowData) {
        var _this5 = this;

        var items = rowData.map(function (item) {
          if (item === null) {
            return null;
          }

          return _this5._renderImage(item);
        });
        return _react3.default.createElement(
          _reactNative.View,
          {
            style: styles.row,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 170
            }
          },
          items
        );
      }
    }, {
      key: "_renderFooterSpinner",
      value: function _renderFooterSpinner() {
        if (!this.state.noMore) {
          return _react3.default.createElement(_reactNative.ActivityIndicator, {
            style: styles.spinner,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 178
            }
          });
        }

        return null;
      }
    }, {
      key: "_onEndReached",
      value: function _onEndReached() {
        if (!this.state.noMore) {
          this.fetch();
        }
      }
    }, {
      key: "_selectImage",
      value: function _selectImage(image) {
        var _props4 = this.props,
            maximum = _props4.maximum,
            imagesPerRow = _props4.imagesPerRow,
            callback = _props4.callback,
            selectSingleItem = _props4.selectSingleItem;

        var selected = this.state.selected,
            index = this._arrayObjectIndexOf(selected, 'uri', image.uri);

        if (index >= 0) {
          selected.splice(index, 1);
        } else {
          if (selectSingleItem) {
            selected.splice(0, selected.length);
          }

          if (selected.length < maximum) {
            selected.push(image);
          }
        }

        this.setState({
          selected: selected,
          dataSource: this.state.dataSource.cloneWithRows(this._nEveryRow(this.state.images, imagesPerRow))
        });
        callback(selected, image);
      }
    }, {
      key: "_nEveryRow",
      value: function _nEveryRow(data, n) {
        var result = [],
            temp = [];

        for (var i = 0; i < data.length; ++i) {
          if (i > 0 && i % n === 0) {
            result.push(temp);
            temp = [];
          }

          temp.push(data[i]);
        }

        if (temp.length > 0) {
          while (temp.length !== n) {
            temp.push(null);
          }

          result.push(temp);
        }

        return result;
      }
    }, {
      key: "_arrayObjectIndexOf",
      value: function _arrayObjectIndexOf(array, property, value) {
        return array.map(function (o) {
          return o[property];
        }).indexOf(value);
      }
    }]);

    return CameraRollPicker;
  }(_react2.Component));

  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      flexGrow: 1
    },
    loader: {
      flexGrow: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    row: {
      flexDirection: 'row',
      flex: 1
    },
    marker: {
      position: 'absolute',
      top: 5,
      backgroundColor: 'transparent'
    }
  });

  CameraRollPicker.propTypes = {
    scrollRenderAheadDistance: _propTypes2.default.number,
    initialListSize: _propTypes2.default.number,
    pageSize: _propTypes2.default.number,
    removeClippedSubviews: _propTypes2.default.bool,
    groupTypes: _propTypes2.default.oneOf(['Album', 'All', 'Event', 'Faces', 'Library', 'PhotoStream', 'SavedPhotos']),
    maximum: _propTypes2.default.number,
    assetType: _propTypes2.default.oneOf(['Photos', 'Videos', 'All']),
    selectSingleItem: _propTypes2.default.bool,
    imagesPerRow: _propTypes2.default.number,
    imageMargin: _propTypes2.default.number,
    containerWidth: _propTypes2.default.number,
    callback: _propTypes2.default.func,
    selected: _propTypes2.default.array,
    selectedMarker: _propTypes2.default.element,
    backgroundColor: _propTypes2.default.string,
    emptyText: _propTypes2.default.string,
    emptyTextStyle: _reactNative.Text.propTypes.style,
    loader: _propTypes2.default.node
  };
  CameraRollPicker.defaultProps = {
    scrollRenderAheadDistance: 500,
    initialListSize: 1,
    pageSize: 3,
    removeClippedSubviews: true,
    groupTypes: 'SavedPhotos',
    maximum: 15,
    imagesPerRow: 3,
    imageMargin: 5,
    selectSingleItem: false,
    assetType: 'Photos',
    backgroundColor: 'white',
    selected: [],
    callback: function callback(selectedImages, currentImage) {
      console.log(currentImage);
      console.log(selectedImages);
    },
    emptyText: 'No photos.'
  };
  exports.default = CameraRollPicker;
},824,[13,219,65,25,825],"node_modules/react-native-camera-roll-picker/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-camera-roll-picker/ImageItem.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _propTypes = _require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ImageItem: {
      displayName: "ImageItem"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-camera-roll-picker/ImageItem.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ImageItem = _wrapComponent("ImageItem")(function (_Component) {
    _inherits(ImageItem, _Component);

    function ImageItem(props) {
      _classCallCheck(this, ImageItem);

      return _possibleConstructorReturn(this, (ImageItem.__proto__ || Object.getPrototypeOf(ImageItem)).call(this, props));
    }

    _createClass(ImageItem, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _Dimensions$get = _reactNative.Dimensions.get('window'),
            width = _Dimensions$get.width;

        var _props = this.props,
            imageMargin = _props.imageMargin,
            imagesPerRow = _props.imagesPerRow,
            containerWidth = _props.containerWidth;

        if (typeof containerWidth != "undefined") {
          width = containerWidth;
        }

        this._imageSize = (width - (imagesPerRow + 1) * imageMargin) / imagesPerRow;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props2 = this.props,
            item = _props2.item,
            selected = _props2.selected,
            selectedMarker = _props2.selectedMarker,
            imageMargin = _props2.imageMargin;
        var marker = selectedMarker ? selectedMarker : _react3.default.createElement(_reactNative.Image, {
          style: [styles.marker, {
            width: 25,
            height: 25
          }],
          source: _require(_dependencyMap[4], './circle-check.png'),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 29
          }
        });
        var image = item.node.image;
        return _react3.default.createElement(
          _reactNative.TouchableOpacity,
          {
            style: {
              marginBottom: imageMargin,
              marginRight: imageMargin
            },
            onPress: function onPress() {
              return _this2._handleClick(image);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 37
            }
          },
          _react3.default.createElement(_reactNative.Image, {
            source: {
              uri: image.uri
            },
            style: {
              height: this._imageSize,
              width: this._imageSize
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 40
            }
          }),
          selected ? marker : null
        );
      }
    }, {
      key: "_handleClick",
      value: function _handleClick(item) {
        this.props.onClick(item);
      }
    }]);

    return ImageItem;
  }(_react2.Component));

  var styles = _reactNative.StyleSheet.create({
    marker: {
      position: 'absolute',
      top: 5,
      right: 5,
      backgroundColor: 'transparent'
    }
  });

  ImageItem.defaultProps = {
    item: {},
    selected: false
  };
  ImageItem.propTypes = {
    item: _propTypes2.default.object,
    selected: _propTypes2.default.bool,
    selectedMarker: _propTypes2.default.element,
    imageMargin: _propTypes2.default.number,
    imagesPerRow: _propTypes2.default.number,
    onClick: _propTypes2.default.func
  };
  exports.default = ImageItem;
},825,[13,219,65,25,826],"node_modules/react-native-camera-roll-picker/ImageItem.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  module.exports = _require(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native-camera-roll-picker",
    "width": 100,
    "height": 100,
    "scales": [1],
    "hash": "f241547a8295b6d0fc49b0532b2e4e5b",
    "name": "circle-check",
    "type": "png"
  });
},826,[204],"node_modules/react-native-camera-roll-picker/circle-check.png");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NavTitle = exports.NavButtonText = exports.NavButton = exports.NavGroup = undefined;
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-nav/index.js";

  var _NavGroup = _require(_dependencyMap[0], "./components/NavGroup");

  Object.defineProperty(exports, "NavGroup", {
    enumerable: true,
    get: function get() {
      return _NavGroup.NavGroup;
    }
  });

  var _NavButton = _require(_dependencyMap[1], "./components/NavButton");

  Object.defineProperty(exports, "NavButton", {
    enumerable: true,
    get: function get() {
      return _NavButton.NavButton;
    }
  });

  var _NavButtonText = _require(_dependencyMap[2], "./components/NavButtonText");

  Object.defineProperty(exports, "NavButtonText", {
    enumerable: true,
    get: function get() {
      return _NavButtonText.NavButtonText;
    }
  });

  var _NavTitle = _require(_dependencyMap[3], "./components/NavTitle");

  Object.defineProperty(exports, "NavTitle", {
    enumerable: true,
    get: function get() {
      return _NavTitle.NavTitle;
    }
  });

  var _react = _require(_dependencyMap[4], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[5], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[6], "react-native");

  var _StatusBarEnhanced = _require(_dependencyMap[7], "./components/StatusBarEnhanced");

  var _styles = _require(_dependencyMap[8], "./styles");

  var _styles2 = _interopRequireDefault(_styles);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function NavigationBar(_ref) {
    var style = _ref.style,
        children = _ref.children,
        statusBar = _ref.statusBar;
    var navBar = null;

    if (_reactNative.Platform.OS === "ios") {
      navBar = _react2.default.createElement(
        _reactNative.View,
        {
          style: [_styles2.default.navBar, _styles2.default.navBarIOS, style.navBar],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 15
          }
        },
        children
      );
    } else if (_reactNative.Platform.OS === "android") {
      navBar = _react2.default.createElement(
        _reactNative.View,
        {
          style: [_styles2.default.navBar, _styles2.default.navBarAndroid, style.navBar],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 21
          }
        },
        children
      );
    }

    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [_styles2.default.navBarContainer, style.navBarContainer],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 28
        }
      },
      _react2.default.createElement(_StatusBarEnhanced.StatusBarEnhanced, {
        style: style.statusBar,
        statusBar: statusBar,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 29
        }
      }),
      navBar
    );
  }

  NavigationBar.propTypes = {
    statusBar: _propTypes2.default.object,
    style: _propTypes2.default.object,
    children: _propTypes2.default.node
  };
  NavigationBar.defaultProps = {
    style: {},
    statusBar: {}
  };
  exports.default = NavigationBar;
},827,[828,830,831,832,13,25,65,833,829],"node_modules/react-native-nav/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NavGroup = undefined;
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-nav/components/NavGroup.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _styles = _require(_dependencyMap[3], "../styles");

  var _styles2 = _interopRequireDefault(_styles);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function NavGroup(_ref) {
    var style = _ref.style,
        children = _ref.children;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: [_styles2.default.navGroup, style],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 8
        }
      },
      children
    );
  }

  NavGroup.propTypes = {
    style: _reactNative.ViewPropTypes.style,
    children: _propTypes2.default.node
  };
  NavGroup.defaultProps = {
    style: {}
  };
  exports.NavGroup = NavGroup;
},828,[13,25,65,829],"node_modules/react-native-nav/components/NavGroup.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var IOS_NAV_BAR_HEIGHT = 44;
  var IOS_STATUS_BAR_HEIGHT = 20;
  var ANDROID_NAV_BAR_HEIGHT = 56;
  var ANDROID_STATUS_BAR_HEIGHT = 24;

  if (_reactNative.Platform.Version < 21) {
    ANDROID_STATUS_BAR_HEIGHT = 0;
  }

  exports.default = _reactNative.StyleSheet.create({
    navBarContainer: {},
    statusBarIOS: {
      height: IOS_STATUS_BAR_HEIGHT,
      backgroundColor: "#f5f5f5"
    },
    statusBarAndroid: {
      height: ANDROID_STATUS_BAR_HEIGHT,
      backgroundColor: "#f5f5f5"
    },
    navBar: {
      borderTopWidth: 0,
      borderBottomColor: "rgba(0, 0, 0, 0.1)",
      borderBottomWidth: 1,
      flexDirection: "row",
      justifyContent: "space-between",
      alignItems: "center"
    },
    navBarIOS: {
      backgroundColor: "#f5f5f5",
      height: IOS_NAV_BAR_HEIGHT,
      paddingLeft: 8,
      paddingRight: 8
    },
    navBarAndroid: {
      backgroundColor: "#f5f5f5",
      height: ANDROID_NAV_BAR_HEIGHT,
      padding: 16
    },
    navBarButtonIOS: {
      marginLeft: 0
    },
    navBarButtonAndroid: {
      marginLeft: 16
    },
    navBarButtonText: {
      fontSize: 17,
      letterSpacing: 0.5,
      color: "#939393"
    },
    navBarTitleText: {
      fontSize: 17,
      letterSpacing: 0.5,
      color: "#626262",
      fontWeight: "500",
      textAlign: "center"
    },
    navGroup: {
      flexDirection: "row"
    }
  });
},829,[65],"node_modules/react-native-nav/styles.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NavButton = undefined;
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-nav/components/NavButton.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _styles = _require(_dependencyMap[3], "../styles");

  var _styles2 = _interopRequireDefault(_styles);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function NavButton(_ref) {
    var style = _ref.style,
        onPress = _ref.onPress,
        children = _ref.children,
        disabled = _ref.disabled,
        disabledStyle = _ref.disabledStyle,
        accessibilityLabel = _ref.accessibilityLabel;
    var navButtonStyles = [];

    if (_reactNative.Platform.OS === "ios") {
      navButtonStyles = [_styles2.default.navBarButtonIOS];
    } else if (_reactNative.Platform.OS === "android") {
      navButtonStyles = [_styles2.default.navBarButtonAndroid];
    }

    if (disabled) {
      navButtonStyles.push(disabledStyle);
    } else {
      navButtonStyles.push(style);
    }

    var getTouchable = function getTouchable() {
      if (disabled) {
        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          {
            accessibilityLabel: accessibilityLabel,
            accessibilityTraits: ["button", "disabled"],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: navButtonStyles,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 32
              }
            },
            children
          )
        );
      }

      return _react2.default.createElement(
        _reactNative.TouchableOpacity,
        {
          accessibilityLabel: accessibilityLabel,
          onPress: onPress,
          accessibilityTraits: "button",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 39
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            style: navButtonStyles,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 43
            }
          },
          children
        )
      );
    };

    return getTouchable();
  }

  NavButton.propTypes = {
    children: _propTypes2.default.node,
    onPress: _propTypes2.default.func,
    style: _reactNative.ViewPropTypes.style,
    disabled: _propTypes2.default.bool,
    disabledStyle: _reactNative.ViewPropTypes.style
  };
  NavButton.defaultProps = {
    style: {},
    disabledStyle: {},
    disabled: false
  };
  exports.NavButton = NavButton;
},830,[13,25,65,829],"node_modules/react-native-nav/components/NavButton.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NavButtonText = undefined;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-nav/components/NavButtonText.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _styles = _require(_dependencyMap[3], "../styles");

  var _styles2 = _interopRequireDefault(_styles);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function NavButtonText(_ref) {
    var style = _ref.style,
        children = _ref.children;
    return _react2.default.createElement(
      _reactNative.Text,
      _extends({
        style: [_styles2.default.navBarButtonText, style]
      }, this.props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 8
        }
      }),
      children
    );
  }

  NavButtonText.propTypes = _extends({}, _reactNative.Text.PropTypes, {
    style: _reactNative.Text.propTypes.style,
    children: _propTypes2.default.node
  });
  NavButtonText.defaultProps = {
    style: {}
  };
  exports.NavButtonText = NavButtonText;
},831,[13,25,65,829],"node_modules/react-native-nav/components/NavButtonText.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NavTitle = undefined;
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-nav/components/NavTitle.js";

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _styles = _require(_dependencyMap[3], "../styles");

  var _styles2 = _interopRequireDefault(_styles);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function NavTitle(_ref) {
    var style = _ref.style,
        children = _ref.children;
    return _react2.default.createElement(
      _reactNative.Text,
      {
        accessibilityTraits: "header",
        style: [_styles2.default.navBarTitleText, style],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 8
        }
      },
      children
    );
  }

  NavTitle.propTypes = {
    style: _reactNative.Text.propTypes.style,
    children: _propTypes2.default.node
  };
  NavTitle.defaultProps = {
    style: {}
  };
  exports.NavTitle = NavTitle;
},832,[13,25,65,829],"node_modules/react-native-nav/components/NavTitle.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.StatusBarEnhanced = undefined;
  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-nav/components/StatusBarEnhanced.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _react = _require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _styles = _require(_dependencyMap[3], "../styles");

  var _styles2 = _interopRequireDefault(_styles);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function StatusBarEnhanced(_ref) {
    var statusBar = _ref.statusBar,
        style = _ref.style;
    var statusBarConfig = {};

    if (_reactNative.Platform.OS === "ios") {
      statusBarConfig = {
        animated: true,
        hidden: false,
        barStyle: "default",
        networkActivityIndicatorVisible: false,
        showHideTransition: "fade"
      };
    } else if (_reactNative.Platform.OS === "android") {
      statusBarConfig = {
        animated: true,
        hidden: false,
        showHideTransition: "fade",
        backgroundColor: "rgba(0, 0, 0, 0.2)",
        translucent: true
      };
    }

    var config = _extends({}, statusBarConfig, statusBar);

    var statusBarStyles = [];

    if (_reactNative.Platform.OS === "ios") {
      statusBarStyles = [_styles2.default.statusBarIOS, style];
    } else if (_reactNative.Platform.OS === "android") {
      statusBarStyles = [_styles2.default.statusBarAndroid, style];
    }

    return _react2.default.createElement(
      _reactNative.View,
      {
        style: statusBarStyles,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      },
      _react2.default.createElement(_reactNative.StatusBar, _extends({}, config, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 36
        }
      }))
    );
  }

  StatusBarEnhanced.propTypes = {
    statusBar: _propTypes2.default.object,
    style: _reactNative.ViewPropTypes.style
  };
  StatusBarEnhanced.defaultProps = {
    style: {},
    statusBar: {}
  };
  exports.StatusBarEnhanced = StatusBarEnhanced;
},833,[13,25,65,829],"node_modules/react-native-nav/components/StatusBarEnhanced.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/square/chat/customView.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _propTypes = _require(_dependencyMap[2], "prop-types");

    var _propTypes2 = _interopRequireDefault(_propTypes);

    var _reactNative = _require(_dependencyMap[3], "react-native");

    var _reactNativeMaps = _require(_dependencyMap[4], "react-native-maps");

    var _reactNativeMaps2 = _interopRequireDefault(_reactNativeMaps);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        CustomView: {
            displayName: "CustomView"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/hayden/Applications/HelloWorldProject/src/screen/square/chat/customView.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var CustomView = _wrapComponent("CustomView")(function (_React$Component) {
        _inherits(CustomView, _React$Component);

        function CustomView() {
            _classCallCheck(this, CustomView);

            return _possibleConstructorReturn(this, (CustomView.__proto__ || Object.getPrototypeOf(CustomView)).apply(this, arguments));
        }

        _createClass(CustomView, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                if (this.props.currentMessage.location) {
                    return _react3.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: [styles.container, this.props.containerStyle],
                            onPress: function onPress() {
                                var url = _reactNative.Platform.select({
                                    ios: "http://maps.apple.com/?ll=" + _this2.props.currentMessage.location.latitude + "," + _this2.props.currentMessage.location.longitude,
                                    android: "http://maps.google.com/?q=" + _this2.props.currentMessage.location.latitude + "," + _this2.props.currentMessage.location.longitude
                                });

                                _reactNative.Linking.canOpenURL(url).then(function (supported) {
                                    if (supported) {
                                        return _reactNative.Linking.openURL(url);
                                    }
                                }).catch(function (err) {
                                    console.error('An error occurred', err);
                                });
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 10
                            }
                        },
                        _react3.default.createElement(_reactNativeMaps2.default, {
                            style: [styles.mapView, this.props.mapViewStyle],
                            region: {
                                latitude: this.props.currentMessage.location.latitude,
                                longitude: this.props.currentMessage.location.longitude,
                                latitudeDelta: 0.0922,
                                longitudeDelta: 0.0421
                            },
                            scrollEnabled: false,
                            zoomEnabled: false,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 32
                            }
                        })
                    );
                }

                return null;
            }
        }]);

        return CustomView;
    }(_react3.default.Component));

    exports.default = CustomView;

    var styles = _reactNative.StyleSheet.create({
        container: {},
        mapView: {
            width: 150,
            height: 100,
            borderRadius: 13,
            margin: 3
        }
    });

    CustomView.defaultProps = {
        currentMessage: {},
        containerStyle: {},
        mapViewStyle: {}
    };
    CustomView.propTypes = {
        currentMessage: _propTypes2.default.object,
        containerStyle: _reactNative.ViewPropTypes.style,
        mapViewStyle: _reactNative.ViewPropTypes.style
    };
},834,[13,219,25,65,835],"src/screen/square/chat/customView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.OverlayAnimated = exports.MarkerAnimated = exports.PROVIDER_DEFAULT = exports.PROVIDER_GOOGLE = exports.ProviderPropType = exports.MAP_TYPES = exports.Animated = exports.Overlay = exports.Marker = exports.AnimatedRegion = exports.Callout = exports.LocalTile = exports.UrlTile = exports.Circle = exports.Polygon = exports.Polyline = undefined;

  var _MapPolyline = _require(_dependencyMap[0], "./lib/components/MapPolyline.js");

  Object.defineProperty(exports, "Polyline", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_MapPolyline).default;
    }
  });

  var _MapPolygon = _require(_dependencyMap[1], "./lib/components/MapPolygon.js");

  Object.defineProperty(exports, "Polygon", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_MapPolygon).default;
    }
  });

  var _MapCircle = _require(_dependencyMap[2], "./lib/components/MapCircle.js");

  Object.defineProperty(exports, "Circle", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_MapCircle).default;
    }
  });

  var _MapUrlTile = _require(_dependencyMap[3], "./lib/components/MapUrlTile.js");

  Object.defineProperty(exports, "UrlTile", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_MapUrlTile).default;
    }
  });

  var _MapLocalTile = _require(_dependencyMap[4], "./lib/components/MapLocalTile.js");

  Object.defineProperty(exports, "LocalTile", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_MapLocalTile).default;
    }
  });

  var _MapCallout = _require(_dependencyMap[5], "./lib/components/MapCallout.js");

  Object.defineProperty(exports, "Callout", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_MapCallout).default;
    }
  });

  var _AnimatedRegion = _require(_dependencyMap[6], "./lib/components/AnimatedRegion.js");

  Object.defineProperty(exports, "AnimatedRegion", {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(_AnimatedRegion).default;
    }
  });

  var _MapView = _require(_dependencyMap[7], "./lib/components/MapView");

  var _MapView2 = _interopRequireDefault(_MapView);

  var _MapMarker = _require(_dependencyMap[8], "./lib/components/MapMarker.js");

  var _MapMarker2 = _interopRequireDefault(_MapMarker);

  var _MapOverlay = _require(_dependencyMap[9], "./lib/components/MapOverlay.js");

  var _MapOverlay2 = _interopRequireDefault(_MapOverlay);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  exports.Marker = _MapMarker2.default;
  exports.Overlay = _MapOverlay2.default;
  exports.Animated = _MapView.Animated;
  exports.MAP_TYPES = _MapView.MAP_TYPES;
  exports.ProviderPropType = _MapView.ProviderPropType;
  var PROVIDER_GOOGLE = exports.PROVIDER_GOOGLE = _MapView2.default.PROVIDER_GOOGLE;
  var PROVIDER_DEFAULT = exports.PROVIDER_DEFAULT = _MapView2.default.PROVIDER_DEFAULT;
  var MarkerAnimated = exports.MarkerAnimated = _MapMarker2.default.Animated;
  var OverlayAnimated = exports.OverlayAnimated = _MapOverlay2.default.Animated;
  exports.default = _MapView2.default;
},835,[836,839,840,841,842,843,844,845,846,847],"node_modules/react-native-maps/index.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapPolyline.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _decorateMapComponent = _require(_dependencyMap[4], "./decorateMapComponent");

  var _decorateMapComponent2 = _interopRequireDefault(_decorateMapComponent);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MapPolyline: {
      displayName: "MapPolyline"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapPolyline.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

  var propTypes = _extends({}, viewPropTypes, {
    coordinates: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired
    })),
    onPress: _propTypes2.default.func,
    tappable: _propTypes2.default.bool,
    fillColor: _propTypes2.default.string,
    strokeWidth: _propTypes2.default.number,
    strokeColor: _propTypes2.default.string,
    strokeColors: _propTypes2.default.arrayOf(_propTypes2.default.string),
    zIndex: _propTypes2.default.number,
    lineCap: _propTypes2.default.oneOf(['butt', 'round', 'square']),
    lineJoin: _propTypes2.default.oneOf(['miter', 'round', 'bevel']),
    miterLimit: _propTypes2.default.number,
    geodesic: _propTypes2.default.bool,
    lineDashPhase: _propTypes2.default.number,
    lineDashPattern: _propTypes2.default.arrayOf(_propTypes2.default.number)
  });

  var defaultProps = {
    strokeColor: '#000',
    strokeWidth: 1,
    lineJoin: 'round',
    lineCap: 'round'
  };

  var MapPolyline = _wrapComponent("MapPolyline")(function (_React$Component) {
    _inherits(MapPolyline, _React$Component);

    function MapPolyline() {
      _classCallCheck(this, MapPolyline);

      return _possibleConstructorReturn(this, (MapPolyline.__proto__ || Object.getPrototypeOf(MapPolyline)).apply(this, arguments));
    }

    _createClass(MapPolyline, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.polyline.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var AIRMapPolyline = this.getAirComponent();
        return _react3.default.createElement(AIRMapPolyline, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2.polyline = _ref;
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 157
          }
        }));
      }
    }]);

    return MapPolyline;
  }(_react3.default.Component));

  MapPolyline.propTypes = propTypes;
  MapPolyline.defaultProps = defaultProps;
  exports.default = (0, _decorateMapComponent2.default)(MapPolyline, {
    componentType: 'Polyline',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},836,[13,219,25,65,837],"node_modules/react-native-maps/lib/components/MapPolyline.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.googleMapIsInstalled = exports.createNotSupportedComponent = exports.contextTypes = exports.NOT_SUPPORTED = exports.USES_DEFAULT_IMPLEMENTATION = exports.SUPPORTED = undefined;
  exports.getAirMapName = getAirMapName;
  exports.default = decorateMapComponent;

  var _propTypes = _require(_dependencyMap[0], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var _ProviderConstants = _require(_dependencyMap[2], "./ProviderConstants");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var SUPPORTED = exports.SUPPORTED = 'SUPPORTED';
  var USES_DEFAULT_IMPLEMENTATION = exports.USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';
  var NOT_SUPPORTED = exports.NOT_SUPPORTED = 'NOT_SUPPORTED';

  function getAirMapName(provider) {
    if (_reactNative.Platform.OS === 'android') return 'AIRMap';
    if (provider === _ProviderConstants.PROVIDER_GOOGLE) return 'AIRGoogleMap';
    return 'AIRMap';
  }

  function getAirComponentName(provider, component) {
    return "" + getAirMapName(provider) + component;
  }

  var contextTypes = exports.contextTypes = {
    provider: _propTypes2.default.string
  };

  var createNotSupportedComponent = exports.createNotSupportedComponent = function createNotSupportedComponent(message) {
    return function () {
      console.error(message);
      return null;
    };
  };

  var googleMapIsInstalled = exports.googleMapIsInstalled = !!_reactNative.NativeModules.UIManager[getAirMapName(_ProviderConstants.PROVIDER_GOOGLE)];

  function decorateMapComponent(Component, _ref) {
    var componentType = _ref.componentType,
        providers = _ref.providers;
    var components = {};

    var getDefaultComponent = function getDefaultComponent() {
      return (0, _reactNative.requireNativeComponent)(getAirComponentName(null, componentType), Component);
    };

    Component.contextTypes = contextTypes;

    Component.prototype.getAirComponent = function getAirComponent() {
      var provider = this.context.provider || _ProviderConstants.PROVIDER_DEFAULT;
      if (components[provider]) return components[provider];

      if (provider === _ProviderConstants.PROVIDER_DEFAULT) {
        components[_ProviderConstants.PROVIDER_DEFAULT] = getDefaultComponent();
        return components[_ProviderConstants.PROVIDER_DEFAULT];
      }

      var providerInfo = providers[provider];
      var platformSupport = providerInfo[_reactNative.Platform.OS];
      var componentName = getAirComponentName(provider, componentType);

      if (platformSupport === NOT_SUPPORTED) {
        components[provider] = createNotSupportedComponent("react-native-maps: " + componentName + " is not supported on " + _reactNative.Platform.OS);
      } else if (platformSupport === SUPPORTED) {
        if (provider !== _ProviderConstants.PROVIDER_GOOGLE || _reactNative.Platform.OS === 'ios' && googleMapIsInstalled) {
          components[provider] = (0, _reactNative.requireNativeComponent)(componentName, Component);
        }
      } else {
        if (!components[_ProviderConstants.PROVIDER_DEFAULT]) components[_ProviderConstants.PROVIDER_DEFAULT] = getDefaultComponent();
        components[provider] = components[_ProviderConstants.PROVIDER_DEFAULT];
      }

      return components[provider];
    };

    Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {
      return _reactNative.NativeModules.UIManager[getAirComponentName(this.context.provider, componentType)].Commands[name];
    };

    Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) {
      var airComponentName = getAirComponentName(this.context.provider, componentType) + "Manager";
      return _reactNative.NativeModules[airComponentName][name];
    };

    return Component;
  }
},837,[25,65,838],"node_modules/react-native-maps/lib/components/decorateMapComponent.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var PROVIDER_DEFAULT = exports.PROVIDER_DEFAULT = null;
  var PROVIDER_GOOGLE = exports.PROVIDER_GOOGLE = 'google';
},838,[],"node_modules/react-native-maps/lib/components/ProviderConstants.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapPolygon.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _decorateMapComponent = _require(_dependencyMap[4], "./decorateMapComponent");

  var _decorateMapComponent2 = _interopRequireDefault(_decorateMapComponent);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MapPolygon: {
      displayName: "MapPolygon"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapPolygon.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

  var propTypes = _extends({}, viewPropTypes, {
    coordinates: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired
    })),
    holes: _propTypes2.default.arrayOf(_propTypes2.default.arrayOf(_propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired
    }))),
    onPress: _propTypes2.default.func,
    tappable: _propTypes2.default.bool,
    strokeWidth: _propTypes2.default.number,
    strokeColor: _propTypes2.default.string,
    fillColor: _propTypes2.default.string,
    zIndex: _propTypes2.default.number,
    lineCap: _propTypes2.default.oneOf(['butt', 'round', 'square']),
    lineJoin: _propTypes2.default.oneOf(['miter', 'round', 'bevel']),
    miterLimit: _propTypes2.default.number,
    geodesic: _propTypes2.default.bool,
    lineDashPhase: _propTypes2.default.number,
    lineDashPattern: _propTypes2.default.arrayOf(_propTypes2.default.number)
  });

  var defaultProps = {
    strokeColor: '#000',
    strokeWidth: 1
  };

  var MapPolygon = _wrapComponent("MapPolygon")(function (_React$Component) {
    _inherits(MapPolygon, _React$Component);

    function MapPolygon() {
      _classCallCheck(this, MapPolygon);

      return _possibleConstructorReturn(this, (MapPolygon.__proto__ || Object.getPrototypeOf(MapPolygon)).apply(this, arguments));
    }

    _createClass(MapPolygon, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.polygon.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var AIRMapPolygon = this.getAirComponent();
        return _react3.default.createElement(AIRMapPolygon, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2.polygon = _ref;
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 161
          }
        }));
      }
    }]);

    return MapPolygon;
  }(_react3.default.Component));

  MapPolygon.propTypes = propTypes;
  MapPolygon.defaultProps = defaultProps;
  exports.default = (0, _decorateMapComponent2.default)(MapPolygon, {
    componentType: 'Polygon',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},839,[13,219,25,65,837],"node_modules/react-native-maps/lib/components/MapPolygon.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapCircle.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _decorateMapComponent = _require(_dependencyMap[4], "./decorateMapComponent");

  var _decorateMapComponent2 = _interopRequireDefault(_decorateMapComponent);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MapCircle: {
      displayName: "MapCircle"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapCircle.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

  var propTypes = _extends({}, viewPropTypes, {
    center: _propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired
    }).isRequired,
    radius: _propTypes2.default.number.isRequired,
    onPress: _propTypes2.default.func,
    strokeWidth: _propTypes2.default.number,
    strokeColor: _propTypes2.default.string,
    fillColor: _propTypes2.default.string,
    zIndex: _propTypes2.default.number,
    lineCap: _propTypes2.default.oneOf(['butt', 'round', 'square']),
    lineJoin: _propTypes2.default.oneOf(['miter', 'round', 'bevel']),
    miterLimit: _propTypes2.default.number,
    lineDashPhase: _propTypes2.default.number,
    lineDashPattern: _propTypes2.default.arrayOf(_propTypes2.default.number)
  });

  var defaultProps = {
    strokeColor: '#000',
    strokeWidth: 1
  };

  var MapCircle = _wrapComponent("MapCircle")(function (_React$Component) {
    _inherits(MapCircle, _React$Component);

    function MapCircle() {
      _classCallCheck(this, MapCircle);

      return _possibleConstructorReturn(this, (MapCircle.__proto__ || Object.getPrototypeOf(MapCircle)).apply(this, arguments));
    }

    _createClass(MapCircle, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.circle.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var AIRMapCircle = this.getAirComponent();
        return _react3.default.createElement(AIRMapCircle, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2.circle = _ref;
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 140
          }
        }));
      }
    }]);

    return MapCircle;
  }(_react3.default.Component));

  MapCircle.propTypes = propTypes;
  MapCircle.defaultProps = defaultProps;
  exports.default = (0, _decorateMapComponent2.default)(MapCircle, {
    componentType: 'Circle',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},840,[13,219,25,65,837],"node_modules/react-native-maps/lib/components/MapCircle.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapUrlTile.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _decorateMapComponent = _require(_dependencyMap[4], "./decorateMapComponent");

  var _decorateMapComponent2 = _interopRequireDefault(_decorateMapComponent);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MapUrlTile: {
      displayName: "MapUrlTile"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapUrlTile.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

  var propTypes = _extends({}, viewPropTypes, {
    urlTemplate: _propTypes2.default.string.isRequired,
    zIndex: _propTypes2.default.number,
    maximumZ: _propTypes2.default.number
  });

  var MapUrlTile = _wrapComponent("MapUrlTile")(function (_React$Component) {
    _inherits(MapUrlTile, _React$Component);

    function MapUrlTile() {
      _classCallCheck(this, MapUrlTile);

      return _possibleConstructorReturn(this, (MapUrlTile.__proto__ || Object.getPrototypeOf(MapUrlTile)).apply(this, arguments));
    }

    _createClass(MapUrlTile, [{
      key: "render",
      value: function render() {
        var AIRMapUrlTile = this.getAirComponent();
        return _react3.default.createElement(AIRMapUrlTile, _extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 47
          }
        }));
      }
    }]);

    return MapUrlTile;
  }(_react3.default.Component));

  MapUrlTile.propTypes = propTypes;
  exports.default = (0, _decorateMapComponent2.default)(MapUrlTile, {
    componentType: 'UrlTile',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},841,[13,219,25,65,837],"node_modules/react-native-maps/lib/components/MapUrlTile.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapLocalTile.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _decorateMapComponent = _require(_dependencyMap[4], "./decorateMapComponent");

  var _decorateMapComponent2 = _interopRequireDefault(_decorateMapComponent);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MapLocalTile: {
      displayName: "MapLocalTile"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapLocalTile.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

  var propTypes = _extends({}, viewPropTypes, {
    pathTemplate: _propTypes2.default.string.isRequired,
    zIndex: _propTypes2.default.number,
    tileSize: _propTypes2.default.number
  });

  var MapLocalTile = _wrapComponent("MapLocalTile")(function (_React$Component) {
    _inherits(MapLocalTile, _React$Component);

    function MapLocalTile() {
      _classCallCheck(this, MapLocalTile);

      return _possibleConstructorReturn(this, (MapLocalTile.__proto__ || Object.getPrototypeOf(MapLocalTile)).apply(this, arguments));
    }

    _createClass(MapLocalTile, [{
      key: "render",
      value: function render() {
        var AIRMapLocalTile = this.getAirComponent();
        return _react3.default.createElement(AIRMapLocalTile, _extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 46
          }
        }));
      }
    }]);

    return MapLocalTile;
  }(_react3.default.Component));

  MapLocalTile.propTypes = propTypes;
  exports.default = (0, _decorateMapComponent2.default)(MapLocalTile, {
    componentType: 'LocalTile',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},842,[13,219,25,65,837],"node_modules/react-native-maps/lib/components/MapLocalTile.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapCallout.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _decorateMapComponent = _require(_dependencyMap[4], "./decorateMapComponent");

  var _decorateMapComponent2 = _interopRequireDefault(_decorateMapComponent);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MapCallout: {
      displayName: "MapCallout"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapCallout.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

  var propTypes = _extends({}, viewPropTypes, {
    tooltip: _propTypes2.default.bool,
    onPress: _propTypes2.default.func
  });

  var defaultProps = {
    tooltip: false
  };

  var MapCallout = _wrapComponent("MapCallout")(function (_React$Component) {
    _inherits(MapCallout, _React$Component);

    function MapCallout() {
      _classCallCheck(this, MapCallout);

      return _possibleConstructorReturn(this, (MapCallout.__proto__ || Object.getPrototypeOf(MapCallout)).apply(this, arguments));
    }

    _createClass(MapCallout, [{
      key: "render",
      value: function render() {
        var AIRMapCallout = this.getAirComponent();
        return _react3.default.createElement(AIRMapCallout, _extends({}, this.props, {
          style: [styles.callout, this.props.style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 29
          }
        }));
      }
    }]);

    return MapCallout;
  }(_react3.default.Component));

  MapCallout.propTypes = propTypes;
  MapCallout.defaultProps = defaultProps;

  var styles = _reactNative.StyleSheet.create({
    callout: {
      position: 'absolute'
    }
  });

  exports.default = (0, _decorateMapComponent2.default)(MapCallout, {
    componentType: 'Callout',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},843,[13,219,25,65,837],"node_modules/react-native-maps/lib/components/MapCallout.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[0], "react-native");

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedWithChildren = Object.getPrototypeOf(_reactNative.Animated.ValueXY);

  if (__DEV__) {
    if (AnimatedWithChildren.name !== 'AnimatedWithChildren') console.error('AnimatedRegion could not obtain AnimatedWithChildren base class');
  }

  var _uniqueId = 1;

  var AnimatedMapRegion = function (_AnimatedWithChildren) {
    _inherits(AnimatedMapRegion, _AnimatedWithChildren);

    function AnimatedMapRegion(valueIn) {
      _classCallCheck(this, AnimatedMapRegion);

      var _this = _possibleConstructorReturn(this, (AnimatedMapRegion.__proto__ || Object.getPrototypeOf(AnimatedMapRegion)).call(this));

      var value = valueIn || {
        latitude: 0,
        longitude: 0,
        latitudeDelta: 0,
        longitudeDelta: 0
      };
      _this.latitude = value.latitude instanceof _reactNative.Animated.Value ? value.latitude : new _reactNative.Animated.Value(value.latitude);
      _this.longitude = value.longitude instanceof _reactNative.Animated.Value ? value.longitude : new _reactNative.Animated.Value(value.longitude);
      _this.latitudeDelta = value.latitudeDelta instanceof _reactNative.Animated.Value ? value.latitudeDelta : new _reactNative.Animated.Value(value.latitudeDelta);
      _this.longitudeDelta = value.longitudeDelta instanceof _reactNative.Animated.Value ? value.longitudeDelta : new _reactNative.Animated.Value(value.longitudeDelta);
      _this._listeners = {};
      return _this;
    }

    _createClass(AnimatedMapRegion, [{
      key: "setValue",
      value: function setValue(value) {
        this.latitude._value = value.latitude;
        this.longitude._value = value.longitude;
        this.latitudeDelta._value = value.latitudeDelta;
        this.longitudeDelta._value = value.longitudeDelta;
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.latitude.setOffset(offset.latitude);
        this.longitude.setOffset(offset.longitude);
        this.latitudeDelta.setOffset(offset.latitudeDelta);
        this.longitudeDelta.setOffset(offset.longitudeDelta);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.latitude.flattenOffset();
        this.longitude.flattenOffset();
        this.latitudeDelta.flattenOffset();
        this.longitudeDelta.flattenOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          latitude: this.latitude.__getValue(),
          longitude: this.longitude.__getValue(),
          latitudeDelta: this.latitudeDelta.__getValue(),
          longitudeDelta: this.longitudeDelta.__getValue()
        };
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this.latitude.__addChild(this);

        this.longitude.__addChild(this);

        this.latitudeDelta.__addChild(this);

        this.longitudeDelta.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this.latitude.__removeChild(this);

        this.longitude.__removeChild(this);

        this.latitudeDelta.__removeChild(this);

        this.longitudeDelta.__removeChild(this);
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.latitude.stopAnimation();
        this.longitude.stopAnimation();
        this.latitudeDelta.stopAnimation();
        this.longitudeDelta.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback() {
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          latitude: this.latitude.addListener(jointCallback),
          longitude: this.longitude.addListener(jointCallback),
          latitudeDelta: this.latitudeDelta.addListener(jointCallback),
          longitudeDelta: this.longitudeDelta.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.latitude.removeListener(this._listeners[id].latitude);
        this.longitude.removeListener(this._listeners[id].longitude);
        this.latitudeDelta.removeListener(this._listeners[id].latitudeDelta);
        this.longitudeDelta.removeListener(this._listeners[id].longitudeDelta);
        delete this._listeners[id];
      }
    }, {
      key: "spring",
      value: function spring(config) {
        var animations = [];
        config.hasOwnProperty('latitude') && animations.push(_reactNative.Animated.spring(this.latitude, _extends({}, config, {
          toValue: config.latitude
        })));
        config.hasOwnProperty('longitude') && animations.push(_reactNative.Animated.spring(this.longitude, _extends({}, config, {
          toValue: config.longitude
        })));
        config.hasOwnProperty('latitudeDelta') && animations.push(_reactNative.Animated.spring(this.latitudeDelta, _extends({}, config, {
          toValue: config.latitudeDelta
        })));
        config.hasOwnProperty('longitudeDelta') && animations.push(_reactNative.Animated.spring(this.longitudeDelta, _extends({}, config, {
          toValue: config.longitudeDelta
        })));
        return _reactNative.Animated.parallel(animations);
      }
    }, {
      key: "timing",
      value: function timing(config) {
        var animations = [];
        config.hasOwnProperty('latitude') && animations.push(_reactNative.Animated.timing(this.latitude, _extends({}, config, {
          toValue: config.latitude
        })));
        config.hasOwnProperty('longitude') && animations.push(_reactNative.Animated.timing(this.longitude, _extends({}, config, {
          toValue: config.longitude
        })));
        config.hasOwnProperty('latitudeDelta') && animations.push(_reactNative.Animated.timing(this.latitudeDelta, _extends({}, config, {
          toValue: config.latitudeDelta
        })));
        config.hasOwnProperty('longitudeDelta') && animations.push(_reactNative.Animated.timing(this.longitudeDelta, _extends({}, config, {
          toValue: config.longitudeDelta
        })));
        return _reactNative.Animated.parallel(animations);
      }
    }]);

    return AnimatedMapRegion;
  }(AnimatedWithChildren);

  exports.default = AnimatedMapRegion;
},844,[65],"node_modules/react-native-maps/lib/components/AnimatedRegion.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ProviderPropType = exports.Animated = exports.MAP_TYPES = undefined;

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapView.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _MapMarker = _require(_dependencyMap[4], "./MapMarker");

  var _MapMarker2 = _interopRequireDefault(_MapMarker);

  var _MapPolyline = _require(_dependencyMap[5], "./MapPolyline");

  var _MapPolyline2 = _interopRequireDefault(_MapPolyline);

  var _MapPolygon = _require(_dependencyMap[6], "./MapPolygon");

  var _MapPolygon2 = _interopRequireDefault(_MapPolygon);

  var _MapCircle = _require(_dependencyMap[7], "./MapCircle");

  var _MapCircle2 = _interopRequireDefault(_MapCircle);

  var _MapCallout = _require(_dependencyMap[8], "./MapCallout");

  var _MapCallout2 = _interopRequireDefault(_MapCallout);

  var _MapOverlay = _require(_dependencyMap[9], "./MapOverlay");

  var _MapOverlay2 = _interopRequireDefault(_MapOverlay);

  var _MapUrlTile = _require(_dependencyMap[10], "./MapUrlTile");

  var _MapUrlTile2 = _interopRequireDefault(_MapUrlTile);

  var _MapLocalTile = _require(_dependencyMap[11], "./MapLocalTile");

  var _MapLocalTile2 = _interopRequireDefault(_MapLocalTile);

  var _AnimatedRegion = _require(_dependencyMap[12], "./AnimatedRegion");

  var _AnimatedRegion2 = _interopRequireDefault(_AnimatedRegion);

  var _decorateMapComponent = _require(_dependencyMap[13], "./decorateMapComponent");

  var _ProviderConstants = _require(_dependencyMap[14], "./ProviderConstants");

  var ProviderConstants = _interopRequireWildcard(_ProviderConstants);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MapView: {
      displayName: "MapView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapView.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var MAP_TYPES = exports.MAP_TYPES = {
    STANDARD: 'standard',
    SATELLITE: 'satellite',
    HYBRID: 'hybrid',
    TERRAIN: 'terrain',
    NONE: 'none',
    MUTEDSTANDARD: 'mutedStandard'
  };
  var GOOGLE_MAPS_ONLY_TYPES = [MAP_TYPES.TERRAIN, MAP_TYPES.NONE];
  var viewConfig = {
    uiViewClassName: 'AIR<provider>Map',
    validAttributes: {
      region: true
    }
  };
  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

  var propTypes = _extends({}, viewPropTypes, {
    provider: _propTypes2.default.oneOf(['google']),
    style: viewPropTypes.style,
    customMapStyle: _propTypes2.default.array,
    customMapStyleString: _propTypes2.default.string,
    showsUserLocation: _propTypes2.default.bool,
    userLocationAnnotationTitle: _propTypes2.default.string,
    showsMyLocationButton: _propTypes2.default.bool,
    followsUserLocation: _propTypes2.default.bool,
    showsPointsOfInterest: _propTypes2.default.bool,
    showsCompass: _propTypes2.default.bool,
    zoomEnabled: _propTypes2.default.bool,
    zoomControlEnabled: _propTypes2.default.bool,
    rotateEnabled: _propTypes2.default.bool,
    cacheEnabled: _propTypes2.default.bool,
    loadingEnabled: _propTypes2.default.bool,
    loadingBackgroundColor: _reactNative.ColorPropType,
    loadingIndicatorColor: _reactNative.ColorPropType,
    scrollEnabled: _propTypes2.default.bool,
    pitchEnabled: _propTypes2.default.bool,
    toolbarEnabled: _propTypes2.default.bool,
    moveOnMarkerPress: _propTypes2.default.bool,
    showsScale: _propTypes2.default.bool,
    showsBuildings: _propTypes2.default.bool,
    showsTraffic: _propTypes2.default.bool,
    showsIndoors: _propTypes2.default.bool,
    showsIndoorLevelPicker: _propTypes2.default.bool,
    mapType: _propTypes2.default.oneOf(Object.values(MAP_TYPES)),
    region: _propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired,
      latitudeDelta: _propTypes2.default.number.isRequired,
      longitudeDelta: _propTypes2.default.number.isRequired
    }),
    initialRegion: _propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired,
      latitudeDelta: _propTypes2.default.number.isRequired,
      longitudeDelta: _propTypes2.default.number.isRequired
    }),
    liteMode: _propTypes2.default.bool,
    mapPadding: _reactNative.EdgeInsetsPropType,
    maxDelta: _propTypes2.default.number,
    minDelta: _propTypes2.default.number,
    legalLabelInsets: _reactNative.EdgeInsetsPropType,
    onMapReady: _propTypes2.default.func,
    onKmlReady: _propTypes2.default.func,
    onRegionChange: _propTypes2.default.func,
    onRegionChangeComplete: _propTypes2.default.func,
    onPress: _propTypes2.default.func,
    onLongPress: _propTypes2.default.func,
    onUserLocationChange: _propTypes2.default.func,
    onPanDrag: _propTypes2.default.func,
    onPoiClick: _propTypes2.default.func,
    onMarkerPress: _propTypes2.default.func,
    onMarkerSelect: _propTypes2.default.func,
    onMarkerDeselect: _propTypes2.default.func,
    onCalloutPress: _propTypes2.default.func,
    onMarkerDragStart: _propTypes2.default.func,
    onMarkerDrag: _propTypes2.default.func,
    onMarkerDragEnd: _propTypes2.default.func,
    minZoomLevel: _propTypes2.default.number,
    maxZoomLevel: _propTypes2.default.number,
    kmlSrc: _propTypes2.default.string
  });

  var MapView = _wrapComponent("MapView")(function (_React$Component) {
    _inherits(MapView, _React$Component);

    function MapView(props) {
      _classCallCheck(this, MapView);

      var _this = _possibleConstructorReturn(this, (MapView.__proto__ || Object.getPrototypeOf(MapView)).call(this, props));

      _this.state = {
        isReady: _reactNative.Platform.OS === 'ios'
      };
      _this._onMapReady = _this._onMapReady.bind(_this);
      _this._onMarkerPress = _this._onMarkerPress.bind(_this);
      _this._onChange = _this._onChange.bind(_this);
      _this._onLayout = _this._onLayout.bind(_this);
      return _this;
    }

    _createClass(MapView, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          provider: this.props.provider
        };
      }
    }, {
      key: "componentWillUpdate",
      value: function componentWillUpdate(nextProps) {
        var a = this.__lastRegion;
        var b = nextProps.region;
        if (!a || !b) return;

        if (a.latitude !== b.latitude || a.longitude !== b.longitude || a.latitudeDelta !== b.latitudeDelta || a.longitudeDelta !== b.longitudeDelta) {
          this.map.setNativeProps({
            region: b
          });
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var isReady = this.state.isReady;

        if (isReady) {
          this._updateStyle();
        }
      }
    }, {
      key: "_updateStyle",
      value: function _updateStyle() {
        var customMapStyle = this.props.customMapStyle;
        this.map.setNativeProps({
          customMapStyleString: JSON.stringify(customMapStyle)
        });
      }
    }, {
      key: "_onMapReady",
      value: function _onMapReady() {
        var _props = this.props,
            region = _props.region,
            initialRegion = _props.initialRegion,
            onMapReady = _props.onMapReady;

        if (region) {
          this.map.setNativeProps({
            region: region
          });
        } else if (initialRegion) {
          this.map.setNativeProps({
            initialRegion: initialRegion
          });
        }

        this._updateStyle();

        this.setState({
          isReady: true
        }, function () {
          if (onMapReady) onMapReady();
        });
      }
    }, {
      key: "_onLayout",
      value: function _onLayout(e) {
        var layout = e.nativeEvent.layout;
        if (!layout.width || !layout.height) return;

        if (this.state.isReady && !this.__layoutCalled) {
          var _props2 = this.props,
              region = _props2.region,
              initialRegion = _props2.initialRegion;

          if (region) {
            this.__layoutCalled = true;
            this.map.setNativeProps({
              region: region
            });
          } else if (initialRegion) {
            this.__layoutCalled = true;
            this.map.setNativeProps({
              initialRegion: initialRegion
            });
          }
        }

        if (this.props.onLayout) {
          this.props.onLayout(e);
        }
      }
    }, {
      key: "_onMarkerPress",
      value: function _onMarkerPress(event) {
        if (this.props.onMarkerPress) {
          this.props.onMarkerPress(event.nativeEvent);
        }
      }
    }, {
      key: "_onChange",
      value: function _onChange(event) {
        this.__lastRegion = event.nativeEvent.region;

        if (event.nativeEvent.continuous) {
          if (this.props.onRegionChange) {
            this.props.onRegionChange(event.nativeEvent.region);
          }
        } else if (this.props.onRegionChangeComplete) {
          this.props.onRegionChangeComplete(event.nativeEvent.region);
        }
      }
    }, {
      key: "animateToRegion",
      value: function animateToRegion(region, duration) {
        this._runCommand('animateToRegion', [region, duration || 500]);
      }
    }, {
      key: "animateToCoordinate",
      value: function animateToCoordinate(latLng, duration) {
        this._runCommand('animateToCoordinate', [latLng, duration || 500]);
      }
    }, {
      key: "animateToBearing",
      value: function animateToBearing(bearing, duration) {
        this._runCommand('animateToBearing', [bearing, duration || 500]);
      }
    }, {
      key: "animateToViewingAngle",
      value: function animateToViewingAngle(angle, duration) {
        this._runCommand('animateToViewingAngle', [angle, duration || 500]);
      }
    }, {
      key: "fitToElements",
      value: function fitToElements(animated) {
        this._runCommand('fitToElements', [animated]);
      }
    }, {
      key: "fitToSuppliedMarkers",
      value: function fitToSuppliedMarkers(markers, animated) {
        this._runCommand('fitToSuppliedMarkers', [markers, animated]);
      }
    }, {
      key: "fitToCoordinates",
      value: function fitToCoordinates() {
        var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$edgePadding = options.edgePadding,
            edgePadding = _options$edgePadding === undefined ? {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        } : _options$edgePadding,
            _options$animated = options.animated,
            animated = _options$animated === undefined ? true : _options$animated;

        this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);
      }
    }, {
      key: "setMapBoundaries",
      value: function setMapBoundaries(northEast, southWest) {
        this._runCommand('setMapBoundaries', [northEast, southWest]);
      }
    }, {
      key: "takeSnapshot",
      value: function takeSnapshot(args) {
        var _this2 = this;

        if (_reactNative.Platform.OS === 'ios' && arguments.length === 4) {
          console.warn('Old takeSnapshot API has been deprecated; will be removed in the near future');
          var width = arguments[0];
          var height = arguments[1];
          var region = arguments[2];
          var callback = arguments[3];

          this._runCommand('takeSnapshot', [width || 0, height || 0, region || {}, 'png', 1, 'legacy', callback]);

          return undefined;
        }

        var config = {
          width: args.width || 0,
          height: args.height || 0,
          region: args.region || {},
          format: args.format || 'png',
          quality: args.quality || 1.0,
          result: args.result || 'file'
        };
        if (config.format !== 'png' && config.format !== 'jpg') throw new Error('Invalid format specified');
        if (config.result !== 'file' && config.result !== 'base64') throw new Error('Invalid result specified');

        if (_reactNative.Platform.OS === 'android') {
          return _reactNative.NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);
        } else if (_reactNative.Platform.OS === 'ios') {
          return new Promise(function (resolve, reject) {
            _this2._runCommand('takeSnapshot', [config.width, config.height, config.region, config.format, config.quality, config.result, function (err, snapshot) {
              if (err) {
                reject(err);
              } else {
                resolve(snapshot);
              }
            }]);
          });
        }

        return Promise.reject('takeSnapshot not supported on this platform');
      }
    }, {
      key: "pointForCoordinate",
      value: function pointForCoordinate(coordinate) {
        if (_reactNative.Platform.OS === 'android') {
          return _reactNative.NativeModules.AirMapModule.pointForCoordinate(this._getHandle(), coordinate);
        } else if (_reactNative.Platform.OS === 'ios') {
          return this._runCommand('pointForCoordinate', [coordinate]);
        }

        return Promise.reject('pointForCoordinate not supported on this platform');
      }
    }, {
      key: "coordinateForPoint",
      value: function coordinateForPoint(point) {
        if (_reactNative.Platform.OS === 'android') {
          return _reactNative.NativeModules.AirMapModule.coordinateForPoint(this._getHandle(), point);
        } else if (_reactNative.Platform.OS === 'ios') {
          return this._runCommand('coordinateForPoint', [point]);
        }

        return Promise.reject('coordinateForPoint not supported on this platform');
      }
    }, {
      key: "_uiManagerCommand",
      value: function _uiManagerCommand(name) {
        return _reactNative.NativeModules.UIManager[(0, _decorateMapComponent.getAirMapName)(this.props.provider)].Commands[name];
      }
    }, {
      key: "_mapManagerCommand",
      value: function _mapManagerCommand(name) {
        return _reactNative.NativeModules[(0, _decorateMapComponent.getAirMapName)(this.props.provider) + "Manager"][name];
      }
    }, {
      key: "_getHandle",
      value: function _getHandle() {
        return (0, _reactNative.findNodeHandle)(this.map);
      }
    }, {
      key: "_runCommand",
      value: function _runCommand(name, args) {
        switch (_reactNative.Platform.OS) {
          case 'android':
            return _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this._uiManagerCommand(name), args);

          case 'ios':
            return this._mapManagerCommand(name).apply(undefined, [this._getHandle()].concat(_toConsumableArray(args)));

          default:
            return Promise.reject("Invalid platform was passed: " + _reactNative.Platform.OS);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var props = void 0;

        if (this.state.isReady) {
          props = _extends({
            region: null,
            initialRegion: null,
            onMarkerPress: this._onMarkerPress,
            onChange: this._onChange,
            onMapReady: this._onMapReady,
            onLayout: this._onLayout
          }, this.props);

          if (_reactNative.Platform.OS === 'ios' && props.provider === ProviderConstants.PROVIDER_DEFAULT && GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)) {
            props.mapType = MAP_TYPES.standard;
          }

          props.handlePanDrag = !!props.onPanDrag;
        } else {
          props = {
            style: this.props.style,
            region: null,
            initialRegion: null,
            onMarkerPress: this._onMarkerPress,
            onChange: this._onChange,
            onMapReady: this._onMapReady,
            onLayout: this._onLayout
          };
        }

        if (_reactNative.Platform.OS === 'android' && this.props.liteMode) {
          return _react3.default.createElement(AIRMapLite, _extends({
            ref: function ref(_ref) {
              _this3.map = _ref;
            }
          }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 750
            }
          }));
        }

        var AIRMap = getAirMapComponent(this.props.provider);
        return _react3.default.createElement(AIRMap, _extends({
          ref: function ref(_ref2) {
            _this3.map = _ref2;
          }
        }, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 760
          }
        }));
      }
    }]);

    return MapView;
  }(_react3.default.Component));

  MapView.propTypes = propTypes;
  MapView.viewConfig = viewConfig;
  MapView.childContextTypes = _decorateMapComponent.contextTypes;
  MapView.MAP_TYPES = MAP_TYPES;

  var nativeComponent = function nativeComponent(Component) {
    return (0, _reactNative.requireNativeComponent)(Component, MapView, {
      nativeOnly: {
        onChange: true,
        onMapReady: true,
        onKmlReady: true,
        handlePanDrag: true
      }
    });
  };

  var airMaps = {
    default: nativeComponent('AIRMap')
  };

  if (_reactNative.Platform.OS === 'android') {
    airMaps.google = airMaps.default;
  } else {
    airMaps.google = _decorateMapComponent.googleMapIsInstalled ? nativeComponent('AIRGoogleMap') : (0, _decorateMapComponent.createNotSupportedComponent)('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.');
  }

  var getAirMapComponent = function getAirMapComponent(provider) {
    return airMaps[provider || 'default'];
  };

  var AIRMapLite = _reactNative.NativeModules.UIManager.AIRMapLite && (0, _reactNative.requireNativeComponent)('AIRMapLite', MapView, {
    nativeOnly: {
      onChange: true,
      onMapReady: true,
      handlePanDrag: true
    }
  });

  var Animated = exports.Animated = _reactNative.Animated.createAnimatedComponent(MapView);

  var ProviderPropType = exports.ProviderPropType = _propTypes2.default.oneOf(Object.values(ProviderConstants));

  MapView.Marker = _MapMarker2.default;
  MapView.Polyline = _MapPolyline2.default;
  MapView.Polygon = _MapPolygon2.default;
  MapView.Circle = _MapCircle2.default;
  MapView.UrlTile = _MapUrlTile2.default;
  MapView.LocalTile = _MapLocalTile2.default;
  MapView.Overlay = _MapOverlay2.default;
  MapView.Callout = _MapCallout2.default;

  _extends(MapView, ProviderConstants);

  MapView.ProviderPropType = ProviderPropType;
  MapView.Animated = Animated;
  MapView.AnimatedRegion = _AnimatedRegion2.default;
  exports.default = MapView;
},845,[13,219,25,65,846,836,839,840,843,847,841,842,844,837,838],"node_modules/react-native-maps/lib/components/MapView.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapMarker.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _resolveAssetSource = _require(_dependencyMap[4], "react-native/Libraries/Image/resolveAssetSource");

  var _resolveAssetSource2 = _interopRequireDefault(_resolveAssetSource);

  var _decorateMapComponent = _require(_dependencyMap[5], "./decorateMapComponent");

  var _decorateMapComponent2 = _interopRequireDefault(_decorateMapComponent);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MapMarker: {
      displayName: "MapMarker"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapMarker.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var viewConfig = {
    uiViewClassName: 'AIR<provider>MapMarker',
    validAttributes: {
      coordinate: true
    }
  };
  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

  var propTypes = _extends({}, viewPropTypes, {
    identifier: _propTypes2.default.string,
    reuseIdentifier: _propTypes2.default.string,
    title: _propTypes2.default.string,
    description: _propTypes2.default.string,
    image: _propTypes2.default.any,
    opacity: _propTypes2.default.number,
    pinColor: _propTypes2.default.string,
    coordinate: _propTypes2.default.shape({
      latitude: _propTypes2.default.number.isRequired,
      longitude: _propTypes2.default.number.isRequired
    }).isRequired,
    centerOffset: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    calloutOffset: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    anchor: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    calloutAnchor: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    flat: _propTypes2.default.bool,
    draggable: _propTypes2.default.bool,
    tracksViewChanges: _propTypes2.default.bool,
    tracksInfoWindowChanges: _propTypes2.default.bool,
    stopPropagation: _propTypes2.default.bool,
    onPress: _propTypes2.default.func,
    onSelect: _propTypes2.default.func,
    onDeselect: _propTypes2.default.func,
    onCalloutPress: _propTypes2.default.func,
    onDragStart: _propTypes2.default.func,
    onDrag: _propTypes2.default.func,
    onDragEnd: _propTypes2.default.func
  });

  var defaultProps = {
    stopPropagation: false
  };

  var MapMarker = _wrapComponent("MapMarker")(function (_React$Component) {
    _inherits(MapMarker, _React$Component);

    function MapMarker(props) {
      _classCallCheck(this, MapMarker);

      var _this = _possibleConstructorReturn(this, (MapMarker.__proto__ || Object.getPrototypeOf(MapMarker)).call(this, props));

      _this.showCallout = _this.showCallout.bind(_this);
      _this.hideCallout = _this.hideCallout.bind(_this);
      _this.animateMarkerToCoordinate = _this.animateMarkerToCoordinate.bind(_this);
      return _this;
    }

    _createClass(MapMarker, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.marker.setNativeProps(props);
      }
    }, {
      key: "showCallout",
      value: function showCallout() {
        this._runCommand('showCallout', []);
      }
    }, {
      key: "hideCallout",
      value: function hideCallout() {
        this._runCommand('hideCallout', []);
      }
    }, {
      key: "animateMarkerToCoordinate",
      value: function animateMarkerToCoordinate(coordinate, duration) {
        this._runCommand('animateMarkerToCoordinate', [coordinate, duration || 500]);
      }
    }, {
      key: "_getHandle",
      value: function _getHandle() {
        return (0, _reactNative.findNodeHandle)(this.marker);
      }
    }, {
      key: "_runCommand",
      value: function _runCommand(name, args) {
        switch (_reactNative.Platform.OS) {
          case 'android':
            _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this.getUIManagerCommand(name), args);

            break;

          case 'ios':
            this.getMapManagerCommand(name).apply(undefined, [this._getHandle()].concat(_toConsumableArray(args)));
            break;

          default:
            break;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var image = void 0;

        if (this.props.image) {
          image = (0, _resolveAssetSource2.default)(this.props.image) || {};
          image = image.uri || this.props.image;
        }

        var AIRMapMarker = this.getAirComponent();
        return _react3.default.createElement(AIRMapMarker, _extends({
          ref: function ref(_ref) {
            _this2.marker = _ref;
          }
        }, this.props, {
          image: image,
          style: [styles.marker, this.props.style],
          onPress: function onPress(event) {
            if (_this2.props.stopPropagation) {
              event.stopPropagation();
            }

            if (_this2.props.onPress) {
              _this2.props.onPress(event);
            }
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 299
          }
        }));
      }
    }]);

    return MapMarker;
  }(_react3.default.Component));

  MapMarker.propTypes = propTypes;
  MapMarker.defaultProps = defaultProps;
  MapMarker.viewConfig = viewConfig;

  var styles = _reactNative.StyleSheet.create({
    marker: {
      position: 'absolute',
      backgroundColor: 'transparent'
    }
  });

  MapMarker.Animated = _reactNative.Animated.createAnimatedComponent(MapMarker);
  exports.default = (0, _decorateMapComponent2.default)(MapMarker, {
    componentType: 'Marker',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},846,[13,219,25,65,203,837],"node_modules/react-native-maps/lib/components/MapMarker.js");
__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapOverlay.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _resolveAssetSource = _require(_dependencyMap[4], "react-native/Libraries/Image/resolveAssetSource");

  var _resolveAssetSource2 = _interopRequireDefault(_resolveAssetSource);

  var _decorateMapComponent = _require(_dependencyMap[5], "./decorateMapComponent");

  var _decorateMapComponent2 = _interopRequireDefault(_decorateMapComponent);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MapOverlay: {
      displayName: "MapOverlay"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/hayden/Applications/HelloWorldProject/node_modules/react-native-maps/lib/components/MapOverlay.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var viewConfig = {
    uiViewClassName: 'AIR<provider>MapOverlay',
    validAttributes: {
      image: true
    }
  };

  var propTypes = _extends({}, _reactNative.View.propTypes, {
    image: _propTypes2.default.any.isRequired,
    bounds: _propTypes2.default.arrayOf(_propTypes2.default.array.isRequired).isRequired
  });

  var MapOverlay = _wrapComponent("MapOverlay")(function (_Component) {
    _inherits(MapOverlay, _Component);

    function MapOverlay() {
      _classCallCheck(this, MapOverlay);

      return _possibleConstructorReturn(this, (MapOverlay.__proto__ || Object.getPrototypeOf(MapOverlay)).apply(this, arguments));
    }

    _createClass(MapOverlay, [{
      key: "render",
      value: function render() {
        var image = void 0;

        if (this.props.image) {
          if (typeof this.props.image.startsWith === 'function' && this.props.image.startsWith('http')) {
            image = this.props.image;
          } else {
            image = (0, _resolveAssetSource2.default)(this.props.image) || {};
            image = image.uri;
          }
        }

        var AIRMapOverlay = this.getAirComponent();
        return _react3.default.createElement(AIRMapOverlay, _extends({}, this.props, {
          image: image,
          style: [styles.overlay, this.props.style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 47
          }
        }));
      }
    }]);

    return MapOverlay;
  }(_react2.Component));

  MapOverlay.propTypes = propTypes;
  MapOverlay.viewConfig = viewConfig;

  var styles = _reactNative.StyleSheet.create({
    overlay: {
      position: 'absolute',
      backgroundColor: 'transparent'
    }
  });

  MapOverlay.Animated = _reactNative.Animated.createAnimatedComponent(MapOverlay);
  exports.default = (0, _decorateMapComponent2.default)(MapOverlay, {
    componentType: 'Overlay',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });
},847,[13,219,25,65,203,837],"node_modules/react-native-maps/lib/components/MapOverlay.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/Users/hayden/Applications/HelloWorldProject/src/screen/square/chat/chat.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _reactNativeGiftedChat = _require(_dependencyMap[3], "react-native-gifted-chat");

    var _customActions = _require(_dependencyMap[4], "./customActions");

    var _customActions2 = _interopRequireDefault(_customActions);

    var _customView = _require(_dependencyMap[5], "./customView");

    var _customView2 = _interopRequireDefault(_customView);

    var _styles = _require(_dependencyMap[6], "./styles");

    var _styles2 = _interopRequireDefault(_styles);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Chat: {
            displayName: "Chat"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/hayden/Applications/HelloWorldProject/src/screen/square/chat/chat.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var Chat = _wrapComponent("Chat")(function (_Component) {
        _inherits(Chat, _Component);

        function Chat(props) {
            _classCallCheck(this, Chat);

            var _this = _possibleConstructorReturn(this, (Chat.__proto__ || Object.getPrototypeOf(Chat)).call(this, props));

            _this.state = {
                loadEarlier: true,
                typingText: null,
                isLoadingEarlier: false
            };
            _this._isMounted = false;
            _this.onSend = _this.onSend.bind(_this);
            _this.onReceive = _this.onReceive.bind(_this);
            _this.renderBubble = _this.renderBubble.bind(_this);
            _this.renderSystemMessage = _this.renderSystemMessage.bind(_this);
            _this.renderFooter = _this.renderFooter.bind(_this);
            _this.onLoadEarlier = _this.onLoadEarlier.bind(_this);
            _this._isAlright = null;
            return _this;
        }

        _createClass(Chat, [{
            key: "componentWillMount",
            value: function componentWillMount() {
                var _this2 = this;

                this._isMounted = true;
                this.setState(function () {
                    return {
                        messages: _this2.props.messages
                    };
                });
            }
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this._isMounted = false;
            }
        }, {
            key: "onLoadEarlier",
            value: function onLoadEarlier() {
                var _this3 = this;

                this.props.loadOldMessageRequest();
                setTimeout(function () {
                    if (_this3._isMounted === true) {
                        _this3.props.loadOldMessageSuccess(_this3.props.old_messages);
                    }
                }, 1000);
            }
        }, {
            key: "onSend",
            value: function onSend() {
                var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                this.props.sendMessage(messages);
                this.answerDemo(messages);
            }
        }, {
            key: "answerDemo",
            value: function answerDemo(messages) {
                var _this4 = this;

                if (messages.length > 0) {
                    if (messages[0].image || messages[0].location || !this._isAlright) {
                        this.setState(function (previousState) {
                            return {
                                typingText: '用户正在输入'
                            };
                        });
                    }
                }

                setTimeout(function () {
                    if (_this4._isMounted === true) {
                        if (messages.length > 0) {
                            if (messages[0].image) {
                                _this4.onReceive('Nice picture!');
                            } else if (messages[0].location) {
                                _this4.onReceive('My favorite place');
                            } else {
                                if (!_this4._isAlright) {
                                    _this4._isAlright = true;

                                    _this4.onReceive('好的');
                                }
                            }
                        }
                    }

                    _this4.setState(function (previousState) {
                        return {
                            typingText: null
                        };
                    });
                }, 1000);
            }
        }, {
            key: "onReceive",
            value: function onReceive(text) {
                var receiveText = {
                    _id: Math.round(Math.random() * 1000000),
                    text: text,
                    createdAt: new Date(),
                    user: {
                        _id: 2,
                        name: 'React Native'
                    }
                };
                this.props.receiveMessage(receiveText);
            }
        }, {
            key: "renderBubble",
            value: function renderBubble(props) {
                return _react3.default.createElement(_reactNativeGiftedChat.Bubble, _extends({}, props, {
                    wrapperStyle: {
                        left: {
                            backgroundColor: '#f0f0f0'
                        }
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 107
                    }
                }));
            }
        }, {
            key: "renderSystemMessage",
            value: function renderSystemMessage(props) {
                return _react3.default.createElement(_reactNativeGiftedChat.SystemMessage, _extends({}, props, {
                    containerStyle: {
                        marginBottom: 15
                    },
                    textStyle: {
                        fontSize: 14
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 120
                    }
                }));
            }
        }, {
            key: "renderFooter",
            value: function renderFooter() {
                if (this.state.typingText) {
                    return _react3.default.createElement(
                        _reactNative.View,
                        {
                            style: _styles2.default.footerContainer,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 135
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.Text,
                            {
                                style: _styles2.default.footerText,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 136
                                }
                            },
                            this.state.typingText
                        )
                    );
                }

                return null;
            }
        }, {
            key: "render",
            value: function render() {
                return _react3.default.createElement(_reactNativeGiftedChat.GiftedChat, {
                    messages: this.props.messages,
                    onSend: this.onSend,
                    loadEarlier: this.props.loadEarlier,
                    onLoadEarlier: this.onLoadEarlier,
                    isLoadingEarlier: this.props.isLoadingEarlier,
                    user: {
                        _id: 1
                    },
                    renderBubble: this.renderBubble,
                    renderSystemMessage: this.renderSystemMessage,
                    renderFooter: this.renderFooter,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 145
                    }
                });
            }
        }]);

        return Chat;
    }(_react2.Component));

    exports.default = Chat;
},848,[13,219,65,540,823,834,849],"src/screen/square/chat/chat.js");
__d(function (global, _require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _reactNative = _require(_dependencyMap[0], "react-native");

    var styles = _reactNative.StyleSheet.create({
        footerContainer: {
            marginTop: 5,
            marginLeft: 10,
            marginRight: 10,
            marginBottom: 10
        },
        footerText: {
            fontSize: 14,
            color: '#aaa'
        }
    });

    exports.default = styles;
},849,[65],"src/screen/square/chat/styles.js");
require(94);
require(11);
//# sourceMappingURL=http://localhost:8081/index.map?platform=android